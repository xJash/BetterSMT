// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// <Module>
internal class <Module>
{
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AchievementsManager
using System.Collections;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using Steamworks;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class AchievementsManager : NetworkBehaviour
{
	public static AchievementsManager Instance;

	public int[] bufferValues;

	[Space(10f)]
	public string[] achievementStrings;

	[Space(10f)]
	public int[] indexesToResetDaily;

	[Space(10f)]
	public int[] evtsTkns;

	public TextMeshProUGUI[] tknsFields;

	[Space(10f)]
	public bool[] unlockedArray;

	public GameObject[] unlockablesPrefabsArray;

	public int[] unlockablesChanceArray;

	public Color[] rarityColors;

	public GameObject UIUnlockablesParentsOBJ;

	public GameObject UIPrefabOBJ;

	public GameObject unlockableSpawnOBJ;

	public GameObject[] gachaponOBJsArray;

	public GameObject gachaponCapsulePrefabOBJ;

	public bool hasBeenHitbyADebtCollector;

	public bool hiddenCatFound;

	public bool repairedADevice;

	public bool grabbedAnExtinguisher;

	[TextArea(10, 1000)]
	public string Comment = "Information Here.";

	[TextArea(10, 1000)]
	public string TComment = "Information Here.";

	private bool pbAchieved;

	private uint punUnlockTime;

	private float maxMoneyAmount;

	private bool loadedValues;

	private int currentUnlockableIndex;

	private GameObject spawnedUnlockableOBJ;

	private Color grayColor = new Color(10f, 10f, 10f);

	private void Awake()
	{
		if (Instance == null)
		{
			Instance = this;
		}
	}

	private void Start()
	{
		LoadbufferValues();
		StartCoroutine(DelayedAchievementCheck());
	}

	private IEnumerator DelayedAchievementCheck()
	{
		yield return new WaitForSeconds(3f);
		if ((bool)GameData.Instance && GameData.Instance.gameDay > 1 && bufferValues[0] == 0)
		{
			bufferValues[0] += (int)GameData.Instance.gameFunds;
		}
	}

	public void LoadbufferValues()
	{
		string text = Application.persistentDataPath + "/buffervalues1.es3";
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		string text2 = Application.persistentDataPath + "/z_altbuffervalues1.es3";
		if (ES3.FileExists(text2))
		{
			text = text2;
			settings = new ES3Settings(ES3.EncryptionType.None, "");
		}
		ES3.CacheFile(text, settings);
		ES3Settings settings2 = new ES3Settings(text, ES3.Location.Cache);
		if (ES3.FileExists(text))
		{
			if (ES3.KeyExists("bValues", text, settings2))
			{
				int[] array = ES3.Load<int[]>("bValues", text, settings2);
				for (int i = 0; i < array.Length; i++)
				{
					bufferValues[i] = array[i];
				}
			}
			if (ES3.KeyExists("tValues", text, settings2))
			{
				int[] array2 = ES3.Load<int[]>("tValues", text, settings2);
				for (int j = 0; j < array2.Length; j++)
				{
					evtsTkns[j] = array2[j];
					tknsFields[j].text = "x" + array2[j];
				}
			}
			if (ES3.KeyExists("unlValues", text, settings2))
			{
				bool[] array3 = ES3.Load<bool[]>("unlValues", text, settings2);
				for (int k = 0; k < array3.Length; k++)
				{
					unlockedArray[k] = array3[k];
				}
			}
		}
		InitUIUnlockablesCreation();
		loadedValues = true;
	}

	public void SavebufferValues()
	{
		string text = Application.persistentDataPath + "/buffervalues1.es3";
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		string text2 = Application.persistentDataPath + "/z_altbuffervalues1.es3";
		if (ES3.FileExists(text2))
		{
			text = text2;
			settings = new ES3Settings(ES3.EncryptionType.None, "");
		}
		ES3.CacheFile(text, settings);
		ES3Settings settings2 = new ES3Settings(text, ES3.Location.Cache);
		ES3.Save("bValues", bufferValues, text, settings2);
		ES3.Save("tValues", evtsTkns, text, settings2);
		ES3.Save("unlValues", unlockedArray, text, settings2);
		ES3.StoreCachedFile(text, settings);
		StartCoroutine(AchievementMainCheck());
	}

	public IEnumerator AchievementMainCheck()
	{
		for (int currentIndex = 0; currentIndex < achievementStrings.Length; currentIndex++)
		{
			yield return new WaitForSeconds(0.1f);
			switch (currentIndex)
			{
			case 0:
				if (GameData.Instance.gameFunds >= 1000000f)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 1:
				if (bufferValues[1] >= 1000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 2:
				if (bufferValues[1] >= 10000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 3:
				if (bufferValues[1] >= 100000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 4:
				if (bufferValues[2] >= 50)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 5:
				if (bufferValues[2] >= 500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 6:
				if (bufferValues[2] >= 2000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 7:
				if (bufferValues[3] >= 500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 8:
				if (bufferValues[3] >= 2000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 9:
				if (bufferValues[3] >= 10000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 10:
				if (bufferValues[4] >= 500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 11:
				if (bufferValues[4] >= 2500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 12:
				if (bufferValues[4] >= 10000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 13:
				if (bufferValues[5] >= 50)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 14:
				if (bufferValues[5] >= 200)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 15:
				if (bufferValues[5] >= 500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 16:
				if (bufferValues[6] >= 100)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 17:
				if (bufferValues[7] >= 500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 18:
				if (bufferValues[8] >= 500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 19:
				if (bufferValues[9] >= 100)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 20:
				if (bufferValues[10] >= 25000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 21:
				if (bufferValues[11] >= 700)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 22:
				if (base.isServer)
				{
					int numberOfDecorations = GetNumberOfDecorations();
					RpcCheckDecorationOnClients(numberOfDecorations);
				}
				break;
			case 25:
				if (bufferValues[12] >= 500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 26:
				if (bufferValues[13] >= 10)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 27:
				if (HasEverythingBeenDemolished())
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 28:
				if (hasBeenHitbyADebtCollector)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 29:
				if (bufferValues[14] >= 10)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 30:
				if (bufferValues[14] >= 50)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 31:
				if (bufferValues[15] >= 500)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 32:
				if (bufferValues[16] >= 40)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 33:
				if (hiddenCatFound)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 34:
				if (bufferValues[17] >= 1000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 35:
				if (bufferValues[18] > 0)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 36:
				if (bufferValues[18] >= 25)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 37:
				if (bufferValues[19] > 0)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 38:
				if (bufferValues[19] >= 25)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 39:
				if (bufferValues[20] >= 25000)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 40:
				if (repairedADevice)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 41:
				if (bufferValues[21] >= 30)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 42:
				if (base.isServer)
				{
					bool isPlaced = IsAnnouncementDeskPlaced();
					RpcIsAnnouncementDeskPlaced(isPlaced);
				}
				break;
			case 43:
				if (grabbedAnExtinguisher)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			case 44:
				if (bufferValues[23] >= 10)
				{
					SetSteamAchievement(currentIndex);
				}
				break;
			}
		}
		yield return null;
		ResetDayStats();
	}

	[ClientRpc]
	public void RpcCheckDecorationOnClients(int decorationsNumber)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(decorationsNumber);
		SendRPCInternal("System.Void AchievementsManager::RpcCheckDecorationOnClients(System.Int32)", 2081850589, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void AddLocalAchievementPoint(int achievementIndex)
	{
		if (achievementIndex < bufferValues.Length)
		{
			bufferValues[achievementIndex]++;
		}
	}

	public void ResetLocalAchievement(int achievementIndex)
	{
		if (achievementIndex < bufferValues.Length)
		{
			bufferValues[achievementIndex] = 0;
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdAddAchievementPoint(int achievementIndex, int quantity)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(achievementIndex);
		writer.WriteInt(quantity);
		SendCommandInternal("System.Void AchievementsManager::CmdAddAchievementPoint(System.Int32,System.Int32)", 535780112, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAddAchievementPoint(int achievementIndex, int quantity)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(achievementIndex);
		writer.WriteInt(quantity);
		SendRPCInternal("System.Void AchievementsManager::RpcAddAchievementPoint(System.Int32,System.Int32)", -1429731841, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdMaxFundsCheckouted(float moneyAmount)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(moneyAmount);
		SendCommandInternal("System.Void AchievementsManager::CmdMaxFundsCheckouted(System.Single)", 2106461342, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcMaxFundsCheckouted(float moneyAmount)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(moneyAmount);
		SendRPCInternal("System.Void AchievementsManager::RpcMaxFundsCheckouted(System.Single)", -1627554837, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private int GetNumberOfDecorations()
	{
		return GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(7).transform.childCount;
	}

	private bool IsAnnouncementDeskPlaced()
	{
		Transform transform = GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(7).transform;
		for (int i = 0; i < transform.transform.childCount; i++)
		{
			if (transform.transform.GetChild(i).GetComponent<BuildableInfo>().decorationID == 215)
			{
				return true;
			}
		}
		return false;
	}

	[ClientRpc]
	private void RpcIsAnnouncementDeskPlaced(bool isPlaced)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(isPlaced);
		SendRPCInternal("System.Void AchievementsManager::RpcIsAnnouncementDeskPlaced(System.Boolean)", 221076259, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private bool HasEverythingBeenDemolished()
	{
		GameObject demolishableParentRootOBJ = GameData.Instance.GetComponent<DemolishableManager>().demolishableParentRootOBJ;
		Transform child = demolishableParentRootOBJ.transform.GetChild(0);
		Transform child2 = demolishableParentRootOBJ.transform.GetChild(1);
		int num = 0;
		int num2 = 0;
		foreach (Transform item in child)
		{
			if (!item.gameObject.activeSelf)
			{
				num++;
			}
		}
		foreach (Transform item2 in child2)
		{
			if (!item2.gameObject.activeSelf)
			{
				num2++;
			}
		}
		if (num >= 61 && num2 >= 151)
		{
			return true;
		}
		return false;
	}

	private void ResetDayStats()
	{
		int[] array = indexesToResetDaily;
		foreach (int num in array)
		{
			bufferValues[num] = 0;
		}
	}

	private void SetSteamAchievement(int stringIndex)
	{
		string text = achievementStrings[stringIndex];
		SteamUserStats.GetAchievementAndUnlockTime(text, out pbAchieved, out punUnlockTime);
		if (!pbAchieved)
		{
			if (SteamUserStats.SetAchievement(text))
			{
				SteamUserStats.StoreStats();
			}
			else
			{
				Debug.Log(text + " failed.");
			}
		}
	}

	public void AddToken(int index, int quantity)
	{
		if (index <= -1 || index < evtsTkns.Length)
		{
			evtsTkns[index] += quantity;
			tknsFields[index].text = "x" + evtsTkns[index];
		}
	}

	private void InitUIUnlockablesCreation()
	{
		for (int i = 0; i < unlockedArray.Length; i++)
		{
			bool num = unlockedArray[i];
			GameObject gameObject = Object.Instantiate(UIPrefabOBJ, UIUnlockablesParentsOBJ.transform);
			gameObject.transform.Find("NumberBCK/Number").GetComponent<TextMeshProUGUI>().text = i.ToString();
			if (num)
			{
				gameObject.GetComponent<Image>().color = Color.cyan;
				gameObject.transform.Find("QuestionMark").gameObject.SetActive(value: false);
			}
			else
			{
				gameObject.GetComponent<Image>().color = grayColor;
			}
			if (i > 0)
			{
				int num2 = unlockablesChanceArray[i];
				Color color = ((num2 <= 2) ? rarityColors[0] : ((num2 > 5) ? rarityColors[2] : rarityColors[1]));
				gameObject.transform.Find("Star").GetComponent<Image>().color = color;
			}
			else
			{
				gameObject.transform.Find("Star").gameObject.SetActive(value: false);
			}
		}
		SetCurrentUnlockable(0);
	}

	public void SetNextUnlockable(bool adding)
	{
		if (UIUnlockablesParentsOBJ.transform.childCount == 0)
		{
			return;
		}
		int num = 0;
		bool[] array = unlockedArray;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i])
			{
				num++;
			}
		}
		if (num <= 1)
		{
			return;
		}
		for (int j = 0; j < unlockedArray.Length; j++)
		{
			bool num2 = unlockedArray[j];
			Transform child = UIUnlockablesParentsOBJ.transform.GetChild(j);
			if (num2)
			{
				child.GetComponent<Image>().color = Color.cyan;
			}
		}
		if (adding)
		{
			if (currentUnlockableIndex < unlockedArray.Length - 1)
			{
				for (int k = currentUnlockableIndex + 1; k < unlockedArray.Length; k++)
				{
					if (unlockedArray[k])
					{
						SetCurrentUnlockable(k);
						return;
					}
				}
			}
			for (int l = 0; l < currentUnlockableIndex; l++)
			{
				if (unlockedArray[l])
				{
					SetCurrentUnlockable(l);
					break;
				}
			}
			return;
		}
		if (currentUnlockableIndex > 0)
		{
			for (int num3 = currentUnlockableIndex - 1; num3 >= 0; num3--)
			{
				if (unlockedArray[num3])
				{
					SetCurrentUnlockable(num3);
					return;
				}
			}
		}
		for (int num4 = unlockedArray.Length - 1; num4 > currentUnlockableIndex; num4--)
		{
			if (unlockedArray[num4])
			{
				SetCurrentUnlockable(num4);
				break;
			}
		}
	}

	private void SetCurrentUnlockable(int index)
	{
		if ((bool)spawnedUnlockableOBJ)
		{
			Object.Destroy(spawnedUnlockableOBJ);
		}
		foreach (Transform item in UIUnlockablesParentsOBJ.transform)
		{
			item.transform.Find("Highlight").gameObject.SetActive(value: false);
		}
		if ((bool)FirstPersonController.Instance)
		{
			FirstPersonController.Instance.GetComponent<PlayerSyncCharacter>().NetworkbroomSkin = index;
		}
		currentUnlockableIndex = index;
		UIUnlockablesParentsOBJ.transform.GetChild(index).transform.Find("Highlight").gameObject.SetActive(value: true);
		spawnedUnlockableOBJ = Object.Instantiate(unlockablesPrefabsArray[index], unlockableSpawnOBJ.transform.position, Quaternion.Euler(new Vector3(270f, 270f, 0f)));
		if ((bool)NPC_Manager.Instance)
		{
			NPC_Manager.Instance.UpdateEmployeesBroomSkinFromAchievManager(index);
		}
	}

	public void RequestGachaponSphere(int gachaponMachineIndex, int tokenIndex)
	{
		int num = evtsTkns[tokenIndex];
		num--;
		if (num < 0)
		{
			switch (tokenIndex)
			{
			case 0:
				GameCanvas.Instance.CreateCanvasNotification("nostartkn");
				break;
			case 1:
				GameCanvas.Instance.CreateCanvasNotification("nomoontkn");
				break;
			case 2:
				GameCanvas.Instance.CreateCanvasNotification("noalientkn");
				break;
			default:
				GameCanvas.Instance.CreateCanvasNotification("nostartkn");
				break;
			}
		}
		else
		{
			evtsTkns[tokenIndex] = num;
			tknsFields[tokenIndex].text = "x" + num;
			CmdRequestGachaponSphere(gachaponMachineIndex);
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdRequestGachaponSphere(int gachaponMachineIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(gachaponMachineIndex);
		SendCommandInternal("System.Void AchievementsManager::CmdRequestGachaponSphere(System.Int32)", 1630561850, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private int ReturnWeightedIndex(int minIndex, int maxIndex)
	{
		int num = 0;
		for (int i = minIndex; i < maxIndex; i++)
		{
			num += unlockablesChanceArray[i];
		}
		int num2 = Random.Range(1, num + 1);
		int num3 = 0;
		for (int j = minIndex; j < maxIndex; j++)
		{
			num3 += unlockablesChanceArray[j];
			if (num2 <= num3)
			{
				return j;
			}
		}
		return unlockablesChanceArray.Length - 1;
	}

	[ClientRpc]
	private void RpcRequestGachaponSphere(int gachaponMachineIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(gachaponMachineIndex);
		SendRPCInternal("System.Void AchievementsManager::RpcRequestGachaponSphere(System.Int32)", -1267628441, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void GetUnlockable(int whichUnlockableIndex, GameObject gachaponCapsuleOBJ)
	{
		if (!unlockedArray[whichUnlockableIndex])
		{
			GameCanvas.Instance.CreateCanvasNotification("gtunlckable");
			GameData.Instance.PlayPopSound();
		}
		unlockedArray[whichUnlockableIndex] = true;
		for (int i = 0; i < unlockedArray.Length; i++)
		{
			bool num = unlockedArray[i];
			Transform child = UIUnlockablesParentsOBJ.transform.GetChild(i);
			if (num)
			{
				child.GetComponent<Image>().color = Color.cyan;
				child.transform.Find("QuestionMark").gameObject.SetActive(value: false);
			}
		}
		SetCurrentUnlockable(currentUnlockableIndex);
		CmdRequestGachaponDeletion(gachaponCapsuleOBJ);
	}

	[Command(requiresAuthority = false)]
	private void CmdRequestGachaponDeletion(GameObject gachaponCapsuleOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(gachaponCapsuleOBJ);
		SendCommandInternal("System.Void AchievementsManager::CmdRequestGachaponDeletion(UnityEngine.GameObject)", 1168409042, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_RpcCheckDecorationOnClients__Int32(int decorationsNumber)
	{
		if (decorationsNumber >= 50)
		{
			SetSteamAchievement(22);
		}
		if (decorationsNumber >= 100)
		{
			SetSteamAchievement(23);
		}
		if (decorationsNumber >= 200)
		{
			SetSteamAchievement(24);
		}
	}

	protected static void InvokeUserCode_RpcCheckDecorationOnClients__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcCheckDecorationOnClients called on server.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_RpcCheckDecorationOnClients__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdAddAchievementPoint__Int32__Int32(int achievementIndex, int quantity)
	{
		if (achievementIndex < bufferValues.Length)
		{
			if (quantity <= 0)
			{
				quantity = 1;
			}
			RpcAddAchievementPoint(achievementIndex, quantity);
		}
	}

	protected static void InvokeUserCode_CmdAddAchievementPoint__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddAchievementPoint called on client.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_CmdAddAchievementPoint__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcAddAchievementPoint__Int32__Int32(int achievementIndex, int quantity)
	{
		if (loadedValues)
		{
			bufferValues[achievementIndex] += quantity;
		}
	}

	protected static void InvokeUserCode_RpcAddAchievementPoint__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddAchievementPoint called on server.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_RpcAddAchievementPoint__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdMaxFundsCheckouted__Single(float moneyAmount)
	{
		if (moneyAmount > maxMoneyAmount)
		{
			maxMoneyAmount = moneyAmount;
			RpcMaxFundsCheckouted(moneyAmount);
		}
	}

	protected static void InvokeUserCode_CmdMaxFundsCheckouted__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdMaxFundsCheckouted called on client.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_CmdMaxFundsCheckouted__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_RpcMaxFundsCheckouted__Single(float moneyAmount)
	{
		bufferValues[11] = (int)moneyAmount;
	}

	protected static void InvokeUserCode_RpcMaxFundsCheckouted__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcMaxFundsCheckouted called on server.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_RpcMaxFundsCheckouted__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_RpcIsAnnouncementDeskPlaced__Boolean(bool isPlaced)
	{
		if (isPlaced)
		{
			SetSteamAchievement(42);
		}
	}

	protected static void InvokeUserCode_RpcIsAnnouncementDeskPlaced__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcIsAnnouncementDeskPlaced called on server.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_RpcIsAnnouncementDeskPlaced__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_CmdRequestGachaponSphere__Int32(int gachaponMachineIndex)
	{
		Transform transform = gachaponOBJsArray[gachaponMachineIndex].transform.Find("Spawnpoint");
		GameObject gameObject = Object.Instantiate(gachaponCapsulePrefabOBJ, transform.transform.position, Quaternion.identity);
		int num;
		int num2;
		switch (gachaponMachineIndex)
		{
		case 0:
			num = 1;
			num2 = 6;
			break;
		case 1:
			num = 6;
			num2 = 11;
			break;
		case 2:
			num = 11;
			num2 = 16;
			break;
		default:
			num = 1;
			num2 = 6;
			break;
		}
		int networkunlockableIndex = Mathf.Clamp(ReturnWeightedIndex(num, num2), num, num2);
		gameObject.GetComponent<GachaponCapsule>().NetworkunlockableIndex = networkunlockableIndex;
		NetworkServer.Spawn(gameObject);
		RpcRequestGachaponSphere(gachaponMachineIndex);
	}

	protected static void InvokeUserCode_CmdRequestGachaponSphere__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestGachaponSphere called on client.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_CmdRequestGachaponSphere__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcRequestGachaponSphere__Int32(int gachaponMachineIndex)
	{
		gachaponOBJsArray[gachaponMachineIndex].GetComponent<Animator>().Play("GachaAnimation");
		gachaponOBJsArray[gachaponMachineIndex].GetComponent<AudioSource>().Play();
	}

	protected static void InvokeUserCode_RpcRequestGachaponSphere__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRequestGachaponSphere called on server.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_RpcRequestGachaponSphere__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdRequestGachaponDeletion__GameObject(GameObject gachaponCapsuleOBJ)
	{
		if ((bool)gachaponCapsuleOBJ.GetComponent<NetworkIdentity>())
		{
			NetworkServer.Destroy(gachaponCapsuleOBJ);
		}
	}

	protected static void InvokeUserCode_CmdRequestGachaponDeletion__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestGachaponDeletion called on client.");
		}
		else
		{
			((AchievementsManager)obj).UserCode_CmdRequestGachaponDeletion__GameObject(reader.ReadGameObject());
		}
	}

	static AchievementsManager()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(AchievementsManager), "System.Void AchievementsManager::CmdAddAchievementPoint(System.Int32,System.Int32)", InvokeUserCode_CmdAddAchievementPoint__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(AchievementsManager), "System.Void AchievementsManager::CmdMaxFundsCheckouted(System.Single)", InvokeUserCode_CmdMaxFundsCheckouted__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(AchievementsManager), "System.Void AchievementsManager::CmdRequestGachaponSphere(System.Int32)", InvokeUserCode_CmdRequestGachaponSphere__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(AchievementsManager), "System.Void AchievementsManager::CmdRequestGachaponDeletion(UnityEngine.GameObject)", InvokeUserCode_CmdRequestGachaponDeletion__GameObject, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(AchievementsManager), "System.Void AchievementsManager::RpcCheckDecorationOnClients(System.Int32)", InvokeUserCode_RpcCheckDecorationOnClients__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(AchievementsManager), "System.Void AchievementsManager::RpcAddAchievementPoint(System.Int32,System.Int32)", InvokeUserCode_RpcAddAchievementPoint__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(AchievementsManager), "System.Void AchievementsManager::RpcMaxFundsCheckouted(System.Single)", InvokeUserCode_RpcMaxFundsCheckouted__Single);
		RemoteProcedureCalls.RegisterRpc(typeof(AchievementsManager), "System.Void AchievementsManager::RpcIsAnnouncementDeskPlaced(System.Boolean)", InvokeUserCode_RpcIsAnnouncementDeskPlaced__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(AchievementsManager), "System.Void AchievementsManager::RpcRequestGachaponSphere(System.Int32)", InvokeUserCode_RpcRequestGachaponSphere__Int32);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AdditionnalQueueProvider
using System.Collections.Generic;
using J4F;
using UnityEngine;

public class AdditionnalQueueProvider : QueueProvider
{
	public List<GameObject> addPrefabList;

	public override List<GameObject> GetPrefabs()
	{
		return addPrefabList;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AdjustTimeScale
using System;
using TMPro;
using UnityEngine;

public class AdjustTimeScale : MonoBehaviour
{
	private TextMeshProUGUI textMesh;

	private void Start()
	{
		textMesh = GetComponent<TextMeshProUGUI>();
	}

	private void Update()
	{
		if (Input.GetAxis("Mouse ScrollWheel") > 0f)
		{
			if (Time.timeScale < 1f)
			{
				Time.timeScale += 0.1f;
			}
			Time.fixedDeltaTime = 0.02f * Time.timeScale;
			if (textMesh != null)
			{
				textMesh.text = "Time Scale : " + Math.Round(Time.timeScale, 2);
			}
		}
		else if (Input.GetAxis("Mouse ScrollWheel") < 0f)
		{
			if (Time.timeScale >= 0.2f)
			{
				Time.timeScale -= 0.1f;
			}
			Time.fixedDeltaTime = 0.02f * Time.timeScale;
			if (textMesh != null)
			{
				textMesh.text = "Time Scale : " + Math.Round(Time.timeScale, 2);
			}
		}
	}

	private void OnApplicationQuit()
	{
		Time.timeScale = 1f;
		Time.fixedDeltaTime = 0.02f;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AnnouncementsDesk
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using UnityText2Speech;

public class AnnouncementsDesk : NetworkBehaviour
{
	[SyncVar]
	public bool restrictPlayingInPublicGames;

	[SyncVar]
	public string[] announcementContentArray;

	[SyncVar]
	public float[] announcementTimesArray;

	[SyncVar]
	public int[] announcementLanguageArray;

	[SyncVar]
	public float announcementBellVolume = 1f;

	public bool[] announcementPlayed;

	public GameObject[] instantiatedUSGsOBJs;

	[Space(10f)]
	public GameObject announcementPrefabOBJ;

	public Transform announcementParent;

	public GameObject USGSPrefabOBJ;

	public TextMeshProUGUI currentLanguageField;

	public TMP_InputField announcementInputField;

	public AudioClip[] announcementBellAudios;

	public Image volumeFillImage;

	public string[] voicesNames;

	public string[] languageNames;

	public string[] localizationNames;

	public int currentLanguageIndex;

	public float bellVolumeFactor = 1f;

	private bool announcementIsPlaying;

	private int counter;

	private bool resetPlayedArray;

	private USgs USGsComponent;

	private float timeToWaitForUSGReady = 3f;

	private float timeToWaitForUSGAudioStop = 2f;

	private bool initialized;

	public bool NetworkrestrictPlayingInPublicGames
	{
		get
		{
			return restrictPlayingInPublicGames;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref restrictPlayingInPublicGames, 1uL, null);
		}
	}

	public string[] NetworkannouncementContentArray
	{
		get
		{
			return announcementContentArray;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref announcementContentArray, 2uL, null);
		}
	}

	public float[] NetworkannouncementTimesArray
	{
		get
		{
			return announcementTimesArray;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref announcementTimesArray, 4uL, null);
		}
	}

	public int[] NetworkannouncementLanguageArray
	{
		get
		{
			return announcementLanguageArray;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref announcementLanguageArray, 8uL, null);
		}
	}

	public float NetworkannouncementBellVolume
	{
		get
		{
			return announcementBellVolume;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref announcementBellVolume, 16uL, null);
		}
	}

	public override void OnStartClient()
	{
		if (base.isServer)
		{
			NetworkrestrictPlayingInPublicGames = GameCanvas.Instance.isPGame;
			LoadAnnouncements();
			StartCoroutine(DelayedInitialization());
		}
	}

	private IEnumerator DelayedInitialization()
	{
		yield return new WaitForSeconds(5f);
		while (!GameData.Instance)
		{
			yield return null;
		}
		float timeOfDay = GameData.Instance.timeOfDay;
		for (int i = 0; i < announcementTimesArray.Length; i++)
		{
			if (announcementContentArray[i] != "" && announcementTimesArray[i] > 7f && announcementTimesArray[i] < timeOfDay)
			{
				announcementPlayed[i] = true;
			}
		}
		initialized = true;
	}

	private void LoadAnnouncements()
	{
		string filePath = Application.persistentDataPath + "/NncmtsData.es3";
		if (ES3.FileExists(filePath))
		{
			string value = FsmVariables.GlobalVariables.GetFsmString("CurrentFilename").Value;
			ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
			string text = ES3.Load<string>("StoreName", value, settings);
			string key = "annContent" + text;
			string key2 = "annTime" + text;
			string key3 = "annLang" + text;
			if (ES3.KeyExists(key, filePath) && ES3.KeyExists(key2, filePath) && ES3.KeyExists(key3, filePath))
			{
				NetworkannouncementContentArray = ES3.Load<string[]>(key, filePath);
				NetworkannouncementTimesArray = ES3.Load<float[]>(key2, filePath);
				NetworkannouncementLanguageArray = ES3.Load<int[]>(key3, filePath);
			}
			string key4 = "annVol" + text;
			if (ES3.KeyExists(key4, filePath))
			{
				NetworkannouncementBellVolume = ES3.Load<float>(key4, filePath);
			}
		}
	}

	private void SaveAnnouncements()
	{
		string filePath = Application.persistentDataPath + "/NncmtsData.es3";
		string value = FsmVariables.GlobalVariables.GetFsmString("CurrentFilename").Value;
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		string text = ES3.Load<string>("StoreName", value, settings);
		string key = "annContent" + text;
		string key2 = "annTime" + text;
		string key3 = "annLang" + text;
		ES3.Save(key, announcementContentArray, filePath);
		ES3.Save(key2, announcementTimesArray, filePath);
		ES3.Save(key3, announcementLanguageArray, filePath);
		ES3.Save("annVol" + text, announcementBellVolume, filePath);
	}

	public void OnEnableClearAndGenerateData()
	{
		announcementInputField.text = "";
		string filePath = Application.persistentDataPath + "/Settings/GameOptions.es3";
		if (ES3.KeyExists("GameLanguage", filePath))
		{
			string text = ES3.Load<string>("GameLanguage", filePath);
			bool flag = false;
			for (int i = 0; i < localizationNames.Length; i++)
			{
				if (text == localizationNames[i])
				{
					flag = true;
					currentLanguageIndex = i;
					currentLanguageField.text = languageNames[i];
					break;
				}
			}
			if (!flag)
			{
				currentLanguageIndex = 0;
				currentLanguageField.text = languageNames[0];
			}
		}
		CreateUIAnnouncements();
	}

	private void CreateUIAnnouncements()
	{
		for (int i = 0; i < announcementParent.childCount; i++)
		{
			Object.Destroy(announcementParent.GetChild(announcementParent.childCount - 1 - i).gameObject);
		}
		for (int j = 0; j < announcementContentArray.Length; j++)
		{
			if (!(announcementContentArray[j] == ""))
			{
				GameObject obj = Object.Instantiate(announcementPrefabOBJ, announcementParent);
				obj.transform.Find("TimeBCK/Time_Text").GetComponent<TextMeshProUGUI>().text = RetrieveTimeText(announcementTimesArray[j]);
				obj.transform.Find("LanguageBCK/Language_Text").GetComponent<TextMeshProUGUI>().text = languageNames[announcementLanguageArray[j]];
				obj.transform.Find("ContentBCK/Content_Text").GetComponent<TextMeshProUGUI>().text = announcementContentArray[j];
				obj.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("DeskOBJ").Value = base.gameObject;
				obj.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("Index").Value = j;
			}
		}
	}

	private string RetrieveTimeText(float time)
	{
		string text = Mathf.FloorToInt(time).ToString();
		if (text.Length < 2)
		{
			text = "0" + text;
		}
		float num = Mathf.FloorToInt(time);
		string text2 = ((int)((time - num) * 60f)).ToString();
		if (text2.Length < 2)
		{
			text2 = "0" + text2;
		}
		return text + ":" + text2;
	}

	private void Update()
	{
		if (!base.isServer || !initialized)
		{
			return;
		}
		counter++;
		if (counter < 20)
		{
			return;
		}
		counter = 0;
		if (GameData.Instance.GetComponent<NetworkSpawner>().speakersList.Count == 0)
		{
			return;
		}
		float timeOfDay = GameData.Instance.timeOfDay;
		if (timeOfDay > 22.45f && !GameData.Instance.isSupermarketOpen && !resetPlayedArray)
		{
			resetPlayedArray = true;
			for (int i = 0; i < announcementPlayed.Length; i++)
			{
				announcementPlayed[i] = false;
			}
		}
		else if (resetPlayedArray && timeOfDay < 8.05f)
		{
			resetPlayedArray = false;
		}
		if (resetPlayedArray)
		{
			return;
		}
		for (int j = 0; j < announcementContentArray.Length; j++)
		{
			if (!(announcementContentArray[j] == "") && !announcementPlayed[j] && timeOfDay >= announcementTimesArray[j])
			{
				announcementPlayed[j] = true;
				RpcPlayAnnouncement(announcementLanguageArray[j], announcementContentArray[j]);
				break;
			}
		}
	}

	public void SetAnnouncement(int announcementHour, int announcementMinute, string announcementStr)
	{
		float num = AssembleTime(announcementHour, announcementMinute);
		if (!(num <= 8f) && !(num >= 22.5f) && !restrictPlayingInPublicGames && !(announcementStr == "") && currentLanguageIndex >= 0 && currentLanguageIndex < languageNames.Length)
		{
			CmdSetAnnouncement(announcementHour, announcementMinute, currentLanguageIndex, announcementStr);
		}
	}

	private float AssembleTime(int hour, int minute)
	{
		return (float)hour + (float)minute / 5f * (1f / 12f);
	}

	[Command(requiresAuthority = false)]
	public void CmdSetAnnouncement(int announcementHour, int announcementMinute, int whichLanguage, string announcementStr)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(announcementHour);
		writer.WriteInt(announcementMinute);
		writer.WriteInt(whichLanguage);
		writer.WriteString(announcementStr);
		SendCommandInternal("System.Void AnnouncementsDesk::CmdSetAnnouncement(System.Int32,System.Int32,System.Int32,System.String)", 680336590, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateDataOnClient(int index, float time, int whichLanguage, string announcementStr)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteFloat(time);
		writer.WriteInt(whichLanguage);
		writer.WriteString(announcementStr);
		SendRPCInternal("System.Void AnnouncementsDesk::RpcUpdateDataOnClient(System.Int32,System.Single,System.Int32,System.String)", 1527757429, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void ClearAnnouncement(int indexToClear)
	{
		CmdClearAnnouncement(indexToClear);
	}

	[Command(requiresAuthority = false)]
	private void CmdClearAnnouncement(int indexToClear)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(indexToClear);
		SendCommandInternal("System.Void AnnouncementsDesk::CmdClearAnnouncement(System.Int32)", 350855373, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcClearAnnouncement(int indexToClear)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(indexToClear);
		SendRPCInternal("System.Void AnnouncementsDesk::RpcClearAnnouncement(System.Int32)", 357661520, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void SetVolume(float newVolume)
	{
		newVolume = Mathf.Clamp(newVolume, 0f, 1f);
		CmdSetVolume(newVolume);
	}

	[Command(requiresAuthority = false)]
	private void CmdSetVolume(float newVolume)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(newVolume);
		SendCommandInternal("System.Void AnnouncementsDesk::CmdSetVolume(System.Single)", 1822857161, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcSetVolume(float newVolume)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(newVolume);
		SendRPCInternal("System.Void AnnouncementsDesk::RpcSetVolume(System.Single)", -2128601294, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcPlayAnnouncement(int langIndex, string announcementString)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(langIndex);
		writer.WriteString(announcementString);
		SendRPCInternal("System.Void AnnouncementsDesk::RpcPlayAnnouncement(System.Int32,System.String)", -2104009621, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator PlayAnnouncement(int langIndex, string announcementString)
	{
		announcementIsPlaying = true;
		List<AudioSource> AsourceList = new List<AudioSource>();
		List<GameObject> speakersList = GameData.Instance.GetComponent<NetworkSpawner>().speakersList;
		for (int i = 0; i < speakersList.Count; i++)
		{
			AsourceList.Add(speakersList[i].GetComponent<AudioSource>());
		}
		if (AsourceList.Count == 0)
		{
			ClearData();
			yield break;
		}
		for (int j = 0; j < AsourceList.Count; j++)
		{
			AsourceList[j].volume = announcementBellVolume;
			AsourceList[j].clip = announcementBellAudios[0];
			AsourceList[j].Play();
		}
		yield return new WaitForSeconds(4f);
		GameObject gameObject;
		if (!instantiatedUSGsOBJs[langIndex])
		{
			gameObject = Object.Instantiate(USGSPrefabOBJ);
			gameObject.GetComponent<USgs>().InitializeVoiceData(voicesNames[langIndex]);
			instantiatedUSGsOBJs[langIndex] = gameObject;
		}
		else
		{
			gameObject = instantiatedUSGsOBJs[langIndex];
		}
		USGsComponent = gameObject.GetComponent<USgs>();
		USGsComponent.audioSourceList = AsourceList;
		float readyWaiting = 0f;
		while (!USGsComponent.usgModuleIsReady)
		{
			readyWaiting += Time.deltaTime;
			if (readyWaiting > timeToWaitForUSGReady)
			{
				ClearData();
				yield break;
			}
			yield return null;
		}
		if (AsourceList.Count > 0)
		{
			AudioSource firstASource = AsourceList[0];
			for (int k = 0; k < AsourceList.Count; k++)
			{
				AsourceList[k].volume = 1f;
			}
			USGsComponent.allowAudioPlay = true;
			USGsComponent.CallTTSCoroutine(announcementString);
			yield return new WaitForSeconds(1f);
			float audioCheckWaiting = 0f;
			while (audioCheckWaiting < timeToWaitForUSGAudioStop)
			{
				audioCheckWaiting += Time.deltaTime;
				if (firstASource.isPlaying)
				{
					audioCheckWaiting = 0f;
				}
				yield return null;
			}
			USGsComponent.allowAudioPlay = false;
			for (int l = 0; l < AsourceList.Count; l++)
			{
				AsourceList[l].volume = announcementBellVolume;
				AsourceList[l].clip = announcementBellAudios[1];
				AsourceList[l].Play();
			}
			yield return new WaitForSeconds(0.5f);
			ClearData();
		}
		else
		{
			ClearData();
		}
	}

	private void OnDestroy()
	{
		ClearData();
	}

	private void ClearData()
	{
		announcementIsPlaying = false;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdSetAnnouncement__Int32__Int32__Int32__String(int announcementHour, int announcementMinute, int whichLanguage, string announcementStr)
	{
		if (restrictPlayingInPublicGames || announcementStr == "")
		{
			return;
		}
		if (announcementStr.Length > 300)
		{
			announcementStr = announcementStr.Substring(0, 300);
		}
		float num = AssembleTime(announcementHour, announcementMinute);
		for (int i = 0; i < announcementContentArray.Length; i++)
		{
			if (!(announcementContentArray[i] != ""))
			{
				if (GameData.Instance.timeOfDay > num)
				{
					announcementPlayed[i] = true;
				}
				announcementContentArray[i] = announcementStr;
				announcementTimesArray[i] = num;
				announcementLanguageArray[i] = whichLanguage;
				RpcUpdateDataOnClient(i, num, whichLanguage, announcementStr);
				break;
			}
		}
		SaveAnnouncements();
	}

	protected static void InvokeUserCode_CmdSetAnnouncement__Int32__Int32__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetAnnouncement called on client.");
		}
		else
		{
			((AnnouncementsDesk)obj).UserCode_CmdSetAnnouncement__Int32__Int32__Int32__String(reader.ReadInt(), reader.ReadInt(), reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_RpcUpdateDataOnClient__Int32__Single__Int32__String(int index, float time, int whichLanguage, string announcementStr)
	{
		if (!base.isServer)
		{
			announcementContentArray[index] = announcementStr;
			announcementTimesArray[index] = time;
			announcementLanguageArray[index] = whichLanguage;
		}
		if (base.transform.Find("Canvas").gameObject.activeSelf)
		{
			CreateUIAnnouncements();
		}
	}

	protected static void InvokeUserCode_RpcUpdateDataOnClient__Int32__Single__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateDataOnClient called on server.");
		}
		else
		{
			((AnnouncementsDesk)obj).UserCode_RpcUpdateDataOnClient__Int32__Single__Int32__String(reader.ReadInt(), reader.ReadFloat(), reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_CmdClearAnnouncement__Int32(int indexToClear)
	{
		if (indexToClear >= 0 && indexToClear < announcementContentArray.Length)
		{
			announcementContentArray[indexToClear] = "";
			announcementTimesArray[indexToClear] = -1f;
			announcementLanguageArray[indexToClear] = 0;
			announcementPlayed[indexToClear] = false;
			SaveAnnouncements();
			RpcClearAnnouncement(indexToClear);
		}
	}

	protected static void InvokeUserCode_CmdClearAnnouncement__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdClearAnnouncement called on client.");
		}
		else
		{
			((AnnouncementsDesk)obj).UserCode_CmdClearAnnouncement__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcClearAnnouncement__Int32(int indexToClear)
	{
		if (!base.isServer)
		{
			announcementContentArray[indexToClear] = "";
			announcementTimesArray[indexToClear] = -1f;
			announcementLanguageArray[indexToClear] = 0;
		}
		if (base.transform.Find("Canvas").gameObject.activeSelf)
		{
			CreateUIAnnouncements();
		}
	}

	protected static void InvokeUserCode_RpcClearAnnouncement__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcClearAnnouncement called on server.");
		}
		else
		{
			((AnnouncementsDesk)obj).UserCode_RpcClearAnnouncement__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdSetVolume__Single(float newVolume)
	{
		newVolume = Mathf.Clamp(newVolume, 0f, 1f);
		NetworkannouncementBellVolume = newVolume;
		RpcSetVolume(newVolume);
	}

	protected static void InvokeUserCode_CmdSetVolume__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetVolume called on client.");
		}
		else
		{
			((AnnouncementsDesk)obj).UserCode_CmdSetVolume__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_RpcSetVolume__Single(float newVolume)
	{
		if (base.transform.Find("Canvas").gameObject.activeSelf)
		{
			volumeFillImage.fillAmount = newVolume;
		}
	}

	protected static void InvokeUserCode_RpcSetVolume__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSetVolume called on server.");
		}
		else
		{
			((AnnouncementsDesk)obj).UserCode_RpcSetVolume__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_RpcPlayAnnouncement__Int32__String(int langIndex, string announcementString)
	{
		if (!restrictPlayingInPublicGames && GameData.Instance.GetComponent<NetworkSpawner>().speakersList.Count != 0 && !announcementIsPlaying)
		{
			AchievementsManager.Instance.AddLocalAchievementPoint(22);
			StartCoroutine(PlayAnnouncement(langIndex, announcementString));
		}
	}

	protected static void InvokeUserCode_RpcPlayAnnouncement__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPlayAnnouncement called on server.");
		}
		else
		{
			((AnnouncementsDesk)obj).UserCode_RpcPlayAnnouncement__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	static AnnouncementsDesk()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(AnnouncementsDesk), "System.Void AnnouncementsDesk::CmdSetAnnouncement(System.Int32,System.Int32,System.Int32,System.String)", InvokeUserCode_CmdSetAnnouncement__Int32__Int32__Int32__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(AnnouncementsDesk), "System.Void AnnouncementsDesk::CmdClearAnnouncement(System.Int32)", InvokeUserCode_CmdClearAnnouncement__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(AnnouncementsDesk), "System.Void AnnouncementsDesk::CmdSetVolume(System.Single)", InvokeUserCode_CmdSetVolume__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(AnnouncementsDesk), "System.Void AnnouncementsDesk::RpcUpdateDataOnClient(System.Int32,System.Single,System.Int32,System.String)", InvokeUserCode_RpcUpdateDataOnClient__Int32__Single__Int32__String);
		RemoteProcedureCalls.RegisterRpc(typeof(AnnouncementsDesk), "System.Void AnnouncementsDesk::RpcClearAnnouncement(System.Int32)", InvokeUserCode_RpcClearAnnouncement__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(AnnouncementsDesk), "System.Void AnnouncementsDesk::RpcSetVolume(System.Single)", InvokeUserCode_RpcSetVolume__Single);
		RemoteProcedureCalls.RegisterRpc(typeof(AnnouncementsDesk), "System.Void AnnouncementsDesk::RpcPlayAnnouncement(System.Int32,System.String)", InvokeUserCode_RpcPlayAnnouncement__Int32__String);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteBool(restrictPlayingInPublicGames);
			GeneratedNetworkCode._Write_System.String[](writer, announcementContentArray);
			GeneratedNetworkCode._Write_System.Single[](writer, announcementTimesArray);
			GeneratedNetworkCode._Write_System.Int32[](writer, announcementLanguageArray);
			writer.WriteFloat(announcementBellVolume);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteBool(restrictPlayingInPublicGames);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, announcementContentArray);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Single[](writer, announcementTimesArray);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Int32[](writer, announcementLanguageArray);
		}
		if ((syncVarDirtyBits & 0x10L) != 0L)
		{
			writer.WriteFloat(announcementBellVolume);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref restrictPlayingInPublicGames, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref announcementContentArray, null, GeneratedNetworkCode._Read_System.String[](reader));
			GeneratedSyncVarDeserialize(ref announcementTimesArray, null, GeneratedNetworkCode._Read_System.Single[](reader));
			GeneratedSyncVarDeserialize(ref announcementLanguageArray, null, GeneratedNetworkCode._Read_System.Int32[](reader));
			GeneratedSyncVarDeserialize(ref announcementBellVolume, null, reader.ReadFloat());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref restrictPlayingInPublicGames, null, reader.ReadBool());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref announcementContentArray, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref announcementTimesArray, null, GeneratedNetworkCode._Read_System.Single[](reader));
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref announcementLanguageArray, null, GeneratedNetworkCode._Read_System.Int32[](reader));
		}
		if ((num & 0x10L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref announcementBellVolume, null, reader.ReadFloat());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AnnouncementSpeaker
using System.Collections;
using UnityEngine;

public class AnnouncementSpeaker : MonoBehaviour
{
	private void Start()
	{
		StartCoroutine(AddToList());
	}

	private IEnumerator AddToList()
	{
		yield return new WaitForSeconds(2f);
		while (!GameData.Instance)
		{
			yield return null;
		}
		GameData.Instance.GetComponent<NetworkSpawner>().AddSpeakerObject(base.gameObject);
	}

	private void OnDestroy()
	{
		if ((bool)GameData.Instance)
		{
			GameData.Instance.GetComponent<NetworkSpawner>().RemoveSpeakerObjects();
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AntiTheftBehaviour
using System.Collections;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class AntiTheftBehaviour : NetworkBehaviour
{
	private bool alarmIsPlaying;

	public GameObject lightOBJ1;

	public GameObject lightOBJ2;

	public Material lightOn;

	public Material lightOff;

	private GameObject oldNPCOBJ;

	public override void OnStartServer()
	{
		base.OnStartServer();
		base.transform.Find("ThiefColliderTrigger").gameObject.SetActive(value: true);
	}

	public void CheckThief(GameObject otherOBJ)
	{
		if (!(otherOBJ == oldNPCOBJ) && otherOBJ.name == "HitTrigger" && (bool)otherOBJ.transform.parent && (bool)otherOBJ.transform.parent.GetComponent<NPC_Info>())
		{
			NPC_Info component = otherOBJ.transform.parent.GetComponent<NPC_Info>();
			if (component.isAThief && component.thiefFleeing && component.productsIDCarrying.Count > 0)
			{
				RpcSoundAlarm();
				oldNPCOBJ = otherOBJ;
			}
		}
	}

	[ClientRpc]
	private void RpcSoundAlarm()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void AntiTheftBehaviour::RpcSoundAlarm()", -1034966944, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator AlarmBehaviour()
	{
		alarmIsPlaying = true;
		int iterations = 0;
		bool set = true;
		while (iterations < 20)
		{
			if (set)
			{
				lightOBJ1.GetComponent<MeshRenderer>().material = lightOn;
				lightOBJ2.GetComponent<MeshRenderer>().material = lightOn;
			}
			else
			{
				lightOBJ1.GetComponent<MeshRenderer>().material = lightOff;
				lightOBJ2.GetComponent<MeshRenderer>().material = lightOff;
			}
			yield return new WaitForSeconds(0.25f);
			iterations++;
			set = !set;
		}
		yield return null;
		alarmIsPlaying = false;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_RpcSoundAlarm()
	{
		base.transform.Find("AlarmAudio").GetComponent<AudioSource>().Play();
		if (!alarmIsPlaying)
		{
			StartCoroutine(AlarmBehaviour());
		}
	}

	protected static void InvokeUserCode_RpcSoundAlarm(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSoundAlarm called on server.");
		}
		else
		{
			((AntiTheftBehaviour)obj).UserCode_RpcSoundAlarm();
		}
	}

	static AntiTheftBehaviour()
	{
		RemoteProcedureCalls.RegisterRpc(typeof(AntiTheftBehaviour), "System.Void AntiTheftBehaviour::RpcSoundAlarm()", InvokeUserCode_RpcSoundAlarm);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ArrayListTable
using UnityEngine;

public class ArrayListTable : MonoBehaviour
{
	public PlayMakerArrayListProxy HeaderProxy;

	public PlayMakerArrayListProxy[] ColumnData;

	public string GetColumnHeader(int index)
	{
		if (HeaderProxy == null)
		{
			return string.Empty;
		}
		if (index < 0 || index >= HeaderProxy.arrayList.Count)
		{
			return string.Empty;
		}
		return HeaderProxy.arrayList[index].ToString();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AudiencePath
using System;
using System.Collections.Generic;
using UnityEngine;

public class AudiencePath : WalkPath
{
	public enum Angle
	{
		zero,
		minus90,
		plus90
	}

	[Tooltip("Type of rotation / Вариант поворота")]
	[SerializeField]
	private Angle angle = Angle.plus90;

	[Range(-180f, 180f)]
	[Tooltip("Rotation of people / Поворот человека")]
	[SerializeField]
	private float peopleRotation;

	[Tooltip("Look for target / Слежение за таргетом")]
	[HideInInspector]
	[SerializeField]
	private bool looking;

	[Tooltip("Target / Цель")]
	[HideInInspector]
	[SerializeField]
	private Transform target;

	[Tooltip("Speed rotation (smooth) / Скорость поворота (смягчение)")]
	[HideInInspector]
	[SerializeField]
	private float damping = 5f;

	public override void DrawCurved(bool withDraw)
	{
		if (numberOfWays < 1)
		{
			numberOfWays = 1;
		}
		if (lineSpacing < 0.6f)
		{
			lineSpacing = 0.6f;
		}
		_forward = new bool[numberOfWays];
		for (int i = 0; i < numberOfWays; i++)
		{
			_forward[i] = true;
		}
		if (pathPoint.Count < 2)
		{
			return;
		}
		points = new Vector3[numberOfWays, pathPoint.Count + 2];
		pointLength[0] = pathPoint.Count + 2;
		for (int j = 0; j < pathPointTransform.Count; j++)
		{
			Vector3 vector;
			Vector3 vector2;
			if (j == 0)
			{
				vector = ((!loopPath) ? Vector3.zero : (pathPointTransform[pathPointTransform.Count - 1].transform.position - pathPointTransform[j].transform.position));
				vector2 = pathPointTransform[j].transform.position - pathPointTransform[j + 1].transform.position;
			}
			else if (j == pathPointTransform.Count - 1)
			{
				vector = pathPointTransform[j - 1].transform.position - pathPointTransform[j].transform.position;
				vector2 = ((!loopPath) ? Vector3.zero : (pathPointTransform[j].transform.position - pathPointTransform[0].transform.position));
			}
			else
			{
				vector = pathPointTransform[j - 1].transform.position - pathPointTransform[j].transform.position;
				vector2 = pathPointTransform[j].transform.position - pathPointTransform[j + 1].transform.position;
			}
			Vector3 vector3 = Vector3.Normalize(Quaternion.Euler(0f, 90f, 0f) * (vector + vector2));
			points[0, j + 1] = ((numberOfWays % 2 == 1) ? pathPointTransform[j].transform.position : (pathPointTransform[j].transform.position + vector3 * lineSpacing / 2f));
			if (numberOfWays > 1)
			{
				points[1, j + 1] = points[0, j + 1] - vector3 * lineSpacing;
			}
			for (int k = 1; k < numberOfWays; k++)
			{
				points[k, j + 1] = points[0, j + 1] + vector3 * lineSpacing * (float)Math.Pow(-1.0, k) * ((k + 1) / 2);
			}
		}
		for (int l = 0; l < numberOfWays; l++)
		{
			points[l, 0] = points[l, 1];
			points[l, pointLength[0] - 1] = points[l, pointLength[0] - 2];
		}
		if (!withDraw)
		{
			return;
		}
		for (int m = 0; m < numberOfWays; m++)
		{
			if (loopPath)
			{
				Gizmos.color = (_forward[m] ? Color.green : Color.red);
				Gizmos.DrawLine(points[m, 0], points[m, pathPoint.Count]);
			}
			for (int n = 1; n < pathPoint.Count; n++)
			{
				Gizmos.color = (_forward[m] ? Color.green : Color.red);
				Gizmos.DrawLine(points[m, n + 1], points[m, n]);
			}
		}
	}

	public override void SpawnPeople()
	{
		List<GameObject> list = new List<GameObject>(peoplePrefabs);
		for (int num = list.Count - 1; num >= 0; num--)
		{
			if (list[num] == null)
			{
				list.RemoveAt(num);
			}
		}
		peoplePrefabs = list.ToArray();
		if (points == null)
		{
			DrawCurved(withDraw: false);
		}
		if (par == null)
		{
			par = new GameObject();
			par.transform.parent = base.gameObject.transform;
			par.name = "walkingObjects";
		}
		int num2 = (loopPath ? (pointLength[0] - 1) : (pointLength[0] - 2));
		if (num2 < 2)
		{
			return;
		}
		int num3 = (loopPath ? (pointLength[0] - 1) : (pointLength[0] - 2));
		for (int i = 0; i < numberOfWays; i++)
		{
			_distances = new float[num3];
			float num4 = 0f;
			for (int j = 1; j < num3; j++)
			{
				num4 += ((!loopPath || j != num3 - 1) ? (points[i, j + 1] - points[i, j]) : (points[i, 1] - points[i, num3])).magnitude;
				_distances[j] = num4;
			}
			int num5 = Mathf.FloorToInt(Density * num4 / _minimalObjectLength);
			float num6 = _minimalObjectLength + (num4 - (float)num5 * _minimalObjectLength) / (float)num5;
			int[] randomPrefabIndexes = CommonUtils.GetRandomPrefabIndexes(num5, ref peoplePrefabs);
			Vector3[] array = new Vector3[_distances.Length];
			for (int k = 1; k < _distances.Length; k++)
			{
				array[k - 1] = points[i, k];
			}
			array[_distances.Length - 1] = (loopPath ? points[i, 1] : points[i, _distances.Length]);
			for (int l = 0; l < num5; l++)
			{
				GameObject gameObject = base.gameObject;
				float num7 = UnityEngine.Random.Range((0f - num6) / 3f, num6 / 3f) + (float)i * num6;
				float distance = (float)(l + 1) * num6 + num7;
				Vector3 routePosition = GetRoutePosition(array, distance, num3, loopPath);
				routePosition = new Vector3(routePosition.x, routePosition.y, routePosition.z);
				if (Physics.Raycast(new Vector3(routePosition.x, routePosition.y + highToSpawn, routePosition.z), Vector3.down, out var hitInfo, float.PositiveInfinity))
				{
					routePosition.y = hitInfo.point.y;
					gameObject = UnityEngine.Object.Instantiate(peoplePrefabs[randomPrefabIndexes[l]], routePosition, Quaternion.identity);
					gameObject.transform.parent = par.transform;
					PeopleController peopleController = gameObject.AddComponent<PeopleController>();
					peopleController.animNames = new string[4] { "idle1", "idle2", "cheer", "claphands" };
					if (looking)
					{
						peopleController.target = target;
						peopleController.damping = damping;
					}
					MovePath movePath = gameObject.AddComponent<MovePath>();
					movePath.walkPath = base.gameObject;
					movePath.MyStart(i, GetRoutePoint((float)(l + 1) * num6 + num7, i, num3, forward: true, loopPath), "", loopPath, _forward: true, 0f, 0f);
					Vector3 worldPosition = new Vector3(movePath.finishPos.x, gameObject.transform.position.y, movePath.finishPos.z);
					UnityEngine.Object.DestroyImmediate(movePath);
					gameObject.transform.LookAt(worldPosition);
					if (angle == Angle.zero)
					{
						gameObject.transform.eulerAngles = new Vector3(gameObject.transform.eulerAngles.x, gameObject.transform.eulerAngles.y + peopleRotation, gameObject.transform.eulerAngles.z);
					}
					else
					{
						gameObject.transform.eulerAngles = new Vector3(gameObject.transform.eulerAngles.x, gameObject.transform.eulerAngles.y + (float)((angle == Angle.plus90) ? 90 : (-90)) + peopleRotation, gameObject.transform.eulerAngles.z);
					}
					gameObject.transform.position += gameObject.transform.forward * UnityEngine.Random.Range(0f - randZPos, randZPos);
					gameObject.transform.position += gameObject.transform.right * UnityEngine.Random.Range(0f - randXPos, randXPos);
					if (Physics.Raycast(new Vector3(gameObject.transform.position.x, gameObject.transform.position.y + highToSpawn, gameObject.transform.position.z), Vector3.down, out hitInfo, float.PositiveInfinity))
					{
						gameObject.transform.position = new Vector3(gameObject.transform.position.x, hitInfo.point.y, gameObject.transform.position.z);
					}
				}
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AuxiliarChangeFOV
using Cinemachine;
using UnityEngine;

public class AuxiliarChangeFOV : MonoBehaviour
{
	public void SetFOV(float fov)
	{
		fov = Mathf.Clamp(fov, 30f, 120f);
		GetComponent<CinemachineVirtualCamera>().m_Lens.FieldOfView = fov;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// AuxiliarMethods
using System.Globalization;
using System.Threading;
using UnityEngine;

public class AuxiliarMethods : MonoBehaviour
{
	private int[] incrementsArray = new int[3] { 20, 50, 100 };

	public bool CheckNullOrWhiteSpaces(string stringToCheck)
	{
		return string.IsNullOrWhiteSpace(stringToCheck);
	}

	public string ReturnDecimal()
	{
		return CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalSeparator;
	}

	public string returnCurrentCulture()
	{
		return Thread.CurrentThread.CurrentCulture.Name;
	}

	public void ChangeCulture()
	{
		Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
	}

	public int ReturnMoneyCheckout(float checkoutValue)
	{
		int num = incrementsArray[Random.Range(0, incrementsArray.Length)];
		int num2 = 0;
		for (int i = 0; (float)i < float.PositiveInfinity; i++)
		{
			num2 = num * i;
			if ((float)num2 > checkoutValue)
			{
				break;
			}
		}
		return num2;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// BaseTool
using UnityEngine;
using UnityEngine.UI;

public class BaseTool : MonoBehaviour
{
	private Button _button;

	public virtual bool Enable => true;

	private void Awake()
	{
		_button = GetComponent<Button>();
	}

	public virtual void OnClick()
	{
	}

	protected virtual void Update()
	{
		if (_button != null)
		{
			_button.interactable = Enable;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Benchmark
using UnityEngine;
using Wing.uPainter;

public class Benchmark : MonoBehaviour
{
	public RawImagePaintCanvas canvas;

	private ScratchBrush brush;

	private void Start()
	{
		NormalSingleton<PainterOperation>.Instance.Enable = false;
		canvas.Brush = Object.Instantiate(canvas.Brush);
		brush = canvas.Brush as ScratchBrush;
	}

	private void OnDestroy()
	{
		NormalSingleton<PainterOperation>.Instance.Enable = true;
	}

	private void Update()
	{
		brush.Size = Random.Range(0.01f, 0.03f);
		brush.BrushColor = new Color(Random.Range(0f, 1f), Random.Range(0f, 1f), Random.Range(0f, 1f));
		brush.CapStyle = ((!(Random.Range(0f, 1f) < 0.5f)) ? EBrushCapStyle.Round : EBrushCapStyle.Flat);
		brush.Softness = ((Random.Range(0f, 1f) < 0.5f) ? 0f : Random.Range(0f, 0.8f));
		brush.NoiseRatio = ((Random.Range(0f, 1f) < 0.5f) ? 0f : Random.Range(0f, 0.4f));
		brush.NoiseSize = Random.Range(0f, 0.5f);
		bool num = Random.Range(0f, 1f) < 0.5f;
		Vector2 vector = new Vector2(Random.Range(0f, 1f), Random.Range(0f, 1f));
		if (num)
		{
			canvas.DrawPoint(vector);
			return;
		}
		Vector2 end = new Vector2(Random.Range(0f, 1f), Random.Range(0f, 1f));
		canvas.DrawLine(vector, end);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Billboard
using System;
using System.Collections;
using UnityEngine;

public class Billboard : MonoBehaviour
{
	[Serializable]
	public class AdvertList
	{
		public Texture Advert;

		public Color LightColor;
	}

	public AdvertList[] Adverts;

	public Light MainLight;

	private Material mat;

	private float Scans;

	public float MinimumAdvertTime = 5f;

	public float MaximumAdvertTime = 10f;

	private void Start()
	{
		mat = GetComponent<Renderer>().material;
		Scans = mat.GetFloat("_ScanAmount");
		ChangeAdd();
	}

	private IEnumerator StartEffect()
	{
		yield return new WaitForSeconds(UnityEngine.Random.Range(MinimumAdvertTime, MaximumAdvertTime));
		mat.SetFloat("_ScanAmount", 160f);
		yield return new WaitForSeconds(0.5f);
		ChangeAdd();
	}

	private void ChangeAdd()
	{
		int num = UnityEngine.Random.Range(0, Adverts.Length);
		mat.SetTexture("_MainTexture", Adverts[num].Advert);
		mat.SetFloat("_ScanAmount", Scans);
		if ((bool)MainLight)
		{
			MainLight.color = Adverts[num].LightColor;
		}
		StartCoroutine(StartEffect());
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// BinPackingMain
using System.Collections.Generic;
using UnityEngine;

public class BinPackingMain : MonoBehaviour
{
	public int binWidth = 90;

	public int binLength = 60;

	public int padding = 1;

	public GameObject positionPivotOBJ;

	[Space(10f)]
	public bool visualDraw;

	public GameObject debugCube;

	public List<Vector2> itemsDimensions = new List<Vector2>();

	public List<Rect> occupiedRects = new List<Rect>();

	public List<Rect> freeRects = new List<Rect>();

	public void GenerateBinPacking()
	{
		MaxRectsBinPack maxRectsBinPack = new MaxRectsBinPack(binWidth, binLength);
		foreach (Vector2 itemsDimension in itemsDimensions)
		{
			maxRectsBinPack.Insert(Mathf.CeilToInt(itemsDimension.x) + padding, Mathf.CeilToInt(itemsDimension.y) + padding, MaxRectsBinPack.FreeRectChoiceHeuristic.RectBestShortSideFit);
		}
		occupiedRects = maxRectsBinPack.usedRectangles;
		freeRects = maxRectsBinPack.freeRectangles;
		if (visualDraw)
		{
			VisualDrawing();
		}
	}

	private void VisualDrawing()
	{
		int childCount = positionPivotOBJ.transform.childCount;
		if (positionPivotOBJ.transform.childCount > 0)
		{
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(positionPivotOBJ.transform.GetChild(childCount - 1 - i).gameObject);
			}
		}
		foreach (Rect occupiedRect in occupiedRects)
		{
			int num = Mathf.CeilToInt(occupiedRect.center.x);
			int num2 = Mathf.CeilToInt(occupiedRect.center.y);
			int num3 = Mathf.CeilToInt(occupiedRect.size.x);
			int num4 = Mathf.CeilToInt(occupiedRect.size.y);
			float num5 = Random.Range(0.1f, 0.5f);
			GameObject obj = Object.Instantiate(debugCube, positionPivotOBJ.transform);
			obj.transform.localScale = new Vector3((float)num3 / 100f, num5, (float)num4 / 100f);
			obj.transform.localPosition = new Vector3((float)num / 100f, num5 / 2f, (float)num2 / 100f);
			obj.GetComponent<Renderer>().material.color = Random.ColorHSV(0f, 1f, 1f, 1f, 0.5f, 1f);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// BloomSet
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;

public class BloomSet : MonoBehaviour
{
	public Volume bloomVolume;

	public void SetBloomValue(float bloomValue)
	{
		bloomVolume.profile.TryGet<Bloom>(out var component);
		component.intensity.value = bloomValue;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// BoxData
using System.Runtime.InteropServices;
using Mirror;
using UnityEngine;
using UnityEngine.UI;

public class BoxData : NetworkBehaviour
{
	[SyncVar]
	public int productID;

	[SyncVar]
	public int numberOfProducts;

	public int NetworkproductID
	{
		get
		{
			return productID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productID, 1uL, null);
		}
	}

	public int NetworknumberOfProducts
	{
		get
		{
			return numberOfProducts;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref numberOfProducts, 2uL, null);
		}
	}

	public override void OnStartClient()
	{
		SetBoxData();
	}

	private void SetBoxData()
	{
		if (productID < 0 || productID >= ProductListing.Instance.productSprites.Length)
		{
			base.gameObject.SetActive(value: false);
			return;
		}
		Sprite sprite = ProductListing.Instance.productSprites[productID];
		base.transform.Find("Canvas/Image1").GetComponent<Image>().sprite = sprite;
		base.transform.Find("Canvas/Image2").GetComponent<Image>().sprite = sprite;
		ProductListing.Instance.SetBoxColor(base.gameObject, productID);
	}

	public override bool Weaved()
	{
		return true;
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(productID);
			writer.WriteInt(numberOfProducts);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(productID);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(numberOfProducts);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref productID, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref numberOfProducts, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productID, null, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref numberOfProducts, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// BreakingDestroyListener
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class BreakingDestroyListener : NetworkBehaviour
{
	public GameObject objectToListen;

	private Vector3 startPosition;

	private bool destroying;

	private void Start()
	{
		startPosition = base.transform.position;
	}

	private void Update()
	{
		if (!destroying)
		{
			if (!objectToListen)
			{
				destroying = true;
				NetworkServer.Destroy(base.gameObject);
			}
			else if (Vector3.Distance(new Vector3(startPosition.x, 0f, startPosition.z), new Vector3(objectToListen.transform.position.x, 0f, objectToListen.transform.position.z)) > 0.1f)
			{
				Debug.Log("Moving object");
				startPosition = new Vector3(objectToListen.transform.position.x, startPosition.y, objectToListen.transform.position.z);
				base.transform.position = startPosition;
				RpcMoveListen();
			}
		}
	}

	[ClientRpc]
	private void RpcMoveListen()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void BreakingDestroyListener::RpcMoveListen()", -1665672403, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_RpcMoveListen()
	{
		if (!base.isServer)
		{
			base.transform.position = objectToListen.transform.position;
		}
	}

	protected static void InvokeUserCode_RpcMoveListen(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcMoveListen called on server.");
		}
		else
		{
			((BreakingDestroyListener)obj).UserCode_RpcMoveListen();
		}
	}

	static BreakingDestroyListener()
	{
		RemoteProcedureCalls.RegisterRpc(typeof(BreakingDestroyListener), "System.Void BreakingDestroyListener::RpcMoveListen()", InvokeUserCode_RpcMoveListen);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// BrushItem
using UnityEngine;
using UnityEngine.UI;
using Wing.uPainter;

public class BrushItem : MonoBehaviour
{
	public BaseBrush Brush;

	private BaseBrush _brush;

	private void Start()
	{
		_brush = Object.Instantiate(Brush);
		Toggle component = GetComponent<Toggle>();
		component.onValueChanged.AddListener(delegate(bool ret)
		{
			if (ret)
			{
				Settings.Instance.Canvas.Brush = _brush;
			}
		});
		if (component.isOn)
		{
			Settings.Instance.Canvas.Brush = _brush;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// BuildableInfo
using UnityEngine;

public class BuildableInfo : MonoBehaviour
{
	public int decorationID;

	public float cost = 50f;

	public float minY = -1f;

	public float maxY = 6f;

	public string[] buildableTags;

	public GameObject dummyPrefabOBJ;

	public Vector3 raycastDirection;

	public Vector3 raycastOffset;

	public bool isCool;

	public float energyCost;

	public float energyWorkingHours;

	public float employeeHappiness;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Builder_Decoration
using HighlightPlus;
using Mirror;
using Rewired;
using TMPro;
using UnityEngine;

public class Builder_Decoration : MonoBehaviour
{
	public LayerMask lMask;

	private GameObject[] decorationPropsArray;

	private int currentIndex;

	private Player MainPlayer;

	private int playerId;

	private GameObject dummyOBJ;

	private bool inCorrectBounds;

	private bool overlapping;

	private bool raycastIsCorrect;

	private bool canPlace;

	private float minY;

	private float maxY;

	private Vector3 raycastDirection;

	private Vector3 raycastOffset;

	private string[] buildableTags;

	private float decorationCost;

	private bool isCool;

	private PlayMakerFSM fsm;

	private HighlightEffect hEffect;

	private HighlightEffect hEffect2;

	private GameObject oldHitOBJ;

	private GameObject oldHitOBJ2;

	private bool isOwn;

	private void Start()
	{
		base.transform.Find("Canvas").gameObject.SetActive(value: true);
		MainPlayer = ReInput.players.GetPlayer(playerId);
		decorationPropsArray = GameData.Instance.GetComponent<NetworkSpawner>().decorationProps;
		SetDummy(0);
		SetPrices();
		isOwn = true;
		Camera.main.GetComponent<CustomCameraController>().ChangeLayerMask(set: true);
	}

	private void Update()
	{
		if (GameCanvas.Instance.transform.Find("Builder").gameObject.activeSelf)
		{
			GameCanvas.Instance.GetComponent<PlayMakerFSM>().SendEvent("Send_Data");
			return;
		}
		if (MainPlayer.GetButtonDown("Menu Next"))
		{
			currentIndex--;
			if (currentIndex < 0)
			{
				currentIndex = decorationPropsArray.Length - 1;
			}
			SetDummy(currentIndex);
		}
		else if (MainPlayer.GetButtonDown("Menu Previous"))
		{
			currentIndex++;
			if (currentIndex >= decorationPropsArray.Length)
			{
				currentIndex = 0;
			}
			SetDummy(currentIndex);
		}
		if (currentIndex == 0)
		{
			DeleterBehaviour();
		}
		else
		{
			if (!dummyOBJ)
			{
				return;
			}
			inCorrectBounds = InCorrectBounds();
			overlapping = fsm.FsmVariables.GetFsmBool("Overlapping").Value;
			raycastIsCorrect = RaycastCheck();
			if (inCorrectBounds && !overlapping && raycastIsCorrect && !canPlace)
			{
				canPlace = true;
				dummyOBJ.GetComponent<HighlightEffect>().glowHQColor = Color.green;
			}
			if ((!inCorrectBounds || overlapping || !raycastIsCorrect) && canPlace)
			{
				canPlace = false;
				dummyOBJ.GetComponent<HighlightEffect>().glowHQColor = Color.red;
			}
			if (MainPlayer.GetButtonDown("Build") && canPlace)
			{
				if (GameData.Instance.gameFunds < decorationCost)
				{
					GameCanvas.Instance.CreateCanvasNotification("message6");
				}
				else
				{
					GameData.Instance.CmdAlterFunds(0f - decorationCost);
					GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnDecoration(currentIndex, dummyOBJ.transform.position, dummyOBJ.transform.rotation.eulerAngles);
				}
			}
			if (MainPlayer.GetButtonDown("Main Action"))
			{
				dummyOBJ.transform.rotation = Quaternion.Euler(dummyOBJ.transform.rotation.eulerAngles + new Vector3(0f, 90f, 0f));
			}
			if (MainPlayer.GetButtonDown("Secondary Action"))
			{
				dummyOBJ.transform.rotation = Quaternion.Euler(dummyOBJ.transform.rotation.eulerAngles - new Vector3(0f, 90f, 0f));
			}
			if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
			{
				dummyOBJ.transform.position = hitInfo.point;
			}
			else
			{
				dummyOBJ.transform.position = Camera.main.transform.position + Camera.main.transform.forward * 4f;
			}
		}
	}

	private void SetPrices()
	{
		float num = 0f;
		for (int i = 0; i < decorationPropsArray.Length; i++)
		{
			if (i == 0)
			{
				num = 0f;
			}
			else
			{
				num = decorationPropsArray[i].GetComponent<BuildableInfo>().cost;
				if (decorationPropsArray[i].GetComponent<BuildableInfo>().isCool)
				{
					base.transform.Find("Canvas/Container/BCK").transform.GetChild(i).transform.Find("IsCool").gameObject.SetActive(value: true);
				}
			}
			base.transform.Find("Canvas/Container/BCK").transform.GetChild(i).transform.Find("Price").GetComponent<TextMeshProUGUI>().text = "$" + num;
		}
	}

	private void SetDummy(int dummyIndex)
	{
		if ((bool)dummyOBJ)
		{
			Object.Destroy(dummyOBJ);
		}
		foreach (Transform item in base.transform.Find("Canvas/Container/BCK"))
		{
			item.transform.Find("Highlight").gameObject.SetActive(value: false);
		}
		base.transform.Find("Canvas/Container/BCK").transform.GetChild(dummyIndex).transform.Find("Highlight").gameObject.SetActive(value: true);
		if (dummyIndex == 0)
		{
			isCool = false;
			return;
		}
		BuildableInfo component = decorationPropsArray[dummyIndex].GetComponent<BuildableInfo>();
		GameObject dummyPrefabOBJ = component.dummyPrefabOBJ;
		dummyOBJ = Object.Instantiate(dummyPrefabOBJ);
		minY = component.minY;
		maxY = component.maxY;
		raycastDirection = component.raycastDirection;
		raycastOffset = component.raycastOffset;
		buildableTags = component.buildableTags;
		decorationCost = component.cost;
		isCool = component.isCool;
		fsm = dummyOBJ.GetComponent<PlayMakerFSM>();
	}

	private bool InCorrectBounds()
	{
		Vector3 position = dummyOBJ.transform.position;
		if (position.x > -15f && position.x < 37f && position.z > -8.5f && position.z < 48f && position.y > minY && position.y < maxY)
		{
			return true;
		}
		return false;
	}

	private bool RaycastCheck()
	{
		if (Physics.Raycast(dummyOBJ.transform.position + dummyOBJ.transform.TransformDirection(raycastOffset), dummyOBJ.transform.TransformDirection(raycastDirection), out var hitInfo, 0.15f, lMask))
		{
			if (buildableTags.Length == 0)
			{
				return true;
			}
			string text = hitInfo.transform.gameObject.tag;
			string[] array = buildableTags;
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == text)
				{
					return true;
				}
			}
		}
		return false;
	}

	private void DeleterBehaviour()
	{
		if (GameData.Instance.timeOfDay < 8.05f && !GameData.Instance.isSupermarketOpen)
		{
			if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
			{
				if (hitInfo.transform.gameObject.tag == "Movable")
				{
					if ((bool)oldHitOBJ2 && hitInfo.transform.gameObject != oldHitOBJ2 && (bool)hEffect2)
					{
						hEffect2.highlighted = false;
					}
					hEffect2 = hitInfo.transform.GetComponent<HighlightEffect>();
					hEffect2.highlighted = true;
					if ((MainPlayer.GetButtonDown("Build") || MainPlayer.GetButtonDown("Main Action") || MainPlayer.GetButtonDown("Secondary Action")) && (bool)hitInfo.transform.GetComponent<NetworkIdentity>())
					{
						float fundsToAdd = (float)hitInfo.transform.GetComponent<Data_Container>().cost * 0.9f;
						GameData.Instance.CmdAlterFundsWithoutExperience(fundsToAdd);
						GameData.Instance.GetComponent<NetworkSpawner>().CmdDestroyBox(hitInfo.transform.gameObject);
					}
					oldHitOBJ2 = hitInfo.transform.gameObject;
				}
				else if ((bool)hEffect2)
				{
					hEffect2.highlighted = false;
				}
			}
			else if ((bool)hEffect2)
			{
				hEffect2.highlighted = false;
			}
		}
		else if ((bool)hEffect2)
		{
			hEffect2.highlighted = false;
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo2, 4f, lMask))
		{
			if (hitInfo2.transform.gameObject.tag == "Decoration")
			{
				if ((bool)oldHitOBJ && hitInfo2.transform.gameObject != oldHitOBJ && (bool)hEffect)
				{
					hEffect.enabled = false;
				}
				hEffect = hitInfo2.transform.Find("Mesh").GetComponent<HighlightEffect>();
				hEffect.enabled = true;
				if ((MainPlayer.GetButtonDown("Build") || MainPlayer.GetButtonDown("Main Action") || MainPlayer.GetButtonDown("Secondary Action")) && (bool)hitInfo2.transform.GetComponent<NetworkIdentity>())
				{
					float fundsToAdd2 = hitInfo2.transform.GetComponent<BuildableInfo>().cost * 0.9f;
					GameData.Instance.CmdAlterFundsWithoutExperience(fundsToAdd2);
					GameData.Instance.GetComponent<NetworkSpawner>().CmdDestroyBox(hitInfo2.transform.gameObject);
				}
				oldHitOBJ = hitInfo2.transform.gameObject;
			}
			else if ((bool)hEffect)
			{
				hEffect.enabled = false;
			}
		}
		else if ((bool)hEffect)
		{
			hEffect.enabled = false;
		}
	}

	private void OnDestroy()
	{
		if ((bool)dummyOBJ)
		{
			Object.Destroy(dummyOBJ);
		}
		if ((bool)hEffect)
		{
			hEffect.enabled = false;
		}
		if ((bool)hEffect2)
		{
			hEffect2.highlighted = false;
		}
		if (isOwn)
		{
			Camera.main.GetComponent<CustomCameraController>().ChangeLayerMask(set: false);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Builder_Main
using System.Collections;
using System.Collections.Generic;
using HighlightPlus;
using HutongGames.PlayMaker;
using Mirror;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class Builder_Main : MonoBehaviour
{
	private bool initialConfiguration;

	public int[] tabsOrder;

	public GameObject canvasBuilderOBJ;

	public GameObject tabContainerOBJ;

	public TextMeshProUGUI builderTitleTMP;

	public TextMeshProUGUI snapModeTMP;

	public Scrollbar scrollbarOBJ;

	public LayerMask lMask;

	public GameObject tabIconsParentOBJ;

	public GameObject tabIconPrefabOBJ;

	public GameObject architecturalDisclaimerOBJ;

	public Sprite[] tabsIcons;

	public bool playerIsCool;

	public List<int> architecturalElementsList;

	public GameObject lightsCounterContainerOBJ;

	public TextMeshProUGUI lightsCounter;

	[Space(10f)]
	public List<int> idsWithFlippedAxis = new List<int>();

	private GameObject[] buildablesArray;

	private GameObject[] decorationPropsArray;

	private Player MainPlayer;

	private CustomCameraController cCameraController;

	private PlayerPermissions pComponent;

	private PlayerNetwork pNetworkComponent;

	private GameObject dummyOBJ;

	private int currentTabIndex;

	private int oldTabIndex = -1;

	private int currentElementIndex;

	private int currentPropIndex;

	private bool inCorrectBounds;

	private bool overlapping;

	private bool raycastIsCorrect;

	private bool correctSector;

	private bool canPlace;

	private string buildableTag;

	private float buildableCost;

	private float minY;

	private float maxY;

	private bool hasSecondaryRaycast;

	private Vector3 raycastDirection;

	private Vector3 raycastOffset;

	private string[] buildableTags;

	private float decorationCost;

	private PlayMakerFSM pmakerFSM;

	private bool isCool;

	private HighlightEffect hEffect;

	private HighlightEffect hEffect2;

	private GameObject oldHitOBJ;

	private GameObject oldHitOBJ2;

	private GameObject currentMovedOBJ;

	private bool recentlyMoved;

	private int snappingMode;

	private float gridSize = 0.25f;

	private Vector3 raycastLastPosition;

	private bool activateDLCsignsCache;

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
		StartCoroutine(RetrieveInitialBehaviours());
		snapModeTMP.text = LocalizationManager.instance.GetLocalizationString("snapping2");
		CreateTabsIcons();
	}

	private void Update()
	{
		if (!initialConfiguration)
		{
			return;
		}
		if (recentlyMoved)
		{
			recentlyMoved = false;
			return;
		}
		bool value = FsmVariables.GlobalVariables.GetFsmBool("InOptions").Value;
		if (canvasBuilderOBJ.activeSelf && (cCameraController.isInCameraEvent || value || pNetworkComponent.equippedItem == 5))
		{
			DeactivateBuilder();
			return;
		}
		if (MainPlayer.GetButtonDown("Open Builder"))
		{
			if (!canvasBuilderOBJ.activeSelf)
			{
				if (cCameraController.isInCameraEvent || FirstPersonController.Instance.inVehicle || !pComponent.RequestGP() || !pComponent.RequestMP() || pNetworkComponent.equippedItem == 5)
				{
					return;
				}
				cCameraController.ChangeLayerMask(set: true);
				canvasBuilderOBJ.SetActive(value: true);
				SetDummy(currentTabIndex, currentElementIndex);
			}
			else
			{
				DeactivateBuilder();
			}
		}
		if (!canvasBuilderOBJ.activeSelf)
		{
			return;
		}
		if (!currentMovedOBJ)
		{
			if (MainPlayer.GetButtonDown("Menu Previous"))
			{
				currentElementIndex--;
				if (currentElementIndex < 0)
				{
					currentElementIndex = tabContainerOBJ.transform.GetChild(currentTabIndex).transform.Find("Container").transform.childCount - 1;
				}
				SetDummy(currentTabIndex, currentElementIndex);
			}
			else if (MainPlayer.GetButtonDown("Menu Next"))
			{
				currentElementIndex++;
				if (currentElementIndex >= tabContainerOBJ.transform.GetChild(currentTabIndex).transform.Find("Container").transform.childCount)
				{
					currentElementIndex = 0;
				}
				SetDummy(currentTabIndex, currentElementIndex);
			}
			else if (MainPlayer.GetButtonDown("Tab Previous"))
			{
				currentTabIndex--;
				if (currentTabIndex < 0)
				{
					currentTabIndex = tabsOrder.Length - 1;
				}
				currentElementIndex = 0;
				SetDummy(currentTabIndex, currentElementIndex);
			}
			else if (MainPlayer.GetButtonDown("Tab Next"))
			{
				currentTabIndex++;
				if (currentTabIndex >= tabsOrder.Length)
				{
					currentTabIndex = 0;
				}
				currentElementIndex = 0;
				SetDummy(currentTabIndex, currentElementIndex);
			}
		}
		if (MainPlayer.GetButtonDown("Build Snapping"))
		{
			snappingMode++;
			if (snappingMode == 2)
			{
				snappingMode = 3;
			}
			if (snappingMode >= 4)
			{
				snappingMode = 0;
			}
			snapModeTMP.text = LocalizationManager.instance.GetLocalizationString("snapping" + (snappingMode + 2));
			if (snappingMode == 0)
			{
				snapModeTMP.color = Color.white;
			}
			else
			{
				snapModeTMP.color = Color.green;
			}
		}
		if (!playerIsCool && isCool)
		{
			overlapping = true;
			SharedBehaviour();
		}
		else if (currentElementIndex == 0)
		{
			if ((bool)currentMovedOBJ && (bool)dummyOBJ)
			{
				if ((bool)currentMovedOBJ.GetComponent<Data_Container>())
				{
					BuildableBehaviour();
				}
				else if ((bool)currentMovedOBJ.GetComponent<BuildableInfo>())
				{
					DecorationBehaviour();
				}
			}
			MoveBehaviour();
		}
		else if (currentElementIndex == 1)
		{
			DeleteBehaviour();
		}
		else if ((bool)dummyOBJ)
		{
			if (currentTabIndex == 0)
			{
				BuildableBehaviour();
			}
			else
			{
				DecorationBehaviour();
			}
		}
	}

	private void DeactivateBuilder()
	{
		canvasBuilderOBJ.SetActive(value: false);
		cCameraController.ChangeLayerMask(set: false);
		if ((bool)dummyOBJ)
		{
			Object.Destroy(dummyOBJ);
		}
		if ((bool)hEffect)
		{
			hEffect.enabled = false;
		}
		if ((bool)hEffect2)
		{
			hEffect2.highlighted = false;
		}
		if ((bool)currentMovedOBJ)
		{
			if ((bool)currentMovedOBJ.GetComponent<Data_Container>())
			{
				currentMovedOBJ.GetComponent<Data_Container>().RemoveMoveEffect();
			}
			currentMovedOBJ = null;
		}
	}

	private void BuildableBehaviour()
	{
		overlapping = pmakerFSM.FsmVariables.GetFsmBool("Overlapping").Value;
		correctSector = CheckCorrectGround();
		if (correctSector && !overlapping && !canPlace)
		{
			canPlace = true;
			dummyOBJ.GetComponent<HighlightEffect>().glowHQColor = Color.green;
		}
		if ((!correctSector || overlapping) && canPlace)
		{
			canPlace = false;
			dummyOBJ.GetComponent<HighlightEffect>().glowHQColor = Color.red;
		}
		if (MainPlayer.GetButtonDown("Build") && canPlace)
		{
			if (currentElementIndex == 0)
			{
				if ((bool)currentMovedOBJ.GetComponent<NetworkIdentity>())
				{
					GameData.Instance.GetComponent<NetworkSpawner>().GetMoveData(currentMovedOBJ, dummyOBJ.transform.position, dummyOBJ.transform.rotation.eulerAngles);
					currentMovedOBJ.GetComponent<Data_Container>().RemoveMoveEffect();
					currentMovedOBJ = null;
					recentlyMoved = true;
					if ((bool)dummyOBJ)
					{
						Object.Destroy(dummyOBJ);
					}
				}
			}
			else if (GameData.Instance.gameFunds < buildableCost)
			{
				GameCanvas.Instance.CreateCanvasNotification("message6");
			}
			else
			{
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawn(currentPropIndex, dummyOBJ.transform.position, dummyOBJ.transform.rotation.eulerAngles);
			}
		}
		SharedBehaviour();
	}

	private void DecorationBehaviour()
	{
		inCorrectBounds = InCorrectBounds();
		overlapping = pmakerFSM.FsmVariables.GetFsmBool("Overlapping").Value;
		raycastIsCorrect = RaycastCheck();
		if (MainPlayer.GetButton("Drop Item") && currentTabIndex == 8 && architecturalElementsList.Contains(currentPropIndex))
		{
			overlapping = false;
		}
		if (inCorrectBounds && !overlapping && raycastIsCorrect && !canPlace)
		{
			canPlace = true;
			dummyOBJ.GetComponent<HighlightEffect>().glowHQColor = Color.green;
		}
		if ((!inCorrectBounds || overlapping || !raycastIsCorrect) && canPlace)
		{
			canPlace = false;
			dummyOBJ.GetComponent<HighlightEffect>().glowHQColor = Color.red;
		}
		if (MainPlayer.GetButtonDown("Build") && canPlace)
		{
			if (currentElementIndex == 0)
			{
				if (!currentMovedOBJ.GetComponent<MiniTransportBehaviour>())
				{
					GameData.Instance.GetComponent<NetworkSpawner>().GetMoveData(currentMovedOBJ, dummyOBJ.transform.position, dummyOBJ.transform.rotation.eulerAngles);
				}
				currentMovedOBJ = null;
				recentlyMoved = true;
				if ((bool)dummyOBJ)
				{
					Object.Destroy(dummyOBJ);
				}
			}
			else
			{
				if (currentTabIndex == 4 && !GameData.Instance.removeLightsLimit && GetLightsCounter() >= 240)
				{
					GameCanvas.Instance.CreateCanvasNotification("lghtlimit00");
					return;
				}
				if (GameData.Instance.gameFunds < decorationCost)
				{
					GameCanvas.Instance.CreateCanvasNotification("message6");
				}
				else
				{
					GameData.Instance.CmdAlterFunds(0f - decorationCost);
					GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnDecoration(currentPropIndex, dummyOBJ.transform.position, dummyOBJ.transform.rotation.eulerAngles);
					if (currentTabIndex == 4 && !GameData.Instance.removeLightsLimit)
					{
						StartCoroutine(DelayedSetLightsInfo());
					}
				}
			}
		}
		SharedBehaviour();
	}

	private void SharedBehaviour()
	{
		if (MainPlayer.GetButtonDown("Main Action"))
		{
			dummyOBJ.transform.rotation = Quaternion.Euler(dummyOBJ.transform.rotation.eulerAngles + new Vector3(0f, 45f, 0f));
		}
		if (MainPlayer.GetButtonDown("Secondary Action"))
		{
			dummyOBJ.transform.rotation = Quaternion.Euler(dummyOBJ.transform.rotation.eulerAngles - new Vector3(0f, 45f, 0f));
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
		{
			switch (snappingMode)
			{
			case 0:
				dummyOBJ.transform.position = hitInfo.point;
				break;
			case 1:
				dummyOBJ.transform.position = new Vector3((float)Mathf.RoundToInt(hitInfo.point.x / gridSize) * gridSize, hitInfo.point.y, (float)Mathf.RoundToInt(hitInfo.point.z / gridSize) * gridSize);
				break;
			case 3:
				if ((bool)hitInfo.transform.GetComponent<Data_Container>() || (bool)hitInfo.transform.GetComponent<BuildableInfo>())
				{
					if (!(Vector3.Distance(raycastLastPosition, hitInfo.point) < 0.02f))
					{
						Vector3 furnitureSnapPoint = GetFurnitureSnapPoint(hitInfo);
						if (furnitureSnapPoint == Vector3.zero)
						{
							dummyOBJ.transform.position = hitInfo.point;
							break;
						}
						dummyOBJ.transform.position = furnitureSnapPoint;
						raycastLastPosition = hitInfo.point;
					}
				}
				else
				{
					dummyOBJ.transform.position = hitInfo.point;
				}
				break;
			case 2:
				break;
			}
		}
		else
		{
			dummyOBJ.transform.position = Camera.main.transform.position + Camera.main.transform.forward * 4f;
		}
	}

	private Vector3 GetAlignedGridSnapPoint(RaycastHit hit)
	{
		Vector3 vector = AuxGetSourceSize(hit);
		if (currentTabIndex != 0)
		{
			return Vector3.zero;
		}
		bool flag = false;
		foreach (int item in idsWithFlippedAxis)
		{
			if (item == currentPropIndex)
			{
				flag = true;
				break;
			}
		}
		float num;
		float num2;
		if (flag)
		{
			num = vector.x / 2f;
			num2 = Vector3.Dot(Vector3.forward, dummyOBJ.transform.forward);
		}
		else
		{
			num = vector.z / 2f;
			num2 = Vector3.Dot(Vector3.right, dummyOBJ.transform.forward);
		}
		float num3 = 0.005f;
		Mathf.Ceil(num / gridSize);
		_ = gridSize;
		float num4 = Vector3.Dot(Vector3.forward, dummyOBJ.transform.forward);
		float num5 = Vector3.Dot(Vector3.right, dummyOBJ.transform.forward);
		if (!(num4 > 0.9f))
		{
			_ = 0.9f;
		}
		float num6 = Mathf.Ceil(num / gridSize) * gridSize - num - num3;
		bool num7 = num2 < 0.1f && num2 > -0.1f;
		float num8 = gridSize / 2f;
		if (num7)
		{
			return new Vector3(hit.point.x, hit.point.y, (float)Mathf.RoundToInt(hit.point.z / num8) * num8 + num6);
		}
		return new Vector3((float)Mathf.RoundToInt(hit.point.x / num8) * num8 + num6, hit.point.y, hit.point.z);
	}

	private Vector3 AuxGetSourceSize(RaycastHit hit)
	{
		if ((bool)currentMovedOBJ)
		{
			if ((bool)currentMovedOBJ.GetComponent<Data_Container>())
			{
				return currentMovedOBJ.GetComponent<Data_Container>().dummyPrefab.GetComponent<BoxCollider>().size;
			}
			if ((bool)currentMovedOBJ.GetComponent<BuildableInfo>())
			{
				return currentMovedOBJ.GetComponent<BuildableInfo>().dummyPrefabOBJ.GetComponent<BoxCollider>().size;
			}
		}
		else
		{
			if (currentTabIndex != 0)
			{
				return decorationPropsArray[currentPropIndex].GetComponent<BuildableInfo>().dummyPrefabOBJ.GetComponent<BoxCollider>().size;
			}
			if ((bool)buildablesArray[currentPropIndex])
			{
				return buildablesArray[currentPropIndex].GetComponent<Data_Container>().dummyPrefab.GetComponent<BoxCollider>().size;
			}
			if ((bool)hit.transform.GetComponent<Data_Container>())
			{
				return hit.transform.GetComponent<Data_Container>().dummyPrefab.GetComponent<BoxCollider>().size;
			}
			if ((bool)hit.transform.GetComponent<BuildableInfo>())
			{
				return hit.transform.GetComponent<BuildableInfo>().dummyPrefabOBJ.GetComponent<BoxCollider>().size;
			}
		}
		return Vector3.zero;
	}

	private Vector3 AuxGetSourceOffset(RaycastHit hit)
	{
		if ((bool)currentMovedOBJ)
		{
			if ((bool)currentMovedOBJ.GetComponent<Data_Container>())
			{
				return currentMovedOBJ.GetComponent<Data_Container>().dummyPrefab.GetComponent<BoxCollider>().center;
			}
			if ((bool)currentMovedOBJ.GetComponent<BuildableInfo>())
			{
				return currentMovedOBJ.GetComponent<BuildableInfo>().dummyPrefabOBJ.GetComponent<BoxCollider>().center;
			}
		}
		else
		{
			if (currentTabIndex != 0)
			{
				return decorationPropsArray[currentPropIndex].GetComponent<BuildableInfo>().dummyPrefabOBJ.GetComponent<BoxCollider>().center;
			}
			if ((bool)buildablesArray[currentPropIndex])
			{
				return buildablesArray[currentPropIndex].GetComponent<Data_Container>().dummyPrefab.GetComponent<BoxCollider>().center;
			}
			if ((bool)hit.transform.GetComponent<Data_Container>())
			{
				return hit.transform.GetComponent<Data_Container>().dummyPrefab.GetComponent<BoxCollider>().center;
			}
			if ((bool)hit.transform.GetComponent<BuildableInfo>())
			{
				return hit.transform.GetComponent<BuildableInfo>().dummyPrefabOBJ.GetComponent<BoxCollider>().center;
			}
		}
		return Vector3.zero;
	}

	private Vector3 GetFurnitureSnapPoint(RaycastHit hit)
	{
		GameObject gameObject = null;
		if ((bool)hit.transform.GetComponent<Data_Container>())
		{
			gameObject = hit.transform.GetComponent<Data_Container>().dummyPrefab;
		}
		else if ((bool)hit.transform.GetComponent<BuildableInfo>())
		{
			gameObject = hit.transform.GetComponent<BuildableInfo>().dummyPrefabOBJ;
		}
		Vector3 size = gameObject.GetComponent<BoxCollider>().size;
		Vector3[] array = new Vector3[4]
		{
			Vector3.zero,
			Vector3.zero,
			Vector3.zero,
			Vector3.zero
		};
		array[0] = hit.transform.TransformPoint(new Vector3(size.x / 2f, 0f, 0f));
		array[1] = hit.transform.TransformPoint(new Vector3((0f - size.x) / 2f, 0f, 0f));
		array[2] = hit.transform.TransformPoint(new Vector3(0f, 0f, size.z / 2f));
		array[3] = hit.transform.TransformPoint(new Vector3(0f, 0f, (0f - size.z) / 2f));
		float num = 100f;
		float num2 = 0f;
		for (int i = 0; i < 4; i++)
		{
			float num3 = Vector3.Distance(hit.point, array[i]);
			if (num3 < num)
			{
				num2 = i;
				num = num3;
			}
		}
		Vector3 vector = AuxGetSourceSize(hit);
		float num4 = Vector3.Dot(hit.transform.forward, dummyOBJ.transform.forward);
		int num5;
		float num6;
		if (num4 < 0.1f)
		{
			num5 = ((num4 > -0.1f) ? 1 : 0);
			if (num5 != 0)
			{
				num6 = vector.z;
				goto IL_01df;
			}
		}
		else
		{
			num5 = 0;
		}
		num6 = vector.x;
		goto IL_01df;
		IL_01df:
		float num7 = num6;
		float num8 = ((num5 != 0) ? vector.x : vector.z);
		float num9 = 0.002f;
		if (num2 <= 1f)
		{
			if (num2 == 0f)
			{
				return hit.transform.TransformPoint(new Vector3(size.x / 2f + num7 / 2f + num9, 0f, 0f));
			}
			if (num2 == 1f)
			{
				return hit.transform.TransformPoint(new Vector3((0f - size.x) / 2f + (0f - num7) / 2f - num9, 0f, 0f));
			}
		}
		else
		{
			if (num2 == 2f)
			{
				return hit.transform.TransformPoint(new Vector3(0f, 0f, size.z / 2f + num8 / 2f + num9));
			}
			if (num2 == 3f)
			{
				return hit.transform.TransformPoint(new Vector3(0f, 0f, (0f - size.z) / 2f + (0f - num8) / 2f - num9));
			}
		}
		return Vector3.zero;
	}

	private void SetDummy(int tabIndex, int elementIndex)
	{
		if ((bool)dummyOBJ)
		{
			Object.Destroy(dummyOBJ);
		}
		if (oldTabIndex != tabIndex)
		{
			foreach (Transform item in tabContainerOBJ.transform)
			{
				item.gameObject.SetActive(value: false);
			}
			tabContainerOBJ.transform.GetChild(tabIndex).gameObject.SetActive(value: true);
			tabContainerOBJ.transform.GetChild(tabIndex).GetComponent<ScrollRect>().verticalScrollbar = scrollbarOBJ;
			string key = "tabtitle" + tabsOrder[tabIndex];
			builderTitleTMP.text = LocalizationManager.instance.GetLocalizationString(key);
			SelectTabIcon(tabIndex);
			oldTabIndex = tabIndex;
			if (tabIndex == 4 && !lightsCounterContainerOBJ.activeSelf && !GameData.Instance.removeLightsLimit)
			{
				SetLightsCounterField();
				lightsCounterContainerOBJ.SetActive(value: true);
			}
			else if (tabIndex != 4 && lightsCounterContainerOBJ.activeSelf)
			{
				lightsCounterContainerOBJ.SetActive(value: false);
			}
			if (tabIndex == 8)
			{
				architecturalDisclaimerOBJ.SetActive(value: true);
			}
			else if (architecturalDisclaimerOBJ.activeSelf)
			{
				architecturalDisclaimerOBJ.SetActive(value: false);
			}
		}
		Transform transform = tabContainerOBJ.transform.GetChild(tabIndex).transform.Find("Container");
		foreach (Transform item2 in transform)
		{
			item2.transform.Find("Highlight").gameObject.SetActive(value: false);
		}
		transform.transform.GetChild(elementIndex).transform.Find("Highlight").gameObject.SetActive(value: true);
		ScrollRectBehaviour(transform, elementIndex);
		if (elementIndex == 0 || elementIndex == 1)
		{
			currentPropIndex = 0;
			isCool = false;
			return;
		}
		currentPropIndex = transform.transform.GetChild(elementIndex).GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("PropIndex").Value;
		canPlace = false;
		if (tabIndex == 0)
		{
			Data_Container component = buildablesArray[currentPropIndex].GetComponent<Data_Container>();
			GameObject dummyPrefab = component.dummyPrefab;
			dummyOBJ = Object.Instantiate(dummyPrefab);
			buildableTag = component.buildableTag;
			buildableCost = component.cost;
			hasSecondaryRaycast = component.doSecondaryRaycast;
			raycastDirection = component.secondaryRaycastDirection;
			raycastOffset = component.secondaryRaycastOffset;
			isCool = false;
			pmakerFSM = dummyOBJ.GetComponent<PlayMakerFSM>();
		}
		else
		{
			BuildableInfo component2 = decorationPropsArray[currentPropIndex].GetComponent<BuildableInfo>();
			GameObject dummyPrefabOBJ = component2.dummyPrefabOBJ;
			dummyOBJ = Object.Instantiate(dummyPrefabOBJ);
			RetrieveBuilderInfo(component2);
			pmakerFSM = dummyOBJ.GetComponent<PlayMakerFSM>();
		}
	}

	private IEnumerator DelayedSetLightsInfo()
	{
		yield return new WaitForSeconds(0.1f);
		SetLightsCounterField();
	}

	private void SetLightsCounterField()
	{
		int num = GetLightsCounter();
		switch (num.ToString().Length)
		{
		case 1:
			lightsCounter.text = "00" + num;
			break;
		case 2:
			lightsCounter.text = "0" + num;
			break;
		default:
			lightsCounter.text = num.ToString();
			break;
		}
	}

	private int GetLightsCounter()
	{
		Transform child = GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(7);
		int num = 0;
		foreach (Transform item in child)
		{
			if ((bool)item.GetComponent<ReferenceLight>())
			{
				num++;
			}
		}
		return num;
	}

	private void RetrieveBuilderInfo(BuildableInfo bInfo)
	{
		minY = bInfo.minY;
		maxY = bInfo.maxY;
		raycastDirection = bInfo.raycastDirection;
		raycastOffset = bInfo.raycastOffset;
		buildableTags = bInfo.buildableTags;
		decorationCost = bInfo.cost;
		isCool = bInfo.isCool;
	}

	private void ScrollRectBehaviour(Transform containerTransform, int currentIndex)
	{
		if (currentIndex <= 10)
		{
			scrollbarOBJ.value = 1f;
			return;
		}
		if (currentIndex > containerTransform.childCount - 10)
		{
			scrollbarOBJ.value = 0f;
			return;
		}
		int num = (int)Mathf.Floor(containerTransform.childCount / 10);
		int num2 = (int)Mathf.Floor((float)currentIndex / 9f);
		float num3 = 1f / (float)num;
		scrollbarOBJ.value = Mathf.Clamp(1f - (float)num2 * num3, 0f, 1f);
	}

	private void MoveBehaviour()
	{
		if ((bool)currentMovedOBJ || recentlyMoved)
		{
			return;
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
		{
			if (hitInfo.transform.CompareTag("Movable"))
			{
				if ((bool)oldHitOBJ2 && hitInfo.transform.gameObject != oldHitOBJ2 && (bool)hEffect2)
				{
					hEffect2.highlighted = false;
				}
				hEffect2 = hitInfo.transform.GetComponent<HighlightEffect>();
				hEffect2.highlighted = true;
				oldHitOBJ2 = hitInfo.transform.gameObject;
				if (MainPlayer.GetButtonDown("Build"))
				{
					currentMovedOBJ = hitInfo.transform.gameObject;
					Data_Container component = currentMovedOBJ.GetComponent<Data_Container>();
					component.AddMoveEffect();
					buildableTag = component.buildableTag;
					GameObject dummyPrefab = component.dummyPrefab;
					dummyOBJ = Object.Instantiate(dummyPrefab, Vector3.zero, currentMovedOBJ.transform.rotation);
					canPlace = false;
					pmakerFSM = dummyOBJ.GetComponent<PlayMakerFSM>();
					if ((bool)hEffect2)
					{
						hEffect2.highlighted = false;
					}
				}
			}
			else if (hitInfo.transform.CompareTag("Decoration"))
			{
				if ((bool)oldHitOBJ && hitInfo.transform.gameObject != oldHitOBJ && (bool)hEffect)
				{
					hEffect.enabled = false;
				}
				hEffect = hitInfo.transform.Find("Mesh").GetComponent<HighlightEffect>();
				hEffect.enabled = true;
				oldHitOBJ = hitInfo.transform.gameObject;
				if (MainPlayer.GetButtonDown("Build"))
				{
					currentMovedOBJ = hitInfo.transform.gameObject;
					BuildableInfo component2 = currentMovedOBJ.GetComponent<BuildableInfo>();
					GameObject dummyPrefabOBJ = component2.dummyPrefabOBJ;
					dummyOBJ = Object.Instantiate(dummyPrefabOBJ, Vector3.zero, currentMovedOBJ.transform.rotation);
					RetrieveBuilderInfo(component2);
					canPlace = false;
					pmakerFSM = dummyOBJ.GetComponent<PlayMakerFSM>();
					if ((bool)hEffect)
					{
						hEffect.enabled = false;
					}
				}
			}
			else
			{
				if ((bool)hEffect)
				{
					hEffect.enabled = false;
				}
				if ((bool)hEffect2)
				{
					hEffect2.highlighted = false;
				}
			}
		}
		else
		{
			if ((bool)hEffect)
			{
				hEffect.enabled = false;
			}
			if ((bool)hEffect2)
			{
				hEffect2.highlighted = false;
			}
		}
	}

	private void DeleteBehaviour()
	{
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
		{
			if (hitInfo.transform.gameObject.CompareTag("Movable"))
			{
				if ((bool)oldHitOBJ2 && hitInfo.transform.gameObject != oldHitOBJ2 && (bool)hEffect2)
				{
					hEffect2.highlighted = false;
				}
				hEffect2 = hitInfo.transform.GetComponent<HighlightEffect>();
				hEffect2.highlighted = true;
				if (MainPlayer.GetButtonDown("Build") || MainPlayer.GetButtonDown("Main Action") || MainPlayer.GetButtonDown("Secondary Action"))
				{
					if (GameData.Instance.isSupermarketOpen)
					{
						GameCanvas.Instance.CreateCanvasNotification("message15");
						return;
					}
					if (NPC_Manager.Instance.customersnpcParentOBJ.transform.childCount > 0)
					{
						GameCanvas.Instance.CreateCanvasNotification("message16");
						return;
					}
					if (FurnitureContainsProduct(hitInfo.transform) && !MainPlayer.GetButton("Drop Item"))
					{
						GameCanvas.Instance.CreateCanvasNotification("message17a");
						return;
					}
					if ((bool)hitInfo.transform.GetComponent<Data_Container>())
					{
						int containerID = hitInfo.transform.GetComponent<Data_Container>().containerID;
						if ((containerID == 6 || containerID == 7) && GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(2).transform.childCount == 1)
						{
							GameCanvas.Instance.CreateCanvasNotification("checkoutwarning");
							return;
						}
					}
					if ((bool)hitInfo.transform.GetComponent<NetworkIdentity>())
					{
						float num = (float)hitInfo.transform.GetComponent<Data_Container>().cost * 0.9f;
						if (MainPlayer.GetButton("Drop Item"))
						{
							num += CalculateShelfProductCost(hitInfo.transform);
						}
						GameData.Instance.CmdAlterFundsWithoutExperience(num);
						GameData.Instance.GetComponent<NetworkSpawner>().CmdDestroyBox(hitInfo.transform.gameObject);
					}
				}
				oldHitOBJ2 = hitInfo.transform.gameObject;
			}
			else if ((bool)hEffect2)
			{
				hEffect2.highlighted = false;
			}
		}
		else if ((bool)hEffect2)
		{
			hEffect2.highlighted = false;
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo2, 4f, lMask))
		{
			if (hitInfo2.transform.gameObject.CompareTag("Decoration"))
			{
				if ((bool)oldHitOBJ && hitInfo2.transform.gameObject != oldHitOBJ && (bool)hEffect)
				{
					hEffect.enabled = false;
				}
				hEffect = hitInfo2.transform.Find("Mesh").GetComponent<HighlightEffect>();
				hEffect.enabled = true;
				if ((MainPlayer.GetButtonDown("Build") || MainPlayer.GetButtonDown("Main Action") || MainPlayer.GetButtonDown("Secondary Action")) && (bool)hitInfo2.transform.GetComponent<NetworkIdentity>())
				{
					float fundsToAdd = hitInfo2.transform.GetComponent<BuildableInfo>().cost * 0.9f;
					GameData.Instance.CmdAlterFundsWithoutExperience(fundsToAdd);
					GameData.Instance.GetComponent<NetworkSpawner>().CmdDestroyBox(hitInfo2.transform.gameObject);
					if (currentTabIndex == 4 && !GameData.Instance.removeLightsLimit)
					{
						StartCoroutine(DelayedSetLightsInfo());
					}
				}
				oldHitOBJ = hitInfo2.transform.gameObject;
			}
			else if ((bool)hEffect)
			{
				hEffect.enabled = false;
			}
		}
		else if ((bool)hEffect)
		{
			hEffect.enabled = false;
		}
	}

	private bool FurnitureContainsProduct(Transform hitTransform)
	{
		if ((bool)hitTransform.GetComponent<Data_Container>())
		{
			int[] productInfoArray = hitTransform.GetComponent<Data_Container>().productInfoArray;
			int num = productInfoArray.Length / 2;
			for (int i = 0; i < num; i++)
			{
				if (productInfoArray[i * 2] >= 0 && productInfoArray[i * 2 + 1] > 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	private float CalculateShelfProductCost(Transform hitTransform)
	{
		float num = 0f;
		if ((bool)hitTransform.GetComponent<Data_Container>())
		{
			int[] productInfoArray = hitTransform.GetComponent<Data_Container>().productInfoArray;
			int num2 = productInfoArray.Length / 2;
			for (int i = 0; i < num2; i++)
			{
				int num3 = productInfoArray[i * 2];
				if (num3 >= 0)
				{
					int num4 = productInfoArray[i * 2 + 1];
					if (num4 > 0)
					{
						Data_Product component = ProductListing.Instance.productPrefabs[num3].GetComponent<Data_Product>();
						int productTier = component.productTier;
						float num5 = component.basePricePerUnit * ProductListing.Instance.tierInflation[productTier];
						num += (float)num4 * num5;
					}
				}
			}
		}
		return num;
	}

	private bool InCorrectBounds()
	{
		Vector3 position = dummyOBJ.transform.position;
		if (position.x > -21.1f && (double)position.x < 37.25 && position.z > -9.5f && position.z < 48.3f && position.y > minY && position.y < maxY)
		{
			return true;
		}
		return false;
	}

	private bool RaycastCheck()
	{
		if (Physics.Raycast(dummyOBJ.transform.position + dummyOBJ.transform.TransformDirection(raycastOffset), dummyOBJ.transform.TransformDirection(raycastDirection), out var hitInfo, 0.15f, lMask))
		{
			if (buildableTags.Length == 0)
			{
				return true;
			}
			string text = hitInfo.transform.gameObject.tag;
			string[] array = buildableTags;
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == text)
				{
					return true;
				}
			}
		}
		return false;
	}

	private bool CheckCorrectGround()
	{
		if (Physics.Raycast(dummyOBJ.transform.position + new Vector3(0f, 0.1f, 0f), Vector3.down, out var hitInfo, 0.2f, lMask))
		{
			if (hasSecondaryRaycast && !Physics.Raycast(dummyOBJ.transform.position + dummyOBJ.transform.TransformDirection(raycastOffset), dummyOBJ.transform.TransformDirection(raycastDirection), out var _, 0.2f, lMask))
			{
				return false;
			}
			if (hitInfo.transform.gameObject.tag == buildableTag)
			{
				return true;
			}
		}
		return false;
	}

	private void SelectTabIcon(int TabIndex)
	{
		if (tabIconsParentOBJ.transform.childCount == 0)
		{
			return;
		}
		foreach (Transform item in tabIconsParentOBJ.transform)
		{
			item.GetComponent<CanvasGroup>().alpha = 0.25f;
		}
		tabIconsParentOBJ.transform.GetChild(TabIndex).GetComponent<CanvasGroup>().alpha = 1f;
	}

	private void CreateTabsIcons()
	{
		for (int i = 0; i < tabsOrder.Length; i++)
		{
			int num = tabsOrder[i];
			GameObject gameObject = Object.Instantiate(tabIconPrefabOBJ, tabIconsParentOBJ.transform);
			gameObject.transform.GetChild(0).GetComponent<Image>().sprite = tabsIcons[num];
			if (num != 0)
			{
				gameObject.GetComponent<CanvasGroup>().alpha = 0.25f;
			}
		}
	}

	private IEnumerator RetrieveInitialBehaviours()
	{
		yield return new WaitForSeconds(2f);
		cCameraController = Camera.main.GetComponent<CustomCameraController>();
		pComponent = FirstPersonController.Instance.GetComponent<PlayerPermissions>();
		pNetworkComponent = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		buildablesArray = GameData.Instance.GetComponent<NetworkSpawner>().buildables;
		decorationPropsArray = GameData.Instance.GetComponent<NetworkSpawner>().decorationProps;
		initialConfiguration = true;
	}

	public void ActivateUIInfo(bool activateDLCSigns)
	{
		StartCoroutine(DelayedActivateUIInfo(activateDLCSigns));
	}

	private IEnumerator DelayedActivateUIInfo(bool activateDLCSigns)
	{
		activateDLCsignsCache = activateDLCSigns;
		yield return new WaitForSeconds(2.5f);
		while (!initialConfiguration)
		{
			yield return null;
		}
		for (int i = 0; i < tabContainerOBJ.transform.childCount; i++)
		{
			AuxiliarSeparationMethod(i, activateDLCSigns);
		}
	}

	private void AuxiliarSeparationMethod(int i, bool activateDLCSigns)
	{
		foreach (Transform item in tabContainerOBJ.transform.GetChild(i).transform.Find("Container"))
		{
			if (!item.GetComponent<PlayMakerFSM>())
			{
				continue;
			}
			int value = item.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("PropIndex").Value;
			float num;
			float energyCost;
			float employeeHappiness;
			if (i == 0)
			{
				Data_Container component = buildablesArray[value].GetComponent<Data_Container>();
				num = component.cost;
				energyCost = component.energyCost;
				employeeHappiness = component.employeeHappiness;
			}
			else
			{
				BuildableInfo component2 = decorationPropsArray[value].GetComponent<BuildableInfo>();
				num = component2.cost;
				energyCost = component2.energyCost;
				employeeHappiness = component2.employeeHappiness;
				if (activateDLCSigns && component2.isCool)
				{
					item.transform.Find("DLC").gameObject.SetActive(value: true);
				}
			}
			item.transform.Find("Prop_Price").GetComponent<TextMeshProUGUI>().text = "$" + num;
			if (energyCost > 0f)
			{
				item.transform.Find("Energy/EnergyCost").GetComponent<TextMeshProUGUI>().text = energyCost + "kWh";
				item.transform.Find("Energy").transform.gameObject.SetActive(value: true);
			}
			if (employeeHappiness > 0f)
			{
				item.transform.Find("EmployeeHappiness/EmployeeHappinessAmount").GetComponent<TextMeshProUGUI>().text = "+" + employeeHappiness;
				item.transform.Find("EmployeeHappiness").transform.gameObject.SetActive(value: true);
			}
			if (item.transform.GetSiblingIndex() == 0)
			{
				item.transform.Find("Prop_Text").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("buildable0");
			}
			else if (item.transform.GetSiblingIndex() == 1)
			{
				item.transform.Find("Prop_Text").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("buildable0a");
			}
			else if (i == 0)
			{
				item.transform.Find("Prop_Text").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("buildable" + value);
			}
			else
			{
				item.transform.Find("Prop_Text").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("decorat" + value);
			}
		}
	}

	public void ReassignBuildablesData()
	{
		AuxiliarSeparationMethod(0, activateDLCsignsCache);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Builder_Paintables
using System.Collections;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class Builder_Paintables : MonoBehaviour
{
	[SerializeField]
	private LayerMask lMask;

	[SerializeField]
	private GameObject UIColorPrefab;

	[SerializeField]
	private GameObject particlePrefab;

	[SerializeField]
	private GameObject scrollbarOBJ;

	[SerializeField]
	private TextMeshProUGUI materialNameTMP;

	private int currentIndex;

	private int currentColorIndex;

	private float scrollstep;

	private Player MainPlayer;

	private int playerId;

	private GameObject paintablesDataParentOBJ;

	private GameObject materialsParentOBJ;

	private GameObject UIcolorParentOBJ;

	private GameObject currentRaycastedOBJ;

	private Material currentMaterial;

	private float currentPrice;

	private Color[] currentColorArray;

	private Color currentColor;

	private bool inColorMenu;

	private bool isCoroutineRunning;

	private bool isAPaintableDecoration;

	private PlayerPermissions pPermComponent;

	private void Start()
	{
		base.transform.Find("Canvas").gameObject.SetActive(value: true);
		materialsParentOBJ = base.transform.Find("Canvas/Container/ScrollArea/BCK").gameObject;
		UIcolorParentOBJ = base.transform.Find("Canvas/Container/BCK_2").gameObject;
		UIcolorParentOBJ.GetComponent<CanvasGroup>().alpha = 0.25f;
		MainPlayer = ReInput.players.GetPlayer(playerId);
		scrollstep = 1f / Mathf.Ceil(materialsParentOBJ.transform.childCount / 5);
		paintablesDataParentOBJ = GameCanvas.Instance.paintablesReference;
		GetCurrentMaterialData(0);
		SetPricesAndNumbers();
		pPermComponent = FirstPersonController.Instance.GetComponent<PlayerPermissions>();
	}

	private void AuxiliarDestroyFromHere(GameObject hitOBJ)
	{
		if (!(hitOBJ == null) && (bool)hitOBJ.GetComponent<PaintableAuxiliarHighlight>())
		{
			hitOBJ.GetComponent<PaintableAuxiliarHighlight>().DestroyBehaviours();
		}
	}

	private void Update()
	{
		if (!pPermComponent.RequestMP() || isCoroutineRunning)
		{
			return;
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask) && inColorMenu)
		{
			GameObject gameObject = hitInfo.transform.gameObject;
			if (gameObject.transform.parent != null && (bool)gameObject.transform.parent.GetComponent<Paintable>())
			{
				if (!gameObject.GetComponent<PaintableAuxiliarHighlight>())
				{
					gameObject.AddComponent<PaintableAuxiliarHighlight>();
					currentRaycastedOBJ = gameObject;
					isAPaintableDecoration = false;
				}
			}
			else if (gameObject.transform.childCount > 0 && (bool)gameObject.transform.GetChild(0).GetComponent<Paintable>())
			{
				if (!gameObject.GetComponent<PaintableAuxiliarHighlight>())
				{
					gameObject.AddComponent<PaintableAuxiliarHighlight>();
					currentRaycastedOBJ = gameObject.transform.Find("Mesh").gameObject;
					isAPaintableDecoration = true;
				}
			}
			else
			{
				AuxiliarDestroyFromHere(currentRaycastedOBJ);
				currentRaycastedOBJ = null;
			}
		}
		else
		{
			AuxiliarDestroyFromHere(currentRaycastedOBJ);
			currentRaycastedOBJ = null;
		}
		if (MainPlayer.GetButtonDown("Main Action"))
		{
			if (inColorMenu)
			{
				if ((bool)currentRaycastedOBJ)
				{
					MeshRenderer component = currentRaycastedOBJ.GetComponent<MeshRenderer>();
					Color color = component.material.GetColor("_BaseColor");
					string text = component.sharedMaterial.name;
					string value = currentMaterial.name;
					int particularOBJIndex = 0;
					int parentIndex = 0;
					if (!isAPaintableDecoration)
					{
						particularOBJIndex = currentRaycastedOBJ.transform.GetSiblingIndex();
						parentIndex = currentRaycastedOBJ.transform.parent.transform.GetSiblingIndex();
					}
					if (text.Contains(value))
					{
						if (!(currentColor != color))
						{
							return;
						}
						if (GameData.Instance.gameFunds >= currentPrice * 0.3f)
						{
							GameData.Instance.CmdAlterFunds(0f - currentPrice * 0.3f);
							CreateParticlePoof();
							if (isAPaintableDecoration)
							{
								currentRaycastedOBJ.transform.parent.GetComponent<PaintableDecoration>().CmdSetPaintable(currentIndex, currentColorIndex);
							}
							else
							{
								GameData.Instance.GetComponent<PaintablesManager>().CmdUpdateSingleParentMaterial(parentIndex, particularOBJIndex, currentIndex, currentColorIndex);
							}
						}
						else
						{
							GameCanvas.Instance.CreateCanvasNotification("message6");
						}
					}
					else if (GameData.Instance.gameFunds >= currentPrice)
					{
						GameData.Instance.CmdAlterFunds(0f - currentPrice);
						CreateParticlePoof();
						if (isAPaintableDecoration)
						{
							currentRaycastedOBJ.transform.parent.GetComponent<PaintableDecoration>().CmdSetPaintable(currentIndex, currentColorIndex);
						}
						else
						{
							GameData.Instance.GetComponent<PaintablesManager>().CmdUpdateSingleParentMaterial(parentIndex, particularOBJIndex, currentIndex, currentColorIndex);
						}
					}
					else
					{
						GameCanvas.Instance.CreateCanvasNotification("message6");
					}
				}
			}
			else
			{
				UIcolorParentOBJ.GetComponent<CanvasGroup>().alpha = 1f;
				materialsParentOBJ.GetComponent<CanvasGroup>().alpha = 0.25f;
				inColorMenu = true;
			}
		}
		else if (MainPlayer.GetButtonDown("Secondary Action"))
		{
			UIcolorParentOBJ.GetComponent<CanvasGroup>().alpha = 0.25f;
			materialsParentOBJ.GetComponent<CanvasGroup>().alpha = 1f;
			inColorMenu = false;
		}
		if (MainPlayer.GetButtonDown("Menu Next"))
		{
			if (inColorMenu)
			{
				currentColorIndex--;
				if (currentColorIndex < 0)
				{
					currentColorIndex = currentColorArray.Length - 1;
				}
				SetColorData(currentColorIndex);
				return;
			}
			if (MainPlayer.GetButton("Sprint"))
			{
				currentIndex -= 5;
			}
			else
			{
				currentIndex--;
			}
			if (currentIndex < 0)
			{
				currentIndex = paintablesDataParentOBJ.transform.childCount - 1;
			}
			GetCurrentMaterialData(currentIndex);
		}
		else
		{
			if (!MainPlayer.GetButtonDown("Menu Previous"))
			{
				return;
			}
			if (inColorMenu)
			{
				currentColorIndex++;
				if (currentColorIndex >= currentColorArray.Length)
				{
					currentColorIndex = 0;
				}
				SetColorData(currentColorIndex);
				return;
			}
			if (MainPlayer.GetButton("Sprint"))
			{
				currentIndex += 5;
			}
			else
			{
				currentIndex++;
			}
			if (currentIndex >= paintablesDataParentOBJ.transform.childCount)
			{
				currentIndex = 0;
			}
			GetCurrentMaterialData(currentIndex);
		}
	}

	private void CreateParticlePoof()
	{
		Object.Instantiate(particlePrefab, currentRaycastedOBJ.transform.position, Random.rotation);
	}

	private void SetPricesAndNumbers()
	{
		for (int i = 0; i < paintablesDataParentOBJ.transform.childCount; i++)
		{
			float price = paintablesDataParentOBJ.transform.GetChild(i).GetComponent<PaintableData>().price;
			materialsParentOBJ.transform.GetChild(i).transform.Find("Price").GetComponent<TextMeshProUGUI>().text = "$" + price;
			materialsParentOBJ.transform.GetChild(i).transform.Find("MaterialNumber").GetComponent<TextMeshProUGUI>().text = i.ToString();
		}
	}

	private void GetCurrentMaterialData(int materialIndex)
	{
		if (materialIndex >= paintablesDataParentOBJ.transform.childCount)
		{
			return;
		}
		PaintableData component = paintablesDataParentOBJ.transform.GetChild(materialIndex).GetComponent<PaintableData>();
		foreach (Transform item in materialsParentOBJ.transform)
		{
			item.transform.Find("Highlight").gameObject.SetActive(value: false);
		}
		materialsParentOBJ.transform.GetChild(materialIndex).transform.Find("Highlight").gameObject.SetActive(value: true);
		currentMaterial = component.material;
		currentPrice = component.price;
		if (component.allowCustomColors)
		{
			currentColorArray = paintablesDataParentOBJ.GetComponent<PaintableData>().ColorArray;
		}
		else
		{
			currentColorArray = component.ColorArray;
		}
		currentColorIndex = 0;
		if (currentColorArray.Length != 0)
		{
			ClearExistingColors();
			if (!isCoroutineRunning)
			{
				StartCoroutine(DelayColor());
			}
		}
		else
		{
			ClearExistingColors();
			currentColor = Color.white;
		}
		materialNameTMP.text = LocalizationManager.instance.GetLocalizationString("paintmat" + materialIndex);
		SetScrollbarStep(materialIndex);
	}

	private void SetScrollbarStep(int index)
	{
		float num = (float)index / ((float)materialsParentOBJ.transform.childCount - 1f);
		int num2 = Mathf.CeilToInt(materialsParentOBJ.transform.childCount / 5);
		float num3 = 0f;
		for (int i = 1; i < num2; i++)
		{
			num3 = scrollstep * (float)i;
			if (num < num3)
			{
				break;
			}
		}
		if (!(num3 >= 0.8f))
		{
			num3 = ((!(num3 >= 0.55f)) ? (num3 - scrollstep * 2f) : (num3 - scrollstep));
		}
		float value = 1f - num3;
		value = Mathf.Clamp(value, 0f, 1f);
		scrollbarOBJ.GetComponent<Scrollbar>().value = value;
	}

	private void ClearExistingColors()
	{
		if (UIcolorParentOBJ.transform.childCount != 0)
		{
			for (int i = 0; i < UIcolorParentOBJ.transform.childCount; i++)
			{
				Object.Destroy(UIcolorParentOBJ.transform.GetChild(UIcolorParentOBJ.transform.childCount - 1 - i).gameObject);
			}
		}
	}

	private IEnumerator DelayColor()
	{
		isCoroutineRunning = true;
		Color[] array = currentColorArray;
		foreach (Color color in array)
		{
			Object.Instantiate(UIColorPrefab, UIcolorParentOBJ.transform).GetComponent<Image>().color = color;
		}
		yield return null;
		SetColorData(0);
		isCoroutineRunning = false;
	}

	private void SetColorData(int colorIndex)
	{
		currentColor = currentColorArray[colorIndex];
		foreach (Transform item in UIcolorParentOBJ.transform)
		{
			item.transform.Find("Highlight").gameObject.SetActive(value: false);
		}
		UIcolorParentOBJ.transform.GetChild(colorIndex).transform.Find("Highlight").gameObject.SetActive(value: true);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CageEventCreateDummyAnimal
using UnityEngine;

public class CageEventCreateDummyAnimal : MonoBehaviour
{
	public GameObject dummyCamelPrefabOBJ;

	public GameObject dummyGoosePrefabOBJ;

	public Transform dummySpawnSpot;

	public GameObject createdDummyOBJ;

	public void CreateDummyAnimal(int whichAnimalIndex)
	{
		switch (whichAnimalIndex)
		{
		case 0:
			createdDummyOBJ = Object.Instantiate(dummyGoosePrefabOBJ, dummySpawnSpot);
			createdDummyOBJ.transform.localPosition = Vector3.zero;
			break;
		case 1:
			createdDummyOBJ = Object.Instantiate(dummyCamelPrefabOBJ, dummySpawnSpot);
			createdDummyOBJ.transform.localPosition = Vector3.zero;
			break;
		}
	}

	public void ClearCreatedAnimal()
	{
		if ((bool)createdDummyOBJ)
		{
			Object.Destroy(createdDummyOBJ);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CamMouseOrbit
using UnityEngine;

public class CamMouseOrbit : MonoBehaviour
{
	private float x;

	private float y;

	private float dist;

	private bool locked;

	public Transform target;

	public float distance = 10f;

	public float xSpeed = 5f;

	public float ySpeed = 2.5f;

	public float distSpeed = 10f;

	public float yMinLimit = -20f;

	public float yMaxLimit = 80f;

	public float distMinLimit = 5f;

	public float distMaxLimit = 50f;

	public float orbitDamping = 4f;

	public float distDamping = 4f;

	private void Awake()
	{
		ChangeCursor();
		dist = distance;
	}

	private void Start()
	{
		Vector3 eulerAngles = base.transform.eulerAngles;
		x = eulerAngles.y;
		y = eulerAngles.x;
		if ((bool)GetComponent<Rigidbody>())
		{
			GetComponent<Rigidbody>().freezeRotation = true;
		}
	}

	private void ChangeCursor()
	{
		Cursor.lockState = ((!locked) ? CursorLockMode.Locked : CursorLockMode.None);
		Cursor.visible = locked;
	}

	private void Update()
	{
		if (Input.GetMouseButtonDown(1))
		{
			locked = !locked;
			ChangeCursor();
		}
	}

	private void FixedUpdate()
	{
		if ((bool)target && !locked)
		{
			x += Input.GetAxis("Mouse X") * xSpeed;
			y -= Input.GetAxis("Mouse Y") * ySpeed;
			distance -= Input.GetAxis("Mouse ScrollWheel") * distSpeed;
			y = ClampAngle(y, yMinLimit, yMaxLimit);
			distance = Mathf.Clamp(distance, distMinLimit, distMaxLimit);
			dist = Mathf.Lerp(dist, distance, distDamping * Time.deltaTime);
			base.transform.rotation = Quaternion.Slerp(base.transform.rotation, Quaternion.Euler(y, x, 0f), Time.deltaTime * orbitDamping);
			base.transform.position = base.transform.rotation * new Vector3(0f, 0f, 0f - dist) + target.position;
		}
	}

	private float ClampAngle(float a, float min, float max)
	{
		while (max < min)
		{
			max += 360f;
		}
		while (a > max)
		{
			a -= 360f;
		}
		while (a < min)
		{
			a += 360f;
		}
		if (a > max)
		{
			if ((double)a - (double)(max + min) * 0.5 < 180.0)
			{
				return max;
			}
			return min;
		}
		return a;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CardboardBaler
using System.Collections;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class CardboardBaler : NetworkBehaviour
{
	public GameObject cardboardBalePrefabOBJ;

	public GameObject baleSpawnpointOBJ;

	public int numberOfBoxesInside;

	public GameObject boxOBJ;

	public bool isBroken;

	public int brokenDay;

	public GameObject associatedBrokenDisclaimerOBJ;

	public GameObject associatedBrokenPanelFixOBJ;

	public GameObject fixPrefabOBJ;

	public Vector3 localBrokenPosition;

	public Vector3 localBrokenRotation;

	private int boxesLimitToCreateACardboardBale = 10;

	public override void OnStartServer()
	{
		StartCoroutine(DelayedListAddition());
	}

	private IEnumerator DelayedListAddition()
	{
		yield return null;
		while (!NPC_Manager.Instance)
		{
			yield return null;
		}
		NPC_Manager.Instance.cardboardBalerList.Add(base.gameObject);
	}

	[Command(requiresAuthority = false)]
	public void CmdAddBoxToBaler(int productID)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		SendCommandInternal("System.Void CardboardBaler::CmdAddBoxToBaler(System.Int32)", 44965351, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void AuxiliarAddBoxToBaler(int productID)
	{
		numberOfBoxesInside++;
		RpcAddBoxToBaler(productID);
		if (numberOfBoxesInside >= boxesLimitToCreateACardboardBale)
		{
			CreateCardboardBale();
			numberOfBoxesInside = 0;
		}
	}

	[ClientRpc]
	private void RpcAddBoxToBaler(int productID)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		SendRPCInternal("System.Void CardboardBaler::RpcAddBoxToBaler(System.Int32)", -1332471570, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void CreateCardboardBale()
	{
		GameObject obj = Object.Instantiate(cardboardBalePrefabOBJ);
		obj.transform.position = baleSpawnpointOBJ.transform.position;
		NetworkServer.Spawn(obj);
	}

	public void BreakingEvent()
	{
		brokenDay = GameData.Instance.gameDay;
		isBroken = true;
		boxesLimitToCreateACardboardBale = 15;
		RpcBreakingEvent();
	}

	[ClientRpc]
	private void RpcBreakingEvent()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void CardboardBaler::RpcBreakingEvent()", -1363142677, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdFixBreakingEvent()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void CardboardBaler::CmdFixBreakingEvent()", -840175177, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcFixBreakingEvent()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void CardboardBaler::RpcFixBreakingEvent()", -1230992240, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdAddBoxToBaler__Int32(int productID)
	{
		AuxiliarAddBoxToBaler(productID);
	}

	protected static void InvokeUserCode_CmdAddBoxToBaler__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddBoxToBaler called on client.");
		}
		else
		{
			((CardboardBaler)obj).UserCode_CmdAddBoxToBaler__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcAddBoxToBaler__Int32(int productID)
	{
		ProductListing.Instance.SetBoxColor(boxOBJ, productID);
		AchievementsManager.Instance.AddLocalAchievementPoint(15);
		GetComponent<Animator>().Play("CardboardBalerAnimation");
	}

	protected static void InvokeUserCode_RpcAddBoxToBaler__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddBoxToBaler called on server.");
		}
		else
		{
			((CardboardBaler)obj).UserCode_RpcAddBoxToBaler__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcBreakingEvent()
	{
		associatedBrokenPanelFixOBJ = Object.Instantiate(fixPrefabOBJ, base.transform);
		associatedBrokenPanelFixOBJ.transform.localPosition = localBrokenPosition;
		associatedBrokenPanelFixOBJ.transform.localRotation = Quaternion.Euler(localBrokenRotation);
		associatedBrokenPanelFixOBJ.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("ReferenceOBJ").Value = base.gameObject;
		associatedBrokenPanelFixOBJ.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("ReferenceIndex").Value = 1;
	}

	protected static void InvokeUserCode_RpcBreakingEvent(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcBreakingEvent called on server.");
		}
		else
		{
			((CardboardBaler)obj).UserCode_RpcBreakingEvent();
		}
	}

	protected void UserCode_CmdFixBreakingEvent()
	{
		if (isBroken)
		{
			isBroken = false;
			if ((bool)associatedBrokenDisclaimerOBJ)
			{
				NetworkServer.Destroy(associatedBrokenDisclaimerOBJ);
			}
			NPC_Manager.Instance.RemoveFurnitureOBJFromList(base.gameObject);
			boxesLimitToCreateACardboardBale = 10;
			RpcFixBreakingEvent();
		}
	}

	protected static void InvokeUserCode_CmdFixBreakingEvent(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdFixBreakingEvent called on client.");
		}
		else
		{
			((CardboardBaler)obj).UserCode_CmdFixBreakingEvent();
		}
	}

	protected void UserCode_RpcFixBreakingEvent()
	{
		AchievementsManager.Instance.AddLocalAchievementPoint(21);
		if ((bool)associatedBrokenPanelFixOBJ)
		{
			Object.Destroy(associatedBrokenPanelFixOBJ);
		}
	}

	protected static void InvokeUserCode_RpcFixBreakingEvent(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcFixBreakingEvent called on server.");
		}
		else
		{
			((CardboardBaler)obj).UserCode_RpcFixBreakingEvent();
		}
	}

	static CardboardBaler()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(CardboardBaler), "System.Void CardboardBaler::CmdAddBoxToBaler(System.Int32)", InvokeUserCode_CmdAddBoxToBaler__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(CardboardBaler), "System.Void CardboardBaler::CmdFixBreakingEvent()", InvokeUserCode_CmdFixBreakingEvent, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(CardboardBaler), "System.Void CardboardBaler::RpcAddBoxToBaler(System.Int32)", InvokeUserCode_RpcAddBoxToBaler__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(CardboardBaler), "System.Void CardboardBaler::RpcBreakingEvent()", InvokeUserCode_RpcBreakingEvent);
		RemoteProcedureCalls.RegisterRpc(typeof(CardboardBaler), "System.Void CardboardBaler::RpcFixBreakingEvent()", InvokeUserCode_RpcFixBreakingEvent);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// change_raw_tex
using UnityEngine;
using Wing.uPainter;

public class change_raw_tex : MonoBehaviour
{
	public RawImagePaintCanvas _canvas;

	public Texture2D[] textures;

	private float _timer;

	private int _idx;

	private void Start()
	{
	}

	private void Update()
	{
		_timer += Time.deltaTime;
		if (_timer > 3f)
		{
			_canvas.Layers[0].SetRawTexture(textures[++_idx % textures.Length]);
			_canvas.Layers[0].Clear();
			_timer = 0f;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ChatController
using System;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class ChatController : MonoBehaviour
{
	public TMP_InputField ChatInputField;

	public TMP_Text ChatDisplayOutput;

	public Scrollbar ChatScrollbar;

	private void OnEnable()
	{
		ChatInputField.onSubmit.AddListener(AddToChatOutput);
	}

	private void OnDisable()
	{
		ChatInputField.onSubmit.RemoveListener(AddToChatOutput);
	}

	private void AddToChatOutput(string newText)
	{
		ChatInputField.text = string.Empty;
		DateTime now = DateTime.Now;
		string text = "[<#FFFF80>" + now.Hour.ToString("d2") + ":" + now.Minute.ToString("d2") + ":" + now.Second.ToString("d2") + "</color>] " + newText;
		if (ChatDisplayOutput != null)
		{
			if (ChatDisplayOutput.text == string.Empty)
			{
				ChatDisplayOutput.text = text;
			}
			else
			{
				TMP_Text chatDisplayOutput = ChatDisplayOutput;
				chatDisplayOutput.text = chatDisplayOutput.text + "\n" + text;
			}
		}
		ChatInputField.ActivateInputField();
		ChatScrollbar.value = 0f;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CircleSlider
using UnityEngine;
using UnityEngine.UI;

public class CircleSlider : MonoBehaviour
{
	public bool b = true;

	public Image image;

	public float speed = 0.5f;

	private float time;

	public Text progress;

	private void Update()
	{
		if (b)
		{
			time += Time.deltaTime * speed;
			image.fillAmount = time;
			if ((bool)progress)
			{
				progress.text = (int)(image.fillAmount * 100f) + "%";
			}
			if (time > 1f)
			{
				time = 0f;
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CleanerDesk
using System.Collections;
using Mirror;
using UnityEngine;
using UnityEngine.AI;

public class CleanerDesk : NetworkBehaviour
{
	public GameObject cleanerRobotPrefabOBJ;

	private void Start()
	{
		if (base.isServer)
		{
			InstantiateCleanerRobot();
		}
	}

	private void InstantiateCleanerRobot()
	{
		GameObject gameObject = Object.Instantiate(cleanerRobotPrefabOBJ);
		gameObject.transform.position = base.transform.position;
		gameObject.transform.rotation = Quaternion.Euler(new Vector3(0f, base.transform.eulerAngles.y, 0f));
		gameObject.GetComponent<CleanerRobot>().originDesk = base.gameObject;
		NetworkServer.Spawn(gameObject);
		if (NavMesh.SamplePosition(base.transform.position, out var hit, 1f, -1) && hit.distance > 0.02f)
		{
			StartCoroutine(InitCleanerMove(gameObject, hit.position));
		}
		else
		{
			StartCoroutine(DelayedActivation(gameObject));
		}
	}

	private IEnumerator InitCleanerMove(GameObject cleanerOBJ, Vector3 destinationPos)
	{
		while (Vector3.Distance(cleanerOBJ.transform.position, destinationPos) > 0.01f)
		{
			cleanerOBJ.transform.position = Vector3.MoveTowards(cleanerOBJ.transform.position, destinationPos, 0.25f * Time.deltaTime);
			Quaternion to = Quaternion.LookRotation(destinationPos, cleanerOBJ.transform.position);
			cleanerOBJ.transform.rotation = Quaternion.RotateTowards(cleanerOBJ.transform.rotation, to, 15f * Time.deltaTime);
			yield return null;
		}
		yield return null;
		cleanerOBJ.GetComponent<CleanerRobot>().enabled = true;
		yield return new WaitForSeconds(1f);
		cleanerOBJ.GetComponent<NavMeshAgent>().enabled = true;
	}

	private IEnumerator DelayedActivation(GameObject cleanerOBJ)
	{
		yield return new WaitForSeconds(0.1f);
		cleanerOBJ.GetComponent<CleanerRobot>().enabled = true;
		yield return new WaitForSeconds(1f);
		cleanerOBJ.GetComponent<NavMeshAgent>().enabled = true;
	}

	public override bool Weaved()
	{
		return true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CleanerRobot
using UnityEngine;
using UnityEngine.AI;

public class CleanerRobot : MonoBehaviour
{
	public GameObject originDesk;

	private int state;

	private int currentCounter;

	private Transform trashParentTransform;

	private NavMeshAgent agent;

	private GameObject currentChasedTrash;

	private void Start()
	{
		trashParentTransform = GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(6);
		agent = GetComponent<NavMeshAgent>();
	}

	private void FixedUpdate()
	{
		if (!agent.enabled)
		{
			return;
		}
		if (currentCounter < 20)
		{
			currentCounter++;
			return;
		}
		currentCounter = 0;
		if (!originDesk)
		{
			if ((bool)currentChasedTrash)
			{
				currentChasedTrash.GetComponent<TrashSpawn>().cleanerIsAfterIt = false;
			}
			GameData.Instance.GetComponent<NetworkSpawner>().CmdDestroyBox(base.gameObject);
		}
		else
		{
			if (agent.pathPending || !(agent.remainingDistance <= agent.stoppingDistance) || (agent.hasPath && agent.velocity.sqrMagnitude != 0f))
			{
				return;
			}
			switch (state)
			{
			case 0:
				currentChasedTrash = GetRandomTrash();
				if ((bool)currentChasedTrash)
				{
					currentChasedTrash.GetComponent<TrashSpawn>().cleanerIsAfterIt = true;
					Vector3 position = currentChasedTrash.transform.position;
					if (NavMesh.SamplePosition(position, out var hit, 1f, -1) && hit.distance > 0.02f)
					{
						position = hit.position;
					}
					state = 2;
					agent.destination = position;
				}
				else
				{
					state = 1;
				}
				break;
			case 1:
			{
				Vector3 position2 = originDesk.transform.position;
				if (NavMesh.SamplePosition(position2, out var hit2, 1f, -1) && hit2.distance > 0.02f)
				{
					position2 = hit2.position;
				}
				if (Vector3.Distance(base.transform.position, position2) > 1f)
				{
					agent.destination = originDesk.transform.position;
				}
				state = 0;
				break;
			}
			case 2:
				if ((bool)currentChasedTrash)
				{
					currentChasedTrash.GetComponent<TrashSpawn>().ClearTrashFromCleanerRobot();
					currentChasedTrash = null;
				}
				state = 0;
				break;
			default:
				Debug.Log("Warning: out of bounds cleaner state.");
				break;
			}
		}
	}

	private GameObject GetRandomTrash()
	{
		int childCount = trashParentTransform.transform.childCount;
		if (childCount > 0)
		{
			float num = 500f;
			GameObject gameObject = null;
			for (int i = 0; i < childCount; i++)
			{
				if (!trashParentTransform.transform.GetChild(i).GetComponent<TrashSpawn>().cleanerIsAfterIt)
				{
					float num2 = Vector3.Distance(base.transform.position, trashParentTransform.transform.GetChild(i).transform.position);
					if (num2 < num)
					{
						num = num2;
						gameObject = trashParentTransform.transform.GetChild(i).gameObject;
					}
				}
			}
			if ((bool)gameObject)
			{
				return gameObject;
			}
		}
		return null;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CleanerSetVolume
using System.Collections;
using UnityEngine;

public class CleanerSetVolume : MonoBehaviour
{
	private float velocity;

	private AudioSource thisAudioSource;

	private void Start()
	{
		thisAudioSource = GetComponent<AudioSource>();
		StartCoroutine(CalculateVelocity());
	}

	private IEnumerator CalculateVelocity()
	{
		while (Application.isPlaying)
		{
			Vector3 prevPos = base.transform.position;
			yield return new WaitForEndOfFrame();
			velocity = (prevPos - base.transform.position).magnitude / Time.deltaTime;
			velocity = Mathf.Round(velocity * 10f) / 10f;
			thisAudioSource.volume = velocity;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ClearTool
public class ClearTool : BaseTool
{
	public override void OnClick()
	{
		base.OnClick();
		Settings.Instance.Canvas.ClearAll();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ClockRotate
using UnityEngine;

public class ClockRotate : MonoBehaviour
{
	private void Update()
	{
		base.transform.Rotate(new Vector3(0f, 0f, 270f));
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ColorPicker
using UnityEngine;
using UnityEngine.UI;

public class ColorPicker : MonoBehaviour
{
	public RawImage ColorPallete;

	private Texture2D tex;

	private Color32 col;

	private Rect r;

	private Vector2 localPoint;

	private int px;

	private int py;

	public Color GetPixelColor()
	{
		tex = ColorPallete.texture as Texture2D;
		r = ColorPallete.rectTransform.rect;
		RectTransformUtility.ScreenPointToLocalPointInRectangle(ColorPallete.rectTransform, Input.mousePosition, null, out localPoint);
		if (localPoint.x > r.x && localPoint.y > r.y && localPoint.x < r.width + r.x && localPoint.y < r.height + r.y)
		{
			px = Mathf.Clamp(0, (int)((localPoint.x - r.x) * (float)tex.width / r.width), tex.width);
			py = Mathf.Clamp(0, (int)((localPoint.y - r.y) * (float)tex.height / r.height), tex.height);
			col = tex.GetPixel(px, py);
			return col;
		}
		return Color.black;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ColorSelector
using Es.InkPainter;
using UnityEngine;
using UnityEngine.UI;

public class ColorSelector : MonoBehaviour
{
	public Camera refCamera;

	public GameObject selectorImage;

	public GameObject outerCursor;

	public GameObject innerCursor;

	public RectTransform selectorRect;

	public Image finalColorSprite;

	private Color finalColor;

	private Color selectedColor;

	private float selectorAngle;

	private Vector2 innerDelta = Vector2.zero;

	private static ColorSelector myslf;

	private int status;

	private void Awake()
	{
		myslf = this;
	}

	private void Start()
	{
		if (refCamera == null)
		{
			refCamera = Camera.main;
		}
		selectedColor = Color.red;
		SelectOuterColor(new Vector2(0f, -1f));
		finalColorSprite.color = finalColor;
	}

	private void Update()
	{
		if (Input.GetMouseButton(0))
		{
			UserInputUpdate();
		}
		if (Input.GetMouseButtonUp(0))
		{
			status = 0;
		}
	}

	private void UserInputUpdate()
	{
		Vector3 vector = selectorRect.InverseTransformPoint(Input.mousePosition);
		float x = vector.x;
		float y = vector.y;
		float num = selectorRect.rect.width * 0.5f;
		float num2 = selectorRect.rect.height * 0.5f;
		vector.x /= selectorRect.rect.width;
		vector.y /= selectorRect.rect.height;
		if (!(x >= 0f - num) || !(y >= 0f - num2) || !(x <= num) || !(y <= num2))
		{
			return;
		}
		_ = new Vector2(0.4f, 0f).sqrMagnitude;
		float sqrMagnitude = vector.sqrMagnitude;
		if (status == 0)
		{
			if (sqrMagnitude > 0.16f)
			{
				SelectOuterColor(vector);
				status = 1;
			}
			else
			{
				SelectInnerColor(vector);
				status = 2;
			}
		}
		else if (status == 1)
		{
			SelectOuterColor(vector);
		}
		else
		{
			SelectInnerColor(vector);
		}
	}

	private Vector2 getPos(Vector2 delta)
	{
		return new Vector2(selectorRect.rect.width * delta.x, selectorRect.rect.height * delta.y);
	}

	private void SelectInnerColor(Vector2 delta)
	{
		delta = ClampTriangle(delta);
		float u = 0f;
		float v = 0f;
		float w = 0f;
		Barycentric(delta, ref u, ref v, ref w);
		if (u >= 0.15f && v >= -0.15f && w >= -0.15f)
		{
			Vector3 vector = new Vector3(selectedColor.r, selectedColor.g, selectedColor.b);
			Vector3 vector2 = u * vector + w * new Vector3(0f, 0f, 0f) + v * new Vector3(1f, 1f, 1f);
			finalColor = new Color(vector2.x, vector2.y, vector2.z);
			finalColorSprite.color = finalColor;
			innerCursor.GetComponent<RectTransform>().anchoredPosition = getPos(delta);
			innerDelta = delta;
		}
	}

	private Vector3 ClampPosToCircle(Vector3 pos)
	{
		Vector3 zero = Vector3.zero;
		float num = 0.9f;
		float f = Mathf.Atan2(pos.x, pos.y);
		zero.x = num * Mathf.Sin(f) * selectorRect.rect.width * 0.5f;
		zero.y = num * Mathf.Cos(f) * selectorRect.rect.height * 0.5f;
		zero.z = pos.z;
		return zero;
	}

	private Vector2 ClampTriangle(Vector2 point)
	{
		Vector2 vector = new Vector2(0f, 0.4f);
		Vector2 vector2 = new Vector2(-0.355f, -0.183f);
		Vector2 vector3 = new Vector2(0.355f, -0.183f);
		Vector2 result = Vector2.zero;
		if (Math.GetIntersection(vector, vector2, Vector2.zero, point, ref result) || Math.GetIntersection(vector2, vector3, Vector2.zero, point, ref result) || Math.GetIntersection(vector3, vector, Vector2.zero, point, ref result))
		{
			return result;
		}
		return point;
	}

	private void Barycentric(Vector2 point, ref float u, ref float v, ref float w)
	{
		Vector2 vector = new Vector2(0f, 0.27f);
		Vector2 vector2 = new Vector2(-0.32f, -0.3f);
		Vector2 vector3 = new Vector2(0.32f, -0.3f);
		Vector2 vector4 = vector2 - vector;
		Vector2 vector5 = vector3 - vector;
		Vector2 lhs = point - vector;
		float num = Vector2.Dot(vector4, vector4);
		float num2 = Vector2.Dot(vector4, vector5);
		float num3 = Vector2.Dot(vector5, vector5);
		float num4 = Vector2.Dot(lhs, vector4);
		float num5 = Vector2.Dot(lhs, vector5);
		float num6 = num * num3 - num2 * num2;
		v = (num3 * num4 - num2 * num5) / num6;
		w = (num * num5 - num2 * num4) / num6;
		u = 1f - v - w;
	}

	private void SelectOuterColor(Vector2 delta)
	{
		float num = Mathf.Atan2(delta.x, delta.y) * 57.29578f;
		if (num < 0f)
		{
			num = 360f + num;
		}
		selectorAngle = num / 360f;
		selectedColor = HSVToRGB(selectorAngle, 1f, 1f);
		selectorImage.GetComponent<RawImage>().material.SetColor("_Color", selectedColor);
		outerCursor.GetComponent<RectTransform>().anchoredPosition = ClampPosToCircle(getPos(delta));
		SelectInnerColor(innerDelta);
	}

	public static Color HSVToRGB(float H, float S, float V)
	{
		if (S == 0f)
		{
			return new Color(V, V, V);
		}
		if (V == 0f)
		{
			return Color.black;
		}
		Color black = Color.black;
		float num = H * 6f;
		int num2 = Mathf.FloorToInt(num);
		float num3 = num - (float)num2;
		float num4 = V * (1f - S);
		float num5 = V * (1f - S * num3);
		float num6 = V * (1f - S * (1f - num3));
		switch (num2)
		{
		case -1:
			black.r = V;
			black.g = num4;
			black.b = num5;
			break;
		case 0:
			black.r = V;
			black.g = num6;
			black.b = num4;
			break;
		case 1:
			black.r = num5;
			black.g = V;
			black.b = num4;
			break;
		case 2:
			black.r = num4;
			black.g = V;
			black.b = num6;
			break;
		case 3:
			black.r = num4;
			black.g = num5;
			black.b = V;
			break;
		case 4:
			black.r = num6;
			black.g = num4;
			black.b = V;
			break;
		case 5:
			black.r = V;
			black.g = num4;
			black.b = num5;
			break;
		case 6:
			black.r = V;
			black.g = num6;
			black.b = num4;
			break;
		}
		black.r = Mathf.Clamp(black.r, 0f, 1f);
		black.g = Mathf.Clamp(black.g, 0f, 1f);
		black.b = Mathf.Clamp(black.b, 0f, 1f);
		return black;
	}

	public static Color GetColor()
	{
		return myslf.finalColor;
	}

	public static void SetColor(Color color)
	{
		myslf.finalColor = color;
		myslf.finalColorSprite.color = color;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CommonUtils
using System.Collections.Generic;
using UnityEngine;

public static class CommonUtils
{
	public static int[] GetRandomPrefabIndexes(int numRequired, ref GameObject[] peoplePrefabs)
	{
		List<int> list = new List<int>();
		List<GameObject> list2 = new List<GameObject>(peoplePrefabs);
		list2.Shuffle();
		peoplePrefabs = list2.ToArray();
		int i = 0;
		int num = 0;
		for (; i < numRequired; i++)
		{
			list.Add((num < peoplePrefabs.Length) ? num++ : (num = 0));
		}
		list.Shuffle();
		return list.ToArray();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ContainerTesting
using System.Collections.Generic;
using CromulentBisgetti.ContainerPacking;
using CromulentBisgetti.ContainerPacking.Entities;
using UnityEngine;

public class ContainerTesting : MonoBehaviour
{
	public GameObject SampleCube;

	public GameObject itemsParentOBJ;

	public float containerWidth = 1f;

	public float containerHeight = 1f;

	public float containerLength = 1f;

	public int resultInsideCount;

	public int resultOutsideCount;

	private List<Container> containerList = new List<Container>();

	private List<Item> itemsToPack = new List<Item>();

	private List<int> algorithms = new List<int>();

	private List<ContainerPackingResult> result = new List<ContainerPackingResult>();

	private List<Item> itemsInsideResult = new List<Item>();

	private List<Item> itemsOutsideResult = new List<Item>();

	private void Start()
	{
		containerList.Add(new Container(0, (decimal)containerWidth, (decimal)containerHeight, (decimal)containerLength));
		algorithms.Add(1);
	}

	public void AddItemToPack(int productID)
	{
	}

	public void GenerateRandomItems()
	{
		itemsToPack.Clear();
		int childCount = itemsParentOBJ.transform.childCount;
		if (itemsParentOBJ.transform.childCount > 0)
		{
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(itemsParentOBJ.transform.GetChild(childCount - 1 - i).gameObject);
			}
		}
		int num = Random.Range(7, 15);
		for (int j = 0; j < num; j++)
		{
			int num2 = Random.Range(5, 40);
			int num3 = Random.Range(5, 40);
			int num4 = Random.Range(5, 40);
			itemsToPack.Add(new Item(j, (decimal)num2 / 100m, (decimal)num3 / 100m, (decimal)num4 / 100m, 1));
		}
		GetContainerResult();
	}

	public void GetContainerResult()
	{
		result = PackingService.Pack(containerList, itemsToPack, algorithms);
		if (result.Count > 0)
		{
			ContainerPackingResult containerPackingResult = result[0];
			if (containerPackingResult.AlgorithmPackingResults.Count > 0)
			{
				AlgorithmPackingResult algorithmPackingResult = containerPackingResult.AlgorithmPackingResults[0];
				itemsInsideResult = algorithmPackingResult.PackedItems;
				itemsOutsideResult = algorithmPackingResult.UnpackedItems;
				resultInsideCount = itemsInsideResult.Count;
				resultOutsideCount = itemsOutsideResult.Count;
				PukeResults();
			}
		}
	}

	private void PukeResults()
	{
		foreach (Item item in itemsInsideResult)
		{
			float x = (float)item.CoordX;
			float y = (float)item.CoordY;
			float z = (float)item.CoordZ;
			float num = (float)item.Dim1;
			float num2 = (float)item.Dim2;
			float num3 = (float)item.Dim3;
			float x2 = (float)item.PackDimX;
			float y2 = (float)item.PackDimY;
			float z2 = (float)item.PackDimZ;
			Debug.Log("Positions: " + x + "|" + y + "|" + z + "Dimensions:" + num + "|" + num2 + "|" + num3 + "Rotations:" + x2 + "|" + y2 + "|" + z2);
			GameObject obj = Object.Instantiate(SampleCube);
			obj.transform.position = new Vector3(x, y, z);
			obj.transform.localScale = new Vector3(x2, y2, z2);
			obj.transform.SetParent(itemsParentOBJ.transform);
			obj.GetComponent<Renderer>().material.color = Random.ColorHSV(0f, 1f, 1f, 1f, 0.5f, 1f);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CopyPasteClipboard
using UnityEngine;

public class CopyPasteClipboard : MonoBehaviour
{
	public void CopyToClipboard(string str)
	{
		GUIUtility.systemCopyBuffer = str;
	}

	public string PasteFromClipboard()
	{
		return GUIUtility.systemCopyBuffer;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CornerShelvesFix
using StarterAssets;
using UnityEngine;

public class CornerShelvesFix : MonoBehaviour
{
	public void MoveCornerShelvesBackToEntrance()
	{
		if (FirstPersonController.Instance.GetComponent<PlayerObjectController>().ConnectionID != 0)
		{
			return;
		}
		foreach (Transform item in GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(0))
		{
			if (item.GetComponent<Data_Container>().containerID == 19 || item.GetComponent<Data_Container>().containerID == 20)
			{
				GameData.Instance.GetComponent<NetworkSpawner>().GetMoveData(item.gameObject, Vector3.zero, item.rotation.eulerAngles);
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CubicBezierCurve
using UnityEngine;

internal class CubicBezierCurve
{
	private Vector3[] controlVerts = new Vector3[4];

	public CubicBezierCurve(Vector3[] cvs)
	{
		for (int i = 0; i < 4; i++)
		{
			controlVerts[i] = cvs[i];
		}
	}

	public Vector3 GetPoint(float t)
	{
		float num = 1f - t;
		float num2 = num * num * num;
		float num3 = 3f * t * num * num;
		float num4 = 3f * t * t * num;
		float num5 = t * t * t;
		return controlVerts[0] * num2 + controlVerts[1] * num3 + controlVerts[2] * num4 + controlVerts[3] * num5;
	}

	public Vector3 GetTangent(float t)
	{
		Vector3 vector = controlVerts[0] + (controlVerts[1] - controlVerts[0]) * t;
		Vector3 vector2 = controlVerts[1] + (controlVerts[2] - controlVerts[1]) * t;
		Vector3 vector3 = controlVerts[2] + (controlVerts[3] - controlVerts[2]) * t;
		Vector3 vector4 = vector + (vector2 - vector) * t;
		return vector2 + (vector3 - vector2) * t - vector4;
	}

	public float GetClosestParam(Vector3 pos, float paramThreshold = 1E-06f)
	{
		return GetClosestParamRec(pos, 0f, 1f, paramThreshold);
	}

	private float GetClosestParamRec(Vector3 pos, float beginT, float endT, float thresholdT)
	{
		float num = (beginT + endT) / 2f;
		if (endT - beginT < thresholdT)
		{
			return num;
		}
		float t = (beginT + num) / 2f;
		float t2 = (num + endT) / 2f;
		Vector3 point = GetPoint(t);
		Vector3 point2 = GetPoint(t2);
		float sqrMagnitude = (point - pos).sqrMagnitude;
		float sqrMagnitude2 = (point2 - pos).sqrMagnitude;
		if (sqrMagnitude < sqrMagnitude2)
		{
			endT = num;
		}
		else
		{
			beginT = num;
		}
		return GetClosestParamRec(pos, beginT, endT, thresholdT);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CubicBezierPath
using UnityEngine;

public class CubicBezierPath
{
	public enum Type
	{
		Open,
		Closed
	}

	private Type type;

	private int numCurveSegments;

	private int numControlVerts;

	private Vector3[] controlVerts;

	public CubicBezierPath(Vector3[] knots, Type t = Type.Open)
	{
		InterpolatePoints(knots, t);
	}

	public Type GetPathType()
	{
		return type;
	}

	public bool IsClosed()
	{
		if (type != Type.Closed)
		{
			return false;
		}
		return true;
	}

	public bool IsValid()
	{
		if (numCurveSegments <= 0)
		{
			return false;
		}
		return true;
	}

	public void Clear()
	{
		controlVerts = null;
		type = Type.Open;
		numCurveSegments = 0;
		numControlVerts = 0;
	}

	public int GetNumCurveSegments()
	{
		return numCurveSegments;
	}

	public float GetMaxParam()
	{
		return numCurveSegments;
	}

	public int GetNumControlVerts()
	{
		return numControlVerts;
	}

	public Vector3[] GetControlVerts()
	{
		return controlVerts;
	}

	public float ComputeApproxLength()
	{
		if (!IsValid())
		{
			return 0f;
		}
		int num = numCurveSegments + 1;
		if (num < 2)
		{
			return 0f;
		}
		float num2 = 0f;
		for (int i = 1; i < num; i++)
		{
			Vector3 vector = controlVerts[(i - 1) * 3];
			Vector3 vector2 = controlVerts[i * 3];
			num2 += (vector - vector2).magnitude;
		}
		if (num2 == 0f)
		{
			return 0f;
		}
		return num2;
	}

	public float ComputeApproxParamPerUnitLength()
	{
		float num = ComputeApproxLength();
		return (float)numCurveSegments / num;
	}

	public float ComputeApproxNormParamPerUnitLength()
	{
		float num = ComputeApproxLength();
		return 1f / num;
	}

	public void InterpolatePoints(Vector3[] knots, Type t)
	{
		int num = knots.Length;
		Clear();
		type = t;
		switch (type)
		{
		case Type.Open:
		{
			numCurveSegments = num - 1;
			numControlVerts = 3 * num - 2;
			controlVerts = new Vector3[numControlVerts];
			for (int k = 0; k < num; k++)
			{
				controlVerts[k * 3] = knots[k];
			}
			Vector3 vector4 = (knots[1] - knots[0]) * 0.25f;
			controlVerts[1] = knots[0] + vector4;
			Vector3 vector5 = (knots[num - 2] - knots[num - 1]) * 0.25f;
			controlVerts[numControlVerts - 2] = knots[num - 1] + vector5;
			for (int l = 1; l < numCurveSegments; l++)
			{
				Vector3 vector6 = knots[l - 1] - knots[l];
				Vector3 vector7 = knots[l + 1] - knots[l];
				float magnitude3 = vector6.magnitude;
				float magnitude4 = vector7.magnitude;
				if (magnitude3 > 0f && magnitude4 > 0f)
				{
					float num8 = (magnitude3 + magnitude4) / 8f;
					Vector3 vector8 = vector7 / magnitude4 - vector6 / magnitude3;
					vector8.Normalize();
					vector8 *= num8;
					controlVerts[l * 3 - 1] = knots[l] - vector8;
					controlVerts[l * 3 + 1] = knots[l] + vector8;
				}
				else
				{
					controlVerts[l * 3 - 1] = knots[l];
					controlVerts[l * 3 + 1] = knots[l];
				}
			}
			break;
		}
		case Type.Closed:
		{
			numCurveSegments = num;
			numControlVerts = 3 * num + 1;
			controlVerts = new Vector3[numControlVerts];
			for (int i = 0; i < num; i++)
			{
				controlVerts[i * 3] = knots[i];
			}
			controlVerts[numControlVerts - 1] = knots[0];
			for (int j = 1; j <= numCurveSegments; j++)
			{
				int num2 = j - 1;
				int num3 = (j + 1) % numCurveSegments;
				int num4 = j % numCurveSegments;
				Vector3 vector = knots[num2] - knots[num4];
				Vector3 vector2 = knots[num3] - knots[num4];
				float magnitude = vector.magnitude;
				float magnitude2 = vector2.magnitude;
				int num5 = 3 * j - 1;
				int num6 = (3 * j + 1) % (numControlVerts - 1);
				if (magnitude > 0f && magnitude2 > 0f)
				{
					float num7 = (magnitude + magnitude2) / 8f;
					Vector3 vector3 = vector2 / magnitude2 - vector / magnitude;
					vector3.Normalize();
					vector3 *= num7;
					controlVerts[num5] = knots[num4] - vector3;
					controlVerts[num6] = knots[num4] + vector3;
				}
				else
				{
					controlVerts[num5] = knots[num4];
					controlVerts[num6] = knots[num4];
				}
			}
			break;
		}
		}
	}

	public void SetControlVerts(Vector3[] cvs, Type t)
	{
		int num = cvs.Length;
		Clear();
		type = t;
		numControlVerts = num;
		numCurveSegments = (num - 1) / 3;
		controlVerts = cvs;
	}

	public Vector3 GetPoint(float t)
	{
		if (type == Type.Closed)
		{
			while (t < 0f)
			{
				t += (float)numCurveSegments;
			}
			while (t > (float)numCurveSegments)
			{
				t -= (float)numCurveSegments;
			}
		}
		else
		{
			t = Mathf.Clamp(t, 0f, numCurveSegments);
		}
		int num = (int)t;
		if (num >= numCurveSegments)
		{
			num = numCurveSegments - 1;
		}
		return new CubicBezierCurve(new Vector3[4]
		{
			controlVerts[3 * num],
			controlVerts[3 * num + 1],
			controlVerts[3 * num + 2],
			controlVerts[3 * num + 3]
		}).GetPoint(t - (float)num);
	}

	public Vector3 GetPointNorm(float t)
	{
		return GetPoint(t * (float)numCurveSegments);
	}

	public Vector3 GetTangent(float t)
	{
		if (type == Type.Closed)
		{
			while (t < 0f)
			{
				t += (float)numCurveSegments;
			}
			while (t > (float)numCurveSegments)
			{
				t -= (float)numCurveSegments;
			}
		}
		else
		{
			t = Mathf.Clamp(t, 0f, numCurveSegments);
		}
		int num = (int)t;
		if (num >= numCurveSegments)
		{
			num = numCurveSegments - 1;
		}
		return new CubicBezierCurve(new Vector3[4]
		{
			controlVerts[3 * num],
			controlVerts[3 * num + 1],
			controlVerts[3 * num + 2],
			controlVerts[3 * num + 3]
		}).GetTangent(t - (float)num);
	}

	public Vector3 GetTangentNorm(float t)
	{
		return GetTangent(t * (float)numCurveSegments);
	}

	public float ComputeClosestParam(Vector3 pos, float paramThreshold)
	{
		float num = float.MaxValue;
		float result = 0f;
		for (int i = 0; i < controlVerts.Length - 1; i += 3)
		{
			Vector3[] array = new Vector3[4];
			for (int j = 0; j < 4; j++)
			{
				array[j] = controlVerts[i + j];
			}
			CubicBezierCurve cubicBezierCurve = new CubicBezierCurve(array);
			float closestParam = cubicBezierCurve.GetClosestParam(pos, paramThreshold);
			float sqrMagnitude = (cubicBezierCurve.GetPoint(closestParam) - pos).sqrMagnitude;
			if (sqrMagnitude < num)
			{
				num = sqrMagnitude;
				result = (float)i / 3f + closestParam;
			}
		}
		return result;
	}

	public float ComputeClosestNormParam(Vector3 pos, float paramThreshold)
	{
		return ComputeClosestParam(pos, paramThreshold * (float)numCurveSegments);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CustomCameraController
using Cinemachine;
using HutongGames.PlayMaker;
using Rewired;
using StarterAssets;
using UnityEngine;
using UnityEngine.Rendering;

public class CustomCameraController : MonoBehaviour
{
	public float baseXSpeed = 10f;

	public float baseYSpeed = 10f;

	public float smoothSpeed = 1f;

	public float cameraEventFOV = 60f;

	[Space(10f)]
	public float XSensitivity = 1f;

	public float YSensitivity = 1f;

	[Space(10f)]
	public float yMinLimit = 10f;

	public float yMaxLimit = 80f;

	[Space(10f)]
	public int playerId;

	public CinemachineVirtualCamera cineVCamera;

	private Cinemachine3rdPersonFollow thirdPersonFollow;

	private float x;

	private float y;

	private GameObject cinemachineOBJ;

	private GameObject masterPlayerOBJ;

	private Player MainPlayer;

	private bool IsInOptions;

	private float oldFOV;

	public bool isAiming;

	public bool inVehicle;

	public Transform vehicleOBJ;

	public LayerMask highlightMask;

	public LayerMask cameraEventMask;

	private LayerMask initialMask;

	private LayerMask thirdPersonNullLayerMask;

	public LayerMask thirdPersonDefaultLayerMask;

	public bool isInCameraEvent;

	public bool inEmoteEvent;

	private void Start()
	{
		initialMask = GetComponent<Camera>().cullingMask;
		MainPlayer = ReInput.players.GetPlayer(playerId);
		IsInOptions = false;
		thirdPersonFollow = cineVCamera.GetCinemachineComponent<Cinemachine3rdPersonFollow>();
	}

	private void LateUpdate()
	{
		if (!masterPlayerOBJ)
		{
			masterPlayerOBJ = FsmVariables.GlobalVariables.FindFsmGameObject("MasterPlayerOBJ").Value;
			return;
		}
		if (!cinemachineOBJ)
		{
			cinemachineOBJ = masterPlayerOBJ.transform.Find("Viewpoint_Pivot/Viewpoint").gameObject;
			cineVCamera.Follow = cinemachineOBJ.transform;
			cineVCamera.LookAt = cinemachineOBJ.transform;
			return;
		}
		IsInOptions = FsmVariables.GlobalVariables.FindFsmBool("InOptions").Value;
		if (IsInOptions)
		{
			return;
		}
		if (isInCameraEvent)
		{
			if (Input.GetKeyDown(KeyCode.Escape))
			{
				RestoreCamera();
			}
			return;
		}
		if (inVehicle)
		{
			if ((bool)vehicleOBJ)
			{
				float num = vehicleOBJ.localEulerAngles.y;
				masterPlayerOBJ.transform.rotation = Quaternion.Euler(0f, num, 0f);
				cinemachineOBJ.transform.localRotation = Quaternion.Euler(22f, 0f, 0f);
			}
			return;
		}
		x += MainPlayer.GetAxis("MouseX") * baseXSpeed * XSensitivity * 0.02f;
		y -= MainPlayer.GetAxis("MouseY") * baseYSpeed * YSensitivity * 0.02f;
		Quaternion rotation = Quaternion.Euler(0f, x, 0f);
		masterPlayerOBJ.transform.rotation = rotation;
		y = ClampAngle(y, yMinLimit, yMaxLimit);
		Quaternion localRotation = Quaternion.Euler(y, 0f, 0f);
		cinemachineOBJ.transform.localRotation = localRotation;
		if (inEmoteEvent)
		{
			float num2 = Mathf.Abs(MainPlayer.GetAxisRaw("MoveV"));
			float num3 = Mathf.Abs(MainPlayer.GetAxisRaw("MoveH"));
			if (num2 > 0.1f || num3 > 0.1f || MainPlayer.GetButton("Jump"))
			{
				thirdPersonFollow.CameraDistance = 0f;
				thirdPersonFollow.CameraCollisionFilter = thirdPersonNullLayerMask;
				ShowCharacter(set: false);
				inEmoteEvent = false;
			}
		}
	}

	public void ThirdPersonEmoteVisualize()
	{
		if (!isInCameraEvent)
		{
			inEmoteEvent = true;
			thirdPersonFollow.CameraDistance = 2f;
			thirdPersonFollow.CameraCollisionFilter = thirdPersonDefaultLayerMask;
			ShowCharacter(set: true);
		}
	}

	private void ShowCharacter(bool set)
	{
		if (!FirstPersonController.Instance)
		{
			return;
		}
		if ((bool)FirstPersonController.Instance.transform.Find("Character/CharacterMesh").gameObject)
		{
			GameObject gameObject = FirstPersonController.Instance.transform.Find("Character/CharacterMesh").gameObject;
			if (set)
			{
				gameObject.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = ShadowCastingMode.On;
			}
			else
			{
				gameObject.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = ShadowCastingMode.ShadowsOnly;
			}
		}
		PlayerNetwork component = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		if ((bool)component.hatOBJ)
		{
			if (set)
			{
				component.hatOBJ.GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.On;
			}
			else
			{
				component.hatOBJ.GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.ShadowsOnly;
			}
		}
	}

	public void ChangeLayerMask(bool set)
	{
		if (set)
		{
			GetComponent<Camera>().cullingMask = highlightMask;
		}
		else
		{
			GetComponent<Camera>().cullingMask = initialMask;
		}
	}

	public void CameraEvent(GameObject newViewpointOBJ)
	{
		isInCameraEvent = true;
		oldFOV = cineVCamera.m_Lens.FieldOfView;
		oldFOV = Mathf.Clamp(oldFOV, 30f, 120f);
		cineVCamera.m_Lens.FieldOfView = cameraEventFOV;
		GetComponent<Camera>().cullingMask = cameraEventMask;
		cineVCamera.Follow = newViewpointOBJ.transform;
		cineVCamera.LookAt = newViewpointOBJ.transform;
		Cursor.lockState = (CursorLockMode)(object)FsmVariables.GlobalVariables.FindFsmEnum("CursorLockState").Value;
		Cursor.visible = true;
		if ((bool)FirstPersonController.Instance)
		{
			FirstPersonController.Instance.inCameraEvent = true;
		}
	}

	public void SurveillanceCameraEvent(GameObject newViewpointOBJ)
	{
		cineVCamera.Follow = newViewpointOBJ.transform;
		cineVCamera.LookAt = newViewpointOBJ.transform;
	}

	public void RestoreCamera()
	{
		isInCameraEvent = false;
		GetComponent<Camera>().cullingMask = initialMask;
		cineVCamera.Follow = cinemachineOBJ.transform;
		cineVCamera.LookAt = cinemachineOBJ.transform;
		Cursor.lockState = CursorLockMode.Locked;
		Cursor.visible = false;
		oldFOV = Mathf.Clamp(oldFOV, 30f, 120f);
		cineVCamera.m_Lens.FieldOfView = oldFOV;
		if ((bool)FirstPersonController.Instance)
		{
			FirstPersonController.Instance.inCameraEvent = false;
		}
	}

	private static float ClampAngle(float angle, float min, float max)
	{
		if (angle < -360f)
		{
			angle += 360f;
		}
		if (angle > 360f)
		{
			angle -= 360f;
		}
		return Mathf.Clamp(angle, min, max);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// CustomNetworkManager
using System.Collections.Generic;
using HutongGames.PlayMaker;
using Mirror;
using Steamworks;
using UnityEngine;
using UnityEngine.SceneManagement;

public class CustomNetworkManager : NetworkManager
{
	public int numberOfPlayers;

	[SerializeField]
	private PlayerObjectController GamePlayerPrefab;

	public List<PlayerObjectController> GamePlayers { get; } = new List<PlayerObjectController>();

	public override void OnServerAddPlayer(NetworkConnectionToClient conn)
	{
		if (SceneManager.GetActiveScene().name == "B_Main")
		{
			PlayerObjectController playerObjectController = Object.Instantiate(GamePlayerPrefab);
			playerObjectController.transform.position = new Vector3(5f + Random.Range(-2f, 2f), 0f, -20.5f + Random.Range(-2f, 2f));
			playerObjectController.NetworkConnectionID = conn.connectionId;
			playerObjectController.NetworkPlayerIdNumber = GamePlayers.Count + 1;
			if (base.name != "LocalNetworkManager")
			{
				playerObjectController.NetworkPlayerSteamID = (ulong)SteamMatchmaking.GetLobbyMemberByIndex((CSteamID)SteamLobby.Instance.CurrentLobbyID, GamePlayers.Count);
			}
			NetworkServer.AddPlayerForConnection(conn, playerObjectController.gameObject);
			numberOfPlayers = NetworkServer.connections.Count;
		}
	}

	public override void OnServerDisconnect(NetworkConnectionToClient conn)
	{
		base.OnServerDisconnect(conn);
		numberOfPlayers = NetworkServer.connections.Count;
		if ((bool)GetComponent<SteamLobby>())
		{
			GetComponent<SteamLobby>().ClosedLobbyListener();
		}
	}

	public override void OnClientDisconnect()
	{
		base.OnClientDisconnect();
		GameObject value = FsmVariables.GlobalVariables.FindFsmGameObject("MasterOBJ").Value;
		if (!value.GetComponent<MasterLobbyData>().isHost)
		{
			value.transform.Find("MasterCanvas/HostDisconnect").gameObject.SetActive(value: true);
			value.transform.Find("Behaviours").gameObject.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmBool("DisconnectBackup").Value = true;
		}
	}

	public int GetReturnConnections()
	{
		return NetworkServer.connections.Count;
	}

	public void LocalHost()
	{
		networkAddress = "localhost";
		StartHost();
		Debug.Log("Local host started from Manager");
	}

	public void LocalJoin()
	{
		networkAddress = "localhost";
		StartClient();
		Debug.Log("Local join started from Manager");
	}

	public void LocalHostDisconnect()
	{
		StopHost();
		Debug.Log("Host stopped");
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Data_Container
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class Data_Container : NetworkBehaviour
{
	[Header("Networked Info")]
	[SyncVar]
	public int[] productInfoArray = new int[10] { -1, 0, -1, 0, -1, 0, -1, 0, -1, 0 };

	[SyncVar]
	public int productsLeft;

	public GameObject currentNPC;

	public bool isCheckoutClosed;

	public bool isOccupiedByNPCCashier;

	public bool[] checkoutQueue;

	public float checkoutProductValue;

	public float currentAmountToReturn;

	public float moneyToReturn;

	public bool allowMoneyReturn;

	public List<GameObject> internalProductListForEmployees = new List<GameObject>();

	[Header("Static Info")]
	public int containerClass;

	public int containerID = 1;

	public int cost = 100;

	public float shelfLength = 1f;

	public float shelfWidth = 1f;

	public float shelfHeight = 1f;

	public int parentIndex;

	public string buildableTag;

	public float energyCost;

	public float energyWorkingHours;

	public float employeeHappiness;

	public bool isVolumeRestricted;

	public float productVolumeLimit = 0.015f;

	[Space(10f)]
	public AudioClip[] audioCoinsArray;

	public AudioClip[] audioNotesArray;

	public AudioSource moneySoundAudioSource;

	[Space(10f)]
	public bool isBroken;

	public int brokenDay;

	public GameObject associatedBrokenDisclaimerOBJ;

	public GameObject associatedBrokenPanelFixOBJ;

	public GameObject fixPrefabOBJ;

	public GameObject puddlePrefabOBJ;

	public Vector3 localBrokenPosition;

	public Vector3 localBrokenRotation;

	private GameObject associatedPuddleOBJ;

	[Space(10f)]
	public GameObject dummyPrefab;

	public GameObject storageBoxPrefab;

	public Vector3 productAngleOffset = new Vector3(0f, 90f, 0f);

	public bool doSecondaryRaycast;

	public Vector3 secondaryRaycastOffset = new Vector3(0f, 0.1f, 0f);

	public Vector3 secondaryRaycastDirection = new Vector3(0f, -1f, 0f);

	private Material ownerMaterial;

	private Material movingMaterial;

	private BoxCollider[] colliderArray;

	public MeshRenderer[] mRenderersArray;

	private GameObject overlapOBJ;

	private ProductListing productlistComponent;

	private int productsCounterForBags;

	private bool highLatencyCooldown;

	private const float offsetFactor = 1.1f;

	public int[] NetworkproductInfoArray
	{
		get
		{
			return productInfoArray;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productInfoArray, 1uL, null);
		}
	}

	public int NetworkproductsLeft
	{
		get
		{
			return productsLeft;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productsLeft, 2uL, null);
		}
	}

	public override void OnStartClient()
	{
		if (base.isServer)
		{
			return;
		}
		if (containerClass == 99)
		{
			if (containerID != 12)
			{
				StartCoroutine(RequestAdditionalData());
			}
		}
		else if (containerClass == 69)
		{
			StartCoroutine(DelayActivationStorage(Random.Range(1f, 3f)));
		}
		else
		{
			StartCoroutine(DelayActivationShelves(Random.Range(1f, 3f)));
		}
	}

	private IEnumerator RequestAdditionalData()
	{
		yield return new WaitForSeconds(5f);
		CmdRequestCloseState();
	}

	private IEnumerator DelayActivationShelves(float waitTime)
	{
		yield return new WaitForSeconds(waitTime);
		Transform child = GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(parentIndex);
		base.transform.SetParent(child);
		ItemSpawner();
	}

	private IEnumerator DelayActivationStorage(float waitTime)
	{
		yield return new WaitForSeconds(waitTime);
		Transform child = GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(parentIndex);
		base.transform.SetParent(child);
		BoxSpawner();
	}

	[Command(requiresAuthority = false)]
	private void CmdUpdateArrayValues(int index, int PID, int PNUMBER)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(PID);
		writer.WriteInt(PNUMBER);
		SendCommandInternal("System.Void Data_Container::CmdUpdateArrayValues(System.Int32,System.Int32,System.Int32)", -1665987912, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdContainerClear(int index)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		SendCommandInternal("System.Void Data_Container::CmdContainerClear(System.Int32)", -1992885602, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateObjectOnClients(int index, int PID, int PNUMBER, int oldPID)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(PID);
		writer.WriteInt(PNUMBER);
		writer.WriteInt(oldPID);
		SendRPCInternal("System.Void Data_Container::RpcUpdateObjectOnClients(System.Int32,System.Int32,System.Int32,System.Int32)", -706390505, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator HighLatencyCoroutine()
	{
		highLatencyCooldown = true;
		yield return new WaitForSeconds(0.75f);
		highLatencyCooldown = false;
	}

	public void AddItemToRow(int containerNumber, int productIDToAdd)
	{
		if (!FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestRP())
		{
			return;
		}
		bool flag = !base.isServer && FsmVariables.GlobalVariables.FindFsmBool("HighLatencyMode").Value;
		if (flag && highLatencyCooldown)
		{
			return;
		}
		if (!productlistComponent)
		{
			productlistComponent = GameData.Instance.GetComponent<ProductListing>();
		}
		GameObject gameObject = productlistComponent.productPrefabs[productIDToAdd];
		Vector3 size = gameObject.GetComponent<BoxCollider>().size;
		if (isVolumeRestricted && size.x * size.y * size.z < productVolumeLimit)
		{
			GameCanvas.Instance.CreateCanvasNotification("message20");
			return;
		}
		if (gameObject.GetComponent<Data_Product>().productContainerClass != containerClass)
		{
			GameCanvas.Instance.CreateCanvasNotification("message0");
			return;
		}
		bool isStackable = gameObject.GetComponent<Data_Product>().isStackable;
		int value = Mathf.FloorToInt(shelfLength / (size.x * 1.1f));
		value = Mathf.Clamp(value, 1, 100);
		int value2 = Mathf.FloorToInt(shelfWidth / (size.z * 1.1f));
		value2 = Mathf.Clamp(value2, 1, 100);
		int num = value * value2;
		if (isStackable)
		{
			int value3 = Mathf.FloorToInt(shelfHeight / (size.y * 1.1f));
			value3 = Mathf.Clamp(value3, 1, 100);
			num = value * value2 * value3;
		}
		int num2 = containerNumber * 2;
		int num3 = productInfoArray[num2];
		int num4 = productInfoArray[num2 + 1];
		if (num4 >= num)
		{
			GameCanvas.Instance.CreateCanvasNotification("message1");
			return;
		}
		if (num3 != productIDToAdd && num3 != -1 && num4 != 0)
		{
			GameCanvas.Instance.CreateCanvasNotification("message2");
			return;
		}
		PlayerNetwork component = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		if (flag)
		{
			StartCoroutine(HighLatencyCoroutine());
			int value4 = num - num4;
			value4 = Mathf.Clamp(value4, 1, 5);
			int extraParameter = component.extraParameter2;
			extraParameter = Mathf.Clamp(extraParameter, 1, 5);
			int num5 = extraParameter;
			if (value4 < extraParameter)
			{
				num5 = value4;
			}
			component.extraParameter2 -= num5;
			num4 += num5;
			AchievementsManager.Instance.CmdAddAchievementPoint(1, num5);
		}
		else
		{
			AchievementsManager.Instance.CmdAddAchievementPoint(1, 1);
			component.extraParameter2--;
			num4++;
		}
		GameData.Instance.PlayPopSound();
		productInfoArray[num2 + 1] = num4;
		CmdUpdateArrayValues(num2, productIDToAdd, num4);
	}

	public void RemoveItemFromRow(int containerNumber)
	{
		if (!FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestRP())
		{
			return;
		}
		bool flag = !base.isServer && FsmVariables.GlobalVariables.FindFsmBool("HighLatencyMode").Value;
		if (flag && highLatencyCooldown)
		{
			return;
		}
		int num = containerNumber * 2;
		int num2 = productInfoArray[num];
		int num3 = productInfoArray[num + 1];
		if (num2 == -1 || num3 <= 0)
		{
			return;
		}
		PlayerNetwork component = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		if (component.equippedItem != 1)
		{
			return;
		}
		if (component.extraParameter1 != num2 && component.extraParameter2 > 0)
		{
			GameCanvas.Instance.CreateCanvasNotification("message13");
			return;
		}
		int maxItemsPerBox = ProductListing.Instance.productPrefabs[num2].GetComponent<Data_Product>().maxItemsPerBox;
		if (component.extraParameter2 >= maxItemsPerBox)
		{
			GameCanvas.Instance.CreateCanvasNotification("message12");
			return;
		}
		if (component.extraParameter2 == 0 && (bool)component.instantiatedOBJ)
		{
			component.extraParameter1 = num2;
			component.UpdateBoxContents(num2);
		}
		if (flag)
		{
			StartCoroutine(HighLatencyCoroutine());
			int value = maxItemsPerBox - component.extraParameter2;
			value = Mathf.Clamp(value, 1, 5);
			int num4 = value;
			if (num3 < value)
			{
				num4 = num3;
			}
			component.extraParameter2 += num4;
			num3 -= num4;
		}
		else
		{
			component.extraParameter2++;
			num3--;
		}
		GameData.Instance.PlayPop2Sound();
		productInfoArray[num + 1] = num3;
		CmdUpdateArrayValues(num, num2, num3);
	}

	public void AddItemFromOrderingTray(int containerNumber, int productIDToAdd)
	{
		GameObject instantiatedOBJ = FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ;
		if (!instantiatedOBJ || !instantiatedOBJ.GetComponent<OrderingTray>() || !FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestRP())
		{
			return;
		}
		if (!productlistComponent)
		{
			productlistComponent = GameData.Instance.GetComponent<ProductListing>();
		}
		GameObject gameObject = productlistComponent.productPrefabs[productIDToAdd];
		Vector3 size = gameObject.GetComponent<BoxCollider>().size;
		if (isVolumeRestricted && size.x * size.y * size.z < productVolumeLimit)
		{
			GameCanvas.Instance.CreateCanvasNotification("message20");
			return;
		}
		if (gameObject.GetComponent<Data_Product>().productContainerClass != containerClass)
		{
			GameCanvas.Instance.CreateCanvasNotification("message0");
			return;
		}
		bool isStackable = gameObject.GetComponent<Data_Product>().isStackable;
		int value = Mathf.FloorToInt(shelfLength / (size.x * 1.1f));
		value = Mathf.Clamp(value, 1, 100);
		int value2 = Mathf.FloorToInt(shelfWidth / (size.z * 1.1f));
		value2 = Mathf.Clamp(value2, 1, 100);
		int num = value * value2;
		if (isStackable)
		{
			int value3 = Mathf.FloorToInt(shelfHeight / (size.y * 1.1f));
			value3 = Mathf.Clamp(value3, 1, 100);
			num = value * value2 * value3;
		}
		int num2 = containerNumber * 2;
		int num3 = productInfoArray[num2];
		int num4 = productInfoArray[num2 + 1];
		if (num4 >= num)
		{
			GameCanvas.Instance.CreateCanvasNotification("message1");
			return;
		}
		if (num3 != productIDToAdd && num3 != -1 && num4 != 0)
		{
			GameCanvas.Instance.CreateCanvasNotification("message2");
			return;
		}
		num4++;
		GameData.Instance.PlayPopSound();
		productInfoArray[num2 + 1] = num4;
		CmdUpdateArrayValues(num2, productIDToAdd, num4);
		instantiatedOBJ.GetComponent<OrderingTray>().PlacingItemCallback(productIDToAdd);
	}

	public void RemoveItemFromOrderingTray(int containerNumber)
	{
		GameObject instantiatedOBJ = FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ;
		if ((bool)instantiatedOBJ && (bool)instantiatedOBJ.GetComponent<OrderingTray>() && FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestRP())
		{
			int num = containerNumber * 2;
			int num2 = productInfoArray[num];
			int num3 = productInfoArray[num + 1];
			if (num2 != -1 && num3 > 0 && FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem == 9 && instantiatedOBJ.GetComponent<OrderingTray>().AddItemToTray(num2))
			{
				num3--;
				GameData.Instance.PlayPop2Sound();
				productInfoArray[num + 1] = num3;
				CmdUpdateArrayValues(num, num2, num3);
				instantiatedOBJ.GetComponent<OrderingTray>().GettingItemCallback(num2);
			}
		}
	}

	public void EmployeeAddsItemToRow(int rowIndex, int quantity)
	{
		int num = productInfoArray[rowIndex];
		int num2 = productInfoArray[rowIndex + 1];
		num2 += quantity;
		productInfoArray[rowIndex + 1] = num2;
		AchievementsManager.Instance.CmdAddAchievementPoint(1, quantity);
		RpcUpdateObjectOnClients(rowIndex, num, num2, num);
	}

	public void NPCGetsItemFromRow(int productIDToBuyAndRemove)
	{
		for (int num = productInfoArray.Length / 2 - 1; num >= 0; num--)
		{
			if (productInfoArray[num * 2] == productIDToBuyAndRemove)
			{
				int num2 = productInfoArray[num * 2 + 1];
				if (num2 > 0)
				{
					num2--;
					productInfoArray[num * 2 + 1] = num2;
					RpcUpdateObjectOnClients(num * 2, productIDToBuyAndRemove, num2, productIDToBuyAndRemove);
					break;
				}
			}
		}
	}

	private void ItemSpawner()
	{
		if (!productlistComponent)
		{
			productlistComponent = GameData.Instance.GetComponent<ProductListing>();
		}
		GameObject gameObject = base.transform.Find("ProductContainer").gameObject;
		int childCount = gameObject.transform.childCount;
		for (int i = 0; i < childCount; i++)
		{
			int num = productInfoArray[i * 2];
			int num2 = productInfoArray[i * 2 + 1];
			Transform child = gameObject.transform.GetChild(i);
			int childCount2 = child.childCount;
			if (num == -1)
			{
				continue;
			}
			int num3 = num2 - childCount2;
			if (num3 == 0)
			{
				continue;
			}
			if (num3 > 0)
			{
				GameObject gameObject2 = productlistComponent.productPrefabs[num];
				Vector3 size = gameObject2.GetComponent<BoxCollider>().size;
				int value = Mathf.FloorToInt(shelfLength / (size.x * 1.1f));
				value = Mathf.Clamp(value, 1, 100);
				int value2 = Mathf.FloorToInt(shelfWidth / (size.z * 1.1f));
				value2 = Mathf.Clamp(value2, 1, 100);
				bool isStackable = gameObject2.GetComponent<Data_Product>().isStackable;
				float num4 = (shelfLength - ((float)(value - 1) * (size.x * 1.1f) + size.x)) / 2f;
				float num5 = (shelfWidth - ((float)(value2 - 1) * (size.z * 1.1f) + size.z)) / 2f;
				for (int j = childCount2; j < num2; j++)
				{
					int num6 = 0;
					if (isStackable)
					{
						num6 = j / (value2 * value);
					}
					int num7 = j / value - num6 * value2;
					int num8 = j % value;
					GameObject obj = Object.Instantiate(gameObject2);
					obj.transform.SetParent(child);
					obj.transform.localPosition = new Vector3((float)num7 * size.z * 1.1f, (float)num6 * size.y, (float)num8 * size.x * 1.1f) + new Vector3(size.z / 2f + num5, 0f, size.x / 2f + num4);
					obj.transform.localRotation = Quaternion.Euler(productAngleOffset);
				}
				continue;
			}
			num3 = Mathf.Abs(num3);
			for (int k = 0; k < num3; k++)
			{
				if (child.childCount == 0)
				{
					break;
				}
				Object.Destroy(child.GetChild(child.childCount - 1 - k).gameObject);
			}
		}
	}

	public void GetStorageBox(int boxIndex)
	{
		if (!FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestRP())
		{
			return;
		}
		int num = boxIndex * 2;
		int num2 = productInfoArray[num];
		int num3 = productInfoArray[num + 1];
		PlayerNetwork component = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		if (component.equippedItem == 1 && num3 >= 0 && num2 == component.extraParameter1 && component.extraParameter2 > 0 && num2 >= 0 && num2 < ProductListing.Instance.productPrefabs.Length)
		{
			int maxItemsPerBox = ProductListing.Instance.productPrefabs[num2].GetComponent<Data_Product>().maxItemsPerBox;
			if (num3 == maxItemsPerBox)
			{
				GameCanvas.Instance.CreateCanvasNotification("message12");
			}
			else if (num3 + component.extraParameter2 > maxItemsPerBox)
			{
				int num4 = maxItemsPerBox - num3;
				component.extraParameter2 -= num4;
				CmdUpdateArrayValuesStorage(num, component.extraParameter1, maxItemsPerBox);
				GameData.Instance.PlayPopSound();
			}
			else
			{
				CmdUpdateArrayValuesStorage(num, component.extraParameter1, num3 + component.extraParameter2);
				component.extraParameter2 = 0;
				GameData.Instance.PlayPopSound();
			}
		}
		else if (num3 <= 0 && component.equippedItem == 1)
		{
			if (base.transform.Find("BoxContainer").gameObject.transform.GetChild(boxIndex).transform.childCount <= 0)
			{
				component.CmdChangeEquippedItem(0);
				CmdUpdateArrayValuesStorage(num, component.extraParameter1, component.extraParameter2);
			}
		}
		else
		{
			if (num2 < 0 || num3 <= -1)
			{
				return;
			}
			if (component.equippedItem == 0)
			{
				component.CmdChangeEquippedItem(1);
				component.extraParameter1 = num2;
				component.extraParameter2 = num3;
				if ((bool)base.transform.Find("CanvasSigns"))
				{
					CmdUpdateArrayValuesStorage(num, num2, -1);
				}
				else
				{
					CmdUpdateArrayValuesStorage(num, -1, -1);
				}
			}
			else if (component.equippedItem != 6 && component.equippedItem != 9)
			{
				GameCanvas.Instance.CreateCanvasNotification("message7");
			}
		}
	}

	public void BoxItemFromStorageTray(int boxIndex, bool adding)
	{
		GameObject instantiatedOBJ = FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ;
		if (!instantiatedOBJ || !instantiatedOBJ.GetComponent<OrderingTray>() || !FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestRP())
		{
			return;
		}
		int num = boxIndex * 2;
		int num2 = productInfoArray[num];
		int num3 = productInfoArray[num + 1];
		int maxItemsPerBox = ProductListing.Instance.productPrefabs[num2].GetComponent<Data_Product>().maxItemsPerBox;
		if (adding)
		{
			if (num3 == maxItemsPerBox)
			{
				GameCanvas.Instance.CreateCanvasNotification("message12");
			}
			else if (num2 >= 0 && num3 >= 0)
			{
				num3++;
				CmdUpdateArrayValuesStorage(num, num2, num3);
				instantiatedOBJ.GetComponent<OrderingTray>().PlacingItemCallback(num2);
				GameData.Instance.PlayPopSound();
			}
		}
		else if (num3 > 0 && num2 >= 0 && num3 > 0 && instantiatedOBJ.GetComponent<OrderingTray>().AddItemToTray(num2))
		{
			num3--;
			CmdUpdateArrayValuesStorage(num, num2, num3);
			instantiatedOBJ.GetComponent<OrderingTray>().GettingItemCallback(num2);
			GameData.Instance.PlayPop2Sound();
		}
	}

	public void ClearStorageBox(int boxIndex)
	{
		int num = boxIndex * 2;
		int num2 = productInfoArray[num];
		int num3 = productInfoArray[num + 1];
		PlayerNetwork component = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		if (component.equippedItem == 2 && num2 >= 0 && num3 < 0)
		{
			component.transform.Find("ResetProductSound").GetComponent<AudioSource>().Play();
			CmdUpdateArrayValuesStorage(num, -1, -1);
		}
	}

	public void EmployeeUpdateArrayValuesStorage(int index, int PID, int PNUMBER)
	{
		productInfoArray[index] = PID;
		productInfoArray[index + 1] = PNUMBER;
		RpcUpdateArrayValuesStorage(index, PID, PNUMBER);
	}

	[Command(requiresAuthority = false)]
	private void CmdUpdateArrayValuesStorage(int index, int PID, int PNUMBER)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(PID);
		writer.WriteInt(PNUMBER);
		SendCommandInternal("System.Void Data_Container::CmdUpdateArrayValuesStorage(System.Int32,System.Int32,System.Int32)", -151239219, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateArrayValuesStorage(int index, int PID, int PNUMBER)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(PID);
		writer.WriteInt(PNUMBER);
		SendRPCInternal("System.Void Data_Container::RpcUpdateArrayValuesStorage(System.Int32,System.Int32,System.Int32)", -584408438, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void BoxSpawner()
	{
		GameObject gameObject = base.transform.Find("BoxContainer").gameObject;
		GameObject gameObject2 = null;
		if ((bool)base.transform.Find("CanvasSigns"))
		{
			gameObject2 = base.transform.Find("CanvasSigns").gameObject;
		}
		int childCount = gameObject.transform.childCount;
		for (int i = 0; i < childCount; i++)
		{
			int num = productInfoArray[i * 2];
			int num2 = productInfoArray[i * 2 + 1];
			Transform transform = null;
			if ((bool)gameObject2)
			{
				transform = gameObject2.transform.GetChild(i);
			}
			bool flag = gameObject.transform.GetChild(i).childCount > 0;
			if (num2 <= -1)
			{
				if (flag)
				{
					Object.Destroy(gameObject.transform.GetChild(i).transform.GetChild(0).gameObject);
					if (num >= 0 && (bool)transform)
					{
						transform.gameObject.SetActive(value: true);
						transform.GetComponent<Image>().sprite = ProductListing.Instance.productSprites[num];
					}
				}
				else if (num >= 0 && (bool)transform)
				{
					transform.gameObject.SetActive(value: true);
					transform.GetComponent<Image>().sprite = ProductListing.Instance.productSprites[num];
				}
				else if (num < 0 && (bool)transform && gameObject2.activeSelf)
				{
					transform.gameObject.SetActive(value: false);
				}
			}
			else if (num >= 0 && !flag)
			{
				if ((bool)transform)
				{
					transform.gameObject.SetActive(value: false);
				}
				GameObject gameObject3 = Object.Instantiate(storageBoxPrefab, gameObject.transform.GetChild(i));
				gameObject3.transform.localPosition = Vector3.zero;
				ProductListing.Instance.SetBoxColor(gameObject3, num);
				gameObject3.transform.Find("ProductSprite").GetComponent<SpriteRenderer>().sprite = ProductListing.Instance.productSprites[num];
				gameObject3.transform.Find("ProductQuantity").GetComponent<TextMeshPro>().text = "x" + num2;
			}
			else if (num >= 0 && flag)
			{
				gameObject.transform.GetChild(i).transform.GetChild(0).transform.Find("ProductQuantity").GetComponent<TextMeshPro>().text = "x" + num2;
			}
		}
	}

	public void AddItemToCheckout(float ItemValue, GameObject NPCTrigger)
	{
		NetworkproductsLeft = productsLeft - 1;
		checkoutProductValue += ItemValue;
		checkoutProductValue = Mathf.Round(checkoutProductValue * 100f) / 100f;
		currentNPC = NPCTrigger;
		RpcAddItemToCheckout(checkoutProductValue, NPCTrigger);
	}

	[ClientRpc]
	private void RpcAddItemToCheckout(float productCost, GameObject NPC)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(productCost);
		writer.WriteGameObject(NPC);
		SendRPCInternal("System.Void Data_Container::RpcAddItemToCheckout(System.Single,UnityEngine.GameObject)", 101859644, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void BagsActivation()
	{
		productsCounterForBags++;
		int index = Mathf.Clamp(productsCounterForBags / 6, 0, 5);
		base.transform.Find("Bags").transform.GetChild(index).gameObject.SetActive(value: true);
	}

	private void BagsDeactivation()
	{
		productsCounterForBags = 0;
		foreach (Transform item in base.transform.Find("Bags"))
		{
			item.gameObject.SetActive(value: false);
		}
	}

	[ClientRpc]
	public void SelfCheckoutActivateBag()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void Data_Container::SelfCheckoutActivateBag()", 1151481752, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void SelfCheckoutDeactivateBag()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void Data_Container::SelfCheckoutDeactivateBag()", 252060505, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void RpcShowPaymentMethod(int index)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		SendRPCInternal("System.Void Data_Container::RpcShowPaymentMethod(System.Int32)", 66677187, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdActivateCashMethod(int amountToPay)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(amountToPay);
		SendCommandInternal("System.Void Data_Container::CmdActivateCashMethod(System.Int32)", -1046723695, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdActivateCreditCardMethod()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void Data_Container::CmdActivateCreditCardMethod()", 893267412, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void RpcHidePaymentMethod(int index, int amountGiven)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(amountGiven);
		SendRPCInternal("System.Void Data_Container::RpcHidePaymentMethod(System.Int32,System.Int32)", 1704799803, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void UpdateCash(float amountToAdd)
	{
		if (!FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestCP())
		{
			return;
		}
		TextMeshProUGUI component = base.transform.Find("CashRegisterCanvas/Container/CurrentAmount").GetComponent<TextMeshProUGUI>();
		GameObject gameObject = base.transform.Find("CashRegister/MoneyGivenBack").gameObject;
		amountToAdd = Mathf.Round(amountToAdd * 100f) / 100f;
		if ((double)Mathf.Abs(amountToAdd) < 0.9)
		{
			moneySoundAudioSource.clip = audioCoinsArray[Random.Range(0, audioCoinsArray.Length - 1)];
			moneySoundAudioSource.Play();
		}
		else
		{
			moneySoundAudioSource.clip = audioNotesArray[Random.Range(0, audioNotesArray.Length - 1)];
			moneySoundAudioSource.Play();
		}
		if (currentAmountToReturn + amountToAdd < 0f)
		{
			currentAmountToReturn = 0f;
			component.color = Color.red;
			component.text = "$" + currentAmountToReturn;
			gameObject.SetActive(value: false);
			allowMoneyReturn = false;
			return;
		}
		currentAmountToReturn += amountToAdd;
		component.text = ProductListing.Instance.ConvertFloatToTextPrice(currentAmountToReturn);
		currentAmountToReturn = Mathf.Round(currentAmountToReturn * 100f) / 100f;
		if (currentAmountToReturn < moneyToReturn)
		{
			gameObject.SetActive(value: false);
			component.color = Color.red;
			allowMoneyReturn = false;
		}
		else
		{
			gameObject.SetActive(value: true);
			component.color = Color.green;
			allowMoneyReturn = true;
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdReceivePayment(float returnDifference)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(returnDifference);
		SendCommandInternal("System.Void Data_Container::CmdReceivePayment(System.Single)", -1418628073, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void AuxReceivePayment(float returnDifference, bool applyEmployeeRate)
	{
		checkoutQueue[0] = false;
		if ((bool)currentNPC)
		{
			currentNPC.GetComponent<NPC_Info>().state = 10;
		}
		float num = (applyEmployeeRate ? NPC_Manager.Instance.extraCheckoutMoney : 1f);
		returnDifference = Mathf.Round(returnDifference * 100f) / 100f;
		float num2 = checkoutProductValue * num - returnDifference;
		GameData.Instance.CmdAlterFunds(num2);
		checkoutProductValue = 0f;
		NetworkproductsLeft = 0;
		RpcClearCheckoutData();
		AchievementsManager.Instance.CmdMaxFundsCheckouted(num2);
		internalProductListForEmployees.Clear();
	}

	[ClientRpc]
	public void RpcClearCheckoutData()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void Data_Container::RpcClearCheckoutData()", 2061937503, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void ResetQueue()
	{
		RpcClearCheckoutData();
		BagsDeactivation();
		NetworkproductsLeft = 0;
		if (internalProductListForEmployees.Count > 0)
		{
			foreach (GameObject internalProductListForEmployee in internalProductListForEmployees)
			{
				if ((bool)internalProductListForEmployee)
				{
					internalProductListForEmployee.GetComponent<ProductCheckoutSpawn>().EndDayDestroy();
				}
			}
			internalProductListForEmployees.Clear();
		}
		for (int i = 0; i < checkoutQueue.Length; i++)
		{
			checkoutQueue[i] = false;
		}
	}

	public void ResetCheckoutQueue()
	{
		SelfCheckoutDeactivateBag();
		checkoutQueue[0] = false;
	}

	public void ResetFirstCustomer()
	{
		if (!base.isServer)
		{
			GameCanvas.Instance.CreateCanvasNotification("checkoutredbutton");
		}
		else
		{
			CmdResetFirstCustomer();
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdResetFirstCustomer()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void Data_Container::CmdResetFirstCustomer()", -46634848, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdCloseCheckout()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void Data_Container::CmdCloseCheckout()", -1341494929, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdRequestCloseState()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void Data_Container::CmdRequestCloseState()", 2032648167, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcCloseCheckout(bool isClosed)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(isClosed);
		SendRPCInternal("System.Void Data_Container::RpcCloseCheckout(System.Boolean)", 1683512443, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void ActivateShelvesFromLoad()
	{
		StartCoroutine(ActivateShelvesFromLoadCoroutine());
	}

	private IEnumerator ActivateShelvesFromLoadCoroutine()
	{
		yield return new WaitForSeconds(Random.Range(1f, 5f));
		if (containerClass == 69)
		{
			BoxSpawner();
		}
		else if (containerClass != 99)
		{
			ItemSpawner();
		}
	}

	public void AddMoveEffect()
	{
		ownerMaterial = GetComponent<MeshRenderer>().sharedMaterial;
		Effect(AddEffect: false);
	}

	public void RemoveMoveEffect()
	{
		Effect(AddEffect: true);
	}

	private void Effect(bool AddEffect)
	{
		movingMaterial = GameData.Instance.movingMaterial;
		Material material = (AddEffect ? ownerMaterial : movingMaterial);
		colliderArray = GetComponents<BoxCollider>();
		if ((bool)base.transform.Find("OverlapCollider"))
		{
			overlapOBJ = base.transform.Find("OverlapCollider").gameObject;
			overlapOBJ.SetActive(AddEffect);
		}
		BoxCollider[] array = colliderArray;
		for (int i = 0; i < array.Length; i++)
		{
			array[i].enabled = AddEffect;
		}
		MeshRenderer[] array2 = mRenderersArray;
		for (int i = 0; i < array2.Length; i++)
		{
			array2[i].material = material;
		}
	}

	public void BreakingEvent()
	{
		brokenDay = GameData.Instance.gameDay;
		isBroken = true;
		RpcBreakingEvent();
	}

	[ClientRpc]
	private void RpcBreakingEvent()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void Data_Container::RpcBreakingEvent()", 1315425989, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdFixBreakingEvent()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void Data_Container::CmdFixBreakingEvent()", -197147739, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcFixBreakingEvent()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void Data_Container::RpcFixBreakingEvent()", 2075309962, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void DebugAdd(int productIDIndex, int productIDToAdd, int numberOfProducts)
	{
		CmdUpdateArrayValues(productIDIndex, productIDToAdd, numberOfProducts);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdUpdateArrayValues__Int32__Int32__Int32(int index, int PID, int PNUMBER)
	{
		int oldPID = productInfoArray[index];
		productInfoArray[index] = PID;
		productInfoArray[index + 1] = PNUMBER;
		RpcUpdateObjectOnClients(index, PID, PNUMBER, oldPID);
	}

	protected static void InvokeUserCode_CmdUpdateArrayValues__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUpdateArrayValues called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdUpdateArrayValues__Int32__Int32__Int32(reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdContainerClear__Int32(int index)
	{
		int oldPID = productInfoArray[index];
		productInfoArray[index] = -1;
		productInfoArray[index + 1] = 0;
		RpcUpdateObjectOnClients(index, -1, 0, oldPID);
	}

	protected static void InvokeUserCode_CmdContainerClear__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdContainerClear called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdContainerClear__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcUpdateObjectOnClients__Int32__Int32__Int32__Int32(int index, int PID, int PNUMBER, int oldPID)
	{
		if (!base.isServer)
		{
			productInfoArray[index] = PID;
			productInfoArray[index + 1] = PNUMBER;
		}
		ItemSpawner();
		if ((oldPID < 0 && PID >= 0) || (oldPID >= 0 && PID < 0) || oldPID != PID)
		{
			if (!productlistComponent)
			{
				productlistComponent = GameData.Instance.GetComponent<ProductListing>();
			}
			productlistComponent.updateShelvesPrices();
		}
	}

	protected static void InvokeUserCode_RpcUpdateObjectOnClients__Int32__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateObjectOnClients called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcUpdateObjectOnClients__Int32__Int32__Int32__Int32(reader.ReadInt(), reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdUpdateArrayValuesStorage__Int32__Int32__Int32(int index, int PID, int PNUMBER)
	{
		productInfoArray[index] = PID;
		productInfoArray[index + 1] = PNUMBER;
		RpcUpdateArrayValuesStorage(index, PID, PNUMBER);
	}

	protected static void InvokeUserCode_CmdUpdateArrayValuesStorage__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUpdateArrayValuesStorage called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdUpdateArrayValuesStorage__Int32__Int32__Int32(reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcUpdateArrayValuesStorage__Int32__Int32__Int32(int index, int PID, int PNUMBER)
	{
		if (!base.isServer)
		{
			productInfoArray[index] = PID;
			productInfoArray[index + 1] = PNUMBER;
		}
		BoxSpawner();
	}

	protected static void InvokeUserCode_RpcUpdateArrayValuesStorage__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateArrayValuesStorage called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcUpdateArrayValuesStorage__Int32__Int32__Int32(reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcAddItemToCheckout__Single__GameObject(float productCost, GameObject NPC)
	{
		GetComponent<AudioSource>().Play();
		currentNPC = NPC;
		checkoutProductValue = productCost;
		base.transform.Find("CashRegisterCanvas/VisibleCheckoutCost").GetComponent<TextMeshProUGUI>().text = ProductListing.Instance.ConvertFloatToTextPrice(checkoutProductValue);
		base.transform.Find("CreditCardCanvas/VisibleCheckoutCost2").GetComponent<TextMeshProUGUI>().text = ProductListing.Instance.ConvertFloatToTextPrice(checkoutProductValue);
		BagsActivation();
	}

	protected static void InvokeUserCode_RpcAddItemToCheckout__Single__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddItemToCheckout called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcAddItemToCheckout__Single__GameObject(reader.ReadFloat(), reader.ReadGameObject());
		}
	}

	protected void UserCode_SelfCheckoutActivateBag()
	{
		GetComponent<AudioSource>().Play();
		productsCounterForBags++;
		int index = Mathf.Clamp(productsCounterForBags / 6, 0, 3);
		base.transform.Find("Bags").transform.GetChild(index).gameObject.SetActive(value: true);
	}

	protected static void InvokeUserCode_SelfCheckoutActivateBag(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC SelfCheckoutActivateBag called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_SelfCheckoutActivateBag();
		}
	}

	protected void UserCode_SelfCheckoutDeactivateBag()
	{
		productsCounterForBags = 0;
		foreach (Transform item in base.transform.Find("Bags"))
		{
			item.gameObject.SetActive(value: false);
		}
	}

	protected static void InvokeUserCode_SelfCheckoutDeactivateBag(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC SelfCheckoutDeactivateBag called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_SelfCheckoutDeactivateBag();
		}
	}

	protected void UserCode_RpcShowPaymentMethod__Int32(int index)
	{
		if (index == 0)
		{
			base.transform.Find("Payments/Payment_Money").gameObject.SetActive(value: true);
		}
		else
		{
			base.transform.Find("Payments/Payment_Card").gameObject.SetActive(value: true);
		}
	}

	protected static void InvokeUserCode_RpcShowPaymentMethod__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcShowPaymentMethod called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcShowPaymentMethod__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdActivateCashMethod__Int32(int amountToPay)
	{
		RpcHidePaymentMethod(0, amountToPay);
	}

	protected static void InvokeUserCode_CmdActivateCashMethod__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdActivateCashMethod called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdActivateCashMethod__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdActivateCreditCardMethod()
	{
		RpcHidePaymentMethod(1, 0);
	}

	protected static void InvokeUserCode_CmdActivateCreditCardMethod(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdActivateCreditCardMethod called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdActivateCreditCardMethod();
		}
	}

	protected void UserCode_RpcHidePaymentMethod__Int32__Int32(int index, int amountGiven)
	{
		currentAmountToReturn = 0f;
		moneyToReturn = 0f;
		if (index == 0)
		{
			base.transform.Find("Payments/Payment_Money").gameObject.SetActive(value: false);
			moneyToReturn = (float)amountGiven - checkoutProductValue;
			moneyToReturn = Mathf.Round(moneyToReturn * 100f) / 100f;
			base.transform.Find("CashRegister").GetComponent<AudioSource>().Play();
			base.transform.Find("CashRegister/CashRegisterDrawer").transform.localPosition = new Vector3(-0.28f, 0f, 0f);
			base.transform.Find("CashRegisterCanvas/Container").gameObject.SetActive(value: true);
			base.transform.Find("CashRegisterCanvas/Container/MoneyGiven").GetComponent<TextMeshProUGUI>().text = ProductListing.Instance.ConvertFloatToTextPrice(amountGiven);
			base.transform.Find("CashRegisterCanvas/Container/MoneyToReturn").GetComponent<TextMeshProUGUI>().text = ProductListing.Instance.ConvertFloatToTextPrice(moneyToReturn);
			base.transform.Find("CashRegisterCanvas/Container/CurrentAmount").GetComponent<TextMeshProUGUI>().text = "$0,00";
		}
		else
		{
			base.transform.Find("Payments/Payment_Card").gameObject.SetActive(value: false);
			base.transform.Find("CreditCardCanvas/Container").gameObject.SetActive(value: true);
		}
	}

	protected static void InvokeUserCode_RpcHidePaymentMethod__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcHidePaymentMethod called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcHidePaymentMethod__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdReceivePayment__Single(float returnDifference)
	{
		AuxReceivePayment(returnDifference, applyEmployeeRate: false);
	}

	protected static void InvokeUserCode_CmdReceivePayment__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdReceivePayment called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdReceivePayment__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_RpcClearCheckoutData()
	{
		checkoutProductValue = 0f;
		allowMoneyReturn = false;
		base.transform.Find("CashRegisterCanvas/VisibleCheckoutCost").GetComponent<TextMeshProUGUI>().text = "$0,00";
		base.transform.Find("CreditCardCanvas/VisibleCheckoutCost2").GetComponent<TextMeshProUGUI>().text = "$0,00";
		base.transform.Find("CashRegisterCanvas/Container").gameObject.SetActive(value: false);
		base.transform.Find("CashRegisterCanvas/Container/CurrentAmount").GetComponent<TextMeshProUGUI>().color = Color.red;
		base.transform.Find("CashRegister/MoneyGivenBack").gameObject.SetActive(value: false);
		base.transform.Find("CashRegister/CashRegisterDrawer").transform.localPosition = new Vector3(0f, 0f, 0f);
		base.transform.Find("CreditCardCanvas/Container").gameObject.SetActive(value: false);
		base.transform.Find("Payments/Payment_Card").gameObject.SetActive(value: false);
		base.transform.Find("Payments/Payment_Money").gameObject.SetActive(value: false);
		BagsDeactivation();
	}

	protected static void InvokeUserCode_RpcClearCheckoutData(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcClearCheckoutData called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcClearCheckoutData();
		}
	}

	protected void UserCode_CmdResetFirstCustomer()
	{
		if (!currentNPC || currentNPC.GetComponent<NPC_Info>().productsIDCarrying.Count > 0)
		{
			return;
		}
		currentNPC.GetComponent<NPC_Info>().state = 10;
		currentNPC = null;
		checkoutQueue[0] = false;
		NetworkproductsLeft = 0;
		RpcClearCheckoutData();
		GameData.Instance.CmdAlterFunds(checkoutProductValue * 0.8f);
		if (internalProductListForEmployees.Count <= 0)
		{
			return;
		}
		foreach (GameObject internalProductListForEmployee in internalProductListForEmployees)
		{
			if ((bool)internalProductListForEmployee)
			{
				internalProductListForEmployee.GetComponent<ProductCheckoutSpawn>().EndDayDestroy();
			}
		}
		internalProductListForEmployees.Clear();
	}

	protected static void InvokeUserCode_CmdResetFirstCustomer(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdResetFirstCustomer called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdResetFirstCustomer();
		}
	}

	protected void UserCode_CmdCloseCheckout()
	{
		isCheckoutClosed = !isCheckoutClosed;
		if (!isCheckoutClosed)
		{
			NPC_Manager.Instance.UpdateEmployeeCheckoutsFromDataContainer();
		}
		RpcCloseCheckout(isCheckoutClosed);
	}

	protected static void InvokeUserCode_CmdCloseCheckout(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdCloseCheckout called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdCloseCheckout();
		}
	}

	protected void UserCode_CmdRequestCloseState()
	{
		RpcCloseCheckout(isCheckoutClosed);
	}

	protected static void InvokeUserCode_CmdRequestCloseState(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestCloseState called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdRequestCloseState();
		}
	}

	protected void UserCode_RpcCloseCheckout__Boolean(bool isClosed)
	{
		if (isClosed)
		{
			base.transform.Find("CheckoutLaneSign").GetComponent<MeshRenderer>().material.SetColor("_EmissionColor", Color.red * 30f);
			base.transform.Find("CheckoutLaneSign/Canvas/Text1").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("checkoutlane");
			base.transform.Find("CheckoutLaneSign/Canvas/Text2").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("checkoutlane");
			GameData.Instance.PlayPop2Sound();
		}
		else
		{
			base.transform.Find("CheckoutLaneSign").GetComponent<MeshRenderer>().material.SetColor("_EmissionColor", Color.green * 30f);
			base.transform.Find("CheckoutLaneSign/Canvas/Text1").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("checkoutlane1");
			base.transform.Find("CheckoutLaneSign/Canvas/Text2").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("checkoutlane1");
			GameData.Instance.PlayPopSound();
		}
	}

	protected static void InvokeUserCode_RpcCloseCheckout__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcCloseCheckout called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcCloseCheckout__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcBreakingEvent()
	{
		associatedBrokenPanelFixOBJ = Object.Instantiate(fixPrefabOBJ, base.transform);
		associatedBrokenPanelFixOBJ.transform.localPosition = localBrokenPosition;
		associatedBrokenPanelFixOBJ.transform.localRotation = Quaternion.Euler(localBrokenRotation);
		associatedBrokenPanelFixOBJ.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("ReferenceOBJ").Value = base.gameObject;
		associatedBrokenPanelFixOBJ.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("ReferenceIndex").Value = 0;
		if ((bool)puddlePrefabOBJ)
		{
			associatedPuddleOBJ = Object.Instantiate(puddlePrefabOBJ);
			associatedPuddleOBJ.transform.position = base.transform.Find("Standspot").position;
			associatedPuddleOBJ.transform.rotation = base.transform.Find("Standspot").rotation;
			if (base.isServer)
			{
				associatedPuddleOBJ.GetComponent<PlayMakerFSM>().enabled = true;
			}
		}
	}

	protected static void InvokeUserCode_RpcBreakingEvent(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcBreakingEvent called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcBreakingEvent();
		}
	}

	protected void UserCode_CmdFixBreakingEvent()
	{
		if (isBroken)
		{
			isBroken = false;
			if ((bool)associatedBrokenDisclaimerOBJ)
			{
				NetworkServer.Destroy(associatedBrokenDisclaimerOBJ);
			}
			NPC_Manager.Instance.RemoveFurnitureOBJFromList(base.gameObject);
			RpcFixBreakingEvent();
		}
	}

	protected static void InvokeUserCode_CmdFixBreakingEvent(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdFixBreakingEvent called on client.");
		}
		else
		{
			((Data_Container)obj).UserCode_CmdFixBreakingEvent();
		}
	}

	protected void UserCode_RpcFixBreakingEvent()
	{
		AchievementsManager.Instance.AddLocalAchievementPoint(21);
		if ((bool)associatedBrokenPanelFixOBJ)
		{
			Object.Destroy(associatedBrokenPanelFixOBJ);
		}
		if ((bool)associatedPuddleOBJ)
		{
			Object.Destroy(associatedPuddleOBJ);
		}
	}

	protected static void InvokeUserCode_RpcFixBreakingEvent(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcFixBreakingEvent called on server.");
		}
		else
		{
			((Data_Container)obj).UserCode_RpcFixBreakingEvent();
		}
	}

	static Data_Container()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdUpdateArrayValues(System.Int32,System.Int32,System.Int32)", InvokeUserCode_CmdUpdateArrayValues__Int32__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdContainerClear(System.Int32)", InvokeUserCode_CmdContainerClear__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdUpdateArrayValuesStorage(System.Int32,System.Int32,System.Int32)", InvokeUserCode_CmdUpdateArrayValuesStorage__Int32__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdActivateCashMethod(System.Int32)", InvokeUserCode_CmdActivateCashMethod__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdActivateCreditCardMethod()", InvokeUserCode_CmdActivateCreditCardMethod, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdReceivePayment(System.Single)", InvokeUserCode_CmdReceivePayment__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdResetFirstCustomer()", InvokeUserCode_CmdResetFirstCustomer, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdCloseCheckout()", InvokeUserCode_CmdCloseCheckout, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdRequestCloseState()", InvokeUserCode_CmdRequestCloseState, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(Data_Container), "System.Void Data_Container::CmdFixBreakingEvent()", InvokeUserCode_CmdFixBreakingEvent, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcUpdateObjectOnClients(System.Int32,System.Int32,System.Int32,System.Int32)", InvokeUserCode_RpcUpdateObjectOnClients__Int32__Int32__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcUpdateArrayValuesStorage(System.Int32,System.Int32,System.Int32)", InvokeUserCode_RpcUpdateArrayValuesStorage__Int32__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcAddItemToCheckout(System.Single,UnityEngine.GameObject)", InvokeUserCode_RpcAddItemToCheckout__Single__GameObject);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::SelfCheckoutActivateBag()", InvokeUserCode_SelfCheckoutActivateBag);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::SelfCheckoutDeactivateBag()", InvokeUserCode_SelfCheckoutDeactivateBag);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcShowPaymentMethod(System.Int32)", InvokeUserCode_RpcShowPaymentMethod__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcHidePaymentMethod(System.Int32,System.Int32)", InvokeUserCode_RpcHidePaymentMethod__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcClearCheckoutData()", InvokeUserCode_RpcClearCheckoutData);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcCloseCheckout(System.Boolean)", InvokeUserCode_RpcCloseCheckout__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcBreakingEvent()", InvokeUserCode_RpcBreakingEvent);
		RemoteProcedureCalls.RegisterRpc(typeof(Data_Container), "System.Void Data_Container::RpcFixBreakingEvent()", InvokeUserCode_RpcFixBreakingEvent);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.Int32[](writer, productInfoArray);
			writer.WriteInt(productsLeft);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Int32[](writer, productInfoArray);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(productsLeft);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref productInfoArray, null, GeneratedNetworkCode._Read_System.Int32[](reader));
			GeneratedSyncVarDeserialize(ref productsLeft, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productInfoArray, null, GeneratedNetworkCode._Read_System.Int32[](reader));
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productsLeft, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Data_Product
using UnityEngine;

public class Data_Product : MonoBehaviour
{
	public int productID;

	public int productContainerClass;

	public int boxClass;

	public int maxItemsPerBox = 20;

	public float basePricePerUnit;

	public string productBrand;

	public int productTier;

	public bool isStackable;

	[Space(10f)]
	public bool hasTrueCollider;

	public Vector3 trueCollider = new Vector3(0.1f, 0.1f, 0.1f);
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DataMakerCore
using System.Collections.Generic;
using UnityEngine;

public class DataMakerCore
{
	public static DataMakerProxyBase GetDataMakerProxyPointer<T>(T type, GameObject aProxy, string nameReference, bool silent)
	{
		if (aProxy == null)
		{
			if (!silent)
			{
				Debug.LogError("Null Proxy");
			}
			return null;
		}
		DataMakerProxyBase[] components = aProxy.GetComponents<DataMakerProxyBase>();
		List<DataMakerProxyBase> list = new List<DataMakerProxyBase>();
		DataMakerProxyBase[] array = components;
		foreach (DataMakerProxyBase dataMakerProxyBase in array)
		{
			if (dataMakerProxyBase.GetType().Equals(type))
			{
				list.Add(dataMakerProxyBase);
			}
		}
		components = list.ToArray();
		if (components.Length > 1)
		{
			if (nameReference == "" && !silent)
			{
				T val = type;
				string obj = val?.ToString();
				val = type;
				Debug.LogError("Several " + obj + " coexists on the same GameObject and no reference is given to find the expected " + val);
			}
			array = components;
			foreach (DataMakerProxyBase dataMakerProxyBase2 in array)
			{
				if (dataMakerProxyBase2.referenceName == nameReference)
				{
					return dataMakerProxyBase2;
				}
			}
			if (nameReference != "")
			{
				if (!silent)
				{
					T val = type;
					Debug.LogError(val?.ToString() + " not found for reference <" + nameReference + ">");
				}
				return null;
			}
		}
		else if (components.Length != 0)
		{
			if (nameReference != "" && nameReference != components[0].referenceName)
			{
				if (!silent)
				{
					T val = type;
					Debug.LogError(val?.ToString() + " reference do not match");
				}
				return null;
			}
			return components[0];
		}
		if (!silent)
		{
			T val = type;
			Debug.LogError(val?.ToString() + " not found");
		}
		return null;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DataMakerProxyBase
using UnityEngine;

public abstract class DataMakerProxyBase : MonoBehaviour
{
	public string referenceName = "";
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DataMakerXmlNodeListProxy
using UnityEngine;

public class DataMakerXmlNodeListProxy : DataMakerProxyBase
{
	[HideInInspector]
	public FsmXmlNodeList _FsmXmlNodeList;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DataMakerXmlNodeProxy
using UnityEngine;

public class DataMakerXmlNodeProxy : DataMakerProxyBase
{
	[HideInInspector]
	public FsmXmlNode _FsmXmlNode;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DataMakerXmlProxy
using System;
using System.Xml;
using UnityEngine;

public class DataMakerXmlProxy : DataMakerProxyBase
{
	public static bool delegationActive = true;

	public string storeInMemory = "";

	public bool useSource;

	public TextAsset XmlTextAsset;

	private XmlNode _xmlNode;

	[NonSerialized]
	[HideInInspector]
	public bool isDirty;

	[NonSerialized]
	[HideInInspector]
	public string content;

	public PlayMakerFSM FsmEventTarget;

	[HideInInspector]
	public XmlNode xmlNode
	{
		get
		{
			return _xmlNode;
		}
		set
		{
			_xmlNode = value;
		}
	}

	private void Awake()
	{
		if (useSource && XmlTextAsset != null)
		{
			InjectXmlString(XmlTextAsset.text);
		}
		RegisterEventHandlers();
	}

	public void RefreshStringVersion()
	{
		content = DataMakerXmlUtils.XmlNodeToString(xmlNode);
		isDirty = true;
	}

	public void InjectXmlNode(XmlNode node)
	{
		xmlNode = node;
		RegisterEventHandlers();
	}

	public void InjectXmlNodeList(XmlNodeList nodeList)
	{
		XmlDocument xmlDocument = new XmlDocument();
		xmlNode = xmlDocument.CreateElement("root");
		foreach (XmlNode node in nodeList)
		{
			xmlNode.AppendChild(node);
		}
		if (!string.IsNullOrEmpty(storeInMemory))
		{
			DataMakerXmlUtils.XmlStoreNode(xmlNode, storeInMemory);
		}
		RegisterEventHandlers();
	}

	public void InjectXmlString(string source)
	{
		xmlNode = DataMakerXmlUtils.StringToXmlNode(source);
		if (!string.IsNullOrEmpty(storeInMemory))
		{
			DataMakerXmlUtils.XmlStoreNode(xmlNode, storeInMemory);
		}
		RegisterEventHandlers();
	}

	private void UnregisterEventHandlers()
	{
	}

	private void RegisterEventHandlers()
	{
		if (xmlNode != null)
		{
			xmlNode.OwnerDocument.NodeChanged += NodeTouchedHandler;
			xmlNode.OwnerDocument.NodeInserted += NodeTouchedHandler;
			xmlNode.OwnerDocument.NodeRemoved += NodeTouchedHandler;
		}
	}

	private void NodeTouchedHandler(object src, XmlNodeChangedEventArgs args)
	{
		if (!(FsmEventTarget == null) && delegationActive)
		{
			if (args.Action == XmlNodeChangedAction.Insert)
			{
				PlayMakerUtils.SendEventToGameObject(FsmEventTarget, FsmEventTarget.gameObject, "XML / INSERTED");
			}
			else if (args.Action == XmlNodeChangedAction.Change)
			{
				PlayMakerUtils.SendEventToGameObject(FsmEventTarget, FsmEventTarget.gameObject, "XML / CHANGED");
			}
			else if (args.Action == XmlNodeChangedAction.Remove)
			{
				PlayMakerUtils.SendEventToGameObject(FsmEventTarget, FsmEventTarget.gameObject, "XML / REMOVED");
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DataMakerXmlUtils
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.XPath;
using UnityEngine;

public class DataMakerXmlUtils
{
	public static Dictionary<string, XmlNode> xmlNodeLUT;

	public static Dictionary<string, XmlNodeList> xmlNodeListLUT;

	public static bool IsDirty;

	public static string lastError = "";

	public static XmlNamespaceManager CreateNamespaceManager(XmlDocument Doc)
	{
		XPathNavigator xPathNavigator = Doc.SelectSingleNode("/*").CreateNavigator();
		XmlNamespaceManager xmlNamespaceManager = null;
		if (xPathNavigator.MoveToFirstNamespace())
		{
			xmlNamespaceManager = new XmlNamespaceManager(Doc.NameTable);
			do
			{
				xmlNamespaceManager.AddNamespace(string.IsNullOrEmpty(xPathNavigator.Name) ? "default" : xPathNavigator.Name, xPathNavigator.Value);
			}
			while (xPathNavigator.MoveToNextNamespace());
		}
		return xmlNamespaceManager;
	}

	public static void XmlStoreNode(XmlNode node, string reference)
	{
		IsDirty = true;
		if (string.IsNullOrEmpty(reference))
		{
			Debug.LogWarning("empty reference.");
		}
		if (xmlNodeLUT == null)
		{
			xmlNodeLUT = new Dictionary<string, XmlNode>();
		}
		xmlNodeLUT[reference] = node;
	}

	public static XmlNode XmlRetrieveNode(string reference)
	{
		if (string.IsNullOrEmpty(reference))
		{
			Debug.LogWarning("empty reference.");
		}
		if (xmlNodeLUT == null)
		{
			return null;
		}
		if (!xmlNodeLUT.ContainsKey(reference))
		{
			return null;
		}
		return xmlNodeLUT[reference];
	}

	public static bool DeleteXmlNodeReference(string reference)
	{
		IsDirty = true;
		if (string.IsNullOrEmpty(reference))
		{
			Debug.LogWarning("empty reference.");
		}
		if (!xmlNodeLUT.ContainsKey(reference))
		{
			return false;
		}
		return xmlNodeLUT.Remove(reference);
	}

	public static bool DeleteXmlNodListeReference(string reference)
	{
		IsDirty = true;
		if (string.IsNullOrEmpty(reference))
		{
			Debug.LogWarning("empty reference.");
		}
		if (!xmlNodeListLUT.ContainsKey(reference))
		{
			return false;
		}
		return xmlNodeListLUT.Remove(reference);
	}

	public static void XmlStoreNodeList(XmlNodeList nodeList, string reference)
	{
		IsDirty = true;
		if (string.IsNullOrEmpty(reference))
		{
			Debug.LogWarning("empty reference.");
		}
		if (xmlNodeListLUT == null)
		{
			xmlNodeListLUT = new Dictionary<string, XmlNodeList>();
		}
		xmlNodeListLUT[reference] = nodeList;
	}

	public static XmlNodeList XmlRetrieveNodeList(string reference)
	{
		if (string.IsNullOrEmpty(reference))
		{
			Debug.LogWarning("empty reference.");
		}
		return xmlNodeListLUT[reference];
	}

	public static XmlNode StringToXmlNode(string content)
	{
		XmlDocument xmlDocument = new XmlDocument();
		try
		{
			xmlDocument.LoadXml(content);
		}
		catch (XmlException ex)
		{
			lastError = ex.Message;
			return null;
		}
		return xmlDocument.DocumentElement;
	}

	public static string XmlNodeListToString(XmlNodeList nodeList)
	{
		return XmlNodeListToString(nodeList, 2);
	}

	public static string XmlNodeListToString(XmlNodeList nodeList, int indentation)
	{
		if (nodeList == null)
		{
			return "-- NULL --";
		}
		using StringWriter stringWriter = new StringWriter();
		using (XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter))
		{
			xmlTextWriter.Formatting = Formatting.Indented;
			xmlTextWriter.Indentation = indentation;
			xmlTextWriter.WriteRaw("<result>");
			foreach (XmlNode node in nodeList)
			{
				node.WriteTo(xmlTextWriter);
			}
			xmlTextWriter.WriteRaw("</result>");
		}
		return stringWriter.ToString();
	}

	public static string XmlNodeToString(XmlNode node)
	{
		return XmlNodeToString(node, 2);
	}

	public static string XmlNodeToString(XmlNode node, int indentation)
	{
		if (node == null)
		{
			return "-- NULL --";
		}
		using StringWriter stringWriter = new StringWriter();
		using (XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter))
		{
			xmlTextWriter.Formatting = Formatting.Indented;
			xmlTextWriter.Indentation = indentation;
			node.WriteTo(xmlTextWriter);
		}
		return stringWriter.ToString();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DayNight
using UnityEngine;

public class DayNight : MonoBehaviour
{
	public GameObject Day;

	public GameObject Night;

	public GameObject Rain;

	public Material SkyboxNight;

	public Material SkyboxDay;

	public Color FogColorNight;

	public Color FogColorDay;

	private void Start()
	{
	}

	private void Update()
	{
		if (Input.GetKeyDown("t"))
		{
			if (Day.activeSelf)
			{
				RenderSettings.skybox = SkyboxNight;
				RenderSettings.fogColor = FogColorNight;
				Night.SetActive(value: true);
				Day.SetActive(value: false);
			}
			else
			{
				RenderSettings.skybox = SkyboxDay;
				RenderSettings.fogColor = FogColorDay;
				Night.SetActive(value: false);
				Day.SetActive(value: true);
			}
		}
		if (Input.GetKeyDown("r"))
		{
			if (Rain.activeSelf)
			{
				Rain.SetActive(value: false);
			}
			else
			{
				Rain.SetActive(value: true);
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DebtCollector
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.AI;

public class DebtCollector : NetworkBehaviour
{
	[SyncVar]
	public int collectorID;

	public int state;

	public CustomNetworkManager cNetworkComponent;

	public GameObject[] characters;

	public GameObject destroyPositionOBJ;

	public GameObject messagePrefab;

	private GameObject characterOBJ;

	private Animator npcAnimator;

	private NavMeshAgent agent;

	private float timeToStrike;

	private Transform currentTargetTransform;

	private bool goingToDestroy;

	private bool chaserUpdatingPathing;

	private bool navmeshCheck;

	public int NetworkcollectorID
	{
		get
		{
			return collectorID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref collectorID, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		if (base.isServer)
		{
			agent = GetComponent<NavMeshAgent>();
		}
		CreateNPCCharacter();
	}

	private void CreateNPCCharacter()
	{
		GameObject original = characters[collectorID];
		characterOBJ = Object.Instantiate(original);
		characterOBJ.transform.SetParent(base.transform);
		characterOBJ.transform.localPosition = Vector3.zero;
		characterOBJ.transform.localRotation = Quaternion.identity;
		npcAnimator = characterOBJ.GetComponent<Animator>();
	}

	private void FixedUpdate()
	{
		if ((bool)npcAnimator)
		{
			npcAnimator.SetFloat("MoveFactor", GetComponent<NPC_Speed>().velocity);
		}
		if (base.isServer)
		{
			PathingBehaviour();
			if (agent.isOnOffMeshLink && !navmeshCheck)
			{
				StartCoroutine(OffMeshTraverseCoroutine());
			}
		}
	}

	private void PathingBehaviour()
	{
		if (state == -1)
		{
			return;
		}
		if (state == 2)
		{
			if ((bool)currentTargetTransform)
			{
				Vector3 a = new Vector3(base.transform.position.x, 0f, base.transform.position.z);
				Vector3 b = new Vector3(currentTargetTransform.transform.position.x, 0f, currentTargetTransform.transform.position.z);
				if (Vector3.Distance(a, b) < 2.5f)
				{
					agent.SetDestination(currentTargetTransform.position);
					state = 3;
				}
				else
				{
					CallPathing();
				}
			}
			else
			{
				state = 0;
			}
		}
		if (goingToDestroy)
		{
			state = 99;
		}
		if (agent.pathPending || !(agent.remainingDistance <= agent.stoppingDistance) || (agent.hasPath && agent.velocity.sqrMagnitude != 0f))
		{
			return;
		}
		switch (state)
		{
		case 0:
			timeToStrike = GameData.Instance.timeOfDay + Random.Range(1f, 2f);
			state = 1;
			break;
		case 1:
		{
			float timeOfDay = GameData.Instance.timeOfDay;
			if (timeOfDay > 22f)
			{
				state = 10;
			}
			else if (timeOfDay > timeToStrike)
			{
				currentTargetTransform = GetTarget();
				GetClosestPlayerPositionToNavmesh(out var isInNavmesh, out var returnPoint);
				if (isInNavmesh)
				{
					agent.destination = returnPoint;
					state = 2;
				}
				else
				{
					state = 4;
				}
			}
			else
			{
				StartWaitState(1, 2f);
			}
			break;
		}
		case 3:
		{
			RPCNotificationAboveHead("paynpcmessage", "");
			RpcAnimationPlay(1);
			Vector3 normalized = (currentTargetTransform.position - base.transform.position).normalized;
			if ((bool)currentTargetTransform.GetComponent<PlayerNetwork>())
			{
				currentTargetTransform.GetComponent<PlayerNetwork>().PushPlayerFromDebtCollector(normalized * 5f);
				currentTargetTransform.GetComponent<PlayerNetwork>().DebtCollectorAchievement();
			}
			state = 4;
			break;
		}
		case 4:
			agent.destination = destroyPositionOBJ.transform.position;
			state = 0;
			break;
		case 10:
			if (GameData.Instance.timeOfDay < 9f)
			{
				state = 0;
			}
			else
			{
				StartWaitState(10, 2f);
			}
			break;
		case 99:
			NetworkServer.Destroy(base.gameObject);
			break;
		}
	}

	private void GetClosestPlayerPositionToNavmesh(out bool isInNavmesh, out Vector3 returnPoint)
	{
		Vector3 sourcePosition = new Vector3(currentTargetTransform.position.x, 0f, currentTargetTransform.position.z);
		isInNavmesh = NavMesh.SamplePosition(sourcePosition, out var hit, 1f, -1);
		returnPoint = Vector3.zero;
		if (isInNavmesh)
		{
			returnPoint = hit.position;
		}
	}

	private Transform GetTarget()
	{
		if (NetworkServer.connections.Count <= 1)
		{
			return FirstPersonController.Instance.transform;
		}
		int index = Random.Range(0, cNetworkComponent.GamePlayers.Count);
		if ((bool)cNetworkComponent.GamePlayers[index].transform)
		{
			return cNetworkComponent.GamePlayers[index].transform;
		}
		return null;
	}

	public void CallPathing()
	{
		if (!chaserUpdatingPathing)
		{
			StartCoroutine(PathingCooldown());
		}
	}

	private IEnumerator PathingCooldown()
	{
		chaserUpdatingPathing = true;
		NavMeshAgent component = GetComponent<NavMeshAgent>();
		if (!component.pathPending)
		{
			GetClosestPlayerPositionToNavmesh(out var isInNavmesh, out var returnPoint);
			if (isInNavmesh)
			{
				component.SetDestination(returnPoint);
			}
		}
		yield return new WaitForSeconds(0.25f);
		chaserUpdatingPathing = false;
	}

	[ClientRpc]
	private void RpcAnimationPlay(int animationIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(animationIndex);
		SendRPCInternal("System.Void DebtCollector::RpcAnimationPlay(System.Int32)", -21323097, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void StartWaitState(int stateToSet, float waitTime)
	{
		StartCoroutine(WaitState(stateToSet, waitTime));
	}

	private IEnumerator WaitState(int stateToSet, float waitTime)
	{
		state = -1;
		yield return new WaitForSeconds(waitTime);
		state = stateToSet;
		yield return null;
	}

	public void GoToDestroyPoint()
	{
		goingToDestroy = true;
		StopAllCoroutines();
		state = 99;
		agent.SetDestination(destroyPositionOBJ.transform.position);
	}

	[ClientRpc]
	public void RPCNotificationAboveHead(string message1, string messageAddon)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(message1);
		writer.WriteString(messageAddon);
		SendRPCInternal("System.Void DebtCollector::RPCNotificationAboveHead(System.String,System.String)", 963891142, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator OffMeshTraverseCoroutine()
	{
		navmeshCheck = true;
		while (agent.isOnOffMeshLink)
		{
			OffMeshLinkData currentOffMeshLinkData = agent.currentOffMeshLinkData;
			Vector3 vector = currentOffMeshLinkData.endPos + Vector3.up * agent.baseOffset;
			base.transform.position = Vector3.MoveTowards(base.transform.position, vector, agent.speed * Time.deltaTime);
			Quaternion to = Quaternion.LookRotation(currentOffMeshLinkData.endPos, base.transform.position);
			base.transform.rotation = Quaternion.RotateTowards(base.transform.rotation, to, 10f * Time.deltaTime);
			if (agent.transform.position == vector)
			{
				agent.CompleteOffMeshLink();
			}
			yield return null;
		}
		yield return null;
		navmeshCheck = false;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_RpcAnimationPlay__Int32(int animationIndex)
	{
		if ((bool)npcAnimator)
		{
			npcAnimator.SetFloat("AnimationFloat", animationIndex);
			npcAnimator.Play("Animation");
			base.transform.Find("HitSound").GetComponent<AudioSource>().Play();
		}
	}

	protected static void InvokeUserCode_RpcAnimationPlay__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAnimationPlay called on server.");
		}
		else
		{
			((DebtCollector)obj).UserCode_RpcAnimationPlay__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RPCNotificationAboveHead__String__String(string message1, string messageAddon)
	{
		GameObject obj = Object.Instantiate(messagePrefab, base.transform.position + Vector3.up * 1.8f, Quaternion.identity);
		string text = LocalizationManager.instance.GetLocalizationString(message1);
		if (messageAddon != "")
		{
			text += LocalizationManager.instance.GetLocalizationString(messageAddon);
		}
		obj.GetComponent<TextMeshPro>().text = text;
		obj.SetActive(value: true);
	}

	protected static void InvokeUserCode_RPCNotificationAboveHead__String__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RPCNotificationAboveHead called on server.");
		}
		else
		{
			((DebtCollector)obj).UserCode_RPCNotificationAboveHead__String__String(reader.ReadString(), reader.ReadString());
		}
	}

	static DebtCollector()
	{
		RemoteProcedureCalls.RegisterRpc(typeof(DebtCollector), "System.Void DebtCollector::RpcAnimationPlay(System.Int32)", InvokeUserCode_RpcAnimationPlay__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(DebtCollector), "System.Void DebtCollector::RPCNotificationAboveHead(System.String,System.String)", InvokeUserCode_RPCNotificationAboveHead__String__String);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(collectorID);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(collectorID);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref collectorID, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref collectorID, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DebtManager
using System.Collections;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Threading;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.UI;

public class DebtManager : NetworkBehaviour
{
	[SyncVar]
	public string[] currentInvoicesData;

	[SyncVar]
	public int loanAmount;

	[SyncVar]
	public int loanPaymentPerDay;

	[SyncVar]
	public bool[] consequencesValues;

	public bool dontGenerateInvoicesOption;

	public bool autopayInvoices;

	public float electricFactor = 1f;

	[Space(10f)]
	public GameObject invoicesTabOBJ;

	public GameObject UIDebtPrefabOBJ;

	public GameObject UIDebtParentOBJ;

	public GameObject invoiceTemplatesParent;

	public GameObject newInvoiceDisclaimer;

	public PlayMakerFSM invoicePayFSM;

	public GameObject loanDisclaimerContainerOBJ;

	public GameObject debtAgentPrefabOBJ;

	public GameObject debtAgentsParentOBJ;

	public GameObject debtAgentsSpawnParent;

	public GameObject debtAgentsDestroyPosition;

	public GameObject rentDoorOBJ;

	public GameObject employeeRiotPointOBJ;

	public GameObject canvasUnpaidInvoiceWarningOBJ;

	public GameObject unpaidInvoicesMessagesParentOBJ;

	public CustomNetworkManager cNetworkReference;

	[Space(10f)]
	public TextMeshProUGUI requestedLoanAmountField;

	public TextMeshProUGUI requestedLoanDurationField;

	public TextMeshProUGUI calculatedAmountToReturnField;

	public TextMeshProUGUI calculatedPaymentPerDayField;

	public TextMeshProUGUI amountLeftToPayField;

	public TextMeshProUGUI paymentsDueField;

	private int requestedLoanAmount;

	private int requestedLoanDuration;

	private int calculatedAmountToReturn;

	private int calculatedPaymentPerDay;

	private bool firstAutopayDelay;

	private bool isAutopayDisabled;

	[Space(10f)]
	public AnimationCurve electricCostCurve;

	public string[] NetworkcurrentInvoicesData
	{
		get
		{
			return currentInvoicesData;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref currentInvoicesData, 1uL, null);
		}
	}

	public int NetworkloanAmount
	{
		get
		{
			return loanAmount;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref loanAmount, 2uL, null);
		}
	}

	public int NetworkloanPaymentPerDay
	{
		get
		{
			return loanPaymentPerDay;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref loanPaymentPerDay, 4uL, null);
		}
	}

	public bool[] NetworkconsequencesValues
	{
		get
		{
			return consequencesValues;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref consequencesValues, 8uL, null);
		}
	}

	public override void OnStartClient()
	{
		if (!base.isServer)
		{
			StartCoroutine(InitialJoiningPlayerSetVisualConsequences());
			InitUnpaidWarningsClientCheck();
			CmdRequestInvoiceGeneration();
			return;
		}
		string value = FsmVariables.GlobalVariables.GetFsmString("OptionsGlobalPath").Value;
		string filePath = Application.persistentDataPath + "/" + value;
		if (ES3.KeyExists("dontGenerateInvoices", filePath))
		{
			dontGenerateInvoicesOption = ES3.Load<bool>("dontGenerateInvoices", filePath);
		}
		if (ES3.KeyExists("isAutopayDisabled", filePath))
		{
			isAutopayDisabled = ES3.Load<bool>("isAutopayDisabled", filePath);
		}
		NewDayConsequencesCheck();
	}

	[Command(requiresAuthority = false)]
	private void CmdRequestInvoiceGeneration()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void DebtManager::CmdRequestInvoiceGeneration()", -358566987, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcRequestInvoiceGeneration(bool whichBool)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(whichBool);
		SendRPCInternal("System.Void DebtManager::RpcRequestInvoiceGeneration(System.Boolean)", -1975282089, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void SetAutoplayDisabled(bool set)
	{
		isAutopayDisabled = set;
	}

	public void GenerateExistingDebtsInUI()
	{
		SetInitialLoanValues();
		newInvoiceDisclaimer.SetActive(value: false);
		foreach (Transform item in invoiceTemplatesParent.transform)
		{
			item.gameObject.SetActive(value: false);
		}
		invoicePayFSM.FsmVariables.GetFsmInt("CurrentInvoiceIndex").Value = -1;
		if (UIDebtParentOBJ.transform.childCount > 0)
		{
			int childCount = UIDebtParentOBJ.transform.childCount;
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(UIDebtParentOBJ.transform.GetChild(childCount - 1 - i).gameObject);
			}
		}
		int gameDay = GameData.Instance.gameDay;
		for (int j = 0; j < currentInvoicesData.Length; j++)
		{
			string text = currentInvoicesData[j];
			if (!(text == ""))
			{
				GetInvoiceDataValues(text, out var invoiceTypeID, out var amountDue, out var dateAdded, out var dueDate, out var _);
				GameObject gameObject = Object.Instantiate(UIDebtPrefabOBJ, UIDebtParentOBJ.transform);
				InvoicesStatistics component = gameObject.GetComponent<InvoicesStatistics>();
				component.invoiceTypeField.text = LocalizationManager.instance.GetLocalizationString("invoicetype" + invoiceTypeID);
				component.dateAddedField.text = dateAdded.ToString();
				component.dueDateField.text = dueDate.ToString();
				component.amountDueField.text = ProductListing.Instance.ConvertFloatToTextPrice(amountDue);
				gameObject.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("ArrayIndex").Value = j;
				if (dueDate - gameDay == 0)
				{
					gameObject.GetComponent<Image>().color = Color.yellow;
				}
				else if (dueDate - gameDay < 0)
				{
					gameObject.GetComponent<Image>().color = Color.red;
				}
			}
		}
	}

	public void GenerateNewDayInvoices()
	{
		if (!base.isServer)
		{
			return;
		}
		int gameDay = GameData.Instance.gameDay;
		int num = RetrieveFreeIndexInValues();
		bool flag = false;
		newInvoiceDisclaimer.SetActive(value: false);
		if (num >= 0 && loanAmount > 0 && loanPaymentPerDay > 0 && RetrieveTotalLoanLeftFromInvoices() < loanAmount)
		{
			string text = "0|" + loanPaymentPerDay + "|" + gameDay + "|" + (gameDay + 1) + "|0_0_0_0_0";
			currentInvoicesData[num] = text;
			RpcAddInvoiceData(num, text);
			flag = true;
		}
		if (dontGenerateInvoicesOption)
		{
			return;
		}
		num = RetrieveFreeIndexInValues();
		if (num >= 0 && !consequencesValues[1])
		{
			float num2 = RetrieveTotalElectricCost();
			if (num2 > 0f)
			{
				string text2 = "1|" + num2 + "|" + gameDay + "|" + (gameDay + 3) + "|0_0_0_0_0";
				currentInvoicesData[num] = text2;
				RpcAddInvoiceData(num, text2);
				flag = true;
			}
		}
		num = RetrieveFreeIndexInValues();
		if (num >= 0 && !consequencesValues[2])
		{
			float num3 = NPC_Manager.Instance.RetrieveGlobalSalary();
			if (num3 > 0f)
			{
				string text3 = "2|" + num3 + "|" + gameDay + "|" + (gameDay + 2) + "|0_0_0_0_0";
				currentInvoicesData[num] = text3;
				RpcAddInvoiceData(num, text3);
				flag = true;
			}
		}
		num = RetrieveFreeIndexInValues();
		if (num >= 0 && gameDay > 2 && gameDay % 7 == 0 && !consequencesValues[3])
		{
			string text4 = "3|" + RetrieveRentCost() + "|" + gameDay + "|" + (gameDay + 7) + "|0_0_0_0_0";
			currentInvoicesData[num] = text4;
			RpcAddInvoiceData(num, text4);
			flag = true;
		}
		if (flag)
		{
			newInvoiceDisclaimer.SetActive(value: true);
		}
	}

	[ClientRpc]
	private void RpcAddInvoiceData(int whichIndex, string invoiceData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichIndex);
		writer.WriteString(invoiceData);
		SendRPCInternal("System.Void DebtManager::RpcAddInvoiceData(System.Int32,System.String)", 1494337443, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private int RetrieveFreeIndexInValues()
	{
		for (int i = 0; i < currentInvoicesData.Length; i++)
		{
			if (currentInvoicesData[i] == "")
			{
				return i;
			}
		}
		return -1;
	}

	private string RetrieveRentCost()
	{
		bool[] storeSpaceUpgrades = GetComponent<UpgradesManager>().storeSpaceUpgrades;
		int num = 0;
		bool[] array = storeSpaceUpgrades;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i])
			{
				num += 30;
			}
		}
		array = GetComponent<UpgradesManager>().storageSpaceUpgrades;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i])
			{
				num += 60;
			}
		}
		return (150 + num).ToString();
	}

	private float RetrieveTotalElectricCost()
	{
		Transform child = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(7);
		float num = 0f;
		foreach (Transform item in child)
		{
			if ((bool)item.GetComponent<BuildableInfo>())
			{
				num += item.GetComponent<BuildableInfo>().energyCost * item.GetComponent<BuildableInfo>().energyWorkingHours;
			}
		}
		float value = GameData.Instance.gameDay % 365 / 12;
		float num2 = electricCostCurve.Evaluate(Mathf.Clamp(value, 0f, 12f));
		return num * num2 * electricFactor;
	}

	private int RetrieveTotalLoanLeftFromInvoices()
	{
		int num = 0;
		for (int i = 0; i < currentInvoicesData.Length; i++)
		{
			string text = currentInvoicesData[i];
			if (!(text == ""))
			{
				GetInvoiceDataValues(text, out var invoiceTypeID, out var amountDue, out var _, out var _, out var _);
				if (invoiceTypeID == 0)
				{
					num += (int)amountDue;
				}
			}
		}
		return num;
	}

	private void SetInitialLoanValues()
	{
		if (loanAmount > 0)
		{
			loanDisclaimerContainerOBJ.SetActive(value: true);
			amountLeftToPayField.text = "$" + loanAmount;
			if (loanPaymentPerDay > 0)
			{
				paymentsDueField.text = (loanAmount / loanPaymentPerDay).ToString();
			}
		}
		requestedLoanAmount = 2000;
		requestedLoanDuration = 3;
		CalculateAmountToReturn(requestedLoanAmount, requestedLoanDuration);
	}

	public void AddLoanAmountIndex(bool add)
	{
		if (add)
		{
			requestedLoanAmount += 1000;
		}
		else
		{
			requestedLoanAmount -= 1000;
		}
		requestedLoanAmount = Mathf.Clamp(requestedLoanAmount, 1000, 10000 + GameData.Instance.gameDay / 4 * 2000);
		CalculateAmountToReturn(requestedLoanAmount, requestedLoanDuration);
	}

	public void AddLoanDurationIndex(bool add)
	{
		if (add)
		{
			requestedLoanDuration++;
		}
		else
		{
			requestedLoanDuration--;
		}
		requestedLoanDuration = Mathf.Clamp(requestedLoanDuration, 3, 14);
		CalculateAmountToReturn(requestedLoanAmount, requestedLoanDuration);
	}

	private void CalculateAmountToReturn(int amount, int duration)
	{
		int num = (int)((float)duration / 100f * (float)amount) + amount / 20;
		requestedLoanAmountField.text = amount.ToString();
		requestedLoanDurationField.text = duration.ToString();
		calculatedAmountToReturn = amount + num;
		calculatedAmountToReturnField.text = calculatedAmountToReturn.ToString();
		calculatedPaymentPerDay = (int)Mathf.Ceil((float)calculatedAmountToReturn / (float)duration);
		calculatedPaymentPerDayField.text = calculatedPaymentPerDay.ToString();
	}

	public void RequestLoan()
	{
		if (!dontGenerateInvoicesOption)
		{
			if (loanAmount > 0)
			{
				GameCanvas.Instance.CreateCanvasNotification("invopaidannoun2");
			}
			else if (calculatedAmountToReturn > 0 && calculatedPaymentPerDay > 0)
			{
				CmdRequestLoan(requestedLoanAmount, calculatedAmountToReturn, calculatedPaymentPerDay);
			}
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdRequestLoan(int loanAmountRequested, int amountToReturn, int paymentPerDay)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(loanAmountRequested);
		writer.WriteInt(amountToReturn);
		writer.WriteInt(paymentPerDay);
		SendCommandInternal("System.Void DebtManager::CmdRequestLoan(System.Int32,System.Int32,System.Int32)", 2130963063, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcRequestLoan(int loanA, int loanPayment)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(loanA);
		writer.WriteInt(loanPayment);
		SendRPCInternal("System.Void DebtManager::RpcRequestLoan(System.Int32,System.Int32)", -86701937, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void SelectInvoiceAndSetData(int invoiceIndex)
	{
		string text = currentInvoicesData[invoiceIndex];
		if (text == "")
		{
			return;
		}
		GetInvoiceDataValues(text, out var invoiceTypeID, out var amountDue, out var dateAdded, out var dueDate, out var _);
		if (invoiceTypeID < 0 || invoiceTypeID >= invoiceTemplatesParent.transform.childCount)
		{
			return;
		}
		GameObject gameObject = invoiceTemplatesParent.transform.GetChild(invoiceTypeID).gameObject;
		foreach (Transform item in invoiceTemplatesParent.transform)
		{
			item.gameObject.SetActive(value: false);
		}
		gameObject.SetActive(value: true);
		InvoiceTemplateReferences component = gameObject.GetComponent<InvoiceTemplateReferences>();
		component.supermarketNameField.text = GameData.Instance.GetComponent<NetworkSpawner>().SuperMarketName;
		component.dueAmountField.text = ProductListing.Instance.ConvertFloatToTextPrice(amountDue);
		component.issueDateField.text = dateAdded.ToString();
		component.dueDateField.text = dueDate.ToString();
		invoicePayFSM.FsmVariables.GetFsmInt("CurrentInvoiceIndex").Value = invoiceIndex;
	}

	public void PayInvoice(int invoiceIndex)
	{
		if (invoiceIndex >= currentInvoicesData.Length || invoiceIndex < -1)
		{
			return;
		}
		string text = currentInvoicesData[invoiceIndex];
		if (!(text == ""))
		{
			GetInvoiceDataValues(text, out var _, out var amountDue, out var _, out var _, out var _);
			if (amountDue > GameData.Instance.gameFunds)
			{
				GameCanvas.Instance.CreateCanvasNotification("message6");
			}
			else
			{
				CmdPayInvoice(invoiceIndex);
			}
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdPayInvoice(int invoiceIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(invoiceIndex);
		SendCommandInternal("System.Void DebtManager::CmdPayInvoice(System.Int32)", -1667050249, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void AuxiliarPayInvoiceSeparation(int invoiceIndex, int invoiceTypeID, float amountDue)
	{
		switch (invoiceTypeID)
		{
		case 0:
		{
			int num = loanAmount;
			num -= (int)amountDue;
			if (num <= 0)
			{
				if (loanDisclaimerContainerOBJ.activeSelf)
				{
					loanDisclaimerContainerOBJ.SetActive(value: false);
				}
				num = 0;
				NetworkloanPaymentPerDay = 0;
			}
			NetworkloanAmount = num;
			GetComponent<GameData>().otherCosts += amountDue;
			break;
		}
		case 1:
			GameData.Instance.lightCost += amountDue;
			break;
		case 2:
			GameData.Instance.employeesCost += amountDue;
			break;
		case 3:
			GameData.Instance.rentCost += amountDue;
			break;
		}
		RpcPayInvoice(invoiceIndex);
		SolveConsequenceCheck(invoiceTypeID);
	}

	[ClientRpc]
	private void RpcPayInvoice(int invoiceIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(invoiceIndex);
		SendRPCInternal("System.Void DebtManager::RpcPayInvoice(System.Int32)", 126406252, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void GetInvoiceDataValues(string invoiceData, out int invoiceTypeID, out float amountDue, out int dateAdded, out int dueDate, out string extraData)
	{
		string[] array = invoiceData.Split("|");
		invoiceTypeID = int.Parse(array[0]);
		CultureInfo cultureInfo = new CultureInfo(Thread.CurrentThread.CurrentCulture.Name);
		if (cultureInfo.NumberFormat.NumberDecimalSeparator != ",")
		{
			cultureInfo.NumberFormat.NumberDecimalSeparator = ",";
			Thread.CurrentThread.CurrentCulture = cultureInfo;
		}
		amountDue = float.Parse(array[1]);
		dateAdded = int.Parse(array[2]);
		dueDate = int.Parse(array[3]);
		extraData = array[4];
	}

	private IEnumerator InitialJoiningPlayerSetVisualConsequences()
	{
		yield return new WaitForSeconds(8f);
		if (consequencesValues[1])
		{
			ElectricSet(set: false);
		}
		if (consequencesValues[3])
		{
			rentDoorOBJ.SetActive(value: true);
		}
	}

	public void NewDayConsequencesCheck()
	{
		int gameDay = GameData.Instance.gameDay;
		for (int i = 0; i < currentInvoicesData.Length; i++)
		{
			string text = currentInvoicesData[i];
			if (!(text == ""))
			{
				GetInvoiceDataValues(text, out var invoiceTypeID, out var _, out var _, out var dueDate, out var _);
				if (!consequencesValues[invoiceTypeID] && gameDay > dueDate)
				{
					consequencesValues[invoiceTypeID] = true;
					CreateConsequence(invoiceTypeID);
					RpcCreateConsequence(invoiceTypeID);
				}
			}
		}
		StartCoroutine(DelayedAutopayCheck());
	}

	private void CreateConsequence(int invoiceType)
	{
		switch (invoiceType)
		{
		case 0:
			DebtAgentsSummon();
			break;
		case 2:
			NPC_Manager.Instance.employeesOnRiot = true;
			{
				foreach (Transform item in NPC_Manager.Instance.employeeParentOBJ.transform)
				{
					item.GetComponent<NavMeshAgent>().destination = employeeRiotPointOBJ.transform.position + new Vector3(Random.Range(-2.5f, 2.5f), 0f, Random.Range(-2.5f, 2.5f));
				}
				break;
			}
		case 1:
		case 3:
			break;
		}
	}

	[ClientRpc]
	private void RpcCreateConsequence(int invoiceType)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(invoiceType);
		SendRPCInternal("System.Void DebtManager::RpcCreateConsequence(System.Int32)", 754795182, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void SolveConsequenceCheck(int invoiceType)
	{
		if (!consequencesValues[invoiceType])
		{
			return;
		}
		bool flag = false;
		int gameDay = GameData.Instance.gameDay;
		for (int i = 0; i < currentInvoicesData.Length; i++)
		{
			string text = currentInvoicesData[i];
			if (!(text == ""))
			{
				GetInvoiceDataValues(text, out var invoiceTypeID, out var _, out var _, out var dueDate, out var _);
				if (invoiceTypeID == invoiceType && gameDay > dueDate)
				{
					flag = true;
					break;
				}
			}
		}
		if (!flag)
		{
			consequencesValues[invoiceType] = false;
			SolveConsequence(invoiceType);
			RpcSolveConsequence(invoiceType);
		}
	}

	private void SolveConsequence(int invoiceType)
	{
		switch (invoiceType)
		{
		case 0:
			DebtAgentsRetreat();
			break;
		case 2:
			NPC_Manager.Instance.employeesOnRiot = false;
			break;
		case 1:
		case 3:
			break;
		}
	}

	[ClientRpc]
	private void RpcSolveConsequence(int invoiceType)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(invoiceType);
		SendRPCInternal("System.Void DebtManager::RpcSolveConsequence(System.Int32)", -403809923, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void InitUnpaidWarningsClientCheck()
	{
		for (int i = 0; i < consequencesValues.Length; i++)
		{
			if (consequencesValues[i])
			{
				unpaidInvoicesMessagesParentOBJ.transform.GetChild(i).gameObject.SetActive(value: true);
			}
		}
		CheckIfUIWarningSymbolIsNeeded();
	}

	private void CheckIfUIWarningSymbolIsNeeded()
	{
		bool[] array = consequencesValues;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i])
			{
				canvasUnpaidInvoiceWarningOBJ.SetActive(value: true);
				return;
			}
		}
		canvasUnpaidInvoiceWarningOBJ.SetActive(value: false);
	}

	private void DebtAgentsSummon()
	{
		if (debtAgentsParentOBJ.transform.childCount <= 0)
		{
			for (int i = 0; i < 4; i++)
			{
				GameObject obj = Object.Instantiate(debtAgentPrefabOBJ, debtAgentsParentOBJ.transform);
				obj.transform.position = debtAgentsSpawnParent.transform.GetChild(i).transform.position;
				obj.transform.rotation = Quaternion.Euler(new Vector3(0f, 90f, 0f));
				obj.GetComponent<DebtCollector>().NetworkcollectorID = i;
				obj.GetComponent<DebtCollector>().cNetworkComponent = cNetworkReference;
				obj.GetComponent<DebtCollector>().destroyPositionOBJ = debtAgentsSpawnParent.transform.GetChild(i).gameObject;
				obj.GetComponent<NavMeshAgent>().enabled = true;
				obj.GetComponent<NavMeshAgent>().obstacleAvoidanceType = ObstacleAvoidanceType.NoObstacleAvoidance;
				NetworkServer.Spawn(obj);
			}
		}
	}

	private void DebtAgentsRetreat()
	{
		if (debtAgentsParentOBJ.transform.childCount <= 0)
		{
			return;
		}
		foreach (Transform item in debtAgentsParentOBJ.transform)
		{
			item.GetComponent<DebtCollector>().GoToDestroyPoint();
		}
	}

	private void ElectricSet(bool set)
	{
		foreach (Transform item in GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(7))
		{
			if ((bool)item.GetComponent<ReferenceLight>())
			{
				item.GetComponent<ReferenceLight>().lightComponent.enabled = set;
				int materialIndex = item.GetComponent<ReferenceLight>().materialIndex;
				if (set)
				{
					item.GetComponent<ReferenceLight>().lightMrenderer.materials[materialIndex].EnableKeyword("_EMISSION");
				}
				else
				{
					item.GetComponent<ReferenceLight>().lightMrenderer.materials[materialIndex].DisableKeyword("_EMISSION");
				}
			}
		}
	}

	private IEnumerator DelayedAutopayCheck()
	{
		if (!firstAutopayDelay)
		{
			firstAutopayDelay = true;
			yield return new WaitForSeconds(10f);
		}
		else
		{
			yield return new WaitForSeconds(0.5f);
		}
		if (autopayInvoices && !isAutopayDisabled)
		{
			StartCoroutine(AutopayInvoicesCoroutine());
		}
	}

	private IEnumerator AutopayInvoicesCoroutine()
	{
		yield return new WaitForSeconds(1f);
		WaitForSeconds invoiceWaitTime = new WaitForSeconds(0.75f);
		bool playNotEnoughFundsMessage = false;
		bool playPaidMessage = false;
		for (int i = 0; i < currentInvoicesData.Length; i++)
		{
			string text = currentInvoicesData[i];
			if (!(text == ""))
			{
				GetInvoiceDataValues(text, out var invoiceTypeID, out var amountDue, out var _, out var _, out var _);
				if (amountDue > GameData.Instance.gameFunds)
				{
					playNotEnoughFundsMessage = true;
					break;
				}
				GetComponent<GameData>().AlterFundsFromEmployee(0f - amountDue);
				currentInvoicesData[i] = "";
				AuxiliarPayInvoiceSeparation(i, invoiceTypeID, amountDue);
				playPaidMessage = true;
				yield return invoiceWaitTime;
			}
		}
		yield return new WaitForSeconds(1f);
		RpcAutopayInvoicesMessage(playNotEnoughFundsMessage, playPaidMessage);
	}

	[ClientRpc]
	private void RpcAutopayInvoicesMessage(bool playMessage1, bool playMessage2)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(playMessage1);
		writer.WriteBool(playMessage2);
		SendRPCInternal("System.Void DebtManager::RpcAutopayInvoicesMessage(System.Boolean,System.Boolean)", 1045154086, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdRequestInvoiceGeneration()
	{
		RpcRequestInvoiceGeneration(dontGenerateInvoicesOption);
	}

	protected static void InvokeUserCode_CmdRequestInvoiceGeneration(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestInvoiceGeneration called on client.");
		}
		else
		{
			((DebtManager)obj).UserCode_CmdRequestInvoiceGeneration();
		}
	}

	protected void UserCode_RpcRequestInvoiceGeneration__Boolean(bool whichBool)
	{
		dontGenerateInvoicesOption = whichBool;
	}

	protected static void InvokeUserCode_RpcRequestInvoiceGeneration__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRequestInvoiceGeneration called on server.");
		}
		else
		{
			((DebtManager)obj).UserCode_RpcRequestInvoiceGeneration__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcAddInvoiceData__Int32__String(int whichIndex, string invoiceData)
	{
		if (!base.isServer)
		{
			currentInvoicesData[whichIndex] = invoiceData;
		}
	}

	protected static void InvokeUserCode_RpcAddInvoiceData__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddInvoiceData called on server.");
		}
		else
		{
			((DebtManager)obj).UserCode_RpcAddInvoiceData__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_CmdRequestLoan__Int32__Int32__Int32(int loanAmountRequested, int amountToReturn, int paymentPerDay)
	{
		if (!dontGenerateInvoicesOption && loanAmount <= 0)
		{
			GetComponent<GameData>().AlterFundsFromEmployee(loanAmountRequested);
			NetworkloanAmount = amountToReturn;
			NetworkloanPaymentPerDay = paymentPerDay;
			RpcRequestLoan(amountToReturn, paymentPerDay);
		}
	}

	protected static void InvokeUserCode_CmdRequestLoan__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestLoan called on client.");
		}
		else
		{
			((DebtManager)obj).UserCode_CmdRequestLoan__Int32__Int32__Int32(reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcRequestLoan__Int32__Int32(int loanA, int loanPayment)
	{
		if (invoicesTabOBJ.activeSelf)
		{
			loanDisclaimerContainerOBJ.SetActive(value: true);
			amountLeftToPayField.text = "$" + loanA;
			if (loanPaymentPerDay > 0)
			{
				paymentsDueField.text = (loanA / loanPayment).ToString();
			}
		}
		GameCanvas.Instance.CreateImportantNotification("invopaidannoun3");
	}

	protected static void InvokeUserCode_RpcRequestLoan__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRequestLoan called on server.");
		}
		else
		{
			((DebtManager)obj).UserCode_RpcRequestLoan__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdPayInvoice__Int32(int invoiceIndex)
	{
		if (invoiceIndex >= currentInvoicesData.Length || invoiceIndex < -1)
		{
			return;
		}
		string text = currentInvoicesData[invoiceIndex];
		if (!(text == ""))
		{
			GetInvoiceDataValues(text, out var invoiceTypeID, out var amountDue, out var _, out var _, out var _);
			if (!(amountDue > GameData.Instance.gameFunds))
			{
				GetComponent<GameData>().AlterFundsFromEmployee(0f - amountDue);
				currentInvoicesData[invoiceIndex] = "";
				AuxiliarPayInvoiceSeparation(invoiceIndex, invoiceTypeID, amountDue);
			}
		}
	}

	protected static void InvokeUserCode_CmdPayInvoice__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdPayInvoice called on client.");
		}
		else
		{
			((DebtManager)obj).UserCode_CmdPayInvoice__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcPayInvoice__Int32(int invoiceIndex)
	{
		AchievementsManager.Instance.AddLocalAchievementPoint(18);
		if (!base.isServer)
		{
			currentInvoicesData[invoiceIndex] = "";
		}
		GameCanvas.Instance.CreateImportantNotification("invopaidannoun");
		if (invoicesTabOBJ.activeSelf)
		{
			GenerateExistingDebtsInUI();
		}
	}

	protected static void InvokeUserCode_RpcPayInvoice__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPayInvoice called on server.");
		}
		else
		{
			((DebtManager)obj).UserCode_RpcPayInvoice__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcCreateConsequence__Int32(int invoiceType)
	{
		unpaidInvoicesMessagesParentOBJ.transform.GetChild(invoiceType).gameObject.SetActive(value: true);
		switch (invoiceType)
		{
		case 1:
			ElectricSet(set: false);
			break;
		case 3:
			rentDoorOBJ.SetActive(value: true);
			break;
		}
		CheckIfUIWarningSymbolIsNeeded();
	}

	protected static void InvokeUserCode_RpcCreateConsequence__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcCreateConsequence called on server.");
		}
		else
		{
			((DebtManager)obj).UserCode_RpcCreateConsequence__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcSolveConsequence__Int32(int invoiceType)
	{
		unpaidInvoicesMessagesParentOBJ.transform.GetChild(invoiceType).gameObject.SetActive(value: false);
		switch (invoiceType)
		{
		case 1:
			ElectricSet(set: true);
			break;
		case 3:
			rentDoorOBJ.SetActive(value: false);
			break;
		}
		CheckIfUIWarningSymbolIsNeeded();
	}

	protected static void InvokeUserCode_RpcSolveConsequence__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSolveConsequence called on server.");
		}
		else
		{
			((DebtManager)obj).UserCode_RpcSolveConsequence__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcAutopayInvoicesMessage__Boolean__Boolean(bool playMessage1, bool playMessage2)
	{
		if (playMessage1)
		{
			GameCanvas.Instance.CreateImportantNotification("atopayinvce1");
		}
		else if (playMessage2)
		{
			GameCanvas.Instance.CreateImportantNotification("atopayinvce0");
			newInvoiceDisclaimer.SetActive(value: false);
		}
	}

	protected static void InvokeUserCode_RpcAutopayInvoicesMessage__Boolean__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAutopayInvoicesMessage called on server.");
		}
		else
		{
			((DebtManager)obj).UserCode_RpcAutopayInvoicesMessage__Boolean__Boolean(reader.ReadBool(), reader.ReadBool());
		}
	}

	static DebtManager()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(DebtManager), "System.Void DebtManager::CmdRequestInvoiceGeneration()", InvokeUserCode_CmdRequestInvoiceGeneration, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(DebtManager), "System.Void DebtManager::CmdRequestLoan(System.Int32,System.Int32,System.Int32)", InvokeUserCode_CmdRequestLoan__Int32__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(DebtManager), "System.Void DebtManager::CmdPayInvoice(System.Int32)", InvokeUserCode_CmdPayInvoice__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(DebtManager), "System.Void DebtManager::RpcRequestInvoiceGeneration(System.Boolean)", InvokeUserCode_RpcRequestInvoiceGeneration__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(DebtManager), "System.Void DebtManager::RpcAddInvoiceData(System.Int32,System.String)", InvokeUserCode_RpcAddInvoiceData__Int32__String);
		RemoteProcedureCalls.RegisterRpc(typeof(DebtManager), "System.Void DebtManager::RpcRequestLoan(System.Int32,System.Int32)", InvokeUserCode_RpcRequestLoan__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(DebtManager), "System.Void DebtManager::RpcPayInvoice(System.Int32)", InvokeUserCode_RpcPayInvoice__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(DebtManager), "System.Void DebtManager::RpcCreateConsequence(System.Int32)", InvokeUserCode_RpcCreateConsequence__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(DebtManager), "System.Void DebtManager::RpcSolveConsequence(System.Int32)", InvokeUserCode_RpcSolveConsequence__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(DebtManager), "System.Void DebtManager::RpcAutopayInvoicesMessage(System.Boolean,System.Boolean)", InvokeUserCode_RpcAutopayInvoicesMessage__Boolean__Boolean);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.String[](writer, currentInvoicesData);
			writer.WriteInt(loanAmount);
			writer.WriteInt(loanPaymentPerDay);
			GeneratedNetworkCode._Write_System.Boolean[](writer, consequencesValues);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, currentInvoicesData);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(loanAmount);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteInt(loanPaymentPerDay);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Boolean[](writer, consequencesValues);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref currentInvoicesData, null, GeneratedNetworkCode._Read_System.String[](reader));
			GeneratedSyncVarDeserialize(ref loanAmount, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref loanPaymentPerDay, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref consequencesValues, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref currentInvoicesData, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref loanAmount, null, reader.ReadInt());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref loanPaymentPerDay, null, reader.ReadInt());
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref consequencesValues, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DEBUG_AutoFill
using UnityEngine;

public class DEBUG_AutoFill : MonoBehaviour
{
	public GameObject shelvesOBJ;

	public int productID;

	public bool ignoreContainerClass;

	private void Update()
	{
		if (Input.GetKeyDown("f9"))
		{
			productID--;
			productID = Mathf.Clamp(productID, 0, 299);
		}
		if (Input.GetKeyDown("f11"))
		{
			productID++;
			productID = Mathf.Clamp(productID, 0, 299);
		}
		if (Input.GetKeyDown("f10"))
		{
			AddProduct();
		}
	}

	private void AddProduct()
	{
		foreach (Transform item in shelvesOBJ.transform)
		{
			Data_Container component = item.GetComponent<Data_Container>();
			int[] productInfoArray = component.productInfoArray;
			int num = productInfoArray.Length / 2;
			int containerClass = component.containerClass;
			int productContainerClass = ProductListing.Instance.productPrefabs[productID].GetComponent<Data_Product>().productContainerClass;
			if (!ignoreContainerClass && containerClass != productContainerClass)
			{
				continue;
			}
			for (int i = 0; i < num; i++)
			{
				if (productInfoArray[i * 2] < 0)
				{
					float shelfLength = item.GetComponent<Data_Container>().shelfLength;
					float shelfWidth = item.GetComponent<Data_Container>().shelfWidth;
					float shelfHeight = item.GetComponent<Data_Container>().shelfHeight;
					int maxProductsPerRow = GetMaxProductsPerRow(productID, shelfLength, shelfWidth, shelfHeight);
					component.DebugAdd(i * 2, productID, maxProductsPerRow);
					return;
				}
			}
		}
	}

	private int GetMaxProductsPerRow(int ProductID, float shelfLength, float shelfWidth, float shelfHeight)
	{
		GameObject obj = ProductListing.Instance.productPrefabs[ProductID];
		Vector3 size = obj.GetComponent<BoxCollider>().size;
		bool isStackable = obj.GetComponent<Data_Product>().isStackable;
		int value = Mathf.FloorToInt(shelfLength / (size.x * 1.1f));
		value = Mathf.Clamp(value, 1, 100);
		int value2 = Mathf.FloorToInt(shelfWidth / (size.z * 1.1f));
		value2 = Mathf.Clamp(value2, 1, 100);
		int result = value * value2;
		if (isStackable)
		{
			int value3 = Mathf.FloorToInt(shelfHeight / (size.y * 1.1f));
			value3 = Mathf.Clamp(value3, 1, 100);
			result = value * value2 * value3;
		}
		return result;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DebugSaveShare
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using TMPro;
using UnityEngine;

public class DebugSaveShare : MonoBehaviour
{
	public GameObject SavesContainerParent;

	public GameObject UIPrefab;

	public TextMeshProUGUI mainField;

	private int maxSaveNumbersToCheck = 120;

	private List<int> savesNumberList = new List<int>();

	private bool cooldown;

	public void Initialization()
	{
		savesNumberList.Clear();
		if (SavesContainerParent.transform.childCount > 0)
		{
			int childCount = SavesContainerParent.transform.childCount;
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(SavesContainerParent.transform.GetChild(childCount - 1 - i).gameObject);
			}
		}
		string persistentDataPath = Application.persistentDataPath;
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		for (int j = 0; j < maxSaveNumbersToCheck + 1; j++)
		{
			string text = "StoreFile" + j + ".es3";
			string filePath = persistentDataPath + "/" + text;
			if (ES3.FileExists(filePath))
			{
				GameObject obj = Object.Instantiate(UIPrefab, SavesContainerParent.transform);
				obj.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("ArrayIndex").Value = j;
				obj.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("MainGameobject").Value = base.gameObject;
				string text2 = ES3.Load<string>("StoreName", filePath, settings);
				obj.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = text2;
			}
		}
	}

	public void LoadGameInClipboard(int whichStoreIndex)
	{
		if (!cooldown)
		{
			string text = "StoreFile" + whichStoreIndex + ".es3";
			string oldFilePath = Application.persistentDataPath + "/" + text;
			string text2 = Application.persistentDataPath + "/Z_Auxiliar";
			ES3Settings eS3Settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
			ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, ES3.EncryptionType.None);
			ES3.CopyFile(oldFilePath, text2, eS3Settings, eS3Settings);
			ES3.CacheFile(text2, eS3Settings);
			ES3.StoreCachedFile(text2, settings);
			RetrievePlayerLog();
			StartCoroutine(TempTextSet());
		}
	}

	public void RetrievePlayerLog()
	{
		string systemCopyBuffer = "";
		StringBuilder stringBuilder = new StringBuilder();
		string[] array = new string[1] { "Failed to retrieve logs." };
		string text = Application.persistentDataPath + "/Z_Auxiliar";
		if (!ES3.FileExists(text))
		{
			return;
		}
		array = File.ReadAllLines(text);
		if (array.Length != 0)
		{
			for (int i = 0; i < array.Length && !array[i].Contains("Memory Statistics:"); i++)
			{
				stringBuilder.Append(array[i]);
				stringBuilder.Append("\n");
			}
			systemCopyBuffer = stringBuilder.ToString();
		}
		GUIUtility.systemCopyBuffer = systemCopyBuffer;
	}

	private IEnumerator TempTextSet()
	{
		cooldown = true;
		mainField.text = "Copied";
		yield return new WaitForSeconds(2f);
		mainField.text = "Choose one of the following stores to copy in the clipboard:";
		cooldown = false;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DecorationExtraData
using System;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;

public class DecorationExtraData : NetworkBehaviour
{
	[SyncVar(hook = "OnChangeMainInt")]
	public int intValue;

	[SyncVar(hook = "OnChangeMainString")]
	public string stringValue;

	public Color[] colorArray;

	public GameObject[] signOBJs;

	public GameObject[] textOBJs;

	public Action<int, int> _Mirror_SyncVarHookDelegate_intValue;

	public Action<string, string> _Mirror_SyncVarHookDelegate_stringValue;

	public int NetworkintValue
	{
		get
		{
			return intValue;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref intValue, 1uL, _Mirror_SyncVarHookDelegate_intValue);
		}
	}

	public string NetworkstringValue
	{
		get
		{
			return stringValue;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref stringValue, 2uL, _Mirror_SyncVarHookDelegate_stringValue);
		}
	}

	public override void OnStartClient()
	{
		OnChangeMainInt(0, intValue);
		if (stringValue == "")
		{
			NetworkstringValue = "?";
		}
		OnChangeMainString("", stringValue);
	}

	[Command(requiresAuthority = false)]
	public void CmdChangeColor(int colorIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(colorIndex);
		SendCommandInternal("System.Void DecorationExtraData::CmdChangeColor(System.Int32)", -1136098495, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdChangeText(string text)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(text);
		SendCommandInternal("System.Void DecorationExtraData::CmdChangeText(System.String)", -324514478, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void OnChangeMainInt(int oldInt, int newInt)
	{
		newInt = Mathf.Clamp(newInt, 0, colorArray.Length);
		Color value = colorArray[newInt];
		GameObject[] array = signOBJs;
		for (int i = 0; i < array.Length; i++)
		{
			array[i].GetComponent<MeshRenderer>().material.SetColor("_BaseColor", value);
		}
	}

	private void OnChangeMainString(string oldString, string newString)
	{
		if (newString == "")
		{
			newString = "?";
		}
		GameObject[] array = textOBJs;
		for (int i = 0; i < array.Length; i++)
		{
			array[i].GetComponent<TextMeshProUGUI>().text = newString;
		}
	}

	public DecorationExtraData()
	{
		_Mirror_SyncVarHookDelegate_intValue = OnChangeMainInt;
		_Mirror_SyncVarHookDelegate_stringValue = OnChangeMainString;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdChangeColor__Int32(int colorIndex)
	{
		NetworkintValue = colorIndex;
	}

	protected static void InvokeUserCode_CmdChangeColor__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeColor called on client.");
		}
		else
		{
			((DecorationExtraData)obj).UserCode_CmdChangeColor__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdChangeText__String(string text)
	{
		NetworkstringValue = text;
	}

	protected static void InvokeUserCode_CmdChangeText__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeText called on client.");
		}
		else
		{
			((DecorationExtraData)obj).UserCode_CmdChangeText__String(reader.ReadString());
		}
	}

	static DecorationExtraData()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(DecorationExtraData), "System.Void DecorationExtraData::CmdChangeColor(System.Int32)", InvokeUserCode_CmdChangeColor__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(DecorationExtraData), "System.Void DecorationExtraData::CmdChangeText(System.String)", InvokeUserCode_CmdChangeText__String, requiresAuthority: false);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(intValue);
			writer.WriteString(stringValue);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(intValue);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteString(stringValue);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref intValue, _Mirror_SyncVarHookDelegate_intValue, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref stringValue, _Mirror_SyncVarHookDelegate_stringValue, reader.ReadString());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref intValue, _Mirror_SyncVarHookDelegate_intValue, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref stringValue, _Mirror_SyncVarHookDelegate_stringValue, reader.ReadString());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DelayBoxMesh
using UnityEngine;

public class DelayBoxMesh : MonoBehaviour
{
	private void Start()
	{
	}

	private void Update()
	{
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Demolishable
using UnityEngine;

public class Demolishable : MonoBehaviour
{
	private void Start()
	{
	}

	private void Update()
	{
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DemolishableManager
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class DemolishableManager : NetworkBehaviour
{
	[SyncVar]
	public string[] demolishableValues;

	public GameObject demolishableParentRootOBJ;

	public GameObject pillarsUIParentOBJ;

	public GameObject[] demolishEffectsPrefabs;

	public float[] demolishingCosts;

	private string nullValue = "0";

	private string trueValue = "1";

	public string[] NetworkdemolishableValues
	{
		get
		{
			return demolishableValues;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref demolishableValues, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		InitDemolishablesActivation();
	}

	private void InitDemolishablesActivation()
	{
		char c = nullValue[0];
		for (int i = 0; i < demolishableValues.Length; i++)
		{
			string text = demolishableValues[i];
			if (text == "")
			{
				continue;
			}
			GameObject gameObject = demolishableParentRootOBJ.transform.GetChild(i).gameObject;
			for (int j = 0; j < text.Length; j++)
			{
				if (text[j] != c)
				{
					gameObject.transform.GetChild(j).gameObject.SetActive(value: false);
					if (i == 0 && j < pillarsUIParentOBJ.transform.childCount)
					{
						pillarsUIParentOBJ.transform.GetChild(j).gameObject.SetActive(value: true);
					}
				}
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdDemolishItem(int parentIndex, int whichObjectToDemolish)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(parentIndex);
		writer.WriteInt(whichObjectToDemolish);
		SendCommandInternal("System.Void DemolishableManager::CmdDemolishItem(System.Int32,System.Int32)", 573750463, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcDemolishItem(int parentIndex, int whichObjectToDemolish)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(parentIndex);
		writer.WriteInt(whichObjectToDemolish);
		SendRPCInternal("System.Void DemolishableManager::RpcDemolishItem(System.Int32,System.Int32)", 1294536518, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private string AssembleValue(int parentIndex, int whichObjectToDemolish)
	{
		StringBuilder stringBuilder = new StringBuilder();
		string text = demolishableValues[parentIndex];
		GameObject gameObject = demolishableParentRootOBJ.transform.GetChild(parentIndex).gameObject;
		if (text == "")
		{
			for (int i = 0; i < gameObject.transform.childCount; i++)
			{
				stringBuilder.Append("0");
			}
			text = stringBuilder.ToString();
		}
		StringBuilder stringBuilder2 = new StringBuilder();
		for (int j = 0; j < text.Length; j++)
		{
			if (j == whichObjectToDemolish)
			{
				stringBuilder2.Append("1");
			}
			else
			{
				stringBuilder2.Append(text[j]);
			}
		}
		return stringBuilder2.ToString();
	}

	private IEnumerator DelayedDemolishEffectInstantiation(int parentIndex, int whichObjectToDemolish)
	{
		Transform transformToDeactivate = demolishableParentRootOBJ.transform.GetChild(parentIndex).transform.GetChild(whichObjectToDemolish);
		yield return new WaitForSeconds(0.3f);
		if (parentIndex < demolishEffectsPrefabs.Length)
		{
			NetworkServer.Spawn(Object.Instantiate(demolishEffectsPrefabs[parentIndex], transformToDeactivate.position, transformToDeactivate.rotation));
		}
	}

	private IEnumerator DelayedDestruction(int parentIndex, int whichObjectToDemolish)
	{
		yield return new WaitForSeconds(0.3f);
		demolishableParentRootOBJ.transform.GetChild(parentIndex).transform.GetChild(whichObjectToDemolish).gameObject.SetActive(value: false);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdDemolishItem__Int32__Int32(int parentIndex, int whichObjectToDemolish)
	{
		if (parentIndex >= demolishableParentRootOBJ.transform.childCount || parentIndex >= demolishableValues.Length)
		{
			return;
		}
		GameObject gameObject = demolishableParentRootOBJ.transform.GetChild(parentIndex).gameObject;
		if (whichObjectToDemolish >= gameObject.transform.childCount || parentIndex >= demolishingCosts.Length)
		{
			return;
		}
		float num = demolishingCosts[parentIndex];
		if (num > GameData.Instance.gameFunds)
		{
			return;
		}
		GetComponent<GameData>().AlterFundsFromEmployee(0f - num);
		GetComponent<GameData>().otherCosts += num;
		string text = demolishableValues[parentIndex];
		if (text != "")
		{
			char num2 = text[whichObjectToDemolish];
			char c = nullValue[0];
			if (num2 != c)
			{
				return;
			}
		}
		demolishableValues[parentIndex] = AssembleValue(parentIndex, whichObjectToDemolish);
		StartCoroutine(DelayedDemolishEffectInstantiation(parentIndex, whichObjectToDemolish));
		RpcDemolishItem(parentIndex, whichObjectToDemolish);
	}

	protected static void InvokeUserCode_CmdDemolishItem__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdDemolishItem called on client.");
		}
		else
		{
			((DemolishableManager)obj).UserCode_CmdDemolishItem__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcDemolishItem__Int32__Int32(int parentIndex, int whichObjectToDemolish)
	{
		if (!base.isServer)
		{
			demolishableValues[parentIndex] = AssembleValue(parentIndex, whichObjectToDemolish);
		}
		StartCoroutine(DelayedDestruction(parentIndex, whichObjectToDemolish));
		if (parentIndex == 0 && whichObjectToDemolish < pillarsUIParentOBJ.transform.childCount)
		{
			pillarsUIParentOBJ.transform.GetChild(whichObjectToDemolish).gameObject.SetActive(value: true);
		}
	}

	protected static void InvokeUserCode_RpcDemolishItem__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcDemolishItem called on server.");
		}
		else
		{
			((DemolishableManager)obj).UserCode_RpcDemolishItem__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	static DemolishableManager()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(DemolishableManager), "System.Void DemolishableManager::CmdDemolishItem(System.Int32,System.Int32)", InvokeUserCode_CmdDemolishItem__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(DemolishableManager), "System.Void DemolishableManager::RpcDemolishItem(System.Int32,System.Int32)", InvokeUserCode_RpcDemolishItem__Int32__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.String[](writer, demolishableValues);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, demolishableValues);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref demolishableValues, null, GeneratedNetworkCode._Read_System.String[](reader));
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref demolishableValues, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DemolishDebrisControl
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class DemolishDebrisControl : NetworkBehaviour
{
	public GameObject debrisParentOBJ;

	public GameObject debrisDustPrefabOBJ;

	[SyncVar]
	public string debrisState;

	private int debrisAmount;

	private int debrisRemoved;

	private bool beingDestroyed;

	public string NetworkdebrisState
	{
		get
		{
			return debrisState;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref debrisState, 1uL, null);
		}
	}

	public override void OnStartServer()
	{
		debrisAmount = debrisParentOBJ.transform.childCount;
	}

	public override void OnStartClient()
	{
		if (debrisState != "")
		{
			DeactivateDebrisOnJoin();
		}
		if (QualitySettings.GetQualityLevel() > 1)
		{
			if ((bool)base.transform.Find("DustParticles"))
			{
				base.transform.Find("DustParticles").gameObject.SetActive(value: true);
			}
			if ((bool)base.transform.Find("SandParticles"))
			{
				base.transform.Find("SandParticles").gameObject.SetActive(value: true);
			}
		}
	}

	private void DeactivateDebrisOnJoin()
	{
		string[] array = debrisState.Split("|");
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i] == "1")
			{
				debrisParentOBJ.transform.GetChild(i).gameObject.SetActive(value: false);
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdRemoveDebris(int siblingIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(siblingIndex);
		SendCommandInternal("System.Void DemolishDebrisControl::CmdRemoveDebris(System.Int32)", 2088716718, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void AssembleDebrisState()
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < debrisParentOBJ.transform.childCount; i++)
		{
			if (debrisParentOBJ.transform.GetChild(i).gameObject.activeSelf)
			{
				stringBuilder.Append("0");
			}
			else
			{
				stringBuilder.Append("1");
			}
			if (i < debrisParentOBJ.transform.childCount - 1)
			{
				stringBuilder.Append("|");
			}
		}
		NetworkdebrisState = stringBuilder.ToString();
	}

	[ClientRpc]
	private void RpcDustCreate(int siblingIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(siblingIndex);
		SendRPCInternal("System.Void DemolishDebrisControl::RpcDustCreate(System.Int32)", -1261695950, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator TimedDestroy()
	{
		beingDestroyed = true;
		yield return new WaitForSeconds(3f);
		NetworkServer.Destroy(base.gameObject);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdRemoveDebris__Int32(int siblingIndex)
	{
		if (beingDestroyed)
		{
			return;
		}
		if (siblingIndex < debrisParentOBJ.transform.childCount)
		{
			if (!debrisParentOBJ.transform.GetChild(siblingIndex).gameObject.activeSelf)
			{
				return;
			}
			debrisRemoved++;
			debrisParentOBJ.transform.GetChild(siblingIndex).gameObject.SetActive(value: false);
			RpcDustCreate(siblingIndex);
		}
		AssembleDebrisState();
		if (debrisRemoved >= debrisAmount)
		{
			StartCoroutine(TimedDestroy());
		}
	}

	protected static void InvokeUserCode_CmdRemoveDebris__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRemoveDebris called on client.");
		}
		else
		{
			((DemolishDebrisControl)obj).UserCode_CmdRemoveDebris__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcDustCreate__Int32(int siblingIndex)
	{
		Transform child = debrisParentOBJ.transform.GetChild(siblingIndex);
		child.gameObject.SetActive(value: false);
		Object.Instantiate(debrisDustPrefabOBJ, child.position, child.rotation);
	}

	protected static void InvokeUserCode_RpcDustCreate__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcDustCreate called on server.");
		}
		else
		{
			((DemolishDebrisControl)obj).UserCode_RpcDustCreate__Int32(reader.ReadInt());
		}
	}

	static DemolishDebrisControl()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(DemolishDebrisControl), "System.Void DemolishDebrisControl::CmdRemoveDebris(System.Int32)", InvokeUserCode_CmdRemoveDebris__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(DemolishDebrisControl), "System.Void DemolishDebrisControl::RpcDustCreate(System.Int32)", InvokeUserCode_RpcDustCreate__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteString(debrisState);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteString(debrisState);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref debrisState, null, reader.ReadString());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref debrisState, null, reader.ReadString());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DemolitionHammer
using System.Collections;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;

public class DemolitionHammer : MonoBehaviour
{
	public GameObject canvasOBJ;

	public TextMeshProUGUI costField;

	[SerializeField]
	private LayerMask lMask;

	private float[] DemolitionCosts;

	private GameObject currentRaycastedOBJ;

	private GameObject debrisRaycastedOBJ;

	private Player MainPlayer;

	private PlayerPermissions pPermComponent;

	private bool onCooldown;

	private void Start()
	{
		DemolitionCosts = GameData.Instance.GetComponent<DemolishableManager>().demolishingCosts;
		MainPlayer = ReInput.players.GetPlayer(0);
		pPermComponent = FirstPersonController.Instance.GetComponent<PlayerPermissions>();
	}

	private void AuxiliarDestroyFromHere(GameObject hitOBJ)
	{
		if (!(hitOBJ == null) && (bool)hitOBJ.GetComponent<PaintableAuxiliarHighlight>())
		{
			hitOBJ.GetComponent<PaintableAuxiliarHighlight>().DestroyBehaviours();
		}
	}

	private void SetCanvasPrice(GameObject hitOBJ)
	{
		int siblingIndex = hitOBJ.transform.parent.GetSiblingIndex();
		if (siblingIndex < DemolitionCosts.Length)
		{
			float num = DemolitionCosts[siblingIndex];
			costField.text = "$" + num;
		}
	}

	private void Update()
	{
		if (!pPermComponent.RequestMP() || onCooldown)
		{
			return;
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
		{
			GameObject gameObject = hitInfo.transform.gameObject;
			if (gameObject.transform.parent != null && (bool)gameObject.transform.parent.GetComponent<Demolishable>())
			{
				if (!gameObject.GetComponent<PaintableAuxiliarHighlight>())
				{
					gameObject.AddComponent<PaintableAuxiliarHighlight>();
					currentRaycastedOBJ = gameObject;
					canvasOBJ.SetActive(value: true);
					SetCanvasPrice(gameObject);
				}
			}
			else
			{
				AuxiliarDestroyFromHere(currentRaycastedOBJ);
				currentRaycastedOBJ = null;
				canvasOBJ.SetActive(value: false);
			}
			if (gameObject.transform.parent != null && gameObject.transform.parent.transform.parent != null && (bool)gameObject.transform.parent.transform.parent.GetComponent<DemolishDebrisControl>())
			{
				if (!gameObject.GetComponent<PaintableAuxiliarHighlight>())
				{
					gameObject.AddComponent<PaintableAuxiliarHighlight>();
					debrisRaycastedOBJ = gameObject;
				}
			}
			else
			{
				AuxiliarDestroyFromHere(debrisRaycastedOBJ);
				debrisRaycastedOBJ = null;
			}
		}
		else
		{
			AuxiliarDestroyFromHere(currentRaycastedOBJ);
			currentRaycastedOBJ = null;
			canvasOBJ.SetActive(value: false);
			AuxiliarDestroyFromHere(debrisRaycastedOBJ);
			debrisRaycastedOBJ = null;
		}
		if (!MainPlayer.GetButtonDown("Main Action"))
		{
			return;
		}
		if ((bool)currentRaycastedOBJ)
		{
			int siblingIndex = currentRaycastedOBJ.transform.parent.GetSiblingIndex();
			if (siblingIndex < DemolitionCosts.Length)
			{
				if (DemolitionCosts[siblingIndex] > GameData.Instance.gameFunds)
				{
					GameCanvas.Instance.CreateCanvasNotification("message6");
					return;
				}
				int siblingIndex2 = currentRaycastedOBJ.transform.GetSiblingIndex();
				GameData.Instance.GetComponent<DemolishableManager>().CmdDemolishItem(siblingIndex, siblingIndex2);
				StartCoroutine(AnimationCooldown(1f));
				FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdPlayAnimation(1);
			}
		}
		else if ((bool)debrisRaycastedOBJ)
		{
			int siblingIndex3 = debrisRaycastedOBJ.transform.GetSiblingIndex();
			debrisRaycastedOBJ.transform.parent.transform.parent.GetComponent<DemolishDebrisControl>().CmdRemoveDebris(siblingIndex3);
			StartCoroutine(AnimationCooldown(0.5f));
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdPlayAnimation(1);
		}
	}

	private IEnumerator AnimationCooldown(float waitTime)
	{
		onCooldown = true;
		yield return new WaitForSeconds(waitTime);
		onCooldown = false;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DrawCorrectListener
using TMPro;
using UnityEngine;

public class DrawCorrectListener : MonoBehaviour
{
	public string correctWord;

	public GameObject chatHistoryParentOBJ;

	private int numberOfMessages;

	private int oldNumberOfMessages;

	private void Update()
	{
		numberOfMessages = chatHistoryParentOBJ.transform.childCount;
		if (numberOfMessages > 0)
		{
			if (numberOfMessages != oldNumberOfMessages)
			{
				CheckMessages();
				oldNumberOfMessages = numberOfMessages;
			}
		}
		else if (oldNumberOfMessages != 0)
		{
			oldNumberOfMessages = 0;
		}
	}

	private void CheckMessages()
	{
		foreach (Transform item in chatHistoryParentOBJ.transform)
		{
			string text = item.GetComponent<TextMeshProUGUI>().text;
			if (text.Contains(">"))
			{
				string[] array = text.Split(">");
				if (array.Length == 3 && array[2].Substring(1).ToLower() == correctWord.ToLower())
				{
					string[] array2 = array[1].Split(":");
					string winningPlayer = ((array2.Length == 0) ? "?????" : array2[0]);
					GetComponent<DrawTheWordManager>().FinishGame(winningPlayer);
					base.enabled = false;
				}
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DrawTheWordManager
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using Wing.uPainter;

public class DrawTheWordManager : NetworkBehaviour
{
	[SyncVar]
	public bool allowGameRequest;

	[SyncVar]
	public bool playerAlreadyDrawing;

	public string wordToGuess;

	public GameObject currentDrawingPlayer;

	public bool localPlayerIsPainter;

	[Space(10f)]
	public GameObject paintingMeshOBJ;

	public GameObject hostEnableButtonOBJ;

	public GameObject gameRequestContainerOBJ;

	public GameObject drawContainerOBJ;

	public GameObject brushColorsUIParentOBJ;

	public GameObject yourWordIsContainerOBJ;

	public TextMeshProUGUI yourWordField;

	public TextMeshProUGUI timeLeftField;

	private MeshDrawer mDrawerComponent;

	private int gameTimerLimit = 300;

	public bool NetworkallowGameRequest
	{
		get
		{
			return allowGameRequest;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref allowGameRequest, 1uL, null);
		}
	}

	public bool NetworkplayerAlreadyDrawing
	{
		get
		{
			return playerAlreadyDrawing;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref playerAlreadyDrawing, 2uL, null);
		}
	}

	public override void OnStartClient()
	{
		if (allowGameRequest)
		{
			ActivateDrawingBehaviours();
			if (!playerAlreadyDrawing)
			{
				gameRequestContainerOBJ.SetActive(value: true);
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdEnablePaintingMinigame()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void DrawTheWordManager::CmdEnablePaintingMinigame()", -1616625459, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcEnablePaintingMinigame(bool enable)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(enable);
		SendRPCInternal("System.Void DrawTheWordManager::RpcEnablePaintingMinigame(System.Boolean)", 1657622251, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void ActivateDrawingBehaviours()
	{
		mDrawerComponent = GetComponent<MeshDrawer>();
		mDrawerComponent.enabled = true;
		paintingMeshOBJ.GetComponent<MeshPaintCanvas>().enabled = true;
	}

	[Command(requiresAuthority = false)]
	public void CmdRequestGameStart(string chosenWord, GameObject requesterOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(chosenWord);
		writer.WriteGameObject(requesterOBJ);
		SendCommandInternal("System.Void DrawTheWordManager::CmdRequestGameStart(System.String,UnityEngine.GameObject)", 2071209104, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcGameStart(string chosenWord, GameObject requesterOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(chosenWord);
		writer.WriteGameObject(requesterOBJ);
		SendRPCInternal("System.Void DrawTheWordManager::RpcGameStart(System.String,UnityEngine.GameObject)", -830407058, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator FinishGameOnTimeLimit()
	{
		WaitForSeconds secondWait = new WaitForSeconds(1f);
		int timer = gameTimerLimit;
		while (timer > 0)
		{
			if (base.isClient)
			{
				timeLeftField.text = timer.ToString();
			}
			timer--;
			yield return secondWait;
		}
		timeLeftField.text = "0";
		if (base.isServer)
		{
			RpcFinishGame("");
		}
	}

	public void FinishGame(string winningPlayer)
	{
		RpcFinishGame(winningPlayer);
	}

	[ClientRpc]
	public void RpcFinishGame(string winningPlayer)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(winningPlayer);
		SendRPCInternal("System.Void DrawTheWordManager::RpcFinishGame(System.String)", -1165298859, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator ShowRequestAgain()
	{
		yield return new WaitForSeconds(5f);
		gameRequestContainerOBJ.SetActive(value: true);
	}

	[Command(requiresAuthority = false)]
	public void CmdSwapBrushColor(int buttonChildIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(buttonChildIndex);
		SendCommandInternal("System.Void DrawTheWordManager::CmdSwapBrushColor(System.Int32)", -2090275262, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcSwapBrushColor(int buttonChildIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(buttonChildIndex);
		SendRPCInternal("System.Void DrawTheWordManager::RpcSwapBrushColor(System.Int32)", 1761704473, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSwapBrushSize(float brushSize)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(brushSize);
		SendCommandInternal("System.Void DrawTheWordManager::CmdSwapBrushSize(System.Single)", 1311875436, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcSwapBrushSize(float brushSize)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(brushSize);
		SendRPCInternal("System.Void DrawTheWordManager::RpcSwapBrushSize(System.Single)", -1279575517, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSendBrushInformation(bool drawing, Vector3 uvPoint)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(drawing);
		writer.WriteVector3(uvPoint);
		SendCommandInternal("System.Void DrawTheWordManager::CmdSendBrushInformation(System.Boolean,UnityEngine.Vector3)", 1947139805, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcSendBrushInformation(bool drawing, Vector3 uvPoint)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(drawing);
		writer.WriteVector3(uvPoint);
		SendRPCInternal("System.Void DrawTheWordManager::RpcSendBrushInformation(System.Boolean,UnityEngine.Vector3)", 1886905214, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdEnablePaintingMinigame()
	{
		NetworkallowGameRequest = true;
		RpcEnablePaintingMinigame(enable: true);
		hostEnableButtonOBJ.SetActive(value: false);
	}

	protected static void InvokeUserCode_CmdEnablePaintingMinigame(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdEnablePaintingMinigame called on client.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_CmdEnablePaintingMinigame();
		}
	}

	protected void UserCode_RpcEnablePaintingMinigame__Boolean(bool enable)
	{
		ActivateDrawingBehaviours();
		gameRequestContainerOBJ.SetActive(value: true);
	}

	protected static void InvokeUserCode_RpcEnablePaintingMinigame__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcEnablePaintingMinigame called on server.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_RpcEnablePaintingMinigame__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_CmdRequestGameStart__String__GameObject(string chosenWord, GameObject requesterOBJ)
	{
		if (!playerAlreadyDrawing && !string.IsNullOrEmpty(chosenWord) && !string.IsNullOrWhiteSpace(chosenWord) && chosenWord.Length >= 2 && !chosenWord.Contains(" ") && !chosenWord.Contains(">"))
		{
			currentDrawingPlayer = requesterOBJ;
			wordToGuess = chosenWord;
			NetworkplayerAlreadyDrawing = true;
			GetComponent<DrawCorrectListener>().correctWord = chosenWord;
			GetComponent<DrawCorrectListener>().enabled = true;
			RpcGameStart(chosenWord, requesterOBJ);
		}
	}

	protected static void InvokeUserCode_CmdRequestGameStart__String__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestGameStart called on client.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_CmdRequestGameStart__String__GameObject(reader.ReadString(), reader.ReadGameObject());
		}
	}

	protected void UserCode_RpcGameStart__String__GameObject(string chosenWord, GameObject requesterOBJ)
	{
		localPlayerIsPainter = false;
		StartCoroutine(FinishGameOnTimeLimit());
		if (requesterOBJ.name == "LocalGamePlayer")
		{
			mDrawerComponent.EnablePaint = true;
			drawContainerOBJ.SetActive(value: true);
			yourWordIsContainerOBJ.SetActive(value: true);
			localPlayerIsPainter = true;
			yourWordField.text = chosenWord;
		}
		GameCanvas.Instance.CreateImportantNotification("drawgame1");
		gameRequestContainerOBJ.SetActive(value: false);
	}

	protected static void InvokeUserCode_RpcGameStart__String__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcGameStart called on server.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_RpcGameStart__String__GameObject(reader.ReadString(), reader.ReadGameObject());
		}
	}

	protected void UserCode_RpcFinishGame__String(string winningPlayer)
	{
		StopAllCoroutines();
		if (base.isServer)
		{
			NetworkplayerAlreadyDrawing = false;
		}
		if (winningPlayer != "")
		{
			GetComponent<AudioSource>().Play();
			GameCanvas.Instance.CreateCompoundWarning("drawgame2", winningPlayer);
		}
		else
		{
			GameCanvas.Instance.CreateImportantNotification("drawgame3");
		}
		mDrawerComponent.EnablePaint = false;
		drawContainerOBJ.SetActive(value: false);
		yourWordIsContainerOBJ.SetActive(value: false);
		StartCoroutine(ShowRequestAgain());
	}

	protected static void InvokeUserCode_RpcFinishGame__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcFinishGame called on server.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_RpcFinishGame__String(reader.ReadString());
		}
	}

	protected void UserCode_CmdSwapBrushColor__Int32(int buttonChildIndex)
	{
		RpcSwapBrushColor(buttonChildIndex);
	}

	protected static void InvokeUserCode_CmdSwapBrushColor__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSwapBrushColor called on client.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_CmdSwapBrushColor__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcSwapBrushColor__Int32(int buttonChildIndex)
	{
		if (buttonChildIndex < brushColorsUIParentOBJ.transform.childCount)
		{
			paintingMeshOBJ.GetComponent<MeshPaintCanvas>().Brush.BrushColor = brushColorsUIParentOBJ.transform.GetChild(buttonChildIndex).GetComponent<Button>().colors.normalColor;
		}
	}

	protected static void InvokeUserCode_RpcSwapBrushColor__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSwapBrushColor called on server.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_RpcSwapBrushColor__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdSwapBrushSize__Single(float brushSize)
	{
		RpcSwapBrushSize(brushSize);
	}

	protected static void InvokeUserCode_CmdSwapBrushSize__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSwapBrushSize called on client.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_CmdSwapBrushSize__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_RpcSwapBrushSize__Single(float brushSize)
	{
		paintingMeshOBJ.GetComponent<MeshPaintCanvas>().Brush.Size = brushSize;
	}

	protected static void InvokeUserCode_RpcSwapBrushSize__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSwapBrushSize called on server.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_RpcSwapBrushSize__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_CmdSendBrushInformation__Boolean__Vector3(bool drawing, Vector3 uvPoint)
	{
		RpcSendBrushInformation(drawing, uvPoint);
	}

	protected static void InvokeUserCode_CmdSendBrushInformation__Boolean__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSendBrushInformation called on client.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_CmdSendBrushInformation__Boolean__Vector3(reader.ReadBool(), reader.ReadVector3());
		}
	}

	protected void UserCode_RpcSendBrushInformation__Boolean__Vector3(bool drawing, Vector3 uvPoint)
	{
		if ((bool)mDrawerComponent && !localPlayerIsPainter)
		{
			mDrawerComponent.DrawFromManager(drawing, uvPoint);
		}
	}

	protected static void InvokeUserCode_RpcSendBrushInformation__Boolean__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSendBrushInformation called on server.");
		}
		else
		{
			((DrawTheWordManager)obj).UserCode_RpcSendBrushInformation__Boolean__Vector3(reader.ReadBool(), reader.ReadVector3());
		}
	}

	static DrawTheWordManager()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::CmdEnablePaintingMinigame()", InvokeUserCode_CmdEnablePaintingMinigame, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::CmdRequestGameStart(System.String,UnityEngine.GameObject)", InvokeUserCode_CmdRequestGameStart__String__GameObject, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::CmdSwapBrushColor(System.Int32)", InvokeUserCode_CmdSwapBrushColor__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::CmdSwapBrushSize(System.Single)", InvokeUserCode_CmdSwapBrushSize__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::CmdSendBrushInformation(System.Boolean,UnityEngine.Vector3)", InvokeUserCode_CmdSendBrushInformation__Boolean__Vector3, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::RpcEnablePaintingMinigame(System.Boolean)", InvokeUserCode_RpcEnablePaintingMinigame__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::RpcGameStart(System.String,UnityEngine.GameObject)", InvokeUserCode_RpcGameStart__String__GameObject);
		RemoteProcedureCalls.RegisterRpc(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::RpcFinishGame(System.String)", InvokeUserCode_RpcFinishGame__String);
		RemoteProcedureCalls.RegisterRpc(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::RpcSwapBrushColor(System.Int32)", InvokeUserCode_RpcSwapBrushColor__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::RpcSwapBrushSize(System.Single)", InvokeUserCode_RpcSwapBrushSize__Single);
		RemoteProcedureCalls.RegisterRpc(typeof(DrawTheWordManager), "System.Void DrawTheWordManager::RpcSendBrushInformation(System.Boolean,UnityEngine.Vector3)", InvokeUserCode_RpcSendBrushInformation__Boolean__Vector3);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteBool(allowGameRequest);
			writer.WriteBool(playerAlreadyDrawing);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteBool(allowGameRequest);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteBool(playerAlreadyDrawing);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref allowGameRequest, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref playerAlreadyDrawing, null, reader.ReadBool());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref allowGameRequest, null, reader.ReadBool());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref playerAlreadyDrawing, null, reader.ReadBool());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DropdownSample
using TMPro;
using UnityEngine;

public class DropdownSample : MonoBehaviour
{
	[SerializeField]
	private TextMeshProUGUI text;

	[SerializeField]
	private TMP_Dropdown dropdownWithoutPlaceholder;

	[SerializeField]
	private TMP_Dropdown dropdownWithPlaceholder;

	public void OnButtonClick()
	{
		text.text = ((dropdownWithPlaceholder.value > -1) ? ("Selected values:\n" + dropdownWithoutPlaceholder.value + " - " + dropdownWithPlaceholder.value) : "Error: Please make a selection");
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// DummyStuff
using System.Collections;
using UnityEngine;

public class DummyStuff : MonoBehaviour
{
	public int[] productArray = new int[4] { -1, -1, -1, -1 };

	public float shelfLength = 1f;

	public float shelfWidth = 1f;

	public Vector3 productAngleOffset = new Vector3(0f, 90f, 0f);

	private ProductListing productlistComponent;

	private const float offsetFactor = 1.1f;

	private void Start()
	{
		StartCoroutine(meowRoutine());
	}

	private IEnumerator meowRoutine()
	{
		yield return new WaitForSeconds(Random.Range(1f, 10f));
		FillRows();
	}

	public void FillRows()
	{
		if (!productlistComponent)
		{
			productlistComponent = GameData.Instance.GetComponent<ProductListing>();
		}
		for (int i = 0; i < productArray.Length; i++)
		{
			GameObject gameObject = productlistComponent.productPrefabs[Random.Range(0, 175)];
			Vector3 size = gameObject.GetComponent<BoxCollider>().size;
			int num = Mathf.FloorToInt(shelfLength / (size.x * 1.1f));
			int num2 = Mathf.FloorToInt(shelfWidth / (size.z * 1.1f));
			int num3 = num * num2;
			Transform child = base.transform.Find("ProductContainer").gameObject.transform.GetChild(i);
			for (int j = 0; j < num3; j++)
			{
				int num4 = j / num;
				int num5 = j % num;
				GameObject obj = Object.Instantiate(gameObject);
				obj.transform.SetParent(child);
				obj.transform.localPosition = new Vector3((float)num4 * size.z * 1.1f, 0f, (float)num5 * size.x * 1.1f) + new Vector3(size.z / 2f, 0f, size.x / 2f);
				obj.transform.localRotation = Quaternion.Euler(productAngleOffset);
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// EasterBehaviour
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;
using UnityEngine.AI;

public class EasterBehaviour : NetworkBehaviour
{
	[SyncVar]
	public int easterID;

	public GameObject[] eastersArray;

	public GameObject textPrefabOBJ;

	public string[] fredStrings;

	private int fredCounter;

	public int NetworkeasterID
	{
		get
		{
			return easterID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref easterID, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		base.OnStartClient();
		CreateObject(easterID);
	}

	private void CreateObject(int arrayIndex)
	{
		if (arrayIndex >= eastersArray.Length)
		{
			return;
		}
		GameObject gameObject = eastersArray[arrayIndex];
		if (!gameObject)
		{
			return;
		}
		Object.Instantiate(gameObject, base.transform).transform.localPosition = Vector3.zero;
		if (arrayIndex == 0)
		{
			if (base.isServer)
			{
				GetComponent<NavMeshAgent>().enabled = true;
				GetComponent<PlayMakerFSM>().enabled = true;
			}
			base.transform.position = new Vector3(0f, 0f, -6f);
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdFredString()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void EasterBehaviour::CmdFredString()", 2063726036, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcFredString(int indexValue)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(indexValue);
		SendRPCInternal("System.Void EasterBehaviour::RpcFredString(System.Int32)", 951635282, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdFredWalkState(bool set)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(set);
		SendCommandInternal("System.Void EasterBehaviour::CmdFredWalkState(System.Boolean)", -2118329798, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdFredString()
	{
		if (fredCounter >= fredStrings.Length)
		{
			fredCounter = 0;
		}
		RpcFredString(fredCounter);
		fredCounter++;
	}

	protected static void InvokeUserCode_CmdFredString(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdFredString called on client.");
		}
		else
		{
			((EasterBehaviour)obj).UserCode_CmdFredString();
		}
	}

	protected void UserCode_RpcFredString__Int32(int indexValue)
	{
		GameObject obj = Object.Instantiate(textPrefabOBJ, base.transform.position + Vector3.up, Quaternion.identity);
		obj.GetComponent<TextMeshPro>().text = fredStrings[indexValue];
		obj.SetActive(value: true);
	}

	protected static void InvokeUserCode_RpcFredString__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcFredString called on server.");
		}
		else
		{
			((EasterBehaviour)obj).UserCode_RpcFredString__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdFredWalkState__Boolean(bool set)
	{
		base.transform.GetChild(0).GetComponent<Animator>().SetBool("Walking", set);
	}

	protected static void InvokeUserCode_CmdFredWalkState__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdFredWalkState called on client.");
		}
		else
		{
			((EasterBehaviour)obj).UserCode_CmdFredWalkState__Boolean(reader.ReadBool());
		}
	}

	static EasterBehaviour()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(EasterBehaviour), "System.Void EasterBehaviour::CmdFredString()", InvokeUserCode_CmdFredString, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(EasterBehaviour), "System.Void EasterBehaviour::CmdFredWalkState(System.Boolean)", InvokeUserCode_CmdFredWalkState__Boolean, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(EasterBehaviour), "System.Void EasterBehaviour::RpcFredString(System.Int32)", InvokeUserCode_RpcFredString__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(easterID);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(easterID);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref easterID, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref easterID, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// EasterChecker
using System.Collections;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class EasterChecker : NetworkBehaviour
{
	public string[] checkersArray;

	public bool[] alreadySpawned;

	public GameObject easterPrefab;

	private bool spawnCooldown;

	public void StringChecker(string message)
	{
		if (spawnCooldown || message == "" || !base.isServer)
		{
			return;
		}
		if (message == "corner_shelf_fix")
		{
			GetComponent<CornerShelvesFix>().enabled = true;
			GetComponent<CornerShelvesFix>().MoveCornerShelvesBackToEntrance();
			return;
		}
		for (int i = 0; i < checkersArray.Length; i++)
		{
			if (!alreadySpawned[i] && message.Contains(checkersArray[i]))
			{
				CmdSpawnEaster(i);
				StartCoroutine(SpawnCooldown());
				alreadySpawned[i] = true;
				break;
			}
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdSpawnEaster(int easterIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(easterIndex);
		SendCommandInternal("System.Void EasterChecker::CmdSpawnEaster(System.Int32)", 2083728754, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator SpawnCooldown()
	{
		spawnCooldown = true;
		yield return new WaitForSeconds(5f);
		spawnCooldown = false;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdSpawnEaster__Int32(int easterIndex)
	{
		GameObject obj = Object.Instantiate(easterPrefab);
		obj.GetComponent<EasterBehaviour>().NetworkeasterID = easterIndex;
		NetworkServer.Spawn(obj);
	}

	protected static void InvokeUserCode_CmdSpawnEaster__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnEaster called on client.");
		}
		else
		{
			((EasterChecker)obj).UserCode_CmdSpawnEaster__Int32(reader.ReadInt());
		}
	}

	static EasterChecker()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(EasterChecker), "System.Void EasterChecker::CmdSpawnEaster(System.Int32)", InvokeUserCode_CmdSpawnEaster__Int32, requiresAuthority: false);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// EmployeesDataGeneration
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class EmployeesDataGeneration : MonoBehaviour
{
	public Sprite[] employeesSprites;

	[Space(10f)]
	public GameObject CVsParentOBJ;

	public GameObject CVsUIPrefab;

	public GameObject CVsDataPanel;

	public GameObject[] experienceOBJsArray;

	public GameObject rerollOBJ;

	public TextMeshProUGUI rerollTimesField;

	[Space(10f)]
	public GameObject dismissParentOBJ;

	public GameObject dismissUIPrefab;

	public GameObject dismissDataPanel;

	public GameObject[] dismissExperienceOBJsArray;

	[Space(10f)]
	public GameObject assignmentParentOBJ;

	public GameObject assignmentUIPrefab;

	[Space(10f)]
	public GameObject savePLayoutsParent;

	public GameObject loadPLayoutsParent;

	[Space(10f)]
	public TextMeshProUGUI maxEmployeesField;

	public TextMeshProUGUI hiredEmployeesField;

	public TextMeshProUGUI staffroomHappinessField;

	public Color colorOff;

	public Color colorOn;

	public Sprite[] hatSprites;

	public string[] priorityHashes;

	public Color[] priorityColors;

	public string[] hexaColors;

	private NPC_Manager managerComponent;

	private void Start()
	{
		managerComponent = GetComponent<NPC_Manager>();
	}

	public void GenerateTodayEmployeesData()
	{
		int num = Random.Range(0, 5);
		int num2 = Random.Range(5, 10);
		for (int i = 0; i < 10; i++)
		{
			int num3 = Random.Range(0, 7);
			int num4;
			int num5;
			int num6;
			int num7;
			int num8;
			int num9;
			int num10;
			if (i == num)
			{
				num4 = Random.Range(6, 11);
				num5 = Random.Range(7, 11);
				num6 = Random.Range(6, 11);
				num7 = Random.Range(7, 11);
				num8 = Random.Range(6, 11);
				num9 = Random.Range(7, 11);
				num10 = Random.Range(6, 11);
			}
			else if (i == num2)
			{
				num4 = Random.Range(5, 11);
				num5 = Random.Range(4, 11);
				num6 = Random.Range(5, 11);
				num7 = Random.Range(4, 11);
				num8 = Random.Range(5, 11);
				num9 = Random.Range(4, 11);
				num10 = Random.Range(5, 11);
			}
			else
			{
				num4 = Random.Range(1, 11);
				num5 = Random.Range(1, 11);
				num6 = Random.Range(1, 11);
				num7 = Random.Range(1, 11);
				num8 = Random.Range(1, 11);
				num9 = Random.Range(1, 11);
				num10 = Random.Range(1, 11);
			}
			int value = (num4 + num5 + num6 + num7) * Random.Range(3, 6) + Random.Range(-2, 3) * 10;
			value = Mathf.Clamp(value, 30, 1000);
			string text = num3 + "|" + value + "|" + num4 + "|" + num5 + "|" + num6 + "|" + num7 + "|" + num8 + "|" + num9 + "|" + num10;
			managerComponent.todaysEmployeesData[i] = text;
			managerComponent.UpdateTodayEmployeesOnClients(i, text);
		}
	}

	public void UpdateValuesInEmployeesTab()
	{
		maxEmployeesField.text = managerComponent.maxEmployees.ToString();
		hiredEmployeesField.text = managerComponent.numberOfHiredEmployees.ToString();
		float num = Mathf.Round(NPC_Manager.Instance.currentHappinessLevel * 100f) / 100f;
		staffroomHappinessField.text = num.ToString();
	}

	public void HireEmployee(int index, string employeeName)
	{
		if (FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestMP() && !string.IsNullOrWhiteSpace(managerComponent.todaysEmployeesData[index]))
		{
			if (NPC_Manager.Instance.numberOfHiredEmployees >= NPC_Manager.Instance.maxEmployees)
			{
				GameCanvas.Instance.CreateCanvasNotification("canthiremore");
			}
			else
			{
				NPC_Manager.Instance.CmdHireEmployeeData(index, employeeName);
			}
		}
	}

	public void SpawnUICVs()
	{
		CVsDataPanel.SetActive(value: false);
		if (GetComponent<NPC_Manager>().rerollTimes > 0)
		{
			rerollOBJ.SetActive(value: true);
			rerollTimesField.text = "x" + GetComponent<NPC_Manager>().rerollTimes;
		}
		if (CVsParentOBJ.transform.childCount > 0)
		{
			int childCount = CVsParentOBJ.transform.childCount;
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(CVsParentOBJ.transform.GetChild(CVsParentOBJ.transform.childCount - 1 - i).gameObject);
			}
		}
		for (int j = 0; j < managerComponent.todaysEmployeesData.Length; j++)
		{
			string text = managerComponent.todaysEmployeesData[j];
			GameObject gameObject = Object.Instantiate(CVsUIPrefab, CVsParentOBJ.transform);
			if (string.IsNullOrWhiteSpace(text))
			{
				gameObject.transform.Find("HiredBCK").gameObject.SetActive(value: true);
				continue;
			}
			string[] array = text.Split("|");
			int num = int.Parse(array[0]);
			int num2 = int.Parse(array[1]);
			int num3 = int.Parse(array[2]);
			int num4 = int.Parse(array[3]);
			int num5 = int.Parse(array[4]);
			int num6 = int.Parse(array[5]);
			int num7 = int.Parse(array[6]);
			int num8 = int.Parse(array[7]);
			int num9 = int.Parse(array[8]);
			int num10 = Mathf.FloorToInt((num3 + num4 + num5 + num6 + num7 + num8 + num9) / 7);
			gameObject.transform.Find("EmployeeImageBCK/EmployeeImage").GetComponent<Image>().sprite = employeesSprites[num];
			gameObject.transform.Find("SalaryBCK/Salary_Text").GetComponent<TextMeshProUGUI>().text = "$" + num2;
			gameObject.transform.Find("ScoreBCK/Score_Text").GetComponent<TextMeshProUGUI>().text = num10.ToString();
			gameObject.transform.Find("Button_SelectCV").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
		}
	}

	public void SetUIDataInPanel(int index)
	{
		string text = managerComponent.todaysEmployeesData[index];
		if (string.IsNullOrWhiteSpace(text))
		{
			return;
		}
		string[] array = text.Split("|");
		int num = int.Parse(array[0]);
		int num2 = int.Parse(array[1]);
		int num3 = int.Parse(array[2]);
		int num4 = int.Parse(array[3]);
		int num5 = int.Parse(array[4]);
		int num6 = int.Parse(array[5]);
		int num7 = int.Parse(array[6]);
		int num8 = int.Parse(array[7]);
		int num9 = int.Parse(array[8]);
		int num10 = Mathf.FloorToInt((num3 + num4 + num5 + num6 + num7 + num8 + num9) / 7);
		CVsDataPanel.transform.Find("EmployeeImageBCK/EmployeeImage").GetComponent<Image>().sprite = employeesSprites[num];
		CVsDataPanel.transform.Find("DataBCK/Salary_Text").GetComponent<TextMeshProUGUI>().text = "$" + num2;
		CVsDataPanel.transform.Find("DataBCK/ScoreBCK/Score_Text").GetComponent<TextMeshProUGUI>().text = num10.ToString();
		CVsDataPanel.transform.Find("Button_Hire").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("CurrentCVIndex").Value = index;
		int[] array2 = new int[7] { num3, num4, num5, num6, num7, num8, num9 };
		for (int i = 0; i < experienceOBJsArray.Length; i++)
		{
			GameObject gameObject = experienceOBJsArray[i];
			int num11 = array2[i];
			for (int j = 0; j < 10; j++)
			{
				Transform child = gameObject.transform.GetChild(j);
				if (j >= num11)
				{
					child.GetComponent<Image>().color = colorOff;
				}
				else
				{
					child.GetComponent<Image>().color = colorOn;
				}
			}
		}
		CVsDataPanel.SetActive(value: true);
	}

	public void DismissEmployee(int index)
	{
		if (FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestMP() && !string.IsNullOrWhiteSpace(managerComponent.hiredEmployeesData[index]))
		{
			NPC_Manager.Instance.CmdDismissEmployeeData(index);
		}
	}

	public void SpawnUIDismiss()
	{
		if (dismissParentOBJ.transform.childCount > 0)
		{
			int childCount = dismissParentOBJ.transform.childCount;
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(dismissParentOBJ.transform.GetChild(dismissParentOBJ.transform.childCount - 1 - i).gameObject);
			}
		}
		for (int j = 0; j < managerComponent.hiredEmployeesData.Length; j++)
		{
			string text = managerComponent.hiredEmployeesData[j];
			GameObject gameObject = Object.Instantiate(dismissUIPrefab, dismissParentOBJ.transform);
			if (string.IsNullOrWhiteSpace(text))
			{
				gameObject.transform.Find("EmptyPosition").gameObject.SetActive(value: true);
				continue;
			}
			string[] array = text.Split("|");
			int num = int.Parse(array[0]);
			int num2 = int.Parse(array[1]);
			int num3 = int.Parse(array[2]);
			int num4 = int.Parse(array[3]);
			int num5 = int.Parse(array[4]);
			int num6 = int.Parse(array[5]);
			int num7 = int.Parse(array[6]);
			int num8 = int.Parse(array[7]);
			int num9 = int.Parse(array[8]);
			int num10 = Mathf.FloorToInt((num3 + num4 + num5 + num6 + num7 + num8 + num9) / 7);
			string text2 = array[9];
			int num11 = Mathf.FloorToInt(int.Parse(array[11]) / 5000);
			int num12 = Mathf.FloorToInt(int.Parse(array[12]) / 1000);
			int num13 = Mathf.FloorToInt(int.Parse(array[13]) / 1000);
			int num14 = Mathf.FloorToInt(int.Parse(array[14]) / 1000);
			int num15 = Mathf.FloorToInt(int.Parse(array[15]) / 1000);
			int num16 = Mathf.FloorToInt(int.Parse(array[16]) / 1000);
			int num17 = Mathf.FloorToInt(int.Parse(array[17]) / 1000);
			int num18 = Mathf.FloorToInt((num11 + num12 + num13 + num14 + num15 + num16 + num17) / 7);
			gameObject.transform.Find("EmployeeImageBCK/EmployeeImage").GetComponent<Image>().sprite = employeesSprites[num];
			gameObject.transform.Find("SalaryBCK/Salary_Text").GetComponent<TextMeshProUGUI>().text = "$" + num2;
			gameObject.transform.Find("ScoreBCK/Score_Text").GetComponent<TextMeshProUGUI>().text = num10.ToString();
			gameObject.transform.Find("EmployeeName").GetComponent<TextMeshProUGUI>().text = text2;
			gameObject.transform.Find("LevelsBCK/Levels_Text").GetComponent<TextMeshProUGUI>().text = num18.ToString();
			gameObject.transform.Find("Button_SelectDismiss").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
		}
	}

	public void SetUIDismissDataInPanel(int index)
	{
		string text = managerComponent.hiredEmployeesData[index];
		if (string.IsNullOrWhiteSpace(text))
		{
			return;
		}
		string[] array = text.Split("|");
		int num = int.Parse(array[0]);
		int num2 = int.Parse(array[1]);
		int num3 = int.Parse(array[2]);
		int num4 = int.Parse(array[3]);
		int num5 = int.Parse(array[4]);
		int num6 = int.Parse(array[5]);
		int num7 = int.Parse(array[6]);
		int num8 = int.Parse(array[7]);
		int num9 = int.Parse(array[8]);
		int num10 = Mathf.FloorToInt((num3 + num4 + num5 + num6 + num7 + num8 + num9) / 7);
		string text2 = array[9];
		int num11 = Mathf.FloorToInt(int.Parse(array[11]) / 5000);
		int num12 = Mathf.FloorToInt(int.Parse(array[12]) / 1000);
		int num13 = Mathf.FloorToInt(int.Parse(array[13]) / 1000);
		int num14 = Mathf.FloorToInt(int.Parse(array[14]) / 1000);
		int num15 = Mathf.FloorToInt(int.Parse(array[15]) / 1000);
		int num16 = Mathf.FloorToInt(int.Parse(array[16]) / 1000);
		int num17 = Mathf.FloorToInt(int.Parse(array[17]) / 1000);
		int num18 = Mathf.FloorToInt((num11 + num12 + num13 + num14 + num15 + num16 + num17) / 7);
		dismissDataPanel.transform.Find("EmployeeImageBCK/EmployeeImage").GetComponent<Image>().sprite = employeesSprites[num];
		dismissDataPanel.transform.Find("DataBCK/Salary_Text").GetComponent<TextMeshProUGUI>().text = "$" + num2;
		dismissDataPanel.transform.Find("DataBCK/ScoreBCK/Score_Text").GetComponent<TextMeshProUGUI>().text = num10.ToString();
		dismissDataPanel.transform.Find("Button_Dismiss").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("CurrentCVIndex").Value = index;
		dismissDataPanel.transform.Find("DataBCK/LevelBCK/Level_Text").GetComponent<TextMeshProUGUI>().text = num18.ToString();
		dismissDataPanel.transform.Find("EmployeeName").GetComponent<TextMeshProUGUI>().text = text2;
		dismissDataPanel.transform.Find("CashierLevelBCK/CashierLevel").GetComponent<TextMeshProUGUI>().text = num11.ToString();
		dismissDataPanel.transform.Find("RestockerLevelBCK/RestockerLevel").GetComponent<TextMeshProUGUI>().text = num12.ToString();
		dismissDataPanel.transform.Find("StorageLevelBCK/StorageLevel").GetComponent<TextMeshProUGUI>().text = num13.ToString();
		dismissDataPanel.transform.Find("SecurityLevelBCK/SecurityLevel").GetComponent<TextMeshProUGUI>().text = num14.ToString();
		dismissDataPanel.transform.Find("TechnicianLevelBCK/TechnicianLevel").GetComponent<TextMeshProUGUI>().text = num15.ToString();
		dismissDataPanel.transform.Find("OrderingLevelBCK/OrderingLevel").GetComponent<TextMeshProUGUI>().text = num16.ToString();
		dismissDataPanel.transform.Find("ManufacturingLevelBCK/ManufacturingLevel").GetComponent<TextMeshProUGUI>().text = num17.ToString();
		int[] array2 = new int[7] { num3, num4, num5, num6, num7, num8, num9 };
		for (int i = 0; i < dismissExperienceOBJsArray.Length; i++)
		{
			GameObject gameObject = dismissExperienceOBJsArray[i];
			int num19 = array2[i];
			for (int j = 0; j < 10; j++)
			{
				Transform child = gameObject.transform.GetChild(j);
				if (j >= num19)
				{
					child.GetComponent<Image>().color = colorOff;
				}
				else
				{
					child.GetComponent<Image>().color = colorOn;
				}
			}
		}
		dismissDataPanel.SetActive(value: true);
	}

	public void ChangeEmployeeHat(int index, int quantity)
	{
		NPC_Manager.Instance.CmdChangeEmployeeHat(index, quantity);
	}

	public void UpdateEmployeeHat(int index, int newHatIndex)
	{
		if (assignmentParentOBJ.transform.childCount > 0 && (bool)assignmentParentOBJ.transform.GetChild(index))
		{
			assignmentParentOBJ.transform.GetChild(index).transform.Find("HatImage").GetComponent<Image>().sprite = hatSprites[newHatIndex];
			assignmentParentOBJ.transform.GetChild(index).transform.Find("HatImage/HatID").GetComponent<TextMeshProUGUI>().text = newHatIndex.ToString();
		}
	}

	public void ChangeEmployeePriority(int index, int whichPriority)
	{
		NPC_Manager.Instance.CmdChangeEmployeePriority(index, whichPriority);
	}

	public void UpdateEmployeePriority(int index, int whichPriority)
	{
		if (assignmentParentOBJ.transform.childCount > 0 && (bool)assignmentParentOBJ.transform.GetChild(index))
		{
			string localizationString = LocalizationManager.instance.GetLocalizationString(priorityHashes[whichPriority]);
			assignmentParentOBJ.transform.GetChild(index).transform.Find("PriorityBCK/ShowPrioritiesButton/CurrentPriorityText").GetComponent<TextMeshProUGUI>().text = localizationString;
			assignmentParentOBJ.transform.GetChild(index).transform.Find("PriorityBCK/ShowPrioritiesButton").GetComponent<Image>().color = priorityColors[whichPriority];
			assignmentParentOBJ.transform.GetChild(index).transform.Find("PriorityButtons").gameObject.SetActive(value: false);
		}
	}

	public void ChangeAllEmployeePriorities(int whichPriority)
	{
		NPC_Manager.Instance.CmdChangeAllEmployeePriorities(whichPriority);
	}

	public void UpdateAllEmployeePriorities(int whichPriority)
	{
		if (assignmentParentOBJ.transform.childCount > 0)
		{
			string localizationString = LocalizationManager.instance.GetLocalizationString(priorityHashes[whichPriority]);
			for (int i = 0; i < assignmentParentOBJ.transform.childCount; i++)
			{
				assignmentParentOBJ.transform.GetChild(i).transform.Find("PriorityBCK/ShowPrioritiesButton/CurrentPriorityText").GetComponent<TextMeshProUGUI>().text = localizationString;
				assignmentParentOBJ.transform.GetChild(i).transform.Find("PriorityBCK/ShowPrioritiesButton").GetComponent<Image>().color = priorityColors[whichPriority];
				assignmentParentOBJ.transform.GetChild(i).transform.Find("PriorityButtons").gameObject.SetActive(value: false);
			}
		}
	}

	public void SpawnUIAssignment()
	{
		if (assignmentParentOBJ.transform.childCount > 0)
		{
			int childCount = assignmentParentOBJ.transform.childCount;
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(assignmentParentOBJ.transform.GetChild(assignmentParentOBJ.transform.childCount - 1 - i).gameObject);
			}
		}
		int num = 0;
		for (int j = 0; j < managerComponent.hiredEmployeesData.Length; j++)
		{
			string text = managerComponent.hiredEmployeesData[j];
			GameObject gameObject = Object.Instantiate(assignmentUIPrefab, assignmentParentOBJ.transform);
			if (string.IsNullOrWhiteSpace(text))
			{
				gameObject.transform.Find("EmptyPosition").gameObject.SetActive(value: true);
				continue;
			}
			string[] array = text.Split("|");
			int num2 = int.Parse(array[0]);
			int num3 = int.Parse(array[1]);
			int num4 = int.Parse(array[2]);
			int num5 = int.Parse(array[3]);
			int num6 = int.Parse(array[4]);
			int num7 = int.Parse(array[5]);
			int num8 = int.Parse(array[6]);
			int num9 = int.Parse(array[7]);
			int num10 = int.Parse(array[8]);
			int num11 = Mathf.FloorToInt((num4 + num5 + num6 + num7 + num8 + num9 + num10) / 7);
			string text2 = array[9];
			int num12 = Mathf.FloorToInt(int.Parse(array[11]) / 5000);
			int num13 = Mathf.FloorToInt(int.Parse(array[12]) / 1000);
			int num14 = Mathf.FloorToInt(int.Parse(array[13]) / 1000);
			int num15 = Mathf.FloorToInt(int.Parse(array[14]) / 1000);
			int num16 = Mathf.FloorToInt(int.Parse(array[15]) / 1000);
			int num17 = Mathf.FloorToInt(int.Parse(array[16]) / 1000);
			int num18 = Mathf.FloorToInt(int.Parse(array[17]) / 1000);
			int num19 = Mathf.FloorToInt((num12 + num13 + num14 + num15 + num16 + num17 + num18) / 7);
			gameObject.transform.Find("EmployeeImageBCK/EmployeeImage").GetComponent<Image>().sprite = employeesSprites[num2];
			gameObject.transform.Find("SalaryBCK/Salary_Text").GetComponent<TextMeshProUGUI>().text = "$" + num3;
			gameObject.transform.Find("ScoreBCK/Score_Text").GetComponent<TextMeshProUGUI>().text = num11.ToString();
			gameObject.transform.Find("EmployeeNameField/TextArea/Placeholder").GetComponent<TextMeshProUGUI>().text = text2;
			gameObject.transform.Find("LevelsBCK/Levels_Text").GetComponent<TextMeshProUGUI>().text = num19.ToString();
			gameObject.transform.Find("CashierBCK/Level").GetComponent<TextMeshProUGUI>().text = num12.ToString();
			gameObject.transform.Find("RestockerBCK/Level").GetComponent<TextMeshProUGUI>().text = num13.ToString();
			gameObject.transform.Find("StorageBCK/Level").GetComponent<TextMeshProUGUI>().text = num14.ToString();
			gameObject.transform.Find("SecurityBCK/Level").GetComponent<TextMeshProUGUI>().text = num15.ToString();
			gameObject.transform.Find("TechnicianBCK/Level").GetComponent<TextMeshProUGUI>().text = num16.ToString();
			gameObject.transform.Find("OrderingBCK/Level").GetComponent<TextMeshProUGUI>().text = num17.ToString();
			gameObject.transform.Find("ManufacturingBCK/Level").GetComponent<TextMeshProUGUI>().text = num18.ToString();
			Transform transform = gameObject.transform.Find("CashierBCK/Stars").transform;
			Transform transform2 = gameObject.transform.Find("RestockerBCK/Stars").transform;
			Transform transform3 = gameObject.transform.Find("StorageBCK/Stars").transform;
			Transform transform4 = gameObject.transform.Find("SecurityBCK/Stars").transform;
			Transform transform5 = gameObject.transform.Find("TechnicianBCK/Stars").transform;
			Transform transform6 = gameObject.transform.Find("OrderingBCK/Stars").transform;
			Transform transform7 = gameObject.transform.Find("ManufacturingBCK/Stars").transform;
			int[] array2 = new int[7] { num4, num5, num6, num7, num8, num9, num10 };
			Transform[] array3 = new Transform[7] { transform, transform2, transform3, transform4, transform5, transform6, transform7 };
			for (int k = 0; k < array3.Length; k++)
			{
				Transform transform8 = array3[k];
				int num20 = array2[k];
				for (int l = 0; l < 10; l++)
				{
					Transform child = transform8.transform.GetChild(l);
					if (l >= num20)
					{
						child.GetComponent<Image>().color = colorOff;
					}
					else
					{
						child.GetComponent<Image>().color = colorOn;
					}
				}
			}
			if (InsideHappinessLevels(num))
			{
				gameObject.transform.Find("HappinessGood").gameObject.SetActive(value: true);
			}
			else
			{
				gameObject.transform.Find("HappinessBad").gameObject.SetActive(value: true);
			}
			int num21 = NPC_Manager.Instance.priorityArray[j];
			string localizationString = LocalizationManager.instance.GetLocalizationString(priorityHashes[num21]);
			gameObject.transform.Find("PriorityBCK/ShowPrioritiesButton/CurrentPriorityText").GetComponent<TextMeshProUGUI>().text = localizationString;
			gameObject.transform.Find("PriorityBCK/ShowPrioritiesButton").GetComponent<Image>().color = priorityColors[num21];
			gameObject.transform.Find("PriorityButtons/NoTask_Button").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			gameObject.transform.Find("PriorityButtons/Cashier_Button").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			gameObject.transform.Find("PriorityButtons/Restocker_Button").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			gameObject.transform.Find("PriorityButtons/Storage_Button").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			gameObject.transform.Find("PriorityButtons/Security_Button").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			gameObject.transform.Find("PriorityButtons/Technician_Button").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			gameObject.transform.Find("PriorityButtons/Ordering_Button").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			gameObject.transform.Find("PriorityButtons/Manufacturing_Button").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			if (GameCanvas.Instance.isCool)
			{
				gameObject.transform.Find("HatImage").gameObject.SetActive(value: true);
				if ((bool)NPC_Manager.Instance.employeesArray[j])
				{
					int hatID = NPC_Manager.Instance.employeesArray[j].GetComponent<NPC_Info>().hatID;
					gameObject.transform.Find("HatImage").GetComponent<Image>().sprite = hatSprites[hatID];
					gameObject.transform.Find("HatImage/HatID").GetComponent<TextMeshProUGUI>().text = hatID.ToString();
				}
				gameObject.transform.Find("HatImage/HatButton_>").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
				gameObject.transform.Find("HatImage/HatButton_<").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("NPCManagerOBJ").Value = base.gameObject;
			}
			num++;
		}
	}

	private bool InsideHappinessLevels(int index)
	{
		float currentHappinessLevel = NPC_Manager.Instance.currentHappinessLevel;
		if ((float)index < currentHappinessLevel)
		{
			return true;
		}
		return false;
	}

	public void SetSaveAndLoadPriorityButtons()
	{
		string filePath = Application.persistentDataPath + "/clayouts.es3";
		string localizationString = LocalizationManager.instance.GetLocalizationString("emptyposi");
		if (!ES3.FileExists(filePath))
		{
			for (int i = 0; i < savePLayoutsParent.transform.childCount; i++)
			{
				savePLayoutsParent.transform.GetChild(i).transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = localizationString;
				loadPLayoutsParent.transform.GetChild(i).transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = localizationString;
			}
			return;
		}
		for (int j = 0; j < savePLayoutsParent.transform.childCount; j++)
		{
			string key = "Layout" + j;
			string text = localizationString;
			if (ES3.KeyExists(key, filePath))
			{
				int[] array = ES3.Load<int[]>(key, filePath);
				int[] array2 = new int[8];
				for (int k = 0; k < array.Length; k++)
				{
					if (!(managerComponent.hiredEmployeesData[k] == ""))
					{
						int num = array[k];
						if (num < array2.Length && num > -1)
						{
							array2[num]++;
						}
					}
				}
				text = "<color=" + hexaColors[0] + ">" + array2[0] + "</color>-<color=" + hexaColors[1] + ">" + array2[1] + "</color>-<color=" + hexaColors[2] + ">" + array2[2] + "</color>-<color=" + hexaColors[3] + ">" + array2[3] + "</color>-<color=" + hexaColors[4] + ">" + array2[4] + "</color>-<color=" + hexaColors[5] + ">" + array2[5] + "</color>-<color=" + hexaColors[6] + ">" + array2[6] + "</color>-<color=" + hexaColors[7] + ">" + array2[7] + "</color>";
			}
			savePLayoutsParent.transform.GetChild(j).transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = text;
			loadPLayoutsParent.transform.GetChild(j).transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = text;
		}
	}

	public void SaveTaskLayouts(int whichLayoutIndex)
	{
		bool flag = false;
		string[] hiredEmployeesData = managerComponent.hiredEmployeesData;
		for (int i = 0; i < hiredEmployeesData.Length; i++)
		{
			if (hiredEmployeesData[i] != "")
			{
				flag = true;
				break;
			}
		}
		if (flag)
		{
			string filePath = Application.persistentDataPath + "/clayouts.es3";
			int[] priorityArray = managerComponent.priorityArray;
			ES3.Save("Layout" + whichLayoutIndex, priorityArray, filePath);
			SetSaveAndLoadPriorityButtons();
		}
	}

	public void LoadTaskLayout(int whichLayoutIndex)
	{
		string filePath = Application.persistentDataPath + "/clayouts.es3";
		if (ES3.FileExists(filePath))
		{
			string key = "Layout" + whichLayoutIndex;
			if (ES3.KeyExists(key, filePath))
			{
				int[] loadedPrioritiesArray = ES3.Load<int[]>(key, filePath);
				managerComponent.CmdLoadPrioritiesLayout(loadedPrioritiesArray);
			}
		}
	}

	public void SetTaskLayout(int[] loadedPrioritiesArray)
	{
		if (assignmentParentOBJ.transform.childCount > 0)
		{
			for (int i = 0; i < assignmentParentOBJ.transform.childCount && i < loadedPrioritiesArray.Length; i++)
			{
				int num = loadedPrioritiesArray[i];
				string localizationString = LocalizationManager.instance.GetLocalizationString(priorityHashes[num]);
				assignmentParentOBJ.transform.GetChild(i).transform.Find("PriorityBCK/ShowPrioritiesButton/CurrentPriorityText").GetComponent<TextMeshProUGUI>().text = localizationString;
				assignmentParentOBJ.transform.GetChild(i).transform.Find("PriorityBCK/ShowPrioritiesButton").GetComponent<Image>().color = priorityColors[num];
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// EnvMapAnimator
using System.Collections;
using TMPro;
using UnityEngine;

public class EnvMapAnimator : MonoBehaviour
{
	public Vector3 RotationSpeeds;

	private TMP_Text m_textMeshPro;

	private Material m_material;

	private void Awake()
	{
		m_textMeshPro = GetComponent<TMP_Text>();
		m_material = m_textMeshPro.fontSharedMaterial;
	}

	private IEnumerator Start()
	{
		Matrix4x4 matrix = default(Matrix4x4);
		while (true)
		{
			matrix.SetTRS(Vector3.zero, Quaternion.Euler(Time.time * RotationSpeeds.x, Time.time * RotationSpeeds.y, Time.time * RotationSpeeds.z), Vector3.one);
			m_material.SetMatrix("_EnvMatrix", matrix);
			yield return null;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// EventCageSpawnNets
using System.Collections;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using UnityEngine;

public class EventCageSpawnNets : NetworkBehaviour
{
	public GameObject moonTokenPrefabOBJ;

	public GameObject starTokenPrefabOBJ;

	public GameObject netPrefabOBJ;

	public Transform spawnParent;

	public override void OnStartServer()
	{
		StartCoroutine(SpawnWithDelay());
	}

	private IEnumerator SpawnWithDelay()
	{
		for (int i = 0; i < spawnParent.transform.childCount; i++)
		{
			yield return new WaitForSeconds(0.1f);
			GameObject obj = Object.Instantiate(netPrefabOBJ);
			obj.transform.position = spawnParent.transform.GetChild(i).position;
			NetworkServer.Spawn(obj);
		}
		yield return null;
	}

	public void DepositAnimalInside()
	{
		if (FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem != 13)
		{
			GameCanvas.Instance.CreateCanvasNotification("anmlevent0");
			return;
		}
		if (FirstPersonController.Instance.GetComponent<PlayerNetwork>().auxiliarData < 0)
		{
			GameCanvas.Instance.CreateCanvasNotification("anmlevent2");
			return;
		}
		CmdDepositAnimalInside(FirstPersonController.Instance.GetComponent<PlayerNetwork>().auxiliarData);
		FirstPersonController.Instance.GetComponent<PlayerNetwork>().auxiliarData = -1;
		FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ.GetComponent<CageEventCreateDummyAnimal>().ClearCreatedAnimal();
	}

	[Command(requiresAuthority = false)]
	private void CmdDepositAnimalInside(int whichAnimalIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichAnimalIndex);
		SendCommandInternal("System.Void EventCageSpawnNets::CmdDepositAnimalInside(System.Int32)", -1458913605, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdDepositAnimalInside__Int32(int whichAnimalIndex)
	{
		GameObject original = ((whichAnimalIndex != 0) ? starTokenPrefabOBJ : moonTokenPrefabOBJ);
		NetworkServer.Spawn(Object.Instantiate(original, spawnParent.transform.position, Quaternion.identity));
	}

	protected static void InvokeUserCode_CmdDepositAnimalInside__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdDepositAnimalInside called on client.");
		}
		else
		{
			((EventCageSpawnNets)obj).UserCode_CmdDepositAnimalInside__Int32(reader.ReadInt());
		}
	}

	static EventCageSpawnNets()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(EventCageSpawnNets), "System.Void EventCageSpawnNets::CmdDepositAnimalInside(System.Int32)", InvokeUserCode_CmdDepositAnimalInside__Int32, requiresAuthority: false);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// EventDataSenderProxy
using HutongGames.PlayMaker;
using UnityEngine;

public class EventDataSenderProxy : ScriptableObject
{
	public FsmEventTarget EventTarget = new FsmEventTarget();
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ExpansionAuxiliar
using UnityEngine;

public class ExpansionAuxiliar : MonoBehaviour
{
	public GameObject[] relatedPaintablesOBJs;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ExposeMethodInEditorAttribute
using System;

[AttributeUsage(AttributeTargets.Method)]
public class ExposeMethodInEditorAttribute : Attribute
{
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// External
public class External
{
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FireExtinguisher
using System.Collections;
using Rewired;
using StarterAssets;
using UnityEngine;

public class FireExtinguisher : MonoBehaviour
{
	public float pushReach;

	public ParticleSystem extinguisherParticles;

	public LayerMask lMask;

	private Player MainPlayer;

	private bool activated;

	private bool inputCooldown;

	private bool discharging;

	private PlayerNetwork pNetwork;

	private float initCounterTimer;

	private WaitForSeconds cooldownWait = new WaitForSeconds(0.25f);

	private WaitForSeconds dischargeWait = new WaitForSeconds(4.6f);

	private Coroutine dischargeCoroutine;

	private Transform ownPlayerTransform;

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
		pNetwork = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		ownPlayerTransform = FirstPersonController.Instance.transform;
	}

	private void Update()
	{
		if (initCounterTimer < 0.5f)
		{
			initCounterTimer += Time.deltaTime;
		}
		else
		{
			if (inputCooldown)
			{
				return;
			}
			if (!activated && MainPlayer.GetButtonDown("Main Action"))
			{
				activated = true;
				pNetwork.CmdSpawnExtinguisherParticle(activate: true);
				discharging = true;
				dischargeCoroutine = StartCoroutine(DischargeCooldown());
			}
			else if ((activated && MainPlayer.GetButtonUp("Main Action")) || (activated && !discharging))
			{
				activated = false;
				pNetwork.CmdSpawnExtinguisherParticle(activate: false);
				if (discharging)
				{
					discharging = false;
					StopCoroutine(dischargeCoroutine);
				}
				StartCoroutine(InputCooldown());
			}
			if (activated && Physics.Raycast(Camera.main.transform.position, ownPlayerTransform.forward, out var hitInfo, pushReach, lMask))
			{
				if (hitInfo.transform.name == "HitTrigger" && hitInfo.transform.CompareTag("Interactable") && (bool)hitInfo.transform.GetComponent<PlayMakerFSM>() && (bool)hitInfo.transform.parent && (bool)hitInfo.transform.parent.GetComponent<NPC_Info>())
				{
					hitInfo.transform.GetComponent<PlayMakerFSM>().SendEvent("Send_Data_2");
				}
				else if (hitInfo.transform.CompareTag("Player") && (bool)hitInfo.transform.Find("OtherPlayerBehaviours/HitTrigger"))
				{
					hitInfo.transform.Find("OtherPlayerBehaviours/HitTrigger").GetComponent<PlayMakerFSM>().SendEvent("Send_Data_2");
				}
			}
		}
	}

	private IEnumerator DischargeCooldown()
	{
		yield return dischargeWait;
		discharging = false;
	}

	private IEnumerator InputCooldown()
	{
		inputCooldown = true;
		yield return cooldownWait;
		inputCooldown = false;
	}

	private void OnDisable()
	{
		extinguisherParticles.transform.SetParent(null);
		extinguisherParticles.GetComponent<ParticleSystem>().Stop();
		extinguisherParticles.transform.GetComponent<PlayMakerFSM>().enabled = true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FireExtinguisherTake
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using UnityEngine;

public class FireExtinguisherTake : NetworkBehaviour
{
	[SyncVar]
	public bool extinguisherTaken;

	public MeshRenderer extinguisherMRenderer;

	public Material normalMaterial;

	public Material takenMaterial;

	public bool NetworkextinguisherTaken
	{
		get
		{
			return extinguisherTaken;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref extinguisherTaken, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		UpdateExtinguisherVisually(extinguisherTaken);
	}

	public void TakeOrRemoveItem()
	{
		if (!FirstPersonController.Instance)
		{
			return;
		}
		switch (FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem)
		{
		case 0:
			if (extinguisherTaken)
			{
				GameCanvas.Instance.CreateCanvasNotification("frxtnghr0");
				break;
			}
			AchievementsManager.Instance.grabbedAnExtinguisher = true;
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeEquippedItem(15);
			CmdRequestItem(takingItem: true);
			break;
		default:
			GameCanvas.Instance.CreateCanvasNotification("frxtnghr1");
			break;
		case 15:
			if (!extinguisherTaken)
			{
				GameCanvas.Instance.CreateCanvasNotification("frxtnghr2");
				break;
			}
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeEquippedItem(0);
			CmdRequestItem(takingItem: false);
			break;
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdRequestItem(bool takingItem)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(takingItem);
		SendCommandInternal("System.Void FireExtinguisherTake::CmdRequestItem(System.Boolean)", -1728003196, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcRequestItem(bool taken)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(taken);
		SendRPCInternal("System.Void FireExtinguisherTake::RpcRequestItem(System.Boolean)", 1612155021, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void UpdateExtinguisherVisually(bool taken)
	{
		if (taken)
		{
			extinguisherMRenderer.material = takenMaterial;
		}
		else
		{
			extinguisherMRenderer.material = normalMaterial;
		}
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdRequestItem__Boolean(bool takingItem)
	{
		NetworkextinguisherTaken = takingItem;
		RpcRequestItem(takingItem);
	}

	protected static void InvokeUserCode_CmdRequestItem__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestItem called on client.");
		}
		else
		{
			((FireExtinguisherTake)obj).UserCode_CmdRequestItem__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcRequestItem__Boolean(bool taken)
	{
		UpdateExtinguisherVisually(taken);
	}

	protected static void InvokeUserCode_RpcRequestItem__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRequestItem called on server.");
		}
		else
		{
			((FireExtinguisherTake)obj).UserCode_RpcRequestItem__Boolean(reader.ReadBool());
		}
	}

	static FireExtinguisherTake()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(FireExtinguisherTake), "System.Void FireExtinguisherTake::CmdRequestItem(System.Boolean)", InvokeUserCode_CmdRequestItem__Boolean, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(FireExtinguisherTake), "System.Void FireExtinguisherTake::RpcRequestItem(System.Boolean)", InvokeUserCode_RpcRequestItem__Boolean);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteBool(extinguisherTaken);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteBool(extinguisherTaken);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref extinguisherTaken, null, reader.ReadBool());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref extinguisherTaken, null, reader.ReadBool());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FirstPersonTransform
using System.Collections;
using StarterAssets;
using UnityEngine;

public class FirstPersonTransform : MonoBehaviour
{
	private FirstPersonController PController;

	private Rigidbody rb;

	private bool safeBool;

	private void Start()
	{
		rb = GetComponent<Rigidbody>();
		PController = GetComponent<FirstPersonController>();
		safeBool = false;
	}

	public void coroutineActivator(Vector3 position, float Yrotation)
	{
		if (PController.inVehicle && (bool)PController.vehicleSpot && (bool)PController.vehicleSpot.transform.parent.GetComponent<MiniTransportBehaviour>())
		{
			PController.vehicleSpot.transform.parent.GetComponent<MiniTransportBehaviour>().RemoveOwnershipFromTeleport();
		}
		if (!safeBool)
		{
			StartCoroutine(RepositionRoutine(position, Yrotation));
		}
	}

	private IEnumerator RepositionRoutine(Vector3 position, float Yrotation)
	{
		if (PController == null)
		{
			rb = GetComponent<Rigidbody>();
			PController = GetComponent<FirstPersonController>();
		}
		safeBool = true;
		PController.isTeleporting = true;
		rb.useGravity = false;
		yield return new WaitForFixedUpdate();
		base.transform.position = position;
		base.transform.localRotation = Quaternion.Euler(0f, Yrotation, 0f);
		yield return new WaitForFixedUpdate();
		rb.useGravity = true;
		PController.isTeleporting = false;
		safeBool = false;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FreeCamera
using UnityEngine;

public class FreeCamera : MonoBehaviour
{
	public float movementSpeed = 10f;

	public float fastMovementSpeed = 100f;

	public float freeLookSensitivity = 3f;

	public float zoomSensitivity = 10f;

	public float fastZoomSensitivity = 50f;

	private bool looking;

	private void Update()
	{
		float num = ((Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift)) ? fastMovementSpeed : movementSpeed);
		if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))
		{
			base.transform.position = base.transform.position + -base.transform.right * num * Time.deltaTime;
		}
		if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))
		{
			base.transform.position = base.transform.position + base.transform.right * num * Time.deltaTime;
		}
		if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow))
		{
			base.transform.position = base.transform.position + base.transform.forward * num * Time.deltaTime;
		}
		if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow))
		{
			base.transform.position = base.transform.position + -base.transform.forward * num * Time.deltaTime;
		}
		if (Input.GetKey(KeyCode.Q))
		{
			base.transform.position = base.transform.position + base.transform.up * num * Time.deltaTime;
		}
		if (Input.GetKey(KeyCode.E))
		{
			base.transform.position = base.transform.position + -base.transform.up * num * Time.deltaTime;
		}
		if (Input.GetKey(KeyCode.R) || Input.GetKey(KeyCode.PageUp))
		{
			base.transform.position = base.transform.position + Vector3.up * num * Time.deltaTime;
		}
		if (Input.GetKey(KeyCode.F) || Input.GetKey(KeyCode.PageDown))
		{
			base.transform.position = base.transform.position + -Vector3.up * num * Time.deltaTime;
		}
		if (looking)
		{
			float y = base.transform.localEulerAngles.y + Input.GetAxis("Mouse X") * freeLookSensitivity;
			float x = base.transform.localEulerAngles.x - Input.GetAxis("Mouse Y") * freeLookSensitivity;
			base.transform.localEulerAngles = new Vector3(x, y, 0f);
		}
		float axis = Input.GetAxis("Mouse ScrollWheel");
		if (axis > 0f)
		{
			GetComponent<Camera>().fieldOfView--;
		}
		else if (axis < 0f)
		{
			GetComponent<Camera>().fieldOfView++;
		}
		if (Input.GetKeyDown(KeyCode.Mouse1))
		{
			StartLooking();
		}
		else if (Input.GetKeyUp(KeyCode.Mouse1))
		{
			StopLooking();
		}
	}

	private void OnDisable()
	{
		StopLooking();
	}

	public void StartLooking()
	{
		looking = true;
		Cursor.visible = false;
		Cursor.lockState = CursorLockMode.Locked;
	}

	public void StopLooking()
	{
		looking = false;
		Cursor.visible = true;
		Cursor.lockState = CursorLockMode.None;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FsmNavMeshPath
using UnityEngine;
using UnityEngine.AI;

public class FsmNavMeshPath : MonoBehaviour
{
	public Vector3[] corners;

	private NavMeshPath _path;

	public NavMeshPathStatus status
	{
		get
		{
			if (path == null)
			{
				return NavMeshPathStatus.PathInvalid;
			}
			return path.status;
		}
	}

	public NavMeshPath path
	{
		get
		{
			return _path;
		}
		set
		{
			_path = value;
			corners = _path.corners;
		}
	}

	private void Start()
	{
	}

	private void ClearCorners()
	{
		path.ClearCorners();
	}

	public string GetStatusString()
	{
		if (path == null)
		{
			return "n/a";
		}
		return path.status.ToString();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FsmXmlNode
using System.Xml;
using UnityEngine;

public class FsmXmlNode : Object
{
	private XmlNode _xmlNode;

	public XmlNode Value
	{
		get
		{
			return _xmlNode;
		}
		set
		{
			_xmlNode = value;
		}
	}

	public override string ToString()
	{
		return "FsmXmlNode";
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FsmXmlNodeList
using System.Xml;
using UnityEngine;

public class FsmXmlNodeList : Object
{
	private XmlNodeList _xmlNodeList;

	public XmlNodeList Value
	{
		get
		{
			return _xmlNodeList;
		}
		set
		{
			Debug.Log(DataMakerXmlUtils.XmlNodeListToString(value));
			_xmlNodeList = value;
		}
	}

	public override string ToString()
	{
		return "FsmXmlNodeList";
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FsmXmlPropertiesStorage
using System.Xml;
using HutongGames.PlayMaker;
using HutongGames.PlayMaker.Actions;

public class FsmXmlPropertiesStorage : FsmStateAction
{
	public FsmString[] properties;

	public FsmVar[] propertiesVariables;

	public void StoreNodeProperties(Fsm fsm, XmlNode node)
	{
		int num = 0;
		FsmString[] array = properties;
		foreach (FsmString fsmString in array)
		{
			string nodeProperty = DataMakerXmlActions.GetNodeProperty(node, fsmString.Value);
			PlayMakerUtils.ApplyValueToFsmVar(fsm, propertiesVariables[num], PlayMakerUtils.ParseValueFromString(nodeProperty, propertiesVariables[num].Type));
			num++;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FsmXmlPropertiesTypes
using System.Collections.Generic;
using HutongGames.PlayMaker;

public class FsmXmlPropertiesTypes : FsmStateAction
{
	public FsmString[] properties;

	public VariableType[] propertiesTypes;

	private Dictionary<string, VariableType> _cache;

	public void cacheTypes()
	{
		_cache = new Dictionary<string, VariableType>();
		int num = 0;
		FsmString[] array = properties;
		foreach (FsmString fsmString in array)
		{
			_cache.Add(fsmString.Value, propertiesTypes[num]);
			num++;
		}
	}

	public VariableType GetPropertyType(string property)
	{
		if (_cache == null)
		{
			cacheTypes();
		}
		if (_cache.ContainsKey(property))
		{
			return _cache[property];
		}
		return VariableType.Unknown;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FsmXmlProperty
using System.Xml;
using HutongGames.PlayMaker;
using HutongGames.PlayMaker.Actions;

public class FsmXmlProperty : FsmStateAction
{
	public FsmString property;

	[UIHint(UIHint.Variable)]
	public FsmVar variable;

	public static void StoreNodeProperties(Fsm fsm, XmlNode node, FsmXmlProperty[] properties)
	{
		int num = 0;
		foreach (FsmXmlProperty fsmXmlProperty in properties)
		{
			string nodeProperty = DataMakerXmlActions.GetNodeProperty(node, fsmXmlProperty.property.Value);
			PlayMakerUtils.ApplyValueToFsmVar(fsm, fsmXmlProperty.variable, PlayMakerUtils.ParseValueFromString(nodeProperty, fsmXmlProperty.variable.Type));
			num++;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FsmXmlSource
using System.Xml;
using HutongGames.PlayMaker;
using UnityEngine;

public class FsmXmlSource : FsmStateAction
{
	public string[] sourceTypes = new string[5] { "Plain Text", "Text Asset", "Use Variable", "Use Proxy", "In Memory" };

	public int sourceSelection;

	public TextAsset sourcetextAsset;

	public FsmString sourceString;

	public FsmGameObject sourceProxyGameObject;

	public FsmString sourceProxyReference;

	public FsmString inMemoryReference;

	public bool _minimized;

	public Vector2 _scroll;

	public bool _sourcePreview = true;

	public bool _sourceEdit = true;

	public XmlNode Value
	{
		get
		{
			switch (sourceSelection)
			{
			case 0:
			case 2:
				return GetXmlNodeFromString(sourceString.Value);
			case 1:
				if (sourcetextAsset == null)
				{
					return null;
				}
				return GetXmlNodeFromString(sourcetextAsset.text);
			case 3:
			{
				DataMakerXmlProxy dataMakerXmlProxy = DataMakerCore.GetDataMakerProxyPointer(typeof(DataMakerXmlProxy), sourceProxyGameObject.Value, sourceProxyReference.Value, silent: false) as DataMakerXmlProxy;
				if (dataMakerXmlProxy != null)
				{
					return dataMakerXmlProxy.xmlNode;
				}
				break;
			}
			case 4:
				return DataMakerXmlUtils.XmlRetrieveNode(inMemoryReference.Value);
			}
			return null;
		}
	}

	private XmlNode GetXmlNodeFromString(string source)
	{
		XmlDocument xmlDocument = new XmlDocument();
		try
		{
			xmlDocument.LoadXml(source);
		}
		catch (XmlException ex)
		{
			Debug.Log(source);
			Debug.LogWarning(ex.Message);
			return null;
		}
		return xmlDocument.DocumentElement;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// FsmXpathQuery
using HutongGames.PlayMaker;

public class FsmXpathQuery : FsmStateAction
{
	public FsmString xPathQuery;

	public FsmVar[] xPathVariables;

	public bool _foldout = true;

	public string parsedQuery;

	public string ParseXpathQuery(Fsm fsm)
	{
		parsedQuery = xPathQuery.Value;
		if (xPathVariables != null)
		{
			int num = 0;
			FsmVar[] array = xPathVariables;
			foreach (FsmVar fsmVar in array)
			{
				if (!fsmVar.IsNone)
				{
					parsedQuery = parsedQuery.Replace("_" + num + "_", PlayMakerUtils.ParseFsmVarToString(fsm, fsmVar));
				}
				num++;
			}
		}
		return parsedQuery;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// GachaponCapsule
using System.Collections;
using System.Runtime.InteropServices;
using HighlightPlus;
using Mirror;
using UnityEngine;

public class GachaponCapsule : NetworkBehaviour
{
	[SyncVar]
	public int unlockableIndex;

	private bool alreadyRequested;

	public int NetworkunlockableIndex
	{
		get
		{
			return unlockableIndex;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref unlockableIndex, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		base.transform.rotation = Quaternion.Euler(new Vector3(0f, 270f, 0f));
		GetComponent<Rigidbody>().AddForce(base.transform.forward * 100f);
		CreateDummyItemInside();
		StartCoroutine(ScaleInterpolate());
	}

	public void UnlockItem()
	{
		if (!alreadyRequested)
		{
			AchievementsManager.Instance.GetUnlockable(unlockableIndex, base.gameObject);
			alreadyRequested = true;
		}
	}

	private void CreateDummyItemInside()
	{
		if ((bool)AchievementsManager.Instance && unlockableIndex > 0 && unlockableIndex < AchievementsManager.Instance.unlockablesPrefabsArray.Length)
		{
			if (AchievementsManager.Instance.unlockedArray[unlockableIndex])
			{
				base.transform.Find("TriggerEvent/Highlight").GetComponent<HighlightEffect>().glowHQColor = Color.green;
			}
			GameObject obj = Object.Instantiate(AchievementsManager.Instance.unlockablesPrefabsArray[unlockableIndex], base.transform);
			obj.transform.localPosition = new Vector3(0f, -0.25f, 0f);
			obj.transform.localScale = new Vector3(0.7f, 0.7f, 0.7f);
		}
	}

	private IEnumerator ScaleInterpolate()
	{
		float timeElapsed = 0f;
		float timeLimit = 0.5f;
		while (timeElapsed < timeLimit)
		{
			timeElapsed += Time.deltaTime;
			float num = timeElapsed / timeLimit;
			base.transform.localScale = new Vector3(num, num, num);
			yield return null;
		}
		yield return null;
	}

	public override bool Weaved()
	{
		return true;
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(unlockableIndex);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(unlockableIndex);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref unlockableIndex, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref unlockableIndex, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// GameCanvas
using System.Collections;
using TMPro;
using UnityEngine;

public class GameCanvas : MonoBehaviour
{
	public static GameCanvas Instance;

	public bool isCool;

	public bool isPGame;

	public GameObject notificationPrefab;

	public Transform notificationParentTransform;

	public GameObject importantNotificationPrefab;

	public Transform importantNotificationParentTransform;

	[Space(10f)]
	public GameObject infoContainer;

	public TextMeshProUGUI mainTitleTMP;

	public GameObject unlockContainerParent;

	public GameObject requireContainerParent;

	public GameObject UIInfoPrefab;

	public GameObject bigUnlockInfoOBJ;

	public GameObject bigRequireInfoOBJ;

	public LayerMask lMask;

	[Space(10f)]
	public TextMeshProUGUI dayTMP;

	public TextMeshProUGUI dailyCustomersTMP;

	public TextMeshProUGUI dayBenefitsTMP;

	public TextMeshProUGUI timesRobbedTMP;

	public TextMeshProUGUI complaintsAboutFilthTMP;

	public TextMeshProUGUI franchiseLevelTMP;

	public TextMeshProUGUI franchiseExperienceTMP;

	public TextMeshProUGUI moneyLostBecauseRobbingTMP;

	public TextMeshProUGUI notFoundProductsTMP;

	public TextMeshProUGUI tooExpensiveProductsTMP;

	public TextMeshProUGUI lightCostTMP;

	public TextMeshProUGUI rentCostTMP;

	public TextMeshProUGUI employeesCostTMP;

	public TextMeshProUGUI otherCostsTMP;

	public TextMeshProUGUI moneySpentOnProductsTMP;

	public TextMeshProUGUI dayBalanceTMP;

	[Space(10f)]
	public GameObject jReference;

	public GameObject paintablesReference;

	[Space(10f)]
	public bool automaticallyRemoveP;

	[Space(10f)]
	public Texture[] defaultPaintingsArray;

	public Texture[] adsTexturesArray;

	private bool inCooldown;

	private void Awake()
	{
		if (Instance == null)
		{
			Instance = this;
		}
	}

	public void CreateCanvasNotification(string hash)
	{
		if (!inCooldown)
		{
			string localizationString = LocalizationManager.instance.GetLocalizationString(hash);
			GameObject obj = Object.Instantiate(notificationPrefab, notificationParentTransform);
			obj.GetComponent<TextMeshProUGUI>().text = localizationString;
			obj.SetActive(value: true);
			StartCoroutine(NotificationCooldown());
		}
	}

	public void CreateImportantNotification(string hash)
	{
		if (!inCooldown)
		{
			string localizationString = LocalizationManager.instance.GetLocalizationString(hash);
			GameObject obj = Object.Instantiate(importantNotificationPrefab, importantNotificationParentTransform);
			obj.GetComponent<TextMeshProUGUI>().text = localizationString;
			obj.SetActive(value: true);
			StartCoroutine(NotificationCooldown());
		}
	}

	public void CreateCompoundWarning(string hash, string appendix)
	{
		if (!inCooldown)
		{
			string text = LocalizationManager.instance.GetLocalizationString(hash) + appendix;
			GameObject obj = Object.Instantiate(importantNotificationPrefab, importantNotificationParentTransform);
			obj.GetComponent<TextMeshProUGUI>().text = text;
			obj.SetActive(value: true);
			StartCoroutine(NotificationCooldown());
		}
	}

	public void TriggerEndDayStats(int dCustomers, float dBenefits, int tRobbed, float mLostBecauseRobbing, int nFoundProducts, int tExpensiveProducts, float lCost, float rCost, float emploCost, float mSpentOnProducts, float oCosts, int filthComplaints, int todaysFranchiseExperience)
	{
		dBenefits = Mathf.Round(dBenefits * 100f) / 100f;
		mLostBecauseRobbing = Mathf.Round(mLostBecauseRobbing * 100f) / 100f;
		lCost = Mathf.Round(lCost * 100f) / 100f;
		rCost = Mathf.Round(rCost * 100f) / 100f;
		emploCost = Mathf.Round(emploCost * 100f) / 100f;
		mSpentOnProducts = Mathf.Round(mSpentOnProducts * 100f) / 100f;
		oCosts = Mathf.Round(oCosts * 100f) / 100f;
		dayTMP.text = LocalizationManager.instance.GetLocalizationString("day") + GameData.Instance.gameDay;
		dailyCustomersTMP.text = LocalizationManager.instance.GetLocalizationString("totalcustomers") + dCustomers;
		dayBenefitsTMP.text = LocalizationManager.instance.GetLocalizationString("income") + ": " + dBenefits;
		timesRobbedTMP.text = LocalizationManager.instance.GetLocalizationString("timesrobbed") + tRobbed;
		complaintsAboutFilthTMP.text = LocalizationManager.instance.GetLocalizationString("complaintsfilth") + filthComplaints;
		franchiseLevelTMP.text = LocalizationManager.instance.GetLocalizationString("franchiselevel") + GameData.Instance.gameFranchiseLevel;
		franchiseExperienceTMP.text = LocalizationManager.instance.GetLocalizationString("franchiseexperience") + "+" + todaysFranchiseExperience;
		moneyLostBecauseRobbingTMP.text = LocalizationManager.instance.GetLocalizationString("moneylostbecauserobbing") + mLostBecauseRobbing;
		notFoundProductsTMP.text = LocalizationManager.instance.GetLocalizationString("notfoundproducts") + nFoundProducts;
		tooExpensiveProductsTMP.text = LocalizationManager.instance.GetLocalizationString("tooexpensiveproducts") + tExpensiveProducts;
		lightCostTMP.text = LocalizationManager.instance.GetLocalizationString("electricitycost") + "-$" + lCost;
		rentCostTMP.text = LocalizationManager.instance.GetLocalizationString("rentcost") + "-$" + rCost;
		employeesCostTMP.text = LocalizationManager.instance.GetLocalizationString("employeeswages") + "-$" + emploCost;
		moneySpentOnProductsTMP.text = LocalizationManager.instance.GetLocalizationString("boughtproductscost") + "-$" + mSpentOnProducts;
		float num = Mathf.Abs(oCosts + mSpentOnProducts);
		otherCostsTMP.text = LocalizationManager.instance.GetLocalizationString("othercosts") + "-$" + Mathf.Abs(num);
		float num2 = dBenefits - mLostBecauseRobbing - lCost - rCost - emploCost - mSpentOnProducts - num;
		num2 = Mathf.Round(num2 * 100f) / 100f;
		if (num2 >= 0f)
		{
			dayBalanceTMP.text = "+$" + num2;
		}
		else
		{
			dayBalanceTMP.text = "-$" + Mathf.Abs(num2);
		}
		StartCoroutine(EndDayCoroutine());
	}

	private IEnumerator EndDayCoroutine()
	{
		GameObject gameObject = base.transform.Find("EndDayStats").gameObject;
		GameObject containerOBJ = base.transform.Find("EndDayStats/Container").gameObject;
		CanvasGroup cGroup = gameObject.GetComponent<CanvasGroup>();
		CanvasGroup cGroup2 = containerOBJ.GetComponent<CanvasGroup>();
		containerOBJ.SetActive(value: false);
		gameObject.SetActive(value: true);
		cGroup.alpha = 0f;
		float elapsedTime = 0f;
		float waitTime = 2f;
		while (elapsedTime < waitTime)
		{
			float alpha = Mathf.Lerp(0f, 1f, elapsedTime / waitTime);
			cGroup.alpha = alpha;
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		cGroup.alpha = 1f;
		yield return new WaitForSeconds(1f);
		containerOBJ.SetActive(value: true);
		cGroup2.alpha = 0f;
		elapsedTime = 0f;
		while (elapsedTime < waitTime)
		{
			float alpha2 = Mathf.Lerp(0f, 1f, elapsedTime / waitTime);
			cGroup2.alpha = alpha2;
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		cGroup2.alpha = 1f;
		yield return null;
	}

	public void StartEndCoroutine()
	{
		StartCoroutine(EndDayCoroutineSecond());
	}

	private IEnumerator EndDayCoroutineSecond()
	{
		GameObject endDayStatsOBJ = base.transform.Find("EndDayStats").gameObject;
		CanvasGroup cGroup = endDayStatsOBJ.GetComponent<CanvasGroup>();
		float elapsedTime = 0f;
		float waitTime = 2f;
		yield return new WaitForSeconds(1f);
		while (elapsedTime < waitTime)
		{
			float alpha = Mathf.Lerp(1f, 0f, elapsedTime / waitTime);
			cGroup.alpha = alpha;
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		endDayStatsOBJ.SetActive(value: false);
	}

	private IEnumerator NotificationCooldown()
	{
		inCooldown = true;
		yield return new WaitForSeconds(0.5f);
		inCooldown = false;
	}

	private void Update()
	{
		ShowInteractableInfo();
	}

	private void ShowInteractableInfo()
	{
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 2.5f, lMask))
		{
			GameObject gameObject = hitInfo.transform.gameObject;
			if (gameObject.GetComponent<InteractableData>() != null && gameObject.GetComponent<InteractableData>().hasInteractableData)
			{
				if (unlockContainerParent.transform.childCount > 0)
				{
					int childCount = unlockContainerParent.transform.childCount;
					for (int i = 0; i < childCount; i++)
					{
						Object.Destroy(unlockContainerParent.transform.GetChild(unlockContainerParent.transform.childCount - 1 - i).gameObject);
					}
				}
				if (requireContainerParent.transform.childCount > 0)
				{
					int childCount2 = requireContainerParent.transform.childCount;
					for (int j = 0; j < childCount2; j++)
					{
						Object.Destroy(requireContainerParent.transform.GetChild(requireContainerParent.transform.childCount - 1 - j).gameObject);
					}
				}
				mainTitleTMP.text = LocalizationManager.instance.GetLocalizationString(gameObject.GetComponent<InteractableData>().mainTitleString);
				string[] unlockStrings = gameObject.GetComponent<InteractableData>().unlockStrings;
				string[] requireStrings = gameObject.GetComponent<InteractableData>().requireStrings;
				if (unlockStrings.Length == 1)
				{
					bigUnlockInfoOBJ.SetActive(value: true);
					bigUnlockInfoOBJ.GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString(unlockStrings[0]);
				}
				else
				{
					bigUnlockInfoOBJ.SetActive(value: false);
					for (int k = 0; k < unlockStrings.Length; k++)
					{
						GameObject obj = Object.Instantiate(UIInfoPrefab, unlockContainerParent.transform);
						string key = unlockStrings[k];
						obj.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString(key);
					}
				}
				if (requireStrings.Length == 1)
				{
					bigRequireInfoOBJ.SetActive(value: true);
					bigRequireInfoOBJ.GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString(requireStrings[0]);
				}
				else
				{
					bigRequireInfoOBJ.SetActive(value: false);
					for (int l = 0; l < requireStrings.Length; l++)
					{
						GameObject obj2 = Object.Instantiate(UIInfoPrefab, requireContainerParent.transform);
						string key2 = requireStrings[l];
						obj2.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString(key2);
					}
				}
				infoContainer.SetActive(value: true);
			}
			else
			{
				infoContainer.SetActive(value: false);
			}
		}
		else
		{
			infoContainer.SetActive(value: false);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// GameData
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Text;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.UI;

public class GameData : NetworkBehaviour
{
	public static GameData Instance;

	[SyncVar(hook = "UpdateUIFunds")]
	public float gameFunds;

	[SyncVar(hook = "CalculateFranchiseLevel")]
	public int gameFranchiseExperience;

	[SyncVar(hook = "UpdateFranchisePoints")]
	public int gameFranchisePoints;

	[SyncVar(hook = "UpdateDayName")]
	public int gameDay = 1;

	[SyncVar]
	public bool isSupermarketOpen;

	[SyncVar]
	[Range(0f, 24f)]
	public float timeOfDay;

	[SyncVar]
	public bool removeLightsLimit;

	[SyncVar]
	public int weatherIndex;

	[SyncVar]
	public string todayTemperatureData;

	public int maxCustomersNPCs = 5;

	public int extraCustomersPerk;

	public int maxProductsCustomersToBuy = 5;

	public int gameFranchiseLevel;

	public int lastAwardedFranchiseLevel;

	public int difficulty;

	public float exposureAdd;

	public float exposureNightCorrection;

	private bool alreadyInDoors;

	private bool alreadyOutDoors;

	private float nextTimeToSpawnTrash = 10f;

	private float nextTimeToGetABreakEvent = 9.9f;

	private bool coroutineRunning;

	private int todaysFranchiseExperience;

	[Header("Day Report")]
	[Space(10f)]
	public int dailyCustomers;

	public float dayBenefits;

	public int timesRobbed;

	public float moneyLostBecauseRobbing;

	public float lightCost;

	public float rentCost;

	public float employeesCost;

	public float otherCosts;

	public float moneySpentOnProducts;

	public int complainedAboutFilth;

	[Space(10f)]
	[Range(0.05f, 50f)]
	public float timeFactor = 2f;

	public Light sunLight;

	public Light moonLight;

	public GameObject UIFundsNotificationParentOBJ;

	public GameObject prefabNotificationOBJ;

	public GameObject trashSpotsParent;

	public GameObject variableTrashSpotsParent;

	public GameObject trashSpawnPrefab;

	public TextMeshProUGUI UIFundsOBJ;

	public TextMeshProUGUI UIFundsCentsOBJ;

	public TextMeshProUGUI UITimeOBJ;

	public TextMeshProUGUI UIWeekDayOBJ;

	public TextMeshProUGUI currentDayOBJ;

	public TextMeshProUGUI UIFranchiseLevelOBJ;

	public TextMeshProUGUI UIFranchisePointsOBJ;

	public GameObject pressAnyKeyOBJ;

	public Image franchiseProgressionImage;

	public Volume exposureVolume;

	public int counterLimit = 150;

	public LayerMask lMask;

	public float exposureOptionFactor;

	[Space(10f)]
	public AnimationCurve skyBoxTintFactorCurve;

	public AnimationCurve exposureCurve;

	[Space(10f)]
	public Material movingMaterial;

	public GameObject breakingPrefabOBJ;

	public AudioClip[] popsArray;

	public GameObject SaveOBJ;

	private int innerCounter;

	private bool isNight;

	private int oldStringLength;

	private string zeroesToAdd;

	private bool keyPress;

	public GameObject lightsOBJ;

	public GameObject soundsOffOBJ;

	public Material lightsOff;

	public Material lightsOn;

	private bool alreadyTurnedOff;

	public bool automaticallyEndDay;

	public GameObject newspaperStandCalendarCrossOBJ;

	public Transform newspaperStandCalendarParent;

	public TextMeshProUGUI newspaperStandSeasonField;

	public TextMeshProUGUI newspaperStandTemperaturesField;

	public Image weatherImageField;

	public Color[] seasonsColorArray;

	public Sprite[] weatherSymbols;

	public GameObject[] weatherRelatedOBJs;

	private int[] todayTemperaturesArray;

	private GameObject instantiatedWeatherOBJ;

	private List<int> productsTooExpensiveList = new List<int>();

	private List<int> productsNotFoundList = new List<int>();

	public List<int> lastDayTooExpensiveList = new List<int>();

	public List<int> lastDaysNotFoundList = new List<int>();

	public float autosaveFactor;

	public float dayTimeCounter;

	public bool savedAndQuitted;

	private bool autosaving;

	public float nextAutosaveTime;

	public Action<float, float> _Mirror_SyncVarHookDelegate_gameFunds;

	public Action<int, int> _Mirror_SyncVarHookDelegate_gameFranchiseExperience;

	public Action<int, int> _Mirror_SyncVarHookDelegate_gameFranchisePoints;

	public Action<int, int> _Mirror_SyncVarHookDelegate_gameDay;

	public float NetworkgameFunds
	{
		get
		{
			return gameFunds;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref gameFunds, 1uL, _Mirror_SyncVarHookDelegate_gameFunds);
		}
	}

	public int NetworkgameFranchiseExperience
	{
		get
		{
			return gameFranchiseExperience;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref gameFranchiseExperience, 2uL, _Mirror_SyncVarHookDelegate_gameFranchiseExperience);
		}
	}

	public int NetworkgameFranchisePoints
	{
		get
		{
			return gameFranchisePoints;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref gameFranchisePoints, 4uL, _Mirror_SyncVarHookDelegate_gameFranchisePoints);
		}
	}

	public int NetworkgameDay
	{
		get
		{
			return gameDay;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref gameDay, 8uL, _Mirror_SyncVarHookDelegate_gameDay);
		}
	}

	public bool NetworkisSupermarketOpen
	{
		get
		{
			return isSupermarketOpen;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref isSupermarketOpen, 16uL, null);
		}
	}

	public float NetworktimeOfDay
	{
		get
		{
			return timeOfDay;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref timeOfDay, 32uL, null);
		}
	}

	public bool NetworkremoveLightsLimit
	{
		get
		{
			return removeLightsLimit;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref removeLightsLimit, 64uL, null);
		}
	}

	public int NetworkweatherIndex
	{
		get
		{
			return weatherIndex;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref weatherIndex, 128uL, null);
		}
	}

	public string NetworktodayTemperatureData
	{
		get
		{
			return todayTemperatureData;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref todayTemperatureData, 256uL, null);
		}
	}

	private void Awake()
	{
		if (Instance == null)
		{
			Instance = this;
		}
	}

	public override void OnStartClient()
	{
		UpdateUIFunds(0f, gameFunds);
		UpdateDayName(0, gameDay);
		CalculateFranchiseLevel(0, gameFranchiseExperience);
		UpdateFranchisePoints(0, gameFranchisePoints);
		if (base.isServer)
		{
			GenerateNewEmployeesData();
			CalculateTodaysWeather();
			string value = FsmVariables.GlobalVariables.GetFsmString("OptionsGlobalPath").Value;
			string filePath = Application.persistentDataPath + "/" + value;
			if (ES3.KeyExists("removeLightsLimit", filePath))
			{
				NetworkremoveLightsLimit = ES3.Load<bool>("removeLightsLimit", filePath);
			}
			if (ES3.KeyExists("autosaveFactor", filePath))
			{
				autosaveFactor = ES3.Load<int>("autosaveFactor", filePath);
				if (autosaveFactor > 1f)
				{
					nextAutosaveTime = autosaveFactor * 60f;
					StartCoroutine(AutosaveControl());
				}
			}
		}
		if (!base.isServer)
		{
			SetWeatherData(weatherIndex, todayTemperatureData);
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdAlterFunds(float fundsToAdd)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(fundsToAdd);
		SendCommandInternal("System.Void GameData::CmdAlterFunds(System.Single)", -879922250, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdAlterFundsWithoutExperience(float fundsToAdd)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(fundsToAdd);
		SendCommandInternal("System.Void GameData::CmdAlterFundsWithoutExperience(System.Single)", 1076011894, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void AlterFundsFromEmployee(float fundsToAdd)
	{
		float value = gameFunds + fundsToAdd;
		value = Mathf.Clamp(value, 0f, 2.14E+09f);
		NetworkgameFunds = Mathf.Round(value * 100f) / 100f;
		RpcAlterFunds(fundsToAdd);
	}

	[ClientRpc]
	private void RpcAlterFunds(float funds)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(funds);
		SendRPCInternal("System.Void GameData::RpcAlterFunds(System.Single)", -678382561, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void CalculateFranchiseLevel(int oldExp, int newExp)
	{
		int num = 0;
		for (int i = 1; (float)i < float.PositiveInfinity; i++)
		{
			num += i * 100;
			if (num > newExp)
			{
				float num2 = newExp - (num - i * 100);
				float num3 = i * 100;
				gameFranchiseLevel = i;
				UIFranchiseLevelOBJ.text = i.ToString();
				franchiseProgressionImage.fillAmount = 0.2f + 0.62f * num2 / num3;
				break;
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdAcquireFranchise(int franchiseIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(franchiseIndex);
		SendCommandInternal("System.Void GameData::CmdAcquireFranchise(System.Int32)", -1415997053, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAcquireFranchise(int franchiseIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(franchiseIndex);
		SendRPCInternal("System.Void GameData::RpcAcquireFranchise(System.Int32)", 649000700, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private new void OnValidate()
	{
		UpdateSunPosition();
		UpdateTime();
		UpdateUIHour();
	}

	[Command(requiresAuthority = false)]
	public void CmdOpenSupermarket()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void GameData::CmdOpenSupermarket()", -1444783162, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void AuxiliarSupermarketOpen()
	{
		NetworkisSupermarketOpen = true;
		timeFactor = 1f;
		maxProductsCustomersToBuy = 5 + gameDay / 2 + NetworkServer.connections.Count + difficulty;
		maxProductsCustomersToBuy = Mathf.Clamp(maxProductsCustomersToBuy, 5, 25 + NetworkServer.connections.Count + difficulty);
		maxCustomersNPCs = 3 + gameDay + (NetworkServer.connections.Count - 1) * 4 + extraCustomersPerk + difficulty * 2;
		maxCustomersNPCs = Mathf.Clamp(maxCustomersNPCs, 5, 70 + NetworkServer.connections.Count);
		RpcOpenSupermarket();
	}

	[ClientRpc]
	private void RpcOpenSupermarket()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void GameData::RpcOpenSupermarket()", -1099022317, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcNoCheckoutsMessage()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void GameData::RpcNoCheckoutsMessage()", -552657247, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcEndDay(int dCustomers, float dBenefits, int tRobbed, float mLostBecauseRobbing, int nFoundProducts, int tExpensiveProducts, float lCost, float rCost, float emploCost, float mSpentOnProducts, float oCosts, int complaintsAboutFilth, int tFranchiseExperience)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(dCustomers);
		writer.WriteFloat(dBenefits);
		writer.WriteInt(tRobbed);
		writer.WriteFloat(mLostBecauseRobbing);
		writer.WriteInt(nFoundProducts);
		writer.WriteInt(tExpensiveProducts);
		writer.WriteFloat(lCost);
		writer.WriteFloat(rCost);
		writer.WriteFloat(emploCost);
		writer.WriteFloat(mSpentOnProducts);
		writer.WriteFloat(oCosts);
		writer.WriteInt(complaintsAboutFilth);
		writer.WriteInt(tFranchiseExperience);
		SendRPCInternal("System.Void GameData::RpcEndDay(System.Int32,System.Single,System.Int32,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)", -1771083600, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcStartDay()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void GameData::RpcStartDay()", -1375695896, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void UpdateUIFunds(float oldFunds, float newFunds)
	{
		int num = (int)Mathf.Floor(newFunds);
		int length = num.ToString().Length;
		string text = newFunds.ToString();
		if (length > 7)
		{
			UIFundsCentsOBJ.text = ".00";
		}
		else
		{
			string currencyDecimalSeparator = CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalSeparator;
			if (currencyDecimalSeparator != "," && text.Contains(currencyDecimalSeparator))
			{
				string[] array = text.Split(char.Parse(currencyDecimalSeparator));
				text = array[0] + "," + array[1];
			}
			string[] array2 = text.Split(char.Parse(","));
			if (array2.Length > 1)
			{
				string text2 = array2[1];
				if (text2.Length == 1)
				{
					UIFundsCentsOBJ.text = "." + text2 + "0";
				}
				else
				{
					UIFundsCentsOBJ.text = "." + text2;
				}
			}
			else
			{
				UIFundsCentsOBJ.text = ".00";
			}
		}
		if (length != oldStringLength)
		{
			int num2 = ((length > 7) ? 1 : (7 - length));
			zeroesToAdd = "";
			for (int i = 0; i < num2; i++)
			{
				zeroesToAdd += "0";
			}
			oldStringLength = length;
		}
		UIFundsOBJ.text = "$" + zeroesToAdd + num;
	}

	private void UpdateDayName(int oldDay, int newDay)
	{
		int num = newDay % 7;
		string localizationString = LocalizationManager.instance.GetLocalizationString("weekday" + num);
		UIWeekDayOBJ.text = localizationString;
		currentDayOBJ.text = gameDay.ToString();
		NewspaperStandCalendar(newDay);
	}

	private void NewspaperStandCalendar(int day)
	{
		int value = day % 28 - 1;
		value = Mathf.Clamp(value, 0, 27);
		if (value < newspaperStandCalendarParent.childCount)
		{
			newspaperStandCalendarCrossOBJ.transform.SetParent(newspaperStandCalendarParent.GetChild(value));
			newspaperStandCalendarCrossOBJ.GetComponent<RectTransform>().anchoredPosition = Vector2.zero;
		}
		int value2 = Mathf.FloorToInt(day % 111 / 28);
		value2 = Mathf.Clamp(value2, 0, 3);
		newspaperStandSeasonField.text = LocalizationManager.instance.GetLocalizationString("season" + value2);
	}

	private void CalculateTodaysWeather()
	{
		int value = Mathf.FloorToInt(gameDay % 111 / 28);
		value = Mathf.Clamp(value, 0, 3);
		int[] array = new int[4] { 21, 32, 17, 5 };
		int[] array2 = new int[4] { 8, 11, 7, 4 };
		int[] array3 = new int[4] { 4, 4, 8, 15 };
		float[] array4 = new float[4] { 0.03f, 0.005f, 0.12f, 0.15f };
		float[] array5 = new float[4] { 0.01f, 0f, 0.12f, 0.1f };
		float[] array6 = new float[4] { 0.13f, 0.05f, 0.2f, 0.25f };
		int num = 0;
		if (UnityEngine.Random.value < array4[value])
		{
			num = ((!(UnityEngine.Random.value < 0.15f)) ? 3 : 4);
		}
		else if (UnityEngine.Random.value < array5[value] + array4[value])
		{
			num = 5;
		}
		else if (UnityEngine.Random.value < array5[value] + array4[value] + array6[value])
		{
			num = UnityEngine.Random.Range(1, 3);
		}
		int num2 = array[value];
		int num3 = num2 + UnityEngine.Random.Range(2, array2[value]);
		int num4 = num2 - UnityEngine.Random.Range(2, array3[value]);
		int num5 = 16;
		int num6 = num2;
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < num5; i++)
		{
			if (UnityEngine.Random.value < 0.75f)
			{
				num6 += UnityEngine.Random.Range(-2, 2);
				if (num6 > num3)
				{
					num6 = num3 - 1;
				}
				else if (num6 < num4)
				{
					num6 = num4 + 1;
				}
			}
			stringBuilder.Append(num6.ToString());
			if (i != num5 - 1)
			{
				stringBuilder.Append("|");
			}
		}
		NetworkweatherIndex = num;
		NetworktodayTemperatureData = stringBuilder.ToString();
		RpcSetWeather(num, stringBuilder.ToString());
	}

	[ClientRpc]
	private void RpcSetWeather(int weathIndex, string todayTaData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(weathIndex);
		writer.WriteString(todayTaData);
		SendRPCInternal("System.Void GameData::RpcSetWeather(System.Int32,System.String)", -529380357, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SetWeatherData(int weathIndex, string todayTaData)
	{
		weathIndex = Mathf.Clamp(weathIndex, 0, weatherSymbols.Length);
		weatherImageField.sprite = weatherSymbols[weathIndex];
		string[] array = todayTaData.Split("|");
		List<int> list = new List<int>();
		for (int i = 0; i < array.Length; i++)
		{
			list.Add(int.Parse(array[i]));
		}
		todayTemperaturesArray = list.ToArray();
		SetCurrentHourTemperature();
		if ((bool)instantiatedWeatherOBJ && instantiatedWeatherOBJ != weatherRelatedOBJs[weathIndex])
		{
			instantiatedWeatherOBJ.SetActive(value: false);
		}
		instantiatedWeatherOBJ = weatherRelatedOBJs[weathIndex];
		if (!(instantiatedWeatherOBJ != null))
		{
			return;
		}
		int qualityLevel = QualitySettings.GetQualityLevel();
		instantiatedWeatherOBJ.SetActive(value: true);
		for (int j = 0; j < instantiatedWeatherOBJ.transform.childCount; j++)
		{
			if ((bool)instantiatedWeatherOBJ.transform.GetChild(j).GetComponent<ParticleSystem>())
			{
				ParticleSystem.MainModule main = instantiatedWeatherOBJ.transform.GetChild(j).GetComponent<ParticleSystem>().main;
				main.maxParticles = 500 * qualityLevel;
			}
		}
	}

	private void SetCurrentHourTemperature()
	{
		int num = Mathf.FloorToInt(timeOfDay) - 8;
		if (num < todayTemperaturesArray.Length)
		{
			int num2 = todayTemperaturesArray[num] + 32;
			newspaperStandTemperaturesField.text = todayTemperaturesArray[num] + "C    " + num2 + "F";
		}
		else
		{
			newspaperStandTemperaturesField.text = "??C    ??F";
		}
	}

	private void UpdateFranchisePoints(int oldPoints, int newPoints)
	{
		UIFranchisePointsOBJ.text = gameFranchisePoints.ToString();
	}

	private void UpdateUIHour()
	{
		string text = Mathf.FloorToInt(timeOfDay).ToString();
		if (text.Length < 2)
		{
			text = "0" + text;
		}
		float num = Mathf.FloorToInt(timeOfDay);
		string text2 = ((int)((timeOfDay - num) * 60f)).ToString();
		if (text2.Length < 2)
		{
			text2 = "0" + text2;
		}
		UITimeOBJ.text = text + ":" + text2;
	}

	private void Update()
	{
		if (base.isServer && !keyPress && Input.anyKeyDown)
		{
			keyPress = true;
		}
	}

	private void FixedUpdate()
	{
		if (base.isServer)
		{
			if (timeFactor < 10f)
			{
				NetworktimeOfDay = timeOfDay + 1f / timeFactor * Time.fixedDeltaTime / 60f;
			}
			WorkingDayControl();
			TrashManager();
			BreakingManager();
		}
		if (base.isClient)
		{
			LightsOnControl();
		}
		if (timeOfDay > 24f)
		{
			NetworktimeOfDay = 0f;
		}
		UpdateSunPosition();
		UpdateUIHour();
		innerCounter++;
		if (innerCounter > counterLimit)
		{
			innerCounter = 0;
			UpdateTime();
		}
	}

	private void LightsOnControl()
	{
		if (!(timeOfDay > 19f))
		{
			return;
		}
		exposureOptionFactorControl();
		GetComponent<NetworkSpawner>().TurnSupermarketLettersEmission(enable: true);
		if (alreadyTurnedOff)
		{
			return;
		}
		alreadyTurnedOff = true;
		soundsOffOBJ.SetActive(value: false);
		foreach (Transform item in lightsOBJ.transform)
		{
			item.transform.Find("StreetLight").GetComponent<MeshRenderer>().material = lightsOn;
			item.transform.Find("Light_1").gameObject.SetActive(value: true);
			item.transform.Find("Light_2").gameObject.SetActive(value: true);
		}
	}

	private void LightsOffControl()
	{
		exposureNightCorrection = 0f;
		alreadyTurnedOff = false;
		soundsOffOBJ.SetActive(value: true);
		foreach (Transform item in lightsOBJ.transform)
		{
			item.transform.Find("StreetLight").GetComponent<MeshRenderer>().material = lightsOff;
			item.transform.Find("Light_1").gameObject.SetActive(value: false);
			item.transform.Find("Light_2").gameObject.SetActive(value: false);
		}
	}

	private void exposureOptionFactorControl()
	{
		if ((bool)FirstPersonController.Instance)
		{
			bool isIndoors = FirstPersonController.Instance.isIndoors;
			if (isIndoors && !alreadyInDoors && !coroutineRunning)
			{
				StartCoroutine(InterpolateExposure(goingIndoors: true));
			}
			if (!isIndoors && !alreadyOutDoors && !coroutineRunning)
			{
				StartCoroutine(InterpolateExposure(goingIndoors: false));
			}
		}
	}

	private IEnumerator InterpolateExposure(bool goingIndoors)
	{
		coroutineRunning = true;
		float inFactor;
		float outFactor;
		if (goingIndoors)
		{
			alreadyInDoors = true;
			alreadyOutDoors = false;
			inFactor = 0f;
			outFactor = 1f;
		}
		else
		{
			alreadyInDoors = false;
			alreadyOutDoors = true;
			inFactor = 1f;
			outFactor = 0f;
		}
		float elapsedTime = 0f;
		float waitTime = 1f;
		while (elapsedTime < waitTime)
		{
			exposureNightCorrection = Mathf.Lerp(inFactor, outFactor, elapsedTime / waitTime);
			float time = timeOfDay / 24f;
			exposureVolume.profile.TryGet<ColorAdjustments>(out var component);
			component.postExposure.value = exposureCurve.Evaluate(time) * exposureOptionFactor + exposureAdd + exposureNightCorrection * exposureOptionFactor;
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		yield return null;
		coroutineRunning = false;
	}

	private void TrashManager()
	{
		if (gameDay >= 7 && isSupermarketOpen && !(timeOfDay > 22f))
		{
			int num = Mathf.Clamp(gameDay, 0, 50);
			if (timeOfDay > nextTimeToSpawnTrash && GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(6).childCount < num)
			{
				float value = 25f / ((float)gameDay + (float)(difficulty + (NetworkServer.connections.Count - 1)));
				value = Mathf.Clamp(value, 0.3f - (float)NetworkServer.connections.Count * 0.01f, float.PositiveInfinity);
				nextTimeToSpawnTrash += value;
				StartCoroutine(SpawnTrash());
			}
		}
	}

	private IEnumerator SpawnTrash()
	{
		List<Transform> list = new List<Transform>();
		foreach (Transform item in trashSpotsParent.transform)
		{
			list.Add(item);
		}
		bool[] storeSpaceUpgrades = GetComponent<UpgradesManager>().storeSpaceUpgrades;
		for (int i = 0; i < storeSpaceUpgrades.Length; i++)
		{
			if (storeSpaceUpgrades[i] && i < variableTrashSpotsParent.transform.childCount)
			{
				list.Add(variableTrashSpotsParent.transform.GetChild(i));
			}
		}
		int index = UnityEngine.Random.Range(0, list.Count);
		Transform baseRaycastSpot = list[index];
		Vector3 spawnSpot = Vector3.zero;
		bool foundRaycastSpot = false;
		while (!foundRaycastSpot)
		{
			if (Physics.Raycast(baseRaycastSpot.position + new Vector3(UnityEngine.Random.Range(-2.4f, 2.4f), 0f, UnityEngine.Random.Range(-1.9f, 1.9f)), -Vector3.up, out var hitInfo, 5f, lMask) && hitInfo.transform.gameObject.tag == "Buildable")
			{
				spawnSpot = hitInfo.point;
				foundRaycastSpot = true;
			}
			yield return null;
		}
		int networktrashID = UnityEngine.Random.Range(0, 5);
		GameObject obj = UnityEngine.Object.Instantiate(trashSpawnPrefab, GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(6).transform);
		obj.transform.position = spawnSpot;
		obj.GetComponent<TrashSpawn>().NetworktrashID = networktrashID;
		obj.GetComponent<PlayMakerFSM>().enabled = true;
		NetworkServer.Spawn(obj);
		yield return null;
	}

	private void ClearExistingTrash()
	{
		Transform transform = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(6).transform;
		if (transform.childCount != 0)
		{
			for (int i = 0; i < transform.childCount; i++)
			{
				UnityEngine.Object.Destroy(transform.GetChild(transform.childCount - 1 - i).gameObject);
			}
		}
	}

	private void BreakingManager()
	{
		if (gameDay < 21 || !isSupermarketOpen || timeOfDay > 22f)
		{
			return;
		}
		if (nextTimeToGetABreakEvent < 10f)
		{
			nextTimeToGetABreakEvent += GetNextTimeAdd();
		}
		else
		{
			if (!(timeOfDay > nextTimeToGetABreakEvent))
			{
				return;
			}
			nextTimeToGetABreakEvent += GetNextTimeAdd();
			int num = UnityEngine.Random.Range(0, 4);
			GameObject gameObject = null;
			GameObject gameObject2 = null;
			switch (num)
			{
			case 0:
				if (NPC_Manager.Instance.selfCheckoutOBJ.transform.childCount > 0)
				{
					int index = UnityEngine.Random.Range(0, NPC_Manager.Instance.selfCheckoutOBJ.transform.childCount);
					gameObject = NPC_Manager.Instance.selfCheckoutOBJ.transform.GetChild(index).gameObject;
					if (gameObject.GetComponent<Data_Container>().isBroken || gameObject.GetComponent<Data_Container>().brokenDay == gameDay)
					{
						return;
					}
					gameObject.GetComponent<Data_Container>().BreakingEvent();
					gameObject2 = UnityEngine.Object.Instantiate(breakingPrefabOBJ);
					gameObject.GetComponent<Data_Container>().associatedBrokenDisclaimerOBJ = gameObject2;
				}
				break;
			case 1:
				if (NPC_Manager.Instance.cardboardBalerList.Count > 0)
				{
					int index = UnityEngine.Random.Range(0, NPC_Manager.Instance.cardboardBalerList.Count);
					gameObject = NPC_Manager.Instance.cardboardBalerList[index];
					if (gameObject.GetComponent<CardboardBaler>().isBroken || gameObject.GetComponent<CardboardBaler>().brokenDay == gameDay)
					{
						return;
					}
					gameObject.GetComponent<CardboardBaler>().BreakingEvent();
					gameObject2 = UnityEngine.Object.Instantiate(breakingPrefabOBJ);
					gameObject.GetComponent<CardboardBaler>().associatedBrokenDisclaimerOBJ = gameObject2;
				}
				break;
			case 2:
			case 3:
			{
				List<GameObject> list = CoolFurnitureList();
				if (list.Count > 0)
				{
					int index = UnityEngine.Random.Range(0, list.Count);
					gameObject = list[index];
					if (gameObject.GetComponent<Data_Container>().isBroken || gameObject.GetComponent<Data_Container>().brokenDay == gameDay)
					{
						return;
					}
					gameObject.GetComponent<Data_Container>().BreakingEvent();
					gameObject2 = UnityEngine.Object.Instantiate(breakingPrefabOBJ);
					gameObject.GetComponent<Data_Container>().associatedBrokenDisclaimerOBJ = gameObject2;
				}
				break;
			}
			}
			if (gameObject2 != null && gameObject != null && (bool)gameObject.GetComponent<BoxCollider>())
			{
				float num2 = ((!(gameObject.GetComponent<BoxCollider>().size.y < 0.65f)) ? gameObject.GetComponent<BoxCollider>().size.y : 2f);
				gameObject2.transform.position = gameObject.transform.position + new Vector3(0f, 1f + num2, 0f);
				gameObject2.transform.rotation = Quaternion.Euler(new Vector3(0f, gameObject.transform.rotation.y + 90f, 0f));
				gameObject2.GetComponent<BreakingDestroyListener>().objectToListen = gameObject;
				gameObject2.GetComponent<BreakingDestroyListener>().enabled = true;
				NPC_Manager.Instance.brokenFurnitureList.Add(gameObject);
				NetworkServer.Spawn(gameObject2);
			}
		}
	}

	private float GetNextTimeAdd()
	{
		float value = difficulty + NetworkServer.connections.Count;
		value = Mathf.Clamp(value, 2f, 10f);
		return Mathf.Clamp((float)UnityEngine.Random.Range(9, 14) / value, 1.5f, float.PositiveInfinity);
	}

	private List<GameObject> CoolFurnitureList()
	{
		List<GameObject> list = new List<GameObject>();
		Transform child = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(0);
		for (int i = 0; i < child.transform.childCount; i++)
		{
			int containerID = child.transform.GetChild(i).GetComponent<Data_Container>().containerID;
			if (containerID == 2 || containerID == 3 || containerID == 4 || containerID == 8)
			{
				list.Add(child.transform.GetChild(i).gameObject);
			}
		}
		return list;
	}

	private void WorkingDayControl()
	{
		if (timeOfDay > 22.5f && isSupermarketOpen)
		{
			NetworkisSupermarketOpen = false;
			timeFactor = 50f;
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdEndDayFromButton()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void GameData::CmdEndDayFromButton()", -1086413400, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator WaitUntilNewDay()
	{
		yield return new WaitForSeconds(2f);
		DoDaySaveBackup();
		if ((bool)NPC_Manager.Instance)
		{
			NPC_Manager.Instance.EndDaySaveEmployeesValues();
			if (NPC_Manager.Instance.rerollsPerDay > 0)
			{
				NPC_Manager instance = NPC_Manager.Instance;
				instance.NetworkrerollTimes = instance.rerollTimes + NPC_Manager.Instance.rerollsPerDay;
			}
		}
		if (GetComponent<UpgradesManager>().addonsBought[0] && (bool)OrderPackaging.Instance && OrderPackaging.Instance.isOrderDepartmentActivated)
		{
			OrderPackaging.Instance.NewDayDeactivateOrderDepartment();
		}
		GetComponent<DebtManager>().GenerateNewDayInvoices();
		AssembleListsForSharing();
		yield return new WaitForSeconds(8f);
		NetworkgameDay = gameDay + 1;
		NetworktimeOfDay = 8f;
		nextTimeToSpawnTrash = 10f;
		nextTimeToGetABreakEvent = 9.9f;
		ResetCheckoutQueues();
		ServerCalculateNewInflation();
		ClearExistingTrash();
		GenerateNewEmployeesData();
		CalculateTodaysWeather();
		dailyCustomers = 0;
		dayBenefits = 0f;
		timesRobbed = 0;
		moneyLostBecauseRobbing = 0f;
		productsTooExpensiveList.Clear();
		productsNotFoundList.Clear();
		moneySpentOnProducts = 0f;
		otherCosts = 0f;
		complainedAboutFilth = 0;
		todaysFranchiseExperience = 0;
		lightCost = 0f;
		rentCost = 0f;
		employeesCost = 0f;
		dayTimeCounter = 0f;
		nextAutosaveTime = autosaveFactor * 60f;
		PlayMakerFSM fsm = SaveOBJ.GetComponent<PlayMakerFSM>();
		fsm.FsmVariables.GetFsmBool("IsSaving").Value = true;
		fsm.SendEvent("Send_Data");
		while (fsm.FsmVariables.GetFsmBool("IsSaving").Value)
		{
			yield return null;
		}
		NetworkSpawner nSpawnerComponent = GetComponent<NetworkSpawner>();
		nSpawnerComponent.SaveProps(autosave: false);
		yield return new WaitForSeconds(0.25f);
		while (nSpawnerComponent.isSaving)
		{
			yield return null;
		}
		pressAnyKeyOBJ.SetActive(value: true);
		yield return new WaitForSeconds(0.25f);
		keyPress = false;
		if (!automaticallyEndDay)
		{
			while (!keyPress)
			{
				yield return null;
			}
		}
		pressAnyKeyOBJ.SetActive(value: false);
		GetComponent<DebtManager>().NewDayConsequencesCheck();
		RpcStartDay();
	}

	private void GenerateNewEmployeesData()
	{
		NPC_Manager.Instance.GetComponent<EmployeesDataGeneration>().GenerateTodayEmployeesData();
	}

	private void DoDaySaveBackup()
	{
		string value = FsmVariables.GlobalVariables.GetFsmString("CurrentFilename").Value;
		string oldFilePath = Application.persistentDataPath + "/" + value;
		string[] array = value.Split(".");
		string newFilePath = Application.persistentDataPath + "/" + array[0] + "Day" + gameDay + ".es3";
		ES3.CopyFile(oldFilePath, newFilePath);
	}

	private IEnumerator AutosaveControl()
	{
		GameObject endDayStatsOBJ = GameCanvas.Instance.transform.Find("EndDayStats").gameObject;
		while (true)
		{
			if (endDayStatsOBJ.activeSelf)
			{
				yield return null;
			}
			dayTimeCounter += Time.deltaTime;
			if (dayTimeCounter > nextAutosaveTime && !autosaving)
			{
				nextAutosaveTime += autosaveFactor * 60f;
				StartCoroutine(Autosave(isSavingAndQuitting: false));
			}
			yield return null;
		}
	}

	public void SaveFromQuitButton()
	{
		if (GameCanvas.Instance.transform.Find("EndDayStats").gameObject.activeSelf)
		{
			savedAndQuitted = true;
		}
		else
		{
			StartCoroutine(Autosave(isSavingAndQuitting: true));
		}
	}

	private IEnumerator Autosave(bool isSavingAndQuitting)
	{
		autosaving = true;
		string filename = FsmVariables.GlobalVariables.GetFsmString("CurrentFilename").Value;
		string oldFilePath = Application.persistentDataPath + "/" + filename;
		string text = "Autosaves/Autosave001.es3";
		string autosavePath = Application.persistentDataPath + "/" + text;
		if (!ES3.FileExists(autosavePath))
		{
			ES3.CopyFile(oldFilePath, autosavePath);
		}
		GameCanvas.Instance.transform.Find("SavingContainer").gameObject.SetActive(value: true);
		int timeCounterInMinutes = (int)(dayTimeCounter / 60f);
		string actualTimeString = GameCanvas.Instance.transform.Find("GameData/Time").GetComponent<TextMeshProUGUI>().text;
		yield return new WaitForSeconds(0.25f);
		ES3Settings cacheSettings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		ES3.CacheFile(autosavePath, cacheSettings);
		ES3Settings settings = new ES3Settings(autosavePath, ES3.Location.Cache);
		ES3.Save("autosaveTimeCounter", timeCounterInMinutes, autosavePath, settings);
		ES3.Save("autosaveTimeOfDayString", actualTimeString, autosavePath, settings);
		ES3.Save("autosaveTimeOfDay", timeOfDay, autosavePath, settings);
		ES3.Save("autosaveOriginalFilename", filename, autosavePath, settings);
		ES3.Save("autosaveIsMarketOpened", isSupermarketOpen, autosavePath, settings);
		if ((bool)NPC_Manager.Instance)
		{
			ES3.Save("autosaveEmployeePriorities", NPC_Manager.Instance.priorityArray, autosavePath, settings);
		}
		if (GetComponent<UpgradesManager>().addonsBought[0] && (bool)OrderPackaging.Instance)
		{
			ES3.Save("autosaveIsOrderingOpened", OrderPackaging.Instance.isOrderDepartmentActivated, autosavePath, settings);
			ES3.Save("autosaveOrderingData", OrderPackaging.Instance.ordersData, autosavePath, settings);
			ES3.Save("autosaveOrderingNextOrderTime", OrderPackaging.Instance.nextOrderTime, autosavePath, settings);
			ES3.Save("autosaveOrderingNumberOfAssignedOrders", OrderPackaging.Instance.numberOfAssignedOrders, autosavePath, settings);
			ES3.Save("autosaveOrderingMaxNumberOfDailyOrders", OrderPackaging.Instance.maxNumberOfDailyOrders, autosavePath, settings);
			ES3.Save("autosaveOrderingInternalOrderNumber", OrderPackaging.Instance.internalOrderNumber, autosavePath, settings);
		}
		ES3.Save("autosaveCargoToSpawn", GetComponent<ManagerBlackboard>().idsToSpawn, autosavePath, settings);
		ES3.Save("autosaveNextBreakingTime", nextTimeToGetABreakEvent, autosavePath, settings);
		ES3.Save("autosaveNextSpawnTrash", nextTimeToSpawnTrash, autosavePath, settings);
		Transform child = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(4);
		List<int> list = new List<int>();
		List<int> list2 = new List<int>();
		List<Vector3> list3 = new List<Vector3>();
		if (child.childCount > 0)
		{
			int childCount = child.childCount;
			childCount = Mathf.Clamp(childCount, 0, 250);
			for (int i = 0; i < childCount; i++)
			{
				BoxData component = child.transform.GetChild(i).GetComponent<BoxData>();
				list.Add(component.productID);
				list2.Add(component.numberOfProducts);
				list3.Add(component.transform.position);
			}
		}
		ES3.Save("autosaveBoxesIDsList", list, autosavePath, settings);
		ES3.Save("autosaveBoxesProductsList", list2, autosavePath, settings);
		ES3.Save("autosaveBoxesPositionssList", list3, autosavePath, settings);
		Transform child2 = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(2);
		List<bool> list4 = new List<bool>();
		if (child2.childCount > 0)
		{
			for (int j = 0; j < child2.transform.childCount; j++)
			{
				list4.Add(child2.transform.GetChild(j).GetComponent<Data_Container>().isCheckoutClosed);
			}
		}
		ES3.Save("autosaveClosedCheckoutsList", list4, autosavePath, settings);
		yield return new WaitForSeconds(0.25f);
		ES3.StoreCachedFile(autosavePath, cacheSettings);
		yield return new WaitForSeconds(0.25f);
		PlayMakerFSM fsm = SaveOBJ.GetComponent<PlayMakerFSM>();
		fsm.FsmVariables.GetFsmBool("IsSaving").Value = true;
		fsm.SendEvent("Send_Data_4");
		while (fsm.FsmVariables.GetFsmBool("IsSaving").Value)
		{
			yield return null;
		}
		NetworkSpawner nSpawnerComponent = GetComponent<NetworkSpawner>();
		nSpawnerComponent.SaveProps(autosave: true);
		yield return new WaitForSeconds(0.25f);
		while (nSpawnerComponent.isSaving)
		{
			yield return null;
		}
		yield return new WaitForSeconds(0.25f);
		GameCanvas.Instance.transform.Find("SavingContainer").gameObject.SetActive(value: false);
		yield return null;
		savedAndQuitted = isSavingAndQuitting;
		autosaving = false;
	}

	public void LoadFromAutosave()
	{
		if (FsmVariables.GlobalVariables.GetFsmBool("LoadingFromAutosave").Value)
		{
			StartCoroutine(LoadingFromAutosave());
		}
	}

	private IEnumerator LoadingFromAutosave()
	{
		yield return new WaitForSeconds(0.25f);
		string text = "Autosaves/Autosave001.es3";
		string autosavePath = Application.persistentDataPath + "/" + text;
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		ES3.CacheFile(autosavePath, settings);
		ES3Settings settings2 = new ES3Settings(autosavePath, ES3.Location.Cache);
		if (ES3.Load<bool>("autosaveIsMarketOpened", autosavePath, settings2))
		{
			AuxiliarSupermarketOpen();
		}
		dayTimeCounter = ES3.Load<int>("autosaveTimeCounter", autosavePath, settings2) * 60;
		nextAutosaveTime = dayTimeCounter + autosaveFactor * 60f;
		NetworktimeOfDay = ES3.Load<float>("autosaveTimeOfDay", autosavePath, settings2);
		if (ES3.KeyExists("autosaveCargoToSpawn", autosavePath, settings2))
		{
			GetComponent<ManagerBlackboard>().idsToSpawn = ES3.Load<List<int>>("autosaveCargoToSpawn", autosavePath, settings2);
			GetComponent<ManagerBlackboard>().SpawnRemainingCargoFromAutosave();
		}
		if (ES3.KeyExists("autosaveBoxesIDsList", autosavePath, settings2))
		{
			GetComponent<ManagerBlackboard>().SpawnAutosavedBoxes(ES3.Load<List<int>>("autosaveBoxesIDsList", autosavePath, settings2), ES3.Load<List<int>>("autosaveBoxesProductsList", autosavePath, settings2), ES3.Load<List<Vector3>>("autosaveBoxesPositionssList", autosavePath, settings2));
		}
		if (ES3.KeyExists("autosaveNextBreakingTime", autosavePath, settings2))
		{
			nextTimeToGetABreakEvent = ES3.Load<float>("autosaveNextBreakingTime", autosavePath, settings2);
		}
		if (ES3.KeyExists("autosaveNextSpawnTrash", autosavePath, settings2))
		{
			nextTimeToSpawnTrash = ES3.Load<float>("autosaveNextSpawnTrash", autosavePath, settings2);
		}
		Transform child = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(2);
		List<bool> list = ES3.Load<List<bool>>("autosaveClosedCheckoutsList", autosavePath, settings2);
		if (child.childCount > 0 && list.Count > 0)
		{
			for (int i = 0; i < child.transform.childCount; i++)
			{
				if (i < list.Count && list[i])
				{
					child.transform.GetChild(i).GetComponent<Data_Container>().CmdCloseCheckout();
				}
			}
		}
		yield return new WaitForSeconds(0.25f);
		float auxiliarWait = 0f;
		while (auxiliarWait < 10f)
		{
			auxiliarWait += Time.deltaTime;
			if (NPC_Manager.Instance.initialEmployeesSpawnIsFinished)
			{
				break;
			}
			yield return null;
		}
		if (ES3.KeyExists("autosaveEmployeePriorities", autosavePath, settings2))
		{
			int[] loadedPrioritiesArray = ES3.Load<int[]>("autosaveEmployeePriorities", autosavePath, settings2);
			NPC_Manager.Instance.CmdLoadPrioritiesLayout(loadedPrioritiesArray);
		}
		auxiliarWait = 0f;
		while (auxiliarWait < 5f)
		{
			auxiliarWait += Time.deltaTime;
			if ((bool)OrderPackaging.Instance)
			{
				break;
			}
			yield return null;
		}
		if (ES3.KeyExists("autosaveIsOrderingOpened", autosavePath, settings2))
		{
			bool flag = ES3.Load<bool>("autosaveIsMarketOpened", autosavePath, settings2);
			if (flag)
			{
				OrderPackaging.Instance.NetworkisOrderDepartmentActivated = flag;
				OrderPackaging.Instance.NetworkordersData = ES3.Load<string[]>("autosaveOrderingData", autosavePath, settings2);
				OrderPackaging.Instance.nextOrderTime = ES3.Load<float>("autosaveOrderingNextOrderTime", autosavePath, settings2);
				OrderPackaging.Instance.numberOfAssignedOrders = ES3.Load<int>("autosaveOrderingNumberOfAssignedOrders", autosavePath, settings2);
				OrderPackaging.Instance.maxNumberOfDailyOrders = ES3.Load<int>("autosaveOrderingMaxNumberOfDailyOrders", autosavePath, settings2);
				OrderPackaging.Instance.internalOrderNumber = ES3.Load<int>("autosaveOrderingInternalOrderNumber", autosavePath, settings2);
				OrderPackaging.Instance.ActivateDepartmentFromAutosave();
			}
		}
	}

	private void UpdateSunPosition()
	{
		float t = timeOfDay / 24f;
		float num = Mathf.Lerp(-90f, 270f, t);
		float x = num - 180f;
		sunLight.transform.rotation = Quaternion.Euler(num, 80f, 0f);
		moonLight.transform.rotation = Quaternion.Euler(x, 80f, 0f);
	}

	private void UpdateTime()
	{
		float time = timeOfDay / 24f;
		float num = skyBoxTintFactorCurve.Evaluate(time);
		RenderSettings.skybox.SetFloat("_Exposure", num);
		RenderSettings.fogColor = Color.Lerp(Color.black, new Color(178f, 192f, 200f) * 0.005f, num);
		exposureVolume.profile.TryGet<ColorAdjustments>(out var component);
		component.postExposure.value = exposureCurve.Evaluate(time) * exposureOptionFactor + exposureAdd + exposureNightCorrection * exposureOptionFactor;
		if (timeOfDay > 6f && timeOfDay < 18f && isNight)
		{
			isNight = false;
			sunLight.gameObject.SetActive(value: true);
			moonLight.gameObject.SetActive(value: false);
		}
		else if ((timeOfDay < 6f || timeOfDay > 18f) && !isNight)
		{
			isNight = true;
			sunLight.gameObject.SetActive(value: false);
			moonLight.gameObject.SetActive(value: true);
		}
	}

	public void ServerCalculateNewInflation()
	{
		if (gameDay % 7 != 4)
		{
			return;
		}
		float[] tierInflation = ProductListing.Instance.GetComponent<ProductListing>().tierInflation;
		for (int i = 0; i < tierInflation.Length; i++)
		{
			float num = UnityEngine.Random.Range(0.05f, 0.15f) + UnityEngine.Random.Range(0.04f, 0.08f) * ((float)gameDay / 40f);
			float num2 = tierInflation[i] + num;
			num2 = Mathf.Round(num2 * 100f) / 100f;
			ProductListing.Instance.GetComponent<ProductListing>().tierInflation[i] = num2;
			RpcUpdateInflationOnClient(i, num2);
			if (i >= gameDay / 2)
			{
				break;
			}
		}
	}

	[ClientRpc]
	private void RpcUpdateInflationOnClient(int inflationIndex, float newInflation)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(inflationIndex);
		writer.WriteFloat(newInflation);
		SendRPCInternal("System.Void GameData::RpcUpdateInflationOnClient(System.Int32,System.Single)", 2017206061, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void ResetCheckoutQueues()
	{
		Transform child = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(2);
		if (child.childCount > 0)
		{
			foreach (Transform item in child)
			{
				item.GetComponent<Data_Container>().ResetQueue();
			}
		}
		Transform child2 = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(3);
		if (child.childCount <= 0)
		{
			return;
		}
		foreach (Transform item2 in child2)
		{
			item2.GetComponent<Data_Container>().ResetCheckoutQueue();
		}
	}

	public void AddExpensiveList(int productID)
	{
		if (productsTooExpensiveList.Count == 0)
		{
			productsTooExpensiveList.Add(productID);
		}
		foreach (int productsTooExpensive in productsTooExpensiveList)
		{
			if (productsTooExpensive == productID)
			{
				return;
			}
		}
		productsTooExpensiveList.Add(productID);
	}

	public void AddNotFoundList(int productID)
	{
		if (productsNotFoundList.Count == 0)
		{
			productsNotFoundList.Add(productID);
		}
		foreach (int productsNotFound in productsNotFoundList)
		{
			if (productsNotFound == productID)
			{
				return;
			}
		}
		productsNotFoundList.Add(productID);
	}

	private void AssembleListsForSharing()
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < productsTooExpensiveList.Count; i++)
		{
			stringBuilder.Append(productsTooExpensiveList[i].ToString());
			if (i != productsTooExpensiveList.Count - 1)
			{
				stringBuilder.Append("|");
			}
		}
		stringBuilder.Append("%");
		for (int j = 0; j < productsNotFoundList.Count; j++)
		{
			stringBuilder.Append(productsNotFoundList[j].ToString());
			if (j != productsNotFoundList.Count - 1)
			{
				stringBuilder.Append("|");
			}
		}
		string stringInfo = stringBuilder.ToString();
		RpcUpdateListsOnClients(stringInfo);
	}

	[ClientRpc]
	private void RpcUpdateListsOnClients(string stringInfo)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(stringInfo);
		SendRPCInternal("System.Void GameData::RpcUpdateListsOnClients(System.String)", -226160169, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void PlayPopSound()
	{
		base.transform.Find("Audio_PlaceItemPop").GetComponent<AudioSource>().clip = popsArray[UnityEngine.Random.Range(0, popsArray.Length - 1)];
		base.transform.Find("Audio_PlaceItemPop").GetComponent<AudioSource>().Play();
	}

	public void PlayPop2Sound()
	{
		base.transform.Find("Audio_RemoveItem").GetComponent<AudioSource>().Play();
	}

	public void PlayBroomSound()
	{
		base.transform.Find("Audio_Broom").GetComponent<AudioSource>().Play();
	}

	[Command(requiresAuthority = false)]
	public void CmdmoneySpentOnProducts(float fundsToAdd)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(fundsToAdd);
		SendCommandInternal("System.Void GameData::CmdmoneySpentOnProducts(System.Single)", 56512713, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdHostDisconnect()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void GameData::CmdHostDisconnect()", 1002367509, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcHostDisconnect()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void GameData::RpcHostDisconnect()", 495782178, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public GameData()
	{
		_Mirror_SyncVarHookDelegate_gameFunds = UpdateUIFunds;
		_Mirror_SyncVarHookDelegate_gameFranchiseExperience = CalculateFranchiseLevel;
		_Mirror_SyncVarHookDelegate_gameFranchisePoints = UpdateFranchisePoints;
		_Mirror_SyncVarHookDelegate_gameDay = UpdateDayName;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdAlterFunds__Single(float fundsToAdd)
	{
		float value = gameFunds + fundsToAdd;
		value = Mathf.Clamp(value, 0f, 2.14E+09f);
		NetworkgameFunds = Mathf.Round(value * 100f) / 100f;
		if (fundsToAdd > 0f)
		{
			float value2 = 0.5f - (float)gameFranchiseLevel * 0.004f;
			value2 = Mathf.Clamp(value2, 0.05f, 1f);
			NetworkgameFranchiseExperience = gameFranchiseExperience + (int)(fundsToAdd * value2);
			todaysFranchiseExperience += (int)(fundsToAdd * value2);
			dayBenefits += (int)fundsToAdd;
		}
		else
		{
			otherCosts += fundsToAdd;
		}
		RpcAlterFunds(fundsToAdd);
		int num = 0;
		for (int i = 1; (float)i < float.PositiveInfinity; i++)
		{
			num += i * 100;
			if (num > gameFranchiseExperience)
			{
				if (i > lastAwardedFranchiseLevel)
				{
					NetworkgameFranchisePoints = gameFranchisePoints + 1;
					lastAwardedFranchiseLevel = i;
				}
				break;
			}
		}
	}

	protected static void InvokeUserCode_CmdAlterFunds__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAlterFunds called on client.");
		}
		else
		{
			((GameData)obj).UserCode_CmdAlterFunds__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_CmdAlterFundsWithoutExperience__Single(float fundsToAdd)
	{
		float value = gameFunds + fundsToAdd;
		value = Mathf.Clamp(value, 0f, 2.14E+09f);
		NetworkgameFunds = Mathf.Round(value * 100f) / 100f;
		RpcAlterFunds(fundsToAdd);
	}

	protected static void InvokeUserCode_CmdAlterFundsWithoutExperience__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAlterFundsWithoutExperience called on client.");
		}
		else
		{
			((GameData)obj).UserCode_CmdAlterFundsWithoutExperience__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_RpcAlterFunds__Single(float funds)
	{
		funds = Mathf.Round(funds * 100f) / 100f;
		base.transform.Find("Audio_Kaching").GetComponent<AudioSource>().Play();
		GameObject gameObject = UnityEngine.Object.Instantiate(prefabNotificationOBJ, UIFundsNotificationParentOBJ.transform);
		string text = "";
		if (funds > 0f)
		{
			text = "+$" + funds;
		}
		else
		{
			gameObject.GetComponent<TextMeshProUGUI>().color = Color.red;
			text = "-$" + Mathf.Abs(funds);
		}
		gameObject.GetComponent<TextMeshProUGUI>().text = text;
		gameObject.SetActive(value: true);
	}

	protected static void InvokeUserCode_RpcAlterFunds__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAlterFunds called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcAlterFunds__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_CmdAcquireFranchise__Int32(int franchiseIndex)
	{
		GetComponent<ProductListing>().unlockedProductTiers[franchiseIndex] = true;
		NetworkgameFranchisePoints = gameFranchisePoints - 1;
		NetworkgameFranchisePoints = Mathf.Clamp(gameFranchisePoints, 0, 100000);
		RpcAcquireFranchise(franchiseIndex);
	}

	protected static void InvokeUserCode_CmdAcquireFranchise__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAcquireFranchise called on client.");
		}
		else
		{
			((GameData)obj).UserCode_CmdAcquireFranchise__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcAcquireFranchise__Int32(int franchiseIndex)
	{
		GetComponent<ProductListing>().unlockedProductTiers[franchiseIndex] = true;
		GetComponent<ProductListing>().updateSkillState();
		GetComponent<ProductListing>().updateProductList();
		GetComponent<ManagerBlackboard>().UpdateUnlockedFranchises();
		base.transform.Find("Audio_AcquirePerk").GetComponent<AudioSource>().Play();
		GameCanvas.Instance.CreateImportantNotification("messagei2");
	}

	protected static void InvokeUserCode_RpcAcquireFranchise__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAcquireFranchise called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcAcquireFranchise__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdOpenSupermarket()
	{
		if (GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(2).childCount == 0)
		{
			RpcNoCheckoutsMessage();
		}
		else if (!isSupermarketOpen || timeOfDay > 23f || timeOfDay < 8f)
		{
			AuxiliarSupermarketOpen();
		}
	}

	protected static void InvokeUserCode_CmdOpenSupermarket(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdOpenSupermarket called on client.");
		}
		else
		{
			((GameData)obj).UserCode_CmdOpenSupermarket();
		}
	}

	protected void UserCode_RpcOpenSupermarket()
	{
		base.transform.Find("Audio_Special").GetComponent<AudioSource>().Play();
		GameCanvas.Instance.CreateImportantNotification("messagei0");
	}

	protected static void InvokeUserCode_RpcOpenSupermarket(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcOpenSupermarket called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcOpenSupermarket();
		}
	}

	protected void UserCode_RpcNoCheckoutsMessage()
	{
		GameCanvas.Instance.CreateCanvasNotification("message18");
	}

	protected static void InvokeUserCode_RpcNoCheckoutsMessage(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcNoCheckoutsMessage called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcNoCheckoutsMessage();
		}
	}

	protected void UserCode_RpcEndDay__Int32__Single__Int32__Single__Int32__Int32__Single__Single__Single__Single__Single__Int32__Int32(int dCustomers, float dBenefits, int tRobbed, float mLostBecauseRobbing, int nFoundProducts, int tExpensiveProducts, float lCost, float rCost, float emploCost, float mSpentOnProducts, float oCosts, int complaintsAboutFilth, int tFranchiseExperience)
	{
		GameCanvas.Instance.TriggerEndDayStats(dCustomers, dBenefits, tRobbed, mLostBecauseRobbing, nFoundProducts, tExpensiveProducts, lCost, rCost, emploCost, mSpentOnProducts, oCosts, complaintsAboutFilth, tFranchiseExperience);
		FirstPersonController.Instance.inEvent = true;
		GetComponent<ProductListing>().DailySaleReset();
		if (Time.timeScale > 1.1f)
		{
			Time.timeScale = 1f;
		}
	}

	protected static void InvokeUserCode_RpcEndDay__Int32__Single__Int32__Single__Int32__Int32__Single__Single__Single__Single__Single__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcEndDay called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcEndDay__Int32__Single__Int32__Single__Int32__Int32__Single__Single__Single__Single__Single__Int32__Int32(reader.ReadInt(), reader.ReadFloat(), reader.ReadInt(), reader.ReadFloat(), reader.ReadInt(), reader.ReadInt(), reader.ReadFloat(), reader.ReadFloat(), reader.ReadFloat(), reader.ReadFloat(), reader.ReadFloat(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcStartDay()
	{
		AchievementsManager.Instance.SavebufferValues();
		GameCanvas.Instance.StartEndCoroutine();
		FirstPersonController.Instance.inEvent = false;
		FirstPersonController.Instance.GetComponent<FirstPersonTransform>().coroutineActivator(new Vector3(5f + UnityEngine.Random.Range(-2f, 2f), 0f, -20.5f + UnityEngine.Random.Range(-2f, 2f)), 0f);
		LightsOffControl();
		GetComponent<NetworkSpawner>().TurnSupermarketLettersEmission(enable: false);
		alreadyInDoors = false;
		alreadyOutDoors = false;
	}

	protected static void InvokeUserCode_RpcStartDay(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcStartDay called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcStartDay();
		}
	}

	protected void UserCode_RpcSetWeather__Int32__String(int weathIndex, string todayTaData)
	{
		SetWeatherData(weathIndex, todayTaData);
	}

	protected static void InvokeUserCode_RpcSetWeather__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSetWeather called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcSetWeather__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_CmdEndDayFromButton()
	{
		if (timeOfDay > 22f && !isSupermarketOpen)
		{
			if (Time.timeScale > 1.1f)
			{
				Time.timeScale = 1f;
			}
			NPC_Manager.Instance.RemoveCustomers();
			GetComponent<ProductListing>().ServerClearSalesSyncvar();
			RpcEndDay(dailyCustomers, dayBenefits, timesRobbed, moneyLostBecauseRobbing, productsNotFoundList.Count, productsTooExpensiveList.Count, lightCost, rentCost, employeesCost, moneySpentOnProducts, otherCosts, complainedAboutFilth, todaysFranchiseExperience);
			StartCoroutine(WaitUntilNewDay());
			AchievementsManager.Instance.CmdAddAchievementPoint(0, (int)dayBenefits);
			AchievementsManager.Instance.CmdAddAchievementPoint(10, (int)dayBenefits);
		}
	}

	protected static void InvokeUserCode_CmdEndDayFromButton(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdEndDayFromButton called on client.");
		}
		else
		{
			((GameData)obj).UserCode_CmdEndDayFromButton();
		}
	}

	protected void UserCode_RpcUpdateInflationOnClient__Int32__Single(int inflationIndex, float newInflation)
	{
		if (!base.isServer)
		{
			ProductListing.Instance.GetComponent<ProductListing>().tierInflation[inflationIndex] = newInflation;
		}
	}

	protected static void InvokeUserCode_RpcUpdateInflationOnClient__Int32__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateInflationOnClient called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcUpdateInflationOnClient__Int32__Single(reader.ReadInt(), reader.ReadFloat());
		}
	}

	protected void UserCode_RpcUpdateListsOnClients__String(string stringInfo)
	{
		lastDayTooExpensiveList.Clear();
		lastDaysNotFoundList.Clear();
		if (stringInfo == "" || stringInfo == "%")
		{
			return;
		}
		string[] array = stringInfo.Split("%");
		string text = array[0];
		string text2 = array[1];
		if (text != "")
		{
			string[] array2 = text.Split("|");
			foreach (string s in array2)
			{
				lastDayTooExpensiveList.Add(int.Parse(s));
			}
		}
		if (text2 != "")
		{
			string[] array2 = text2.Split("|");
			foreach (string s2 in array2)
			{
				lastDaysNotFoundList.Add(int.Parse(s2));
			}
		}
	}

	protected static void InvokeUserCode_RpcUpdateListsOnClients__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateListsOnClients called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcUpdateListsOnClients__String(reader.ReadString());
		}
	}

	protected void UserCode_CmdmoneySpentOnProducts__Single(float fundsToAdd)
	{
		moneySpentOnProducts += fundsToAdd;
	}

	protected static void InvokeUserCode_CmdmoneySpentOnProducts__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdmoneySpentOnProducts called on client.");
		}
		else
		{
			((GameData)obj).UserCode_CmdmoneySpentOnProducts__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_CmdHostDisconnect()
	{
		RpcHostDisconnect();
	}

	protected static void InvokeUserCode_CmdHostDisconnect(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdHostDisconnect called on client.");
		}
		else
		{
			((GameData)obj).UserCode_CmdHostDisconnect();
		}
	}

	protected void UserCode_RpcHostDisconnect()
	{
		if (!base.isServer)
		{
			GameCanvas.Instance.transform.Find("HostDisconnect").gameObject.SetActive(value: true);
		}
	}

	protected static void InvokeUserCode_RpcHostDisconnect(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcHostDisconnect called on server.");
		}
		else
		{
			((GameData)obj).UserCode_RpcHostDisconnect();
		}
	}

	static GameData()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(GameData), "System.Void GameData::CmdAlterFunds(System.Single)", InvokeUserCode_CmdAlterFunds__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(GameData), "System.Void GameData::CmdAlterFundsWithoutExperience(System.Single)", InvokeUserCode_CmdAlterFundsWithoutExperience__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(GameData), "System.Void GameData::CmdAcquireFranchise(System.Int32)", InvokeUserCode_CmdAcquireFranchise__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(GameData), "System.Void GameData::CmdOpenSupermarket()", InvokeUserCode_CmdOpenSupermarket, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(GameData), "System.Void GameData::CmdEndDayFromButton()", InvokeUserCode_CmdEndDayFromButton, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(GameData), "System.Void GameData::CmdmoneySpentOnProducts(System.Single)", InvokeUserCode_CmdmoneySpentOnProducts__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(GameData), "System.Void GameData::CmdHostDisconnect()", InvokeUserCode_CmdHostDisconnect, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcAlterFunds(System.Single)", InvokeUserCode_RpcAlterFunds__Single);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcAcquireFranchise(System.Int32)", InvokeUserCode_RpcAcquireFranchise__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcOpenSupermarket()", InvokeUserCode_RpcOpenSupermarket);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcNoCheckoutsMessage()", InvokeUserCode_RpcNoCheckoutsMessage);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcEndDay(System.Int32,System.Single,System.Int32,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)", InvokeUserCode_RpcEndDay__Int32__Single__Int32__Single__Int32__Int32__Single__Single__Single__Single__Single__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcStartDay()", InvokeUserCode_RpcStartDay);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcSetWeather(System.Int32,System.String)", InvokeUserCode_RpcSetWeather__Int32__String);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcUpdateInflationOnClient(System.Int32,System.Single)", InvokeUserCode_RpcUpdateInflationOnClient__Int32__Single);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcUpdateListsOnClients(System.String)", InvokeUserCode_RpcUpdateListsOnClients__String);
		RemoteProcedureCalls.RegisterRpc(typeof(GameData), "System.Void GameData::RpcHostDisconnect()", InvokeUserCode_RpcHostDisconnect);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteFloat(gameFunds);
			writer.WriteInt(gameFranchiseExperience);
			writer.WriteInt(gameFranchisePoints);
			writer.WriteInt(gameDay);
			writer.WriteBool(isSupermarketOpen);
			writer.WriteFloat(timeOfDay);
			writer.WriteBool(removeLightsLimit);
			writer.WriteInt(weatherIndex);
			writer.WriteString(todayTemperatureData);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteFloat(gameFunds);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(gameFranchiseExperience);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteInt(gameFranchisePoints);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteInt(gameDay);
		}
		if ((syncVarDirtyBits & 0x10L) != 0L)
		{
			writer.WriteBool(isSupermarketOpen);
		}
		if ((syncVarDirtyBits & 0x20L) != 0L)
		{
			writer.WriteFloat(timeOfDay);
		}
		if ((syncVarDirtyBits & 0x40L) != 0L)
		{
			writer.WriteBool(removeLightsLimit);
		}
		if ((syncVarDirtyBits & 0x80L) != 0L)
		{
			writer.WriteInt(weatherIndex);
		}
		if ((syncVarDirtyBits & 0x100L) != 0L)
		{
			writer.WriteString(todayTemperatureData);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref gameFunds, _Mirror_SyncVarHookDelegate_gameFunds, reader.ReadFloat());
			GeneratedSyncVarDeserialize(ref gameFranchiseExperience, _Mirror_SyncVarHookDelegate_gameFranchiseExperience, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref gameFranchisePoints, _Mirror_SyncVarHookDelegate_gameFranchisePoints, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref gameDay, _Mirror_SyncVarHookDelegate_gameDay, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref isSupermarketOpen, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref timeOfDay, null, reader.ReadFloat());
			GeneratedSyncVarDeserialize(ref removeLightsLimit, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref weatherIndex, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref todayTemperatureData, null, reader.ReadString());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref gameFunds, _Mirror_SyncVarHookDelegate_gameFunds, reader.ReadFloat());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref gameFranchiseExperience, _Mirror_SyncVarHookDelegate_gameFranchiseExperience, reader.ReadInt());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref gameFranchisePoints, _Mirror_SyncVarHookDelegate_gameFranchisePoints, reader.ReadInt());
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref gameDay, _Mirror_SyncVarHookDelegate_gameDay, reader.ReadInt());
		}
		if ((num & 0x10L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref isSupermarketOpen, null, reader.ReadBool());
		}
		if ((num & 0x20L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref timeOfDay, null, reader.ReadFloat());
		}
		if ((num & 0x40L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref removeLightsLimit, null, reader.ReadBool());
		}
		if ((num & 0x80L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref weatherIndex, null, reader.ReadInt());
		}
		if ((num & 0x100L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref todayTemperatureData, null, reader.ReadString());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// GetPlayerLogs
using System.IO;
using System.Text;
using UnityEngine;

public class GetPlayerLogs : MonoBehaviour
{
	public GameObject copiedOBJ;

	public GameObject buttonContainerOBJ;

	public void RetrievePlayerLog(bool copyPrimaryLogs)
	{
		StringBuilder stringBuilder = new StringBuilder();
		string[] array = new string[1] { "Failed to retrieve primary logs." };
		string text = Application.persistentDataPath + "/Player-prev.log";
		string text2 = Application.persistentDataPath + "/Player.log";
		if (!ES3.FileExists(text) && !ES3.FileExists(text2))
		{
			return;
		}
		if (copyPrimaryLogs && ES3.FileExists(text))
		{
			array = File.ReadAllLines(text);
			copiedOBJ.SetActive(value: true);
		}
		if (!copyPrimaryLogs && ES3.FileExists(text2))
		{
			array = File.ReadAllLines(text2);
			copiedOBJ.SetActive(value: true);
		}
		if (array.Length != 0)
		{
			for (int i = 0; i < array.Length && !array[i].Contains("Memory Statistics:"); i++)
			{
				stringBuilder.Append(array[i]);
				stringBuilder.Append("\n");
			}
		}
		GUIUtility.systemCopyBuffer = stringBuilder.ToString();
		buttonContainerOBJ.SetActive(value: false);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// GetRewiredKeyName
using Rewired;
using UnityEngine;

public class GetRewiredKeyName : MonoBehaviour
{
	private Player player;

	private bool skipDisabledMaps = true;

	public string GetButtonName(string ActionLinked)
	{
		if (player == null)
		{
			player = ReInput.players.GetPlayer(0);
		}
		return player.controllers.maps.GetFirstButtonMapWithAction(ActionLinked, skipDisabledMaps).elementIdentifierName.ToString();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// HalloweenGhost
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class HalloweenGhost : NetworkBehaviour
{
	[SyncVar]
	public Color ghostColor;

	[Space(10f)]
	public float speed = 3f;

	public int hits;

	[Space(10f)]
	public int state;

	public PlayMakerFSM lookAtFSM;

	public GameObject stolenProductPrefab;

	public AudioClip[] ghostsLaugh;

	private int currentContainerIndex = -1;

	private int productsToDrop;

	private bool beingHit;

	private bool rotationEffect;

	private GameObject shelvesOBJ;

	private FsmVector3 fsmVectorVariable;

	private List<int> containersIndexes = new List<int>();

	private List<int> productsIDsInContainer = new List<int>();

	public Color NetworkghostColor
	{
		get
		{
			return ghostColor;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref ghostColor, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		base.OnStartClient();
		SetColor();
	}

	public override void OnStartServer()
	{
		base.OnStartServer();
		shelvesOBJ = NPC_Manager.Instance.shelvesOBJ;
		fsmVectorVariable = lookAtFSM.FsmVariables.GetFsmVector3("Target");
	}

	private void Update()
	{
		if (!base.isServer)
		{
			return;
		}
		if (GameData.Instance.timeOfDay < 8.05f)
		{
			StopAllCoroutines();
			NetworkServer.Destroy(base.gameObject);
		}
		if (state == -1)
		{
			return;
		}
		switch (state)
		{
		case 0:
			currentContainerIndex = GetContainerWithProducts();
			if (currentContainerIndex > -1)
			{
				productsToDrop = Random.Range(2, 5);
				Vector3 position = shelvesOBJ.transform.GetChild(currentContainerIndex).transform.Find("Standspot").transform.position;
				fsmVectorVariable.Value = position;
				StartCoroutine(MoveTowardsTarget(position, 1));
			}
			else
			{
				StartCoroutine(WaitState(1.5f, 0));
			}
			break;
		case 1:
		{
			int num = ContainerStillHasProducts(currentContainerIndex);
			if (num > -1)
			{
				if (productsToDrop <= 0)
				{
					Vector3 vector = base.transform.position + new Vector3(Random.Range(-20f, 20f), 0f, Random.Range(-20f, 20f));
					StartCoroutine(MoveTowardsTarget(vector, 0));
					fsmVectorVariable.Value = vector;
					break;
				}
				productsToDrop--;
				shelvesOBJ.transform.GetChild(currentContainerIndex).GetComponent<Data_Container>().NPCGetsItemFromRow(num);
				GameObject obj = Object.Instantiate(stolenProductPrefab);
				obj.transform.position = base.transform.position + new Vector3(Random.Range(-0.25f, 0.25f), 0f, Random.Range(-0.25f, 0.25f));
				obj.GetComponent<StolenProductSpawn>().NetworkproductID = num;
				Data_Product component = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>();
				int productTier = component.productTier;
				float num2 = component.basePricePerUnit * ProductListing.Instance.tierInflation[productTier];
				obj.GetComponent<StolenProductSpawn>().NetworkproductCarryingPrice = num2 * 1.5f;
				NetworkServer.Spawn(obj);
				StartCoroutine(WaitState(1f, 1));
			}
			else
			{
				StartCoroutine(WaitState(1.5f, 0));
			}
			break;
		}
		default:
			Debug.Log("Ghost case error");
			break;
		case 2:
			break;
		}
	}

	private int GetContainerWithProducts()
	{
		if (shelvesOBJ.transform.childCount == 0)
		{
			return -1;
		}
		containersIndexes.Clear();
		for (int i = 0; i < shelvesOBJ.transform.childCount; i++)
		{
			if (containersIndexes.Count >= 35)
			{
				break;
			}
			int[] productInfoArray = shelvesOBJ.transform.GetChild(i).GetComponent<Data_Container>().productInfoArray;
			int num = productInfoArray.Length / 2;
			for (int j = 0; j < num; j++)
			{
				if (productInfoArray[j * 2] >= 0 && productInfoArray[j * 2 + 1] > 0)
				{
					containersIndexes.Add(i);
				}
			}
		}
		if (containersIndexes.Count > 0)
		{
			int index = Random.Range(0, containersIndexes.Count - 1);
			return containersIndexes[index];
		}
		return -1;
	}

	private int ContainerStillHasProducts(int containerIndex)
	{
		if (containerIndex >= shelvesOBJ.transform.childCount)
		{
			return -1;
		}
		productsIDsInContainer.Clear();
		int[] productInfoArray = shelvesOBJ.transform.GetChild(containerIndex).GetComponent<Data_Container>().productInfoArray;
		int num = productInfoArray.Length / 2;
		for (int i = 0; i < num; i++)
		{
			int num2 = productInfoArray[i * 2];
			if (num2 >= 0 && productInfoArray[i * 2 + 1] > 0)
			{
				productsIDsInContainer.Add(num2);
			}
		}
		if (productsIDsInContainer.Count > 0)
		{
			int index = Random.Range(0, productsIDsInContainer.Count - 1);
			return productsIDsInContainer[index];
		}
		return -1;
	}

	private IEnumerator MoveTowardsTarget(Vector3 destination, int targetState)
	{
		state = -1;
		float speedStep = speed * Time.deltaTime;
		while (Vector3.Distance(base.transform.position, destination) > 0.05f)
		{
			if (!beingHit)
			{
				base.transform.position = Vector3.MoveTowards(base.transform.position, destination, speedStep);
			}
			yield return null;
		}
		yield return null;
		state = targetState;
	}

	private IEnumerator WaitState(float waitTime, int targetState)
	{
		state = -1;
		yield return new WaitForSeconds(waitTime);
		state = targetState;
	}

	[Command(requiresAuthority = false)]
	public void CmdHitFromPlayer(Vector3 direction)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(direction);
		SendCommandInternal("System.Void HalloweenGhost::CmdHitFromPlayer(UnityEngine.Vector3)", 1303164378, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void HitsCheck()
	{
		hits--;
		if (hits <= 0)
		{
			state = 2;
			GameObject obj = Object.Instantiate(stolenProductPrefab);
			obj.transform.position = base.transform.position + new Vector3(Random.Range(-0.25f, 0.25f), 0f, Random.Range(-0.25f, 0.25f));
			obj.GetComponent<StolenProductSpawn>().NetworkproductID = 212;
			obj.GetComponent<StolenProductSpawn>().NetworkproductCarryingPrice = 100f + (float)(GameData.Instance.gameDay * 5);
			NetworkServer.Spawn(obj);
			speed = 0f;
			StartCoroutine(TimedDestroy());
			RpcDestroyPoof();
		}
	}

	private IEnumerator TimedDestroy()
	{
		yield return new WaitForSeconds(2f);
		StopAllCoroutines();
		NetworkServer.Destroy(base.gameObject);
	}

	[ClientRpc]
	private void RpcDestroyPoof()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void HalloweenGhost::RpcDestroyPoof()", 1946251910, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator ScaleDown()
	{
		float elapsedTime = 0f;
		float waitTime = 1f;
		while (elapsedTime < waitTime)
		{
			float t = Mathf.Lerp(0f, 1f, elapsedTime / waitTime);
			float num = Mathf.Lerp(1f, 0f, t);
			base.transform.localScale = new Vector3(num, num, num);
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		yield return null;
	}

	private IEnumerator HitDisplacement(Vector3 direction)
	{
		beingHit = true;
		float elapsedTime = 0f;
		float displacementTime = 1.5f;
		while (elapsedTime < displacementTime)
		{
			base.transform.Translate(direction.normalized * Time.deltaTime * speed);
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		beingHit = false;
	}

	[ClientRpc]
	private void RpcHitFromPlayer()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void HalloweenGhost::RpcHitFromPlayer()", -567655476, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator HitRotationEffect()
	{
		rotationEffect = true;
		Transform pivotTransform = base.transform.Find("Pivot");
		float elapsedTime = 0f;
		float displacementTime = 1.5f;
		while (elapsedTime < displacementTime)
		{
			pivotTransform.Rotate(-15f, 0f, 0f, Space.Self);
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		pivotTransform.localRotation = Quaternion.identity;
		yield return null;
		rotationEffect = false;
	}

	private void SetColor()
	{
		base.transform.Find("Pivot/Ghost").GetComponent<SkinnedMeshRenderer>().material.color = ghostColor;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdHitFromPlayer__Vector3(Vector3 direction)
	{
		direction = new Vector3(direction.x, 0f, direction.z);
		if (!beingHit)
		{
			StartCoroutine(HitDisplacement(direction));
		}
		RpcHitFromPlayer();
		HitsCheck();
	}

	protected static void InvokeUserCode_CmdHitFromPlayer__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdHitFromPlayer called on client.");
		}
		else
		{
			((HalloweenGhost)obj).UserCode_CmdHitFromPlayer__Vector3(reader.ReadVector3());
		}
	}

	protected void UserCode_RpcDestroyPoof()
	{
		base.transform.Find("GhostPoof").gameObject.SetActive(value: true);
		AudioSource component = base.transform.Find("LaughSound").GetComponent<AudioSource>();
		component.clip = ghostsLaugh[Random.Range(0, ghostsLaugh.Length)];
		component.Play();
		StartCoroutine(ScaleDown());
	}

	protected static void InvokeUserCode_RpcDestroyPoof(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcDestroyPoof called on server.");
		}
		else
		{
			((HalloweenGhost)obj).UserCode_RpcDestroyPoof();
		}
	}

	protected void UserCode_RpcHitFromPlayer()
	{
		base.transform.Find("HitSound").GetComponent<AudioSource>().Play();
		if (!rotationEffect)
		{
			StartCoroutine(HitRotationEffect());
		}
	}

	protected static void InvokeUserCode_RpcHitFromPlayer(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcHitFromPlayer called on server.");
		}
		else
		{
			((HalloweenGhost)obj).UserCode_RpcHitFromPlayer();
		}
	}

	static HalloweenGhost()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(HalloweenGhost), "System.Void HalloweenGhost::CmdHitFromPlayer(UnityEngine.Vector3)", InvokeUserCode_CmdHitFromPlayer__Vector3, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(HalloweenGhost), "System.Void HalloweenGhost::RpcDestroyPoof()", InvokeUserCode_RpcDestroyPoof);
		RemoteProcedureCalls.RegisterRpc(typeof(HalloweenGhost), "System.Void HalloweenGhost::RpcHitFromPlayer()", InvokeUserCode_RpcHitFromPlayer);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteColor(ghostColor);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteColor(ghostColor);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref ghostColor, null, reader.ReadColor());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref ghostColor, null, reader.ReadColor());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// HashTableSortKeysfromValues
using UnityEngine;

public class HashTableSortKeysfromValues : MonoBehaviour
{
	private void Start()
	{
	}

	private void Update()
	{
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// HatInfo
using UnityEngine;

public class HatInfo : MonoBehaviour
{
	public Vector3 offset;

	public Vector3 rotation;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ImageBoard
using UnityEngine;
using UnityEngine.UI;

public class ImageBoard : MonoBehaviour
{
	private void Start()
	{
		Image[] componentsInChildren = GetComponentsInChildren<Image>();
		for (int i = 0; i < componentsInChildren.Length; i++)
		{
			componentsInChildren[i].alphaHitTestMinimumThreshold = 0.1f;
		}
	}

	private void Update()
	{
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// InteractableContainer
using StarterAssets;
using UnityEngine;

public class InteractableContainer : MonoBehaviour
{
	public bool isStorageShelf;

	public void ContainerAddItem()
	{
		if (!FirstPersonController.Instance)
		{
			return;
		}
		if (isStorageShelf)
		{
			StorageAddBox();
			return;
		}
		int extraParameter = FirstPersonController.Instance.GetComponent<PlayerNetwork>().extraParameter1;
		if (extraParameter > -1)
		{
			if (FirstPersonController.Instance.GetComponent<PlayerNetwork>().extraParameter2 > 0)
			{
				base.transform.parent.transform.parent.GetComponent<Data_Container>().AddItemToRow(base.transform.GetSiblingIndex(), extraParameter);
			}
			else
			{
				GameCanvas.Instance.CreateCanvasNotification("message8");
			}
		}
	}

	public void ContainerRemoveItem()
	{
		if (isStorageShelf)
		{
			ClearStorageBox();
		}
		else
		{
			base.transform.parent.transform.parent.GetComponent<Data_Container>().RemoveItemFromRow(base.transform.GetSiblingIndex());
		}
	}

	public void StorageAddBox()
	{
		base.transform.parent.transform.parent.GetComponent<Data_Container>().GetStorageBox(base.transform.GetSiblingIndex());
	}

	public void ClearStorageBox()
	{
		base.transform.parent.transform.parent.GetComponent<Data_Container>().ClearStorageBox(base.transform.GetSiblingIndex());
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// InteractableData
using UnityEngine;

public class InteractableData : MonoBehaviour
{
	public int franchisePointsCost = 1;

	public int thisSkillIndex;

	public int[] previousSkillRequirements;

	[Space(10f)]
	public bool hasInteractableData;

	public string mainTitleString;

	public string[] unlockStrings;

	public string[] requireStrings;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// InvoicesStatistics
using TMPro;
using UnityEngine;

public class InvoicesStatistics : MonoBehaviour
{
	public TextMeshProUGUI invoiceTypeField;

	public TextMeshProUGUI dateAddedField;

	public TextMeshProUGUI dueDateField;

	public TextMeshProUGUI amountDueField;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// InvoiceTemplateReferences
using TMPro;
using UnityEngine;

public class InvoiceTemplateReferences : MonoBehaviour
{
	public TextMeshProUGUI supermarketNameField;

	public TextMeshProUGUI dueAmountField;

	public TextMeshProUGUI issueDateField;

	public TextMeshProUGUI dueDateField;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// LobbiesListManager
using System.Collections;
using System.Collections.Generic;
using Steamworks;
using UnityEngine;

public class LobbiesListManager : MonoBehaviour
{
	public GameObject lobbiesMenu;

	public GameObject lobbyDataItemPrefab;

	public GameObject lobbyListContent;

	protected Callback<LobbyMatchList_t> LobbyList;

	protected Callback<LobbyDataUpdate_t> LobbyDataUpdated;

	public List<CSteamID> lobbyIDs = new List<CSteamID>();

	public List<GameObject> listOfLobbies = new List<GameObject>();

	private bool onCooldown;

	private void Start()
	{
		onCooldown = false;
		LobbyList = Callback<LobbyMatchList_t>.Create(OnGetLobbyList);
		LobbyDataUpdated = Callback<LobbyDataUpdate_t>.Create(OnGetLobbyData);
	}

	public void GetListOfLobbies()
	{
		lobbiesMenu.SetActive(value: true);
		GetLobbiesList();
	}

	public void DisplayLobbies(List<CSteamID> lobbyIDs, LobbyDataUpdate_t result)
	{
		if (!this)
		{
			return;
		}
		for (int i = 0; i < lobbyIDs.Count; i++)
		{
			if (lobbyListContent.transform.childCount >= 36)
			{
				break;
			}
			if (lobbyIDs[i].m_SteamID == result.m_ulSteamIDLobby && (bool)lobbyListContent)
			{
				string lobbyData = SteamMatchmaking.GetLobbyData((CSteamID)lobbyIDs[i].m_SteamID, "name");
				if (lobbyData.Contains("'s Supermarket") && !lobbyData.Contains("</color>"))
				{
					GameObject gameObject = Object.Instantiate(lobbyDataItemPrefab);
					gameObject.GetComponent<LobbyDataEntry>().lobbyID = (CSteamID)lobbyIDs[i].m_SteamID;
					gameObject.GetComponent<LobbyDataEntry>().lobbyName = lobbyData;
					gameObject.GetComponent<LobbyDataEntry>().SetLobbyData();
					gameObject.transform.SetParent(lobbyListContent.transform);
					gameObject.transform.localScale = Vector3.one;
					listOfLobbies.Add(gameObject);
				}
			}
		}
	}

	public void DestroyLobbies()
	{
		foreach (GameObject listOfLobby in listOfLobbies)
		{
			Object.Destroy(listOfLobby);
		}
		listOfLobbies.Clear();
	}

	public void GetLobbiesList()
	{
		if (lobbyIDs.Count > 0)
		{
			lobbyIDs.Clear();
		}
		SteamMatchmaking.AddRequestLobbyListResultCountFilter(36);
		SteamMatchmaking.RequestLobbyList();
	}

	private void OnGetLobbyList(LobbyMatchList_t result)
	{
		if (listOfLobbies.Count > 0)
		{
			DestroyLobbies();
		}
		for (int i = 0; i < result.m_nLobbiesMatching; i++)
		{
			CSteamID lobbyByIndex = SteamMatchmaking.GetLobbyByIndex(i);
			lobbyIDs.Add(lobbyByIndex);
			SteamMatchmaking.RequestLobbyData(lobbyByIndex);
		}
	}

	private void OnGetLobbyData(LobbyDataUpdate_t result)
	{
		DisplayLobbies(lobbyIDs, result);
	}

	private IEnumerator OnCooldown()
	{
		yield return new WaitForSeconds(1f);
		onCooldown = false;
	}

	private void OnDisable()
	{
		StopAllCoroutines();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// LobbyController
using System.Collections.Generic;
using System.Linq;
using Mirror;
using TMPro;
using UnityEngine;

public class LobbyController : MonoBehaviour
{
	public static LobbyController Instance;

	public TextMeshProUGUI LobbyNameText;

	public TextMeshProUGUI LobbyIDText;

	public GameObject PlayerListViewContent;

	public GameObject PlayerListItemPrefab;

	public GameObject LocalPlayerObject;

	public ulong CurrentLobbyID;

	public bool PlayerItemCreated;

	private List<PlayerListItem> PlayerListItems = new List<PlayerListItem>();

	public PlayerObjectController LocalplayerController;

	private CustomNetworkManager manager;

	public GameObject ChatContainerOBJ;

	private CustomNetworkManager Manager
	{
		get
		{
			if (manager != null)
			{
				return manager;
			}
			return manager = NetworkManager.singleton as CustomNetworkManager;
		}
	}

	private void Awake()
	{
		if (Instance == null)
		{
			Instance = this;
		}
	}

	public void SendChatMessage(string message)
	{
		if (!string.IsNullOrWhiteSpace(message))
		{
			LocalplayerController.SendChatMsg(message);
		}
	}

	public void UpdateLobbyName()
	{
		CurrentLobbyID = Manager.GetComponent<SteamLobby>().CurrentLobbyID;
	}

	public void UpdatePlayerList()
	{
		if (!PlayerItemCreated)
		{
			CreateHostPlayerItem();
		}
		if (PlayerListItems.Count < Manager.GamePlayers.Count)
		{
			CreateClientPlayerItem();
		}
		if (PlayerListItems.Count > Manager.GamePlayers.Count)
		{
			RemovePlayerItem();
		}
		if (PlayerListItems.Count == Manager.GamePlayers.Count)
		{
			UpdatePlayerItem();
		}
	}

	public void FindLocalPlayer()
	{
		LocalPlayerObject = GameObject.Find("LocalGamePlayer");
		LocalplayerController = LocalPlayerObject.GetComponent<PlayerObjectController>();
	}

	public void CreateHostPlayerItem()
	{
		foreach (PlayerObjectController gamePlayer in Manager.GamePlayers)
		{
			GameObject obj = Object.Instantiate(PlayerListItemPrefab);
			PlayerListItem component = obj.GetComponent<PlayerListItem>();
			component.playerOBJ = gamePlayer.gameObject;
			component.PlayerName = gamePlayer.PlayerName;
			component.ConnectionID = gamePlayer.ConnectionID;
			component.PlayerSteamID = gamePlayer.PlayerSteamID;
			component.SetPlayerValues();
			obj.transform.SetParent(PlayerListViewContent.transform);
			obj.transform.localScale = Vector3.one;
			PlayerListItems.Add(component);
		}
		PlayerItemCreated = true;
	}

	public void CreateClientPlayerItem()
	{
		foreach (PlayerObjectController player in Manager.GamePlayers)
		{
			if (!PlayerListItems.Any((PlayerListItem b) => b.ConnectionID == player.ConnectionID))
			{
				GameObject obj = Object.Instantiate(PlayerListItemPrefab);
				PlayerListItem component = obj.GetComponent<PlayerListItem>();
				component.playerOBJ = player.gameObject;
				component.PlayerName = player.PlayerName;
				component.ConnectionID = player.ConnectionID;
				component.PlayerSteamID = player.PlayerSteamID;
				component.SetPlayerValues();
				obj.transform.SetParent(PlayerListViewContent.transform);
				obj.transform.localScale = Vector3.one;
				PlayerListItems.Add(component);
			}
		}
	}

	public void UpdatePlayerItem()
	{
		foreach (PlayerObjectController gamePlayer in Manager.GamePlayers)
		{
			foreach (PlayerListItem playerListItem in PlayerListItems)
			{
				if (playerListItem.ConnectionID == gamePlayer.ConnectionID)
				{
					playerListItem.PlayerName = gamePlayer.PlayerName;
					playerListItem.SetPlayerValues();
				}
			}
		}
	}

	public void RemovePlayerItem()
	{
		List<PlayerListItem> list = new List<PlayerListItem>();
		foreach (PlayerListItem playerlistItem in PlayerListItems)
		{
			if (!Manager.GamePlayers.Any((PlayerObjectController b) => b.ConnectionID == playerlistItem.ConnectionID))
			{
				list.Add(playerlistItem);
			}
		}
		if (list.Count <= 0)
		{
			return;
		}
		foreach (PlayerListItem item in list)
		{
			GameObject obj = item.gameObject;
			PlayerListItems.Remove(item);
			Object.Destroy(obj);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// LobbyDataEntry
using Steamworks;
using TMPro;
using UnityEngine;

public class LobbyDataEntry : MonoBehaviour
{
	public CSteamID lobbyID;

	public string lobbyName;

	public TextMeshProUGUI lobbyNameText;

	public void SetLobbyData()
	{
		if (lobbyName == "")
		{
			lobbyNameText.text = "Empty";
		}
		else
		{
			lobbyNameText.text = lobbyName;
		}
	}

	public string GetLobbyIdStr()
	{
		return lobbyID.ToString();
	}

	public void JoinLobby()
	{
		SteamLobby.Instance.JoinLobby(lobbyID);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// LobbyPasswordConvertion
using System;
using UnityEngine;

public class LobbyPasswordConvertion : MonoBehaviour
{
	public string ConvertIntToBase64()
	{
		return Convert.ToBase64String(BitConverter.GetBytes(109775243165126101L));
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// LocalizationManager
using System.Collections.Generic;
using UnityEngine;

public class LocalizationManager : MonoBehaviour
{
	public static LocalizationManager instance;

	public Dictionary<string, string> LocalizationDictionary = new Dictionary<string, string>();

	private void Awake()
	{
		if (instance == null)
		{
			instance = this;
		}
	}

	public void ClearDictionary()
	{
		LocalizationDictionary.Clear();
	}

	public void AddDictionaryEntry(string key, string value)
	{
		LocalizationDictionary.Add(key, value);
	}

	public string GetLocalizationString(string key)
	{
		string value = "";
		if (LocalizationDictionary.TryGetValue(key, out value))
		{
			return value;
		}
		return "LocError";
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Main_Data
using UnityEngine;

public class Main_Data : MonoBehaviour
{
	public Material[] floorMaterialArray;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ManagerBlackboard
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class ManagerBlackboard : NetworkBehaviour
{
	public GameObject UIShortcutPrefab;

	public GameObject UIShopItemPrefab;

	public GameObject UIShoppingListPrefab;

	public GameObject shortcutsParent;

	public GameObject shopItemsParent;

	public GameObject shoppingListParent;

	[Space(10f)]
	public GameObject boxPrefab;

	public GameObject merchandiseSpawnpoint;

	public GameObject emptyBoxSpawnpoint;

	public Transform boxParent;

	public LayerMask boxSpawnLayerMask;

	[Space(10f)]
	public TextMeshProUGUI totalChargeOBJ;

	public float shoppingTotalCharge;

	private bool[] unlockedFranchises;

	private string[] tiers;

	private PlayMakerFSM fsm;

	private bool isSpawning;

	public GameObject[] dummyArrayExistences;

	public List<int> idsToSpawn = new List<int>();

	public GameObject tabsOBJ;

	public Sprite[] containerTypeSprites;

	public TMP_InputField searchInputFieldOBJ;

	public int currentFilterMode;

	private int oldGroupTier = -1;

	private List<int> groupsList = new List<int>();

	private string oldInputString;

	private int fixedCounter;

	private CustomNetworkManager manager;

	private List<GameObject> sortList1 = new List<GameObject>();

	private List<int> sortList2 = new List<int>();

	private bool sortBackToZero;

	private void FixedUpdate()
	{
		if (tabsOBJ.activeSelf)
		{
			string text = searchInputFieldOBJ.text;
			if (text != "" && text != oldInputString)
			{
				if (text.Length >= 2)
				{
					UpdateVisibleProductsOnSearch(text);
				}
				oldInputString = text;
			}
		}
		if (!tabsOBJ.activeSelf || shopItemsParent.transform.childCount <= 0)
		{
			return;
		}
		if (fixedCounter == 0)
		{
			if (sortList1.Count > 0)
			{
				sortList1.Clear();
				sortList2.Clear();
			}
			foreach (Transform item in shopItemsParent.transform)
			{
				int productID = item.GetComponent<Data_Product>().productID;
				int[] productsExistences = GetProductsExistences(productID);
				item.transform.Find("InShelvesBCK/ShelvesQuantity").GetComponent<TextMeshProUGUI>().text = productsExistences[0].ToString();
				item.transform.Find("InStorageBCK/StorageQuantity").GetComponent<TextMeshProUGUI>().text = productsExistences[1].ToString();
				item.transform.Find("InBoxesBCK/BoxesQuantity").GetComponent<TextMeshProUGUI>().text = productsExistences[2].ToString();
				if (currentFilterMode > 0)
				{
					ProductListing component = GetComponent<ProductListing>();
					switch (currentFilterMode)
					{
					case 1:
					{
						Vector3 size = component.productPrefabs[productID].GetComponent<MeshRenderer>().bounds.size;
						float num = size.x * size.y * size.z * 1000000f;
						sortList1.Add(item.gameObject);
						sortList2.Add((int)num);
						break;
					}
					case 2:
						sortList1.Add(item.gameObject);
						sortList2.Add(productsExistences[0] + productsExistences[1] + productsExistences[2]);
						break;
					case 3:
						sortList1.Add(item.gameObject);
						sortList2.Add(productsExistences[1]);
						break;
					case 4:
						sortList1.Add(item.gameObject);
						sortList2.Add(productsExistences[0]);
						break;
					}
				}
			}
			SortModes();
		}
		fixedCounter++;
		if (fixedCounter >= 15)
		{
			fixedCounter = 0;
		}
	}

	private void SortModes()
	{
		if (currentFilterMode > 0)
		{
			int index = 0;
			sortBackToZero = true;
			sortList1 = sortList1.OrderBy((GameObject d) => sortList2[index++]).ToList();
			{
				foreach (GameObject item in sortList1)
				{
					item.transform.SetAsLastSibling();
				}
				return;
			}
		}
		if (sortBackToZero)
		{
			sortBackToZero = false;
			if (oldGroupTier > -1)
			{
				UpdateVisibleProducts(oldGroupTier);
			}
		}
	}

	public void UpdateUnlockedFranchises()
	{
		unlockedFranchises = GetComponent<ProductListing>().unlockedProductTiers;
		tiers = GetComponent<ProductListing>().tiers;
		if (shortcutsParent.transform.childCount > 0)
		{
			int childCount = shortcutsParent.transform.childCount;
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(shortcutsParent.transform.GetChild(shortcutsParent.transform.childCount - 1 - i).gameObject);
			}
		}
		groupsList.Clear();
		for (int j = 0; j < unlockedFranchises.Length; j++)
		{
			if (!unlockedFranchises[j])
			{
				continue;
			}
			int num = ProductListing.Instance.productGroups[j];
			bool flag = false;
			foreach (int groups in groupsList)
			{
				if (groups == num)
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				GameObject gameObject = Object.Instantiate(UIShortcutPrefab, shortcutsParent.transform);
				fsm = gameObject.GetComponent<PlayMakerFSM>();
				fsm.FsmVariables.GetFsmInt("GroupIndex").Value = num;
				string key = "productGroup" + num;
				string localizationString = LocalizationManager.instance.GetLocalizationString(key);
				gameObject.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = localizationString;
				gameObject.transform.GetChild(1).GetComponent<Image>().color = ProductListing.Instance.groupsColors[num];
				groupsList.Add(num);
			}
		}
	}

	private void UpdateVisibleProductsOnSearch(string stringContained)
	{
		SetShortcutHighlight(-1);
		ClearItems();
		ProductListing component = GetComponent<ProductListing>();
		stringContained = stringContained.ToLower();
		string localizationString = LocalizationManager.instance.GetLocalizationString("productRelated0");
		foreach (int availableProduct in component.availableProducts)
		{
			if (LocalizationManager.instance.GetLocalizationString("product" + availableProduct).ToLower().Contains(stringContained))
			{
				float tinflactionFactor = component.tierInflation[component.productPrefabs[availableProduct].GetComponent<Data_Product>().productTier];
				CreateUIShopItem(availableProduct, component, tinflactionFactor, localizationString);
			}
		}
	}

	public void UpdateVisibleProducts(int groupTier)
	{
		SetShortcutHighlight(groupTier);
		ClearItems();
		oldGroupTier = groupTier;
		ProductListing component = GetComponent<ProductListing>();
		for (int i = 0; i < unlockedFranchises.Length; i++)
		{
			if (unlockedFranchises[i] && ProductListing.Instance.productGroups[i] == groupTier)
			{
				string[] array = tiers[i].Split(char.Parse("-"));
				float tinflactionFactor = component.tierInflation[i];
				string localizationString = LocalizationManager.instance.GetLocalizationString("productRelated0");
				int num = int.Parse(array[0]);
				int num2 = int.Parse(array[1]);
				for (int j = num; j < num2 + 1; j++)
				{
					CreateUIShopItem(j, component, tinflactionFactor, localizationString);
				}
			}
		}
	}

	public void ReupdateVisibleProducts()
	{
		if (oldGroupTier > -1)
		{
			UpdateVisibleProducts(oldGroupTier);
		}
	}

	private void SetShortcutHighlight(int currentIndex)
	{
		foreach (Transform item in shortcutsParent.transform)
		{
			if (item.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("GroupIndex").Value == currentIndex)
			{
				item.transform.Find("Highlight").gameObject.SetActive(value: true);
			}
			else
			{
				item.transform.Find("Highlight").gameObject.SetActive(value: false);
			}
		}
	}

	private void ClearItems()
	{
		if (shopItemsParent.transform.childCount > 0)
		{
			int childCount = shopItemsParent.transform.childCount;
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(shopItemsParent.transform.GetChild(shopItemsParent.transform.childCount - 1 - i).gameObject);
			}
		}
	}

	private void CreateUIShopItem(int productIndex, ProductListing pListingReference, float tinflactionFactor, string pricePerUnitLocalized)
	{
		GameObject gameObject = Object.Instantiate(UIShopItemPrefab, shopItemsParent.transform);
		gameObject.transform.Find("ProductIcon").GetComponent<Image>().sprite = pListingReference.productSprites[productIndex];
		string key = "product" + productIndex;
		string localizationString = LocalizationManager.instance.GetLocalizationString(key);
		gameObject.transform.Find("ProductName").GetComponent<TextMeshProUGUI>().text = localizationString;
		GameObject obj = pListingReference.productPrefabs[productIndex];
		int maxItemsPerBox = obj.GetComponent<Data_Product>().maxItemsPerBox;
		string productBrand = obj.GetComponent<Data_Product>().productBrand;
		float basePricePerUnit = obj.GetComponent<Data_Product>().basePricePerUnit;
		basePricePerUnit *= tinflactionFactor;
		basePricePerUnit = Mathf.Round(basePricePerUnit * 100f) / 100f;
		float num = basePricePerUnit * (float)maxItemsPerBox;
		num = Mathf.Round(num * 100f) / 100f;
		gameObject.transform.Find("ProductIcon/BoxQuantity").GetComponent<TextMeshProUGUI>().text = "x" + maxItemsPerBox;
		gameObject.transform.Find("BrandName").GetComponent<TextMeshProUGUI>().text = productBrand;
		gameObject.transform.Find("PricePerUnit").GetComponent<TextMeshProUGUI>().text = pricePerUnitLocalized + " $" + basePricePerUnit;
		gameObject.transform.Find("BoxPrice").GetComponent<TextMeshProUGUI>().text = " $" + num;
		fsm = gameObject.transform.Find("AddButton").GetComponent<PlayMakerFSM>();
		fsm.FsmVariables.GetFsmInt("ProductID").Value = productIndex;
		fsm.FsmVariables.GetFsmFloat("BoxPrice").Value = num;
		gameObject.GetComponent<Data_Product>().productID = productIndex;
		int productContainerClass = obj.GetComponent<Data_Product>().productContainerClass;
		if (productContainerClass < containerTypeSprites.Length)
		{
			Sprite sprite = containerTypeSprites[productContainerClass];
			gameObject.transform.Find("ContainerTypeBCK/ContainerImage").GetComponent<Image>().sprite = sprite;
			gameObject.transform.Find("ContainerTypeBCK").gameObject.SetActive(value: true);
		}
	}

	private int[] GetProductsExistences(int productIDToCompare)
	{
		int[] array = new int[3];
		GameObject employeeParentOBJ = NPC_Manager.Instance.employeeParentOBJ;
		int childCount = employeeParentOBJ.transform.childCount;
		for (int i = 0; i < dummyArrayExistences.Length; i++)
		{
			GameObject gameObject = dummyArrayExistences[i];
			if (gameObject.transform.childCount == 0 && i != 2)
			{
				continue;
			}
			if (i != 2)
			{
				foreach (Transform item in gameObject.transform)
				{
					int[] productInfoArray = item.GetComponent<Data_Container>().productInfoArray;
					int num = productInfoArray.Length / 2;
					for (int j = 0; j < num; j++)
					{
						int num2 = productInfoArray[j * 2];
						if (productIDToCompare == num2)
						{
							int num3 = productInfoArray[j * 2 + 1];
							if (num3 > 0)
							{
								array[i] += num3;
							}
						}
					}
				}
				continue;
			}
			if (gameObject.transform.childCount > 0)
			{
				foreach (Transform item2 in gameObject.transform)
				{
					BoxData component = item2.GetComponent<BoxData>();
					int productID = component.productID;
					if (productIDToCompare == productID)
					{
						int numberOfProducts = component.numberOfProducts;
						if (numberOfProducts > 0)
						{
							array[i] += numberOfProducts;
						}
					}
				}
			}
			if (childCount > 0)
			{
				for (int k = 0; k < childCount; k++)
				{
					int boxProductID = employeeParentOBJ.transform.GetChild(k).transform.GetComponent<NPC_Info>().boxProductID;
					if (productIDToCompare == boxProductID)
					{
						int boxNumberOfProducts = employeeParentOBJ.transform.GetChild(k).transform.GetComponent<NPC_Info>().boxNumberOfProducts;
						if (boxNumberOfProducts > 0)
						{
							array[i] += boxNumberOfProducts;
						}
					}
				}
			}
			if ((bool)manager)
			{
				foreach (PlayerObjectController gamePlayer in manager.GamePlayers)
				{
					int syncedProductID = gamePlayer.GetComponent<PlayerSyncCharacter>().syncedProductID;
					if (productIDToCompare == syncedProductID)
					{
						int syncedNumberOfProducts = gamePlayer.GetComponent<PlayerSyncCharacter>().syncedNumberOfProducts;
						if (syncedNumberOfProducts > 0)
						{
							array[i] += syncedNumberOfProducts;
						}
					}
				}
			}
			else
			{
				manager = NetworkManager.singleton as CustomNetworkManager;
			}
		}
		return array;
	}

	public void AddShoppingListProduct(int productID, float boxPrice)
	{
		ProductListing component = GetComponent<ProductListing>();
		GameObject gameObject = Object.Instantiate(UIShoppingListPrefab, shoppingListParent.transform);
		string key = "product" + productID;
		string localizationString = LocalizationManager.instance.GetLocalizationString(key);
		gameObject.transform.Find("ProductName").GetComponent<TextMeshProUGUI>().text = localizationString;
		GameObject obj = component.productPrefabs[productID];
		string productBrand = obj.GetComponent<Data_Product>().productBrand;
		gameObject.transform.Find("BrandName").GetComponent<TextMeshProUGUI>().text = productBrand;
		int maxItemsPerBox = obj.GetComponent<Data_Product>().maxItemsPerBox;
		gameObject.transform.Find("BoxQuantity").GetComponent<TextMeshProUGUI>().text = "x" + maxItemsPerBox;
		gameObject.transform.Find("BoxPrice").GetComponent<TextMeshProUGUI>().text = " $" + boxPrice;
		gameObject.GetComponent<InteractableData>().thisSkillIndex = productID;
		StartCoroutine(CalculateShoppingListTotal());
	}

	public void RemoveShoppingListProduct(int indexToRemove)
	{
		if (shoppingListParent.transform.childCount > 0)
		{
			Object.Destroy(shoppingListParent.transform.GetChild(indexToRemove).gameObject);
		}
		StartCoroutine(CalculateShoppingListTotal());
	}

	public void RemoveAllShoppingList()
	{
		if (shoppingListParent.transform.childCount == 0)
		{
			return;
		}
		foreach (Transform item in shoppingListParent.transform)
		{
			Object.Destroy(item.gameObject);
		}
		StartCoroutine(CalculateShoppingListTotal());
	}

	private IEnumerator CalculateShoppingListTotal()
	{
		yield return new WaitForEndOfFrame();
		shoppingTotalCharge = 0f;
		if (shoppingListParent.transform.childCount > 0)
		{
			foreach (Transform item in shoppingListParent.transform)
			{
				string text = item.transform.Find("BoxPrice").GetComponent<TextMeshProUGUI>().text;
				text = text.Substring(2);
				shoppingTotalCharge += float.Parse(text);
			}
		}
		totalChargeOBJ.text = ProductListing.Instance.ConvertFloatToTextPrice(shoppingTotalCharge);
	}

	public void BuyCargo()
	{
		if (shoppingListParent.transform.childCount == 0 || shoppingTotalCharge == 0f)
		{
			GameCanvas.Instance.CreateCanvasNotification("message5");
			return;
		}
		if (GetComponent<GameData>().gameFunds < shoppingTotalCharge)
		{
			GameCanvas.Instance.CreateCanvasNotification("message6");
			return;
		}
		foreach (Transform item in shoppingListParent.transform)
		{
			int thisSkillIndex = item.GetComponent<InteractableData>().thisSkillIndex;
			CmdAddProductToSpawnList(thisSkillIndex);
		}
		int childCount = shoppingListParent.transform.childCount;
		for (int i = 0; i < childCount; i++)
		{
			Object.Destroy(shoppingListParent.transform.GetChild(shoppingListParent.transform.childCount - 1 - i).gameObject);
		}
		GetComponent<GameData>().CmdAlterFunds(0f - shoppingTotalCharge);
		GetComponent<GameData>().CmdmoneySpentOnProducts(shoppingTotalCharge);
		shoppingTotalCharge = 0f;
		totalChargeOBJ.text = "$0,00";
	}

	[Command(requiresAuthority = false)]
	private void CmdAddProductToSpawnList(int productIDToAdd)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productIDToAdd);
		SendCommandInternal("System.Void ManagerBlackboard::CmdAddProductToSpawnList(System.Int32)", 2005032198, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void SpawnRemainingCargoFromAutosave()
	{
		if (base.isServer && !isSpawning)
		{
			StartCoroutine(ServerCargoSpawner());
		}
	}

	private IEnumerator ServerCargoSpawner()
	{
		isSpawning = true;
		Vector3 halfExtents = new Vector3(0.3f, 0.3f, 0.45f);
		WaitForSeconds waitTime1 = new WaitForSeconds(0.5f);
		WaitForSeconds waitTime2 = new WaitForSeconds(0.2f);
		while (idsToSpawn.Count > 0)
		{
			Vector3 spawnPosition = merchandiseSpawnpoint.transform.position + new Vector3(Random.Range(-2f, 2f), 0f, Random.Range(-2f, 2f));
			if (Physics.BoxCast(spawnPosition + new Vector3(0f, 5f, 0f), halfExtents, -Vector3.up, Quaternion.identity, 7.5f, boxSpawnLayerMask))
			{
				yield return waitTime1;
			}
			yield return waitTime1;
			int num = idsToSpawn[0];
			GameObject gameObject = Object.Instantiate(boxPrefab, spawnPosition, Quaternion.identity);
			gameObject.GetComponent<BoxData>().NetworkproductID = num;
			int maxItemsPerBox = GetComponent<ProductListing>().productPrefabs[num].GetComponent<Data_Product>().maxItemsPerBox;
			gameObject.GetComponent<BoxData>().NetworknumberOfProducts = maxItemsPerBox;
			Sprite sprite = GetComponent<ProductListing>().productSprites[num];
			gameObject.transform.Find("Canvas/Image1").GetComponent<Image>().sprite = sprite;
			gameObject.transform.Find("Canvas/Image2").GetComponent<Image>().sprite = sprite;
			gameObject.transform.SetParent(boxParent);
			NetworkServer.Spawn(gameObject);
			RpcParentBoxOnClient(gameObject);
			idsToSpawn.RemoveAt(0);
		}
		yield return waitTime2;
		isSpawning = false;
	}

	public void SpawnAutosavedBoxes(List<int> productIdList, List<int> productNumberList, List<Vector3> positionList)
	{
		if (productIdList.Count > 0 && productNumberList.Count > 0 && positionList.Count > 0)
		{
			StartCoroutine(ServerAutosaveBoxesSpawn(productIdList, productNumberList, positionList));
		}
	}

	private IEnumerator ServerAutosaveBoxesSpawn(List<int> productIdList, List<int> productNumberList, List<Vector3> positionList)
	{
		WaitForSeconds waitTime1 = new WaitForSeconds(0.05f);
		for (int i = 0; i < productIdList.Count; i++)
		{
			GameObject gameObject = Object.Instantiate(boxPrefab, positionList[i], Quaternion.identity);
			gameObject.GetComponent<BoxData>().NetworkproductID = productIdList[i];
			gameObject.GetComponent<BoxData>().NetworknumberOfProducts = productNumberList[i];
			Sprite sprite = GetComponent<ProductListing>().productSprites[productIdList[i]];
			gameObject.transform.Find("Canvas/Image1").GetComponent<Image>().sprite = sprite;
			gameObject.transform.Find("Canvas/Image2").GetComponent<Image>().sprite = sprite;
			gameObject.transform.SetParent(boxParent);
			NetworkServer.Spawn(gameObject);
			RpcParentBoxOnClient(gameObject);
			yield return waitTime1;
		}
		yield return null;
	}

	public void BuyEmptyBox()
	{
		if (GetComponent<ProductListing>().availableProducts.Count != 0)
		{
			if (GetComponent<GameData>().gameFunds >= 8f)
			{
				GetComponent<GameData>().CmdAlterFunds(-8f);
				CmdSpawnBoxEmpty();
			}
			else
			{
				GameCanvas.Instance.CreateCanvasNotification("message6");
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdSpawnBoxEmpty()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void ManagerBlackboard::CmdSpawnBoxEmpty()", 947669664, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSpawnBoxFromPlayer(Vector3 spawnpoint, int productID, int numberOfProductsInBox, float YRotation)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(spawnpoint);
		writer.WriteInt(productID);
		writer.WriteInt(numberOfProductsInBox);
		writer.WriteFloat(YRotation);
		SendCommandInternal("System.Void ManagerBlackboard::CmdSpawnBoxFromPlayer(UnityEngine.Vector3,System.Int32,System.Int32,System.Single)", -1046098784, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void SpawnBoxFromEmployee(Vector3 spawnpoint, int productID, int numberOfProductsInBox)
	{
		GameObject gameObject = Object.Instantiate(boxPrefab, spawnpoint, Quaternion.identity);
		gameObject.GetComponent<BoxData>().NetworkproductID = productID;
		gameObject.GetComponent<BoxData>().NetworknumberOfProducts = numberOfProductsInBox;
		gameObject.transform.SetParent(boxParent);
		NetworkServer.Spawn(gameObject);
		RpcParentBoxOnClient(gameObject);
	}

	[ClientRpc]
	private void RpcParentBoxOnClient(GameObject boxOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(boxOBJ);
		SendRPCInternal("System.Void ManagerBlackboard::RpcParentBoxOnClient(UnityEngine.GameObject)", -1079222151, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdAddProductToSpawnList__Int32(int productIDToAdd)
	{
		idsToSpawn.Add(productIDToAdd);
		if (base.isServer && !isSpawning)
		{
			StartCoroutine(ServerCargoSpawner());
		}
	}

	protected static void InvokeUserCode_CmdAddProductToSpawnList__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddProductToSpawnList called on client.");
		}
		else
		{
			((ManagerBlackboard)obj).UserCode_CmdAddProductToSpawnList__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdSpawnBoxEmpty()
	{
		ProductListing component = GetComponent<ProductListing>();
		if (component.availableProducts.Count != 0)
		{
			Vector3 vector = new Vector3(Random.Range(-1f, 1f), 0f, Random.Range(-1f, 1f));
			GameObject obj = Object.Instantiate(boxPrefab, emptyBoxSpawnpoint.transform.position + vector, Quaternion.identity);
			obj.GetComponent<BoxData>().NetworkproductID = component.availableProducts[Random.Range(0, component.availableProducts.Count)];
			obj.GetComponent<BoxData>().NetworknumberOfProducts = 0;
			NetworkServer.Spawn(obj);
		}
	}

	protected static void InvokeUserCode_CmdSpawnBoxEmpty(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnBoxEmpty called on client.");
		}
		else
		{
			((ManagerBlackboard)obj).UserCode_CmdSpawnBoxEmpty();
		}
	}

	protected void UserCode_CmdSpawnBoxFromPlayer__Vector3__Int32__Int32__Single(Vector3 spawnpoint, int productID, int numberOfProductsInBox, float YRotation)
	{
		GameObject gameObject = Object.Instantiate(boxPrefab, spawnpoint, Quaternion.Euler(0f, YRotation + 90f, 0f));
		gameObject.GetComponent<BoxData>().NetworkproductID = productID;
		gameObject.GetComponent<BoxData>().NetworknumberOfProducts = numberOfProductsInBox;
		gameObject.transform.SetParent(boxParent);
		NetworkServer.Spawn(gameObject);
		RpcParentBoxOnClient(gameObject);
	}

	protected static void InvokeUserCode_CmdSpawnBoxFromPlayer__Vector3__Int32__Int32__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnBoxFromPlayer called on client.");
		}
		else
		{
			((ManagerBlackboard)obj).UserCode_CmdSpawnBoxFromPlayer__Vector3__Int32__Int32__Single(reader.ReadVector3(), reader.ReadInt(), reader.ReadInt(), reader.ReadFloat());
		}
	}

	protected void UserCode_RpcParentBoxOnClient__GameObject(GameObject boxOBJ)
	{
		if (!base.isServer)
		{
			boxOBJ.transform.SetParent(boxParent);
		}
	}

	protected static void InvokeUserCode_RpcParentBoxOnClient__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcParentBoxOnClient called on server.");
		}
		else
		{
			((ManagerBlackboard)obj).UserCode_RpcParentBoxOnClient__GameObject(reader.ReadGameObject());
		}
	}

	static ManagerBlackboard()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(ManagerBlackboard), "System.Void ManagerBlackboard::CmdAddProductToSpawnList(System.Int32)", InvokeUserCode_CmdAddProductToSpawnList__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(ManagerBlackboard), "System.Void ManagerBlackboard::CmdSpawnBoxEmpty()", InvokeUserCode_CmdSpawnBoxEmpty, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(ManagerBlackboard), "System.Void ManagerBlackboard::CmdSpawnBoxFromPlayer(UnityEngine.Vector3,System.Int32,System.Int32,System.Single)", InvokeUserCode_CmdSpawnBoxFromPlayer__Vector3__Int32__Int32__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(ManagerBlackboard), "System.Void ManagerBlackboard::RpcParentBoxOnClient(UnityEngine.GameObject)", InvokeUserCode_RpcParentBoxOnClient__GameObject);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ManufacturingBase
using Mirror;
using UnityEngine;

public class ManufacturingBase : NetworkBehaviour
{
	public GameObject[] combinableProductPrefabs;

	public string[] combinableRecipe;

	public string[] combinableVariations;

	public Color[] variationColors;

	public bool[] foundRecipes;

	private void Start()
	{
	}

	private void Update()
	{
	}

	private void ServerStartResearch(int productID)
	{
	}

	public override bool Weaved()
	{
		return true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MaskEffect
using UnityEngine;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
public class MaskEffect : MonoBehaviour
{
	public Material mat;

	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
		Graphics.Blit(src, dest, mat);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MasterLobbyData
using Steamworks;
using UnityEngine;
using UnityEngine.SceneManagement;

public class MasterLobbyData : MonoBehaviour
{
	public ulong CurrentLobbyID;

	public string lobbyStr;

	public bool isHost;

	protected Callback<LobbyDataUpdate_t> LobbyDataUpdated;

	public GameObject fsmCallbackOBJ;

	private void Start()
	{
		LobbyDataUpdated = Callback<LobbyDataUpdate_t>.Create(OnGetLobbyData);
	}

	public void CheckIfLobbyExists(string lobbyIDstr)
	{
		lobbyStr = lobbyIDstr;
		SteamMatchmaking.RequestLobbyData((CSteamID)ulong.Parse(lobbyIDstr));
	}

	private void OnGetLobbyData(LobbyDataUpdate_t result)
	{
		if (!(SceneManager.GetActiveScene().name != "A_Intro"))
		{
			GetLobbyResult(result);
		}
	}

	public void GetLobbyResult(LobbyDataUpdate_t result)
	{
		if (!(SceneManager.GetActiveScene().name != "A_Intro"))
		{
			bool value = false;
			if (result.m_bSuccess == 1 && result.m_ulSteamIDLobby.ToString() == lobbyStr && SteamMatchmaking.GetLobbyData((CSteamID)result.m_ulSteamIDLobby, "status") == "true")
			{
				value = true;
			}
			if ((bool)fsmCallbackOBJ)
			{
				PlayMakerFSM component = fsmCallbackOBJ.GetComponent<PlayMakerFSM>();
				component.FsmVariables.GetFsmBool("boolCallback").Value = value;
				component.SendEvent("Send_Data");
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MaxRectsBinPack
using System.Collections.Generic;
using UnityEngine;

public class MaxRectsBinPack
{
	public enum FreeRectChoiceHeuristic
	{
		RectBestShortSideFit,
		RectBestLongSideFit,
		RectBestAreaFit,
		RectBottomLeftRule,
		RectContactPointRule
	}

	public int binWidth;

	public int binHeight;

	public bool allowRotations;

	public List<Rect> usedRectangles = new List<Rect>();

	public List<Rect> freeRectangles = new List<Rect>();

	public MaxRectsBinPack(int width, int height, bool rotations = true)
	{
		Init(width, height, rotations);
	}

	public void Init(int width, int height, bool rotations = true)
	{
		binWidth = width;
		binHeight = height;
		allowRotations = rotations;
		Rect item = default(Rect);
		item.x = 0f;
		item.y = 0f;
		item.width = width;
		item.height = height;
		usedRectangles.Clear();
		freeRectangles.Clear();
		freeRectangles.Add(item);
	}

	public Rect Insert(int width, int height, FreeRectChoiceHeuristic method)
	{
		Rect usedNode = default(Rect);
		int bestShortSideFit = 0;
		int bestLongSideFit = 0;
		switch (method)
		{
		case FreeRectChoiceHeuristic.RectBestShortSideFit:
			usedNode = FindPositionForNewNodeBestShortSideFit(width, height, ref bestShortSideFit, ref bestLongSideFit);
			break;
		case FreeRectChoiceHeuristic.RectBottomLeftRule:
			usedNode = FindPositionForNewNodeBottomLeft(width, height, ref bestShortSideFit, ref bestLongSideFit);
			break;
		case FreeRectChoiceHeuristic.RectContactPointRule:
			usedNode = FindPositionForNewNodeContactPoint(width, height, ref bestShortSideFit);
			break;
		case FreeRectChoiceHeuristic.RectBestLongSideFit:
			usedNode = FindPositionForNewNodeBestLongSideFit(width, height, ref bestLongSideFit, ref bestShortSideFit);
			break;
		case FreeRectChoiceHeuristic.RectBestAreaFit:
			usedNode = FindPositionForNewNodeBestAreaFit(width, height, ref bestShortSideFit, ref bestLongSideFit);
			break;
		}
		if (usedNode.height == 0f)
		{
			return usedNode;
		}
		int num = freeRectangles.Count;
		for (int i = 0; i < num; i++)
		{
			if (SplitFreeNode(freeRectangles[i], ref usedNode))
			{
				freeRectangles.RemoveAt(i);
				i--;
				num--;
			}
		}
		PruneFreeList();
		usedRectangles.Add(usedNode);
		return usedNode;
	}

	public void Insert(List<Rect> rects, List<Rect> dst, FreeRectChoiceHeuristic method)
	{
		dst.Clear();
		while (rects.Count > 0)
		{
			int num = int.MaxValue;
			int num2 = int.MaxValue;
			int num3 = -1;
			Rect node = default(Rect);
			for (int i = 0; i < rects.Count; i++)
			{
				int score = 0;
				int score2 = 0;
				Rect rect = ScoreRect((int)rects[i].width, (int)rects[i].height, method, ref score, ref score2);
				if (score < num || (score == num && score2 < num2))
				{
					num = score;
					num2 = score2;
					node = rect;
					num3 = i;
				}
			}
			if (num3 == -1)
			{
				break;
			}
			PlaceRect(node);
			rects.RemoveAt(num3);
		}
	}

	public void Remove(Rect rect)
	{
		usedRectangles.Remove(rect);
		freeRectangles.Add(rect);
		PruneFreeList();
	}

	private void PlaceRect(Rect node)
	{
		int num = freeRectangles.Count;
		for (int i = 0; i < num; i++)
		{
			if (SplitFreeNode(freeRectangles[i], ref node))
			{
				freeRectangles.RemoveAt(i);
				i--;
				num--;
			}
		}
		PruneFreeList();
		usedRectangles.Add(node);
	}

	private Rect ScoreRect(int width, int height, FreeRectChoiceHeuristic method, ref int score1, ref int score2)
	{
		Rect result = default(Rect);
		score1 = int.MaxValue;
		score2 = int.MaxValue;
		switch (method)
		{
		case FreeRectChoiceHeuristic.RectBestShortSideFit:
			result = FindPositionForNewNodeBestShortSideFit(width, height, ref score1, ref score2);
			break;
		case FreeRectChoiceHeuristic.RectBottomLeftRule:
			result = FindPositionForNewNodeBottomLeft(width, height, ref score1, ref score2);
			break;
		case FreeRectChoiceHeuristic.RectContactPointRule:
			result = FindPositionForNewNodeContactPoint(width, height, ref score1);
			score1 = -score1;
			break;
		case FreeRectChoiceHeuristic.RectBestLongSideFit:
			result = FindPositionForNewNodeBestLongSideFit(width, height, ref score2, ref score1);
			break;
		case FreeRectChoiceHeuristic.RectBestAreaFit:
			result = FindPositionForNewNodeBestAreaFit(width, height, ref score1, ref score2);
			break;
		}
		if (result.height == 0f)
		{
			score1 = int.MaxValue;
			score2 = int.MaxValue;
		}
		return result;
	}

	public float Occupancy()
	{
		ulong num = 0uL;
		for (int i = 0; i < usedRectangles.Count; i++)
		{
			num += (uint)usedRectangles[i].width * (uint)usedRectangles[i].height;
		}
		return (float)num / (float)(binWidth * binHeight);
	}

	private Rect FindPositionForNewNodeBottomLeft(int width, int height, ref int bestY, ref int bestX)
	{
		Rect result = default(Rect);
		bestY = int.MaxValue;
		for (int i = 0; i < freeRectangles.Count; i++)
		{
			if (freeRectangles[i].width >= (float)width && freeRectangles[i].height >= (float)height)
			{
				int num = (int)freeRectangles[i].y + height;
				if (num < bestY || (num == bestY && freeRectangles[i].x < (float)bestX))
				{
					result.x = freeRectangles[i].x;
					result.y = freeRectangles[i].y;
					result.width = width;
					result.height = height;
					bestY = num;
					bestX = (int)freeRectangles[i].x;
				}
			}
			if (allowRotations && freeRectangles[i].width >= (float)height && freeRectangles[i].height >= (float)width)
			{
				int num2 = (int)freeRectangles[i].y + width;
				if (num2 < bestY || (num2 == bestY && freeRectangles[i].x < (float)bestX))
				{
					result.x = freeRectangles[i].x;
					result.y = freeRectangles[i].y;
					result.width = height;
					result.height = width;
					bestY = num2;
					bestX = (int)freeRectangles[i].x;
				}
			}
		}
		return result;
	}

	private Rect FindPositionForNewNodeBestShortSideFit(int width, int height, ref int bestShortSideFit, ref int bestLongSideFit)
	{
		Rect result = default(Rect);
		bestShortSideFit = int.MaxValue;
		for (int i = 0; i < freeRectangles.Count; i++)
		{
			if (freeRectangles[i].width >= (float)width && freeRectangles[i].height >= (float)height)
			{
				int a = Mathf.Abs((int)freeRectangles[i].width - width);
				int b = Mathf.Abs((int)freeRectangles[i].height - height);
				int num = Mathf.Min(a, b);
				int num2 = Mathf.Max(a, b);
				if (num < bestShortSideFit || (num == bestShortSideFit && num2 < bestLongSideFit))
				{
					result.x = freeRectangles[i].x;
					result.y = freeRectangles[i].y;
					result.width = width;
					result.height = height;
					bestShortSideFit = num;
					bestLongSideFit = num2;
				}
			}
			if (allowRotations && freeRectangles[i].width >= (float)height && freeRectangles[i].height >= (float)width)
			{
				int a2 = Mathf.Abs((int)freeRectangles[i].width - height);
				int b2 = Mathf.Abs((int)freeRectangles[i].height - width);
				int num3 = Mathf.Min(a2, b2);
				int num4 = Mathf.Max(a2, b2);
				if (num3 < bestShortSideFit || (num3 == bestShortSideFit && num4 < bestLongSideFit))
				{
					result.x = freeRectangles[i].x;
					result.y = freeRectangles[i].y;
					result.width = height;
					result.height = width;
					bestShortSideFit = num3;
					bestLongSideFit = num4;
				}
			}
		}
		return result;
	}

	private Rect FindPositionForNewNodeBestLongSideFit(int width, int height, ref int bestShortSideFit, ref int bestLongSideFit)
	{
		Rect result = default(Rect);
		bestLongSideFit = int.MaxValue;
		for (int i = 0; i < freeRectangles.Count; i++)
		{
			if (freeRectangles[i].width >= (float)width && freeRectangles[i].height >= (float)height)
			{
				int a = Mathf.Abs((int)freeRectangles[i].width - width);
				int b = Mathf.Abs((int)freeRectangles[i].height - height);
				int num = Mathf.Min(a, b);
				int num2 = Mathf.Max(a, b);
				if (num2 < bestLongSideFit || (num2 == bestLongSideFit && num < bestShortSideFit))
				{
					result.x = freeRectangles[i].x;
					result.y = freeRectangles[i].y;
					result.width = width;
					result.height = height;
					bestShortSideFit = num;
					bestLongSideFit = num2;
				}
			}
			if (allowRotations && freeRectangles[i].width >= (float)height && freeRectangles[i].height >= (float)width)
			{
				int a2 = Mathf.Abs((int)freeRectangles[i].width - height);
				int b2 = Mathf.Abs((int)freeRectangles[i].height - width);
				int num3 = Mathf.Min(a2, b2);
				int num4 = Mathf.Max(a2, b2);
				if (num4 < bestLongSideFit || (num4 == bestLongSideFit && num3 < bestShortSideFit))
				{
					result.x = freeRectangles[i].x;
					result.y = freeRectangles[i].y;
					result.width = height;
					result.height = width;
					bestShortSideFit = num3;
					bestLongSideFit = num4;
				}
			}
		}
		return result;
	}

	private Rect FindPositionForNewNodeBestAreaFit(int width, int height, ref int bestAreaFit, ref int bestShortSideFit)
	{
		Rect result = default(Rect);
		bestAreaFit = int.MaxValue;
		for (int i = 0; i < freeRectangles.Count; i++)
		{
			int num = (int)freeRectangles[i].width * (int)freeRectangles[i].height - width * height;
			if (freeRectangles[i].width >= (float)width && freeRectangles[i].height >= (float)height)
			{
				int a = Mathf.Abs((int)freeRectangles[i].width - width);
				int b = Mathf.Abs((int)freeRectangles[i].height - height);
				int num2 = Mathf.Min(a, b);
				if (num < bestAreaFit || (num == bestAreaFit && num2 < bestShortSideFit))
				{
					result.x = freeRectangles[i].x;
					result.y = freeRectangles[i].y;
					result.width = width;
					result.height = height;
					bestShortSideFit = num2;
					bestAreaFit = num;
				}
			}
			if (allowRotations && freeRectangles[i].width >= (float)height && freeRectangles[i].height >= (float)width)
			{
				int a2 = Mathf.Abs((int)freeRectangles[i].width - height);
				int b2 = Mathf.Abs((int)freeRectangles[i].height - width);
				int num3 = Mathf.Min(a2, b2);
				if (num < bestAreaFit || (num == bestAreaFit && num3 < bestShortSideFit))
				{
					result.x = freeRectangles[i].x;
					result.y = freeRectangles[i].y;
					result.width = height;
					result.height = width;
					bestShortSideFit = num3;
					bestAreaFit = num;
				}
			}
		}
		return result;
	}

	private int CommonIntervalLength(int i1start, int i1end, int i2start, int i2end)
	{
		if (i1end < i2start || i2end < i1start)
		{
			return 0;
		}
		return Mathf.Min(i1end, i2end) - Mathf.Max(i1start, i2start);
	}

	private int ContactPointScoreNode(int x, int y, int width, int height)
	{
		int num = 0;
		if (x == 0 || x + width == binWidth)
		{
			num += height;
		}
		if (y == 0 || y + height == binHeight)
		{
			num += width;
		}
		for (int i = 0; i < usedRectangles.Count; i++)
		{
			if (usedRectangles[i].x == (float)(x + width) || usedRectangles[i].x + usedRectangles[i].width == (float)x)
			{
				num += CommonIntervalLength((int)usedRectangles[i].y, (int)usedRectangles[i].y + (int)usedRectangles[i].height, y, y + height);
			}
			if (usedRectangles[i].y == (float)(y + height) || usedRectangles[i].y + usedRectangles[i].height == (float)y)
			{
				num += CommonIntervalLength((int)usedRectangles[i].x, (int)usedRectangles[i].x + (int)usedRectangles[i].width, x, x + width);
			}
		}
		return num;
	}

	private Rect FindPositionForNewNodeContactPoint(int width, int height, ref int bestContactScore)
	{
		Rect result = default(Rect);
		bestContactScore = -1;
		for (int i = 0; i < freeRectangles.Count; i++)
		{
			if (freeRectangles[i].width >= (float)width && freeRectangles[i].height >= (float)height)
			{
				int num = ContactPointScoreNode((int)freeRectangles[i].x, (int)freeRectangles[i].y, width, height);
				if (num > bestContactScore)
				{
					result.x = (int)freeRectangles[i].x;
					result.y = (int)freeRectangles[i].y;
					result.width = width;
					result.height = height;
					bestContactScore = num;
				}
			}
			if (allowRotations && freeRectangles[i].width >= (float)height && freeRectangles[i].height >= (float)width)
			{
				int num2 = ContactPointScoreNode((int)freeRectangles[i].x, (int)freeRectangles[i].y, height, width);
				if (num2 > bestContactScore)
				{
					result.x = (int)freeRectangles[i].x;
					result.y = (int)freeRectangles[i].y;
					result.width = height;
					result.height = width;
					bestContactScore = num2;
				}
			}
		}
		return result;
	}

	private bool SplitFreeNode(Rect freeNode, ref Rect usedNode)
	{
		if (usedNode.x >= freeNode.x + freeNode.width || usedNode.x + usedNode.width <= freeNode.x || usedNode.y >= freeNode.y + freeNode.height || usedNode.y + usedNode.height <= freeNode.y)
		{
			return false;
		}
		if (usedNode.x < freeNode.x + freeNode.width && usedNode.x + usedNode.width > freeNode.x)
		{
			if (usedNode.y > freeNode.y && usedNode.y < freeNode.y + freeNode.height)
			{
				Rect item = freeNode;
				item.height = usedNode.y - item.y;
				freeRectangles.Add(item);
			}
			if (usedNode.y + usedNode.height < freeNode.y + freeNode.height)
			{
				Rect item2 = freeNode;
				item2.y = usedNode.y + usedNode.height;
				item2.height = freeNode.y + freeNode.height - (usedNode.y + usedNode.height);
				freeRectangles.Add(item2);
			}
		}
		if (usedNode.y < freeNode.y + freeNode.height && usedNode.y + usedNode.height > freeNode.y)
		{
			if (usedNode.x > freeNode.x && usedNode.x < freeNode.x + freeNode.width)
			{
				Rect item3 = freeNode;
				item3.width = usedNode.x - item3.x;
				freeRectangles.Add(item3);
			}
			if (usedNode.x + usedNode.width < freeNode.x + freeNode.width)
			{
				Rect item4 = freeNode;
				item4.x = usedNode.x + usedNode.width;
				item4.width = freeNode.x + freeNode.width - (usedNode.x + usedNode.width);
				freeRectangles.Add(item4);
			}
		}
		return true;
	}

	private void PruneFreeList()
	{
		for (int i = 0; i < freeRectangles.Count; i++)
		{
			for (int j = i + 1; j < freeRectangles.Count; j++)
			{
				if (IsContainedIn(freeRectangles[i], freeRectangles[j]))
				{
					freeRectangles.RemoveAt(i);
					i--;
					break;
				}
				if (IsContainedIn(freeRectangles[j], freeRectangles[i]))
				{
					freeRectangles.RemoveAt(j);
					j--;
				}
			}
		}
	}

	private bool IsContainedIn(Rect a, Rect b)
	{
		if (a.x >= b.x && a.y >= b.y && a.x + a.width <= b.x + b.width)
		{
			return a.y + a.height <= b.y + b.height;
		}
		return false;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MiniTransportBehaviour
using System.Collections;
using System.Runtime.InteropServices;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class MiniTransportBehaviour : NetworkBehaviour
{
	[SyncVar]
	public int[] productInfoArray;

	[SyncVar]
	public bool hasDriver;

	public bool hasAuthority;

	public GameObject currentPlayerOBJ;

	[Space(10f)]
	public AudioSource engineAudio;

	public AudioSource honkAudio;

	public AudioSource hitAudio;

	public AudioSource peopleHitAudio;

	public float velocity;

	[Space(10f)]
	public float motorTorque = 2000f;

	public float brakeTorque = 2000f;

	public float maxSpeed = 20f;

	public float steeringRange = 30f;

	public float steeringRangeAtMaxSpeed = 10f;

	public float bonkForce = 50f;

	public WheelControl[] wheels;

	public AudioClip[] hitAudioArray;

	public AudioClip[] peopleHitAudioArray;

	public GameObject storageBoxPrefab;

	private NetworkIdentity thisIdentity;

	private Rigidbody thisRigidbody;

	private Player MainPlayer;

	private bool hopCooldown;

	private bool addForceForwards;

	private bool addForceBackwards;

	public int[] NetworkproductInfoArray
	{
		get
		{
			return productInfoArray;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productInfoArray, 1uL, null);
		}
	}

	public bool NetworkhasDriver
	{
		get
		{
			return hasDriver;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref hasDriver, 2uL, null);
		}
	}

	private void Start()
	{
		thisIdentity = GetComponent<NetworkIdentity>();
		thisRigidbody = GetComponent<Rigidbody>();
		MainPlayer = ReInput.players.GetPlayer(0);
	}

	public override void OnStartClient()
	{
		base.OnStartClient();
		BoxSpawner();
	}

	[Command(requiresAuthority = false)]
	public void CmdRequestOwnership(GameObject requesterOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(requesterOBJ);
		SendCommandInternal("System.Void MiniTransportBehaviour::CmdRequestOwnership(UnityEngine.GameObject)", -1536541062, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcRequestOwnership(GameObject requesterOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(requesterOBJ);
		SendRPCInternal("System.Void MiniTransportBehaviour::RpcRequestOwnership(UnityEngine.GameObject)", 1667153321, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	private void CmdRemoveOwnership()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void MiniTransportBehaviour::CmdRemoveOwnership()", 1364822105, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void LocalRemoveOwnership()
	{
		FirstPersonController.Instance.inVehicle = false;
		FirstPersonController.Instance.vehicleSpot = null;
		if ((bool)FirstPersonController.Instance.footstepsFSM)
		{
			FirstPersonController.Instance.footstepsFSM.enabled = true;
		}
		if ((bool)FirstPersonController.Instance)
		{
			if (FirstPersonController.Instance.GetComponent<NetworkIdentity>().connectionToServer != null)
			{
				FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeEquippedItem(0);
			}
			FirstPersonController.Instance.GetComponent<PlayerSyncCharacter>().NetworkinVehicle = false;
		}
		base.transform.Find("PlayerInteractDrive").gameObject.SetActive(value: true);
		base.transform.Find("ExtraColliders").gameObject.SetActive(value: true);
		base.transform.Find("PushEntities").gameObject.SetActive(value: false);
		if ((bool)Camera.main)
		{
			Camera.main.GetComponent<CustomCameraController>().inVehicle = false;
			Camera.main.GetComponent<CustomCameraController>().vehicleOBJ = null;
		}
		thisRigidbody.isKinematic = true;
	}

	public void RemoveAuthorityFromNetworkManager()
	{
		CmdRemoveOwnership();
	}

	public void RemoveOwnershipFromTeleport()
	{
		if (hasAuthority)
		{
			LocalRemoveOwnership();
			CmdRemoveOwnership();
		}
	}

	private void Update()
	{
		velocity = thisRigidbody.velocity.magnitude;
		float volume = Mathf.Clamp(velocity / 7f, 0f, 1f);
		engineAudio.volume = volume;
		if (!hasAuthority)
		{
			return;
		}
		base.transform.rotation = Quaternion.Euler(new Vector3(0f, base.transform.rotation.eulerAngles.y, 0f));
		if (!FsmVariables.GlobalVariables.GetFsmBool("InChat").Value && MainPlayer.GetButtonDown("Build"))
		{
			hasAuthority = false;
			LocalRemoveOwnership();
			CmdRemoveOwnership();
			return;
		}
		if (MainPlayer.GetButtonDown("Drop Item"))
		{
			CmdHorn();
		}
		if (MainPlayer.GetButtonDown("Jump") && !hopCooldown)
		{
			StartCoroutine(UnstuckingHop(front: true));
		}
		else if (MainPlayer.GetButtonDown("Secondary Action") && !hopCooldown)
		{
			StartCoroutine(UnstuckingHop(front: false));
		}
		float axis = MainPlayer.GetAxis("MoveH");
		float axis2 = MainPlayer.GetAxis("MoveV");
		if (velocity < 0.5f && axis2 > 0f)
		{
			addForceForwards = true;
		}
		else
		{
			addForceForwards = false;
		}
		if (velocity < 0.5f && axis2 < 0f)
		{
			addForceBackwards = true;
		}
		else
		{
			addForceBackwards = false;
		}
		float num = Vector3.Dot(base.transform.forward, thisRigidbody.velocity);
		float t = Mathf.InverseLerp(0f, maxSpeed, num);
		float num2 = Mathf.Lerp(motorTorque, 0f, t);
		float num3 = Mathf.Lerp(steeringRange, steeringRangeAtMaxSpeed, t);
		bool flag = Mathf.Sign(axis2) == Mathf.Sign(num);
		if ((velocity > 4.5f && axis2 > 0f) || (velocity > 2.5f && axis2 < 0f))
		{
			num2 = 0f;
		}
		WheelControl[] array = wheels;
		foreach (WheelControl wheelControl in array)
		{
			if (wheelControl.steerable)
			{
				wheelControl.WheelCollider.steerAngle = axis * num3;
			}
			if (flag)
			{
				if (wheelControl.motorized)
				{
					wheelControl.WheelCollider.motorTorque = axis2 * num2;
				}
				wheelControl.WheelCollider.brakeTorque = 0f;
			}
			else
			{
				wheelControl.WheelCollider.brakeTorque = Mathf.Abs(axis2) * brakeTorque;
				wheelControl.WheelCollider.motorTorque = 0f;
			}
		}
	}

	private void FixedUpdate()
	{
		if (!hasAuthority)
		{
			if (addForceForwards)
			{
				thisRigidbody.AddForce(base.transform.forward * 500f);
			}
			if (addForceBackwards)
			{
				thisRigidbody.AddForce(-base.transform.forward * 500f);
			}
		}
	}

	public void CheckCollision(GameObject otherOBJ)
	{
		if (!(velocity < 1f))
		{
			if (otherOBJ.name == "HitTrigger" && (bool)otherOBJ.transform.parent && (bool)otherOBJ.transform.parent.GetComponent<NPC_Info>())
			{
				CmdOnPeopleHit(otherOBJ.transform.position);
				base.transform.Find("Mesh").GetComponent<Animator>().Play("Vehicle_Shake");
				otherOBJ.transform.parent.GetComponent<NPC_Info>().CmdAnimationPlay(0);
			}
			else if (otherOBJ.name == "HitTrigger" && (bool)otherOBJ.transform.parent && (bool)otherOBJ.transform.parent.transform.parent && (bool)otherOBJ.transform.parent.transform.parent.GetComponent<PlayerNetwork>())
			{
				CmdOnPeopleHit(otherOBJ.transform.position);
				base.transform.Find("Mesh").GetComponent<Animator>().Play("Vehicle_Shake");
				Vector3 vector = otherOBJ.transform.position - base.transform.position;
				otherOBJ.transform.parent.transform.parent.GetComponent<PlayerNetwork>().PushPlayer(vector.normalized);
			}
		}
	}

	[Command]
	private void CmdOnPeopleHit(Vector3 position)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(position);
		SendCommandInternal("System.Void MiniTransportBehaviour::CmdOnPeopleHit(UnityEngine.Vector3)", 1858657720, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcOnPeopleHit(Vector3 position)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(position);
		SendRPCInternal("System.Void MiniTransportBehaviour::RpcOnPeopleHit(UnityEngine.Vector3)", 1013729855, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void OnCollisionEnter(Collision collision)
	{
		if (hasAuthority && collision.contactCount > 0 && Vector3.Dot(collision.GetContact(0).normal, Vector3.up) < 0.8f)
		{
			float magnitude = collision.relativeVelocity.magnitude;
			if (magnitude > 1f)
			{
				base.transform.Find("Mesh").GetComponent<Animator>().Play("Vehicle_Shake");
				float audioVolume = Mathf.Clamp(magnitude / 7f, 0.1f, 1f);
				Vector3 point = collision.GetContact(0).point;
				CmdCollisionHit(point, audioVolume);
			}
		}
	}

	[Command]
	private void CmdCollisionHit(Vector3 position, float audioVolume)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(position);
		writer.WriteFloat(audioVolume);
		SendCommandInternal("System.Void MiniTransportBehaviour::CmdCollisionHit(UnityEngine.Vector3,System.Single)", -299580789, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcCollisionHit(Vector3 position, float audioVolume, int audioIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(position);
		writer.WriteFloat(audioVolume);
		writer.WriteInt(audioIndex);
		SendRPCInternal("System.Void MiniTransportBehaviour::RpcCollisionHit(UnityEngine.Vector3,System.Single,System.Int32)", -2142235395, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command]
	private void CmdHorn()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void MiniTransportBehaviour::CmdHorn()", -1465750109, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcHorn()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void MiniTransportBehaviour::RpcHorn()", 385170484, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator UnstuckingHop(bool front)
	{
		hopCooldown = true;
		if (front)
		{
			Vector3 vector = base.transform.forward + new Vector3(0f, 2.5f, 0f);
			thisRigidbody.AddForce(vector.normalized * bonkForce, ForceMode.Impulse);
		}
		else
		{
			Vector3 vector2 = -base.transform.forward + new Vector3(0f, 2.5f, 0f);
			thisRigidbody.AddForce(vector2.normalized * bonkForce, ForceMode.Impulse);
		}
		yield return new WaitForSeconds(1f);
		hopCooldown = false;
	}

	public void GetStorageBox(int boxIndex)
	{
		if (!FirstPersonController.Instance.GetComponent<PlayerPermissions>().RequestRP())
		{
			return;
		}
		int num = boxIndex * 2;
		int num2 = productInfoArray[num];
		int num3 = productInfoArray[num + 1];
		PlayerNetwork component = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		if (component.equippedItem == 1 && num3 >= 0 && num2 == component.extraParameter1 && component.extraParameter2 > 0 && num2 >= 0 && num2 < ProductListing.Instance.productPrefabs.Length)
		{
			int maxItemsPerBox = ProductListing.Instance.productPrefabs[num2].GetComponent<Data_Product>().maxItemsPerBox;
			if (num3 == maxItemsPerBox)
			{
				GameCanvas.Instance.CreateCanvasNotification("message12");
			}
			else if (num3 + component.extraParameter2 > maxItemsPerBox)
			{
				int num4 = maxItemsPerBox - num3;
				component.extraParameter2 -= num4;
				CmdUpdateArrayValuesStorage(num, component.extraParameter1, maxItemsPerBox);
				GameData.Instance.PlayPopSound();
			}
			else
			{
				CmdUpdateArrayValuesStorage(num, component.extraParameter1, num3 + component.extraParameter2);
				component.extraParameter2 = 0;
				GameData.Instance.PlayPopSound();
			}
		}
		else if (num3 <= 0 && component.equippedItem == 1)
		{
			if (base.transform.Find("BoxContainer").gameObject.transform.GetChild(boxIndex).transform.childCount <= 0)
			{
				component.CmdChangeEquippedItem(0);
				CmdUpdateArrayValuesStorage(num, component.extraParameter1, component.extraParameter2);
			}
		}
		else
		{
			if (num2 < 0 || num3 <= -1)
			{
				return;
			}
			if (component.equippedItem == 0)
			{
				component.CmdChangeEquippedItem(1);
				component.extraParameter1 = num2;
				component.extraParameter2 = num3;
				if ((bool)base.transform.Find("CanvasSigns"))
				{
					CmdUpdateArrayValuesStorage(num, num2, -1);
				}
				else
				{
					CmdUpdateArrayValuesStorage(num, -1, -1);
				}
			}
			else
			{
				GameCanvas.Instance.CreateCanvasNotification("message7");
			}
		}
	}

	public void ClearStorageBox(int boxIndex)
	{
		int num = boxIndex * 2;
		int num2 = productInfoArray[num];
		int num3 = productInfoArray[num + 1];
		PlayerNetwork component = FirstPersonController.Instance.GetComponent<PlayerNetwork>();
		if (component.equippedItem == 2 && num2 >= 0 && num3 < 0)
		{
			component.transform.Find("ResetProductSound").GetComponent<AudioSource>().Play();
			CmdUpdateArrayValuesStorage(num, -1, -1);
		}
	}

	public void EmployeeUpdateArrayValuesStorage(int index, int PID, int PNUMBER)
	{
		productInfoArray[index] = PID;
		productInfoArray[index + 1] = PNUMBER;
		RpcUpdateArrayValuesStorage(index, PID, PNUMBER);
	}

	[Command(requiresAuthority = false)]
	private void CmdUpdateArrayValuesStorage(int index, int PID, int PNUMBER)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(PID);
		writer.WriteInt(PNUMBER);
		SendCommandInternal("System.Void MiniTransportBehaviour::CmdUpdateArrayValuesStorage(System.Int32,System.Int32,System.Int32)", -1448121176, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateArrayValuesStorage(int index, int PID, int PNUMBER)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(PID);
		writer.WriteInt(PNUMBER);
		SendRPCInternal("System.Void MiniTransportBehaviour::RpcUpdateArrayValuesStorage(System.Int32,System.Int32,System.Int32)", -827169613, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void BoxSpawner()
	{
		GameObject gameObject = base.transform.Find("BoxContainer").gameObject;
		GameObject gameObject2 = null;
		if ((bool)base.transform.Find("CanvasSigns"))
		{
			gameObject2 = base.transform.Find("CanvasSigns").gameObject;
		}
		int childCount = gameObject.transform.childCount;
		for (int i = 0; i < childCount; i++)
		{
			int num = productInfoArray[i * 2];
			int num2 = productInfoArray[i * 2 + 1];
			Transform transform = null;
			if ((bool)gameObject2)
			{
				transform = gameObject2.transform.GetChild(i);
			}
			bool flag = gameObject.transform.GetChild(i).childCount > 0;
			if (num2 <= -1)
			{
				if (flag)
				{
					Object.Destroy(gameObject.transform.GetChild(i).transform.GetChild(0).gameObject);
					if (num >= 0 && (bool)transform)
					{
						transform.gameObject.SetActive(value: true);
						transform.GetComponent<Image>().sprite = ProductListing.Instance.productSprites[num];
					}
				}
				else if (num >= 0 && (bool)transform)
				{
					transform.gameObject.SetActive(value: true);
					transform.GetComponent<Image>().sprite = ProductListing.Instance.productSprites[num];
				}
				else if (num < 0 && (bool)transform && gameObject2.activeSelf)
				{
					transform.gameObject.SetActive(value: false);
				}
			}
			else if (num >= 0 && !flag)
			{
				if ((bool)transform)
				{
					transform.gameObject.SetActive(value: false);
				}
				GameObject gameObject3 = Object.Instantiate(storageBoxPrefab, gameObject.transform.GetChild(i));
				gameObject3.transform.localPosition = Vector3.zero;
				ProductListing.Instance.SetBoxColor(gameObject3, num);
				gameObject3.transform.Find("ProductSprite").GetComponent<SpriteRenderer>().sprite = ProductListing.Instance.productSprites[num];
				gameObject3.transform.Find("ProductQuantity").GetComponent<TextMeshPro>().text = "x" + num2;
			}
			else if (num >= 0 && flag)
			{
				gameObject.transform.GetChild(i).transform.GetChild(0).transform.Find("ProductQuantity").GetComponent<TextMeshPro>().text = "x" + num2;
			}
		}
	}

	private void OnDestroy()
	{
		if (hasAuthority)
		{
			StopAllCoroutines();
			LocalRemoveOwnership();
		}
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdRequestOwnership__GameObject(GameObject requesterOBJ)
	{
		if (thisIdentity.connectionToClient == null)
		{
			currentPlayerOBJ = requesterOBJ;
			NetworkhasDriver = true;
			thisIdentity.AssignClientAuthority(requesterOBJ.GetComponent<NetworkIdentity>().connectionToClient);
			RpcRequestOwnership(requesterOBJ);
		}
	}

	protected static void InvokeUserCode_CmdRequestOwnership__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestOwnership called on client.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_CmdRequestOwnership__GameObject(reader.ReadGameObject());
		}
	}

	protected void UserCode_RpcRequestOwnership__GameObject(GameObject requesterOBJ)
	{
		if (requesterOBJ.name == "LocalGamePlayer")
		{
			hasAuthority = true;
			FirstPersonController.Instance.inVehicle = true;
			FirstPersonController.Instance.vehicleSpot = base.transform.Find("PlayerSpot").gameObject;
			FirstPersonController.Instance.footstepsFSM.enabled = false;
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeEquippedItem(4);
			FirstPersonController.Instance.GetComponent<PlayerSyncCharacter>().NetworkinVehicle = true;
			base.transform.Find("PlayerInteractDrive").gameObject.SetActive(value: false);
			base.transform.Find("ExtraColliders").gameObject.SetActive(value: false);
			base.transform.Find("PushEntities").gameObject.SetActive(value: true);
			Camera.main.GetComponent<CustomCameraController>().inVehicle = true;
			Camera.main.GetComponent<CustomCameraController>().vehicleOBJ = base.transform;
			thisRigidbody.isKinematic = false;
		}
		else
		{
			hasAuthority = false;
		}
	}

	protected static void InvokeUserCode_RpcRequestOwnership__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRequestOwnership called on server.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_RpcRequestOwnership__GameObject(reader.ReadGameObject());
		}
	}

	protected void UserCode_CmdRemoveOwnership()
	{
		thisIdentity.RemoveClientAuthority();
		currentPlayerOBJ = null;
		NetworkhasDriver = false;
	}

	protected static void InvokeUserCode_CmdRemoveOwnership(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRemoveOwnership called on client.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_CmdRemoveOwnership();
		}
	}

	protected void UserCode_CmdOnPeopleHit__Vector3(Vector3 position)
	{
		RpcOnPeopleHit(position);
	}

	protected static void InvokeUserCode_CmdOnPeopleHit__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdOnPeopleHit called on client.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_CmdOnPeopleHit__Vector3(reader.ReadVector3());
		}
	}

	protected void UserCode_RpcOnPeopleHit__Vector3(Vector3 position)
	{
		peopleHitAudio.clip = peopleHitAudioArray[Random.Range(0, peopleHitAudioArray.Length)];
		peopleHitAudio.transform.position = position;
		peopleHitAudio.Play();
	}

	protected static void InvokeUserCode_RpcOnPeopleHit__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcOnPeopleHit called on server.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_RpcOnPeopleHit__Vector3(reader.ReadVector3());
		}
	}

	protected void UserCode_CmdCollisionHit__Vector3__Single(Vector3 position, float audioVolume)
	{
		int audioIndex = Random.Range(0, hitAudioArray.Length);
		RpcCollisionHit(position, audioVolume, audioIndex);
	}

	protected static void InvokeUserCode_CmdCollisionHit__Vector3__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdCollisionHit called on client.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_CmdCollisionHit__Vector3__Single(reader.ReadVector3(), reader.ReadFloat());
		}
	}

	protected void UserCode_RpcCollisionHit__Vector3__Single__Int32(Vector3 position, float audioVolume, int audioIndex)
	{
		hitAudio.clip = hitAudioArray[audioIndex];
		hitAudio.transform.position = position;
		hitAudio.volume = audioVolume;
		hitAudio.Play();
	}

	protected static void InvokeUserCode_RpcCollisionHit__Vector3__Single__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcCollisionHit called on server.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_RpcCollisionHit__Vector3__Single__Int32(reader.ReadVector3(), reader.ReadFloat(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdHorn()
	{
		RpcHorn();
	}

	protected static void InvokeUserCode_CmdHorn(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdHorn called on client.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_CmdHorn();
		}
	}

	protected void UserCode_RpcHorn()
	{
		honkAudio.Play();
	}

	protected static void InvokeUserCode_RpcHorn(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcHorn called on server.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_RpcHorn();
		}
	}

	protected void UserCode_CmdUpdateArrayValuesStorage__Int32__Int32__Int32(int index, int PID, int PNUMBER)
	{
		productInfoArray[index] = PID;
		productInfoArray[index + 1] = PNUMBER;
		RpcUpdateArrayValuesStorage(index, PID, PNUMBER);
	}

	protected static void InvokeUserCode_CmdUpdateArrayValuesStorage__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUpdateArrayValuesStorage called on client.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_CmdUpdateArrayValuesStorage__Int32__Int32__Int32(reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcUpdateArrayValuesStorage__Int32__Int32__Int32(int index, int PID, int PNUMBER)
	{
		if (!base.isServer)
		{
			productInfoArray[index] = PID;
			productInfoArray[index + 1] = PNUMBER;
		}
		BoxSpawner();
	}

	protected static void InvokeUserCode_RpcUpdateArrayValuesStorage__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateArrayValuesStorage called on server.");
		}
		else
		{
			((MiniTransportBehaviour)obj).UserCode_RpcUpdateArrayValuesStorage__Int32__Int32__Int32(reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	static MiniTransportBehaviour()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::CmdRequestOwnership(UnityEngine.GameObject)", InvokeUserCode_CmdRequestOwnership__GameObject, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::CmdRemoveOwnership()", InvokeUserCode_CmdRemoveOwnership, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::CmdOnPeopleHit(UnityEngine.Vector3)", InvokeUserCode_CmdOnPeopleHit__Vector3, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::CmdCollisionHit(UnityEngine.Vector3,System.Single)", InvokeUserCode_CmdCollisionHit__Vector3__Single, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::CmdHorn()", InvokeUserCode_CmdHorn, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::CmdUpdateArrayValuesStorage(System.Int32,System.Int32,System.Int32)", InvokeUserCode_CmdUpdateArrayValuesStorage__Int32__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::RpcRequestOwnership(UnityEngine.GameObject)", InvokeUserCode_RpcRequestOwnership__GameObject);
		RemoteProcedureCalls.RegisterRpc(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::RpcOnPeopleHit(UnityEngine.Vector3)", InvokeUserCode_RpcOnPeopleHit__Vector3);
		RemoteProcedureCalls.RegisterRpc(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::RpcCollisionHit(UnityEngine.Vector3,System.Single,System.Int32)", InvokeUserCode_RpcCollisionHit__Vector3__Single__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::RpcHorn()", InvokeUserCode_RpcHorn);
		RemoteProcedureCalls.RegisterRpc(typeof(MiniTransportBehaviour), "System.Void MiniTransportBehaviour::RpcUpdateArrayValuesStorage(System.Int32,System.Int32,System.Int32)", InvokeUserCode_RpcUpdateArrayValuesStorage__Int32__Int32__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.Int32[](writer, productInfoArray);
			writer.WriteBool(hasDriver);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Int32[](writer, productInfoArray);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteBool(hasDriver);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref productInfoArray, null, GeneratedNetworkCode._Read_System.Int32[](reader));
			GeneratedSyncVarDeserialize(ref hasDriver, null, reader.ReadBool());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productInfoArray, null, GeneratedNetworkCode._Read_System.Int32[](reader));
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref hasDriver, null, reader.ReadBool());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MiniTransportListener
using UnityEngine;

public class MiniTransportListener : MonoBehaviour
{
	private void Start()
	{
	}

	private void Update()
	{
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MisterGift
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class MisterGift : NetworkBehaviour
{
	public int whichTokenIndex;

	private void Start()
	{
		GetComponent<Rigidbody>().AddForce(new Vector3(0f, 300f, 0f));
	}

	public void GetStarToken()
	{
		AchievementsManager.Instance.AddToken(whichTokenIndex, 1);
		switch (whichTokenIndex)
		{
		case 0:
			GameCanvas.Instance.CreateCanvasNotification("startkn");
			break;
		case 1:
			GameCanvas.Instance.CreateCanvasNotification("moontkn");
			break;
		case 2:
			GameCanvas.Instance.CreateCanvasNotification("alientkn");
			break;
		default:
			GameCanvas.Instance.CreateCanvasNotification("startkn");
			break;
		}
		GameData.Instance.PlayPopSound();
		GetComponent<MeshRenderer>().enabled = false;
		base.transform.Find("HitTrigger").gameObject.SetActive(value: false);
		CmdPlayerTookIt();
	}

	[Command(requiresAuthority = false)]
	public void CmdPlayerTookIt()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void MisterGift::CmdPlayerTookIt()", -138717520, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdPlayerTookIt()
	{
		NetworkServer.Destroy(base.gameObject);
	}

	protected static void InvokeUserCode_CmdPlayerTookIt(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdPlayerTookIt called on client.");
		}
		else
		{
			((MisterGift)obj).UserCode_CmdPlayerTookIt();
		}
	}

	static MisterGift()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(MisterGift), "System.Void MisterGift::CmdPlayerTookIt()", InvokeUserCode_CmdPlayerTookIt, requiresAuthority: false);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MisterGrusch
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;
using UnityEngine.AI;

public class MisterGrusch : NetworkBehaviour
{
	[SyncVar]
	public bool isAMiniGrusch;

	[SyncVar]
	public int hits = 10;

	[Space(10f)]
	public AudioClip[] painClipsArray;

	public GameObject giftPrefabOBJ;

	public GameObject poofPrefabOBJ;

	public int state;

	private TextMeshProUGUI numberField;

	private float hitCooldownTime = 1f;

	private bool onCooldown;

	private GameObject shelvesOBJ;

	private GameObject storageOBJ;

	private Animator pivotAnimator;

	private NPC_Speed speedComponent;

	private NavMeshAgent agent;

	private bool initialRunning;

	private bool isSpawningMinies;

	private bool startRandomlyScreams;

	private float nextScreamTime = 0.5f;

	private float screamCounter;

	private AudioSource screamAudioSource;

	private GameObject boinkAudioOBJ;

	public bool NetworkisAMiniGrusch
	{
		get
		{
			return isAMiniGrusch;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref isAMiniGrusch, 1uL, null);
		}
	}

	public int Networkhits
	{
		get
		{
			return hits;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref hits, 2uL, null);
		}
	}

	public override void OnStartClient()
	{
		pivotAnimator = base.transform.Find("Pivot_MisterGrusch").GetComponent<Animator>();
		speedComponent = GetComponent<NPC_Speed>();
		boinkAudioOBJ = base.transform.Find("BoinkAudio").gameObject;
		screamAudioSource = base.transform.Find("OtherScreams").GetComponent<AudioSource>();
		numberField = base.transform.Find("Pivot_MisterGrusch/NumberCanvas/Number").GetComponent<TextMeshProUGUI>();
		numberField.text = hits.ToString();
		if (isAMiniGrusch)
		{
			base.transform.Find("Pivot_MisterGrusch/Meshes").gameObject.SetActive(value: true);
			base.transform.Find("OtherScreams").GetComponent<AudioSource>().pitch = 1.08f;
		}
	}

	public override void OnStartServer()
	{
		shelvesOBJ = NPC_Manager.Instance.shelvesOBJ;
		storageOBJ = NPC_Manager.Instance.storageOBJ;
		agent = GetComponent<NavMeshAgent>();
		agent.enabled = true;
		if (isAMiniGrusch)
		{
			agent.speed = 7f;
			agent.angularSpeed = 180f;
			agent.acceleration = 32f;
			agent.stoppingDistance = 0.6f;
		}
	}

	private void Update()
	{
		float velocity = speedComponent.velocity;
		pivotAnimator.SetFloat("Speed", velocity);
		if (velocity > 0.1f && !boinkAudioOBJ.activeSelf)
		{
			boinkAudioOBJ.SetActive(value: true);
		}
		if (velocity < 0.1f && boinkAudioOBJ.activeSelf)
		{
			boinkAudioOBJ.SetActive(value: false);
		}
		if (startRandomlyScreams)
		{
			screamCounter += Time.deltaTime;
			if (screamCounter > nextScreamTime)
			{
				screamCounter = 0f;
				nextScreamTime = Random.Range(0.7f, 1.55f);
				screamAudioSource.Play();
			}
		}
		if (!base.isServer)
		{
			return;
		}
		if (GameData.Instance.timeOfDay < 8.05f)
		{
			StopAllCoroutines();
			NetworkServer.Destroy(base.gameObject);
		}
		else
		{
			if (shelvesOBJ.transform.childCount == 0 || storageOBJ.transform.childCount == 0 || state == -1 || agent.pathPending || !(agent.remainingDistance <= agent.stoppingDistance) || (agent.hasPath && agent.velocity.sqrMagnitude != 0f))
			{
				return;
			}
			if (state != 0)
			{
				_ = 1;
				return;
			}
			if (hits < 10 && Random.value < 0.5f)
			{
				Transform child = storageOBJ.transform.GetChild(Random.Range(0, storageOBJ.transform.childCount));
				agent.destination = child.transform.Find("Standspot").position;
			}
			else
			{
				Transform child2 = shelvesOBJ.transform.GetChild(Random.Range(0, shelvesOBJ.transform.childCount));
				agent.destination = child2.transform.Find("Standspot").position;
			}
			StartCoroutine(WaitState(Random.Range(0.5f, 1.5f), 0));
		}
	}

	private IEnumerator WaitState(float waitTime, int targetState)
	{
		state = -1;
		yield return new WaitForSeconds(waitTime);
		state = targetState;
	}

	private IEnumerator HitCooldown()
	{
		onCooldown = true;
		yield return new WaitForSeconds(hitCooldownTime);
		onCooldown = false;
	}

	[Command(requiresAuthority = false)]
	public void CmdHitFromPlayer()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void MisterGrusch::CmdHitFromPlayer()", 922543983, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void HitsCheck()
	{
		Networkhits = hits - 1;
		if (hits <= 0)
		{
			agent.speed = 0f;
			if (isAMiniGrusch)
			{
				StartCoroutine(MiniGiveReward());
				MiniGruschDeactivation();
			}
			else
			{
				RpcLastActivation();
				StartCoroutine(SpawningMiniGrusches());
			}
			return;
		}
		RpcPainAnimationPlay(hits);
		agent.speed += 0.3f + 0.02f * (float)NetworkServer.connections.Count;
		agent.angularSpeed += 10f;
		agent.acceleration += 4f;
		if (!initialRunning)
		{
			agent.speed += 2.5f;
			initialRunning = true;
			RpcActivateMeshes();
		}
	}

	[ClientRpc]
	private void RpcPainAnimationPlay(int hitsNumber)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(hitsNumber);
		SendRPCInternal("System.Void MisterGrusch::RpcPainAnimationPlay(System.Int32)", 1362707067, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void PlayRandomAudio()
	{
		screamAudioSource.clip = painClipsArray[Random.Range(0, painClipsArray.Length - 1)];
		screamAudioSource.Play();
	}

	[ClientRpc]
	private void RpcActivateMeshes()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void MisterGrusch::RpcActivateMeshes()", 846525912, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcLastActivation()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void MisterGrusch::RpcLastActivation()", -182879196, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator SpawningMiniGrusches()
	{
		isSpawningMinies = true;
		base.transform.Find("Seasonal_MisterSmoke").gameObject.SetActive(value: false);
		GameData.Instance.GetComponent<NetworkSpawner>().CallMisterCoroutine(base.transform.position);
		yield return new WaitForSeconds(3f);
		NetworkServer.Destroy(base.gameObject);
	}

	private IEnumerator MiniGiveReward()
	{
		isSpawningMinies = true;
		NetworkServer.Spawn(Object.Instantiate(giftPrefabOBJ, base.transform.position, Quaternion.identity));
		yield return new WaitForSeconds(0.7f);
		NetworkServer.Destroy(base.gameObject);
	}

	[ClientRpc]
	private void MiniGruschDeactivation()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void MisterGrusch::MiniGruschDeactivation()", 811282049, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator MiniGruschEffect()
	{
		float elapsedTime = 0f;
		float waitTime = 0.5f;
		while (elapsedTime < waitTime)
		{
			float num = Mathf.Lerp(0.4f, 0f, elapsedTime / waitTime);
			base.transform.localScale = new Vector3(num, num, num);
			elapsedTime += Time.deltaTime;
			float y = base.transform.rotation.eulerAngles.y;
			base.transform.rotation = Quaternion.Euler(new Vector3(0f, y + 1f, 0f));
			yield return null;
		}
		yield return null;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdHitFromPlayer()
	{
		if (!onCooldown && !isSpawningMinies)
		{
			StartCoroutine(HitCooldown());
			HitsCheck();
		}
	}

	protected static void InvokeUserCode_CmdHitFromPlayer(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdHitFromPlayer called on client.");
		}
		else
		{
			((MisterGrusch)obj).UserCode_CmdHitFromPlayer();
		}
	}

	protected void UserCode_RpcPainAnimationPlay__Int32(int hitsNumber)
	{
		numberField.text = hitsNumber.ToString();
		startRandomlyScreams = true;
		pivotAnimator.Play("Grusch_Pain");
		PlayRandomAudio();
		GetComponent<AudioSource>().Play();
	}

	protected static void InvokeUserCode_RpcPainAnimationPlay__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPainAnimationPlay called on server.");
		}
		else
		{
			((MisterGrusch)obj).UserCode_RpcPainAnimationPlay__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcActivateMeshes()
	{
		base.transform.Find("FirstScream").GetComponent<AudioSource>().Play();
		base.transform.Find("Pivot_MisterGrusch/NumberCanvas").gameObject.SetActive(value: true);
		numberField.isOverlay = true;
		GameData.Instance.GetComponent<NetworkSpawner>().MisterGruschMusicPlay(1);
		base.transform.Find("Pivot_MisterGrusch/Meshes").gameObject.SetActive(value: true);
		base.transform.Find("Seasonal_MisterSmoke").gameObject.SetActive(value: true);
	}

	protected static void InvokeUserCode_RpcActivateMeshes(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcActivateMeshes called on server.");
		}
		else
		{
			((MisterGrusch)obj).UserCode_RpcActivateMeshes();
		}
	}

	protected void UserCode_RpcLastActivation()
	{
		pivotAnimator.Play("Grusch_Spawning");
		GameData.Instance.GetComponent<NetworkSpawner>().MisterGruschMusicPlay(2);
		base.transform.Find("Pivot_MisterGrusch/NumberCanvas").gameObject.SetActive(value: false);
		base.transform.Find("Pivot_MisterGrusch/HitTrigger").gameObject.SetActive(value: false);
	}

	protected static void InvokeUserCode_RpcLastActivation(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcLastActivation called on server.");
		}
		else
		{
			((MisterGrusch)obj).UserCode_RpcLastActivation();
		}
	}

	protected void UserCode_MiniGruschDeactivation()
	{
		StartCoroutine(MiniGruschEffect());
		Object.Instantiate(poofPrefabOBJ, base.transform.position, Quaternion.identity);
		base.transform.Find("Pivot_MisterGrusch/HitTrigger").gameObject.SetActive(value: false);
		base.transform.Find("FirstScream").GetComponent<AudioSource>().Play();
		pivotAnimator.Play("Grusch_Pain");
	}

	protected static void InvokeUserCode_MiniGruschDeactivation(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC MiniGruschDeactivation called on server.");
		}
		else
		{
			((MisterGrusch)obj).UserCode_MiniGruschDeactivation();
		}
	}

	static MisterGrusch()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(MisterGrusch), "System.Void MisterGrusch::CmdHitFromPlayer()", InvokeUserCode_CmdHitFromPlayer, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(MisterGrusch), "System.Void MisterGrusch::RpcPainAnimationPlay(System.Int32)", InvokeUserCode_RpcPainAnimationPlay__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(MisterGrusch), "System.Void MisterGrusch::RpcActivateMeshes()", InvokeUserCode_RpcActivateMeshes);
		RemoteProcedureCalls.RegisterRpc(typeof(MisterGrusch), "System.Void MisterGrusch::RpcLastActivation()", InvokeUserCode_RpcLastActivation);
		RemoteProcedureCalls.RegisterRpc(typeof(MisterGrusch), "System.Void MisterGrusch::MiniGruschDeactivation()", InvokeUserCode_MiniGruschDeactivation);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteBool(isAMiniGrusch);
			writer.WriteInt(hits);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteBool(isAMiniGrusch);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(hits);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref isAMiniGrusch, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref hits, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref isAMiniGrusch, null, reader.ReadBool());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref hits, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MouseLookAdvanced
using UnityEngine;

[AddComponentMenu("Camera-Control/Mouse Look")]
public class MouseLookAdvanced : MonoBehaviour
{
	public float sensitivityX = 5f;

	public float sensitivityY = 5f;

	public float minimumX = -360f;

	public float maximumX = 360f;

	public float minimumY = -90f;

	public float maximumY = 90f;

	public float smoothSpeed = 20f;

	private float verticalAcceleration;

	private float rotationX;

	private float smoothRotationX;

	private float rotationY;

	private float smoothRotationY;

	private Vector3 vMousePos;

	public float Speed = 100f;

	private void Start()
	{
		rotationY = 0f - base.transform.localEulerAngles.x;
		rotationX = base.transform.localEulerAngles.y;
		smoothRotationX = base.transform.localEulerAngles.y;
		smoothRotationY = 0f - base.transform.localEulerAngles.x;
	}

	private void Update()
	{
		verticalAcceleration = 0f;
		if (Input.GetMouseButtonDown(1))
		{
			if (Cursor.lockState == CursorLockMode.Locked)
			{
				Cursor.lockState = CursorLockMode.None;
			}
			else
			{
				Cursor.lockState = CursorLockMode.Locked;
			}
			Cursor.visible = !Cursor.visible;
		}
		if (Input.GetKey(KeyCode.Space))
		{
			verticalAcceleration = 1f;
		}
		if (Input.GetKey(KeyCode.LeftShift))
		{
			verticalAcceleration = -1f;
		}
		if (Cursor.lockState == CursorLockMode.Locked)
		{
			rotationX += Input.GetAxis("Mouse X") * sensitivityX;
			rotationY += Input.GetAxis("Mouse Y") * sensitivityY;
			rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);
			smoothRotationX += (rotationX - smoothRotationX) * smoothSpeed * Time.smoothDeltaTime;
			smoothRotationY += (rotationY - smoothRotationY) * smoothSpeed * Time.smoothDeltaTime;
			base.transform.localEulerAngles = new Vector3(0f - smoothRotationY, smoothRotationX, 0f);
			Vector3 vector = new Vector3(Input.GetAxis("Horizontal"), 0f, Input.GetAxis("Vertical"));
			Vector3 vector2 = base.transform.rotation * vector;
			base.transform.position += vector2 * Speed * Time.smoothDeltaTime;
			base.transform.position += new Vector3(0f, Speed / 2f * verticalAcceleration * Time.smoothDeltaTime, 0f);
			base.transform.position += base.transform.rotation * Vector3.forward * Input.GetAxis("Mouse ScrollWheel") * 200f;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MovePath
using System;
using UnityEngine;

[Serializable]
public class MovePath : MonoBehaviour
{
	[SerializeField]
	public Vector3 startPos;

	[SerializeField]
	public Vector3 finishPos;

	[SerializeField]
	public int w;

	[SerializeField]
	public int targetPoint;

	[SerializeField]
	public int targetPointsTotal;

	[SerializeField]
	public string animName;

	[SerializeField]
	public float walkSpeed;

	[SerializeField]
	public float runSpeed;

	[SerializeField]
	public bool loop;

	[SerializeField]
	public bool forward;

	[SerializeField]
	public GameObject walkPath;

	[HideInInspector]
	public float randXFinish;

	[HideInInspector]
	public float randZFinish;

	[SerializeField]
	[Tooltip("Set your animation speed / Установить свою скорость анимации?")]
	private bool _overrideDefaultAnimationMultiplier;

	[SerializeField]
	[Tooltip("Speed animation walking / Скорость анимации ходьбы")]
	private float _customWalkAnimationMultiplier = 1f;

	[SerializeField]
	[Tooltip("Running animation speed / Скорость анимации бега")]
	private float _customRunAnimationMultiplier = 1f;

	public void InitializeAnimation(bool overrideAnimation, float walk, float run)
	{
		_overrideDefaultAnimationMultiplier = overrideAnimation;
		_customWalkAnimationMultiplier = walk;
		_customRunAnimationMultiplier = run;
	}

	public void MyStart(int _w, int _i, string anim, bool _loop, bool _forward, float _walkSpeed, float _runSpeed)
	{
		forward = _forward;
		walkSpeed = _walkSpeed;
		runSpeed = _runSpeed;
		WalkPath component = walkPath.GetComponent<WalkPath>();
		w = _w;
		targetPointsTotal = component.getPointsTotal(0) - 2;
		loop = _loop;
		animName = anim;
		if (loop)
		{
			if (_i < targetPointsTotal && _i > 0)
			{
				if (forward)
				{
					targetPoint = _i + 1;
					finishPos = component.getNextPoint(w, _i + 1);
				}
				else
				{
					targetPoint = _i;
					finishPos = component.getNextPoint(w, _i);
				}
			}
			else if (forward)
			{
				targetPoint = 1;
				finishPos = component.getNextPoint(w, 1);
			}
			else
			{
				targetPoint = targetPointsTotal;
				finishPos = component.getNextPoint(w, targetPointsTotal);
			}
		}
		else if (forward)
		{
			targetPoint = _i + 1;
			finishPos = component.getNextPoint(w, _i + 1);
		}
		else
		{
			targetPoint = _i;
			finishPos = component.getNextPoint(w, _i);
		}
	}

	public void SetLookPosition()
	{
		Vector3 worldPosition = new Vector3(finishPos.x, base.transform.position.y, finishPos.z);
		base.transform.LookAt(worldPosition);
	}

	private void Start()
	{
		Animator component = GetComponent<Animator>();
		component.CrossFade(animName, 0.1f, 0, UnityEngine.Random.Range(0f, 1f));
		if (animName == "walk")
		{
			if (_overrideDefaultAnimationMultiplier)
			{
				component.speed = walkSpeed * _customWalkAnimationMultiplier;
			}
			else
			{
				component.speed = walkSpeed * 1.2f;
			}
		}
		else if (animName == "run")
		{
			if (_overrideDefaultAnimationMultiplier)
			{
				component.speed = runSpeed * _customRunAnimationMultiplier;
			}
			else
			{
				component.speed = runSpeed / 3f;
			}
		}
	}

	private void Update()
	{
		if (Physics.Raycast(base.transform.position + new Vector3(0f, 2f, 0f), -base.transform.up, out var hitInfo))
		{
			finishPos.y = hitInfo.point.y;
			base.transform.position = new Vector3(base.transform.position.x, hitInfo.point.y, base.transform.position.z);
		}
		Vector3 vector = new Vector3(finishPos.x + randXFinish, finishPos.y, finishPos.z + randZFinish);
		Vector3 vector2 = new Vector3(vector.x, base.transform.position.y, vector.z);
		WalkPath component = walkPath.GetComponent<WalkPath>();
		float num = Vector3.Distance(Vector3.ProjectOnPlane(base.transform.position, Vector3.up), Vector3.ProjectOnPlane(vector, Vector3.up));
		if (num < 0.2f && animName == "walk" && (loop || (!loop && targetPoint > 0 && targetPoint < targetPointsTotal)))
		{
			if (forward)
			{
				vector2 = ((targetPoint >= targetPointsTotal) ? component.getNextPoint(w, 0) : component.getNextPoint(w, targetPoint + 1));
				vector2.y = base.transform.position.y;
			}
			else
			{
				vector2 = ((targetPoint <= 0) ? component.getNextPoint(w, targetPointsTotal) : component.getNextPoint(w, targetPoint - 1));
				vector2.y = base.transform.position.y;
			}
		}
		if (num < 0.5f && animName == "run" && (loop || (!loop && targetPoint > 0 && targetPoint < targetPointsTotal)))
		{
			if (forward)
			{
				vector2 = ((targetPoint >= targetPointsTotal) ? component.getNextPoint(w, 0) : component.getNextPoint(w, targetPoint + 1));
				vector2.y = base.transform.position.y;
			}
			else
			{
				vector2 = ((targetPoint <= 0) ? component.getNextPoint(w, targetPointsTotal) : component.getNextPoint(w, targetPoint - 1));
				vector2.y = base.transform.position.y;
			}
		}
		Vector3 vector3 = vector2 - base.transform.position;
		if (vector3 != Vector3.zero)
		{
			Vector3 zero = Vector3.zero;
			zero = Vector3.RotateTowards(base.transform.forward, vector3, 2f * Time.deltaTime, 0f);
			base.transform.rotation = Quaternion.LookRotation(zero);
		}
		if (num > 1f)
		{
			if (Time.deltaTime > 0f)
			{
				base.transform.position = Vector3.MoveTowards(base.transform.position, finishPos, Time.deltaTime * 1f * ((animName == "walk") ? walkSpeed : runSpeed));
			}
		}
		else if (num <= 1f && forward)
		{
			if (targetPoint != targetPointsTotal)
			{
				targetPoint++;
				finishPos = component.getNextPoint(w, targetPoint);
			}
			else if (targetPoint == targetPointsTotal)
			{
				if (loop)
				{
					finishPos = component.getStartPoint(w);
					targetPoint = 0;
				}
				else
				{
					component.SpawnOnePeople(w, forward, walkSpeed, runSpeed);
					UnityEngine.Object.Destroy(base.gameObject);
				}
			}
		}
		else
		{
			if (!(num <= 1f) || forward)
			{
				return;
			}
			if (targetPoint > 0)
			{
				targetPoint--;
				finishPos = component.getNextPoint(w, targetPoint);
			}
			else if (targetPoint == 0)
			{
				if (loop)
				{
					finishPos = component.getNextPoint(w, targetPointsTotal);
					targetPoint = targetPointsTotal;
				}
				else
				{
					component.SpawnOnePeople(w, forward, walkSpeed, runSpeed);
					UnityEngine.Object.Destroy(base.gameObject);
				}
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MultiplayerInitialization
using System.Collections;
using HutongGames.PlayMaker;
using Mirror;
using StarterAssets;
using TMPro;
using UnityEngine;

public class MultiplayerInitialization : NetworkBehaviour
{
	private FsmGameObject masterPlayerOBJ;

	private PlayerObjectController playerObjectController;

	private CapsuleCollider capsuleCollider;

	public bool IsLocalPlayer;

	private void Start()
	{
		if (base.isLocalPlayer)
		{
			EnableLocalBehaviours();
		}
		else
		{
			capsuleCollider = GetComponent<CapsuleCollider>();
			capsuleCollider.enabled = true;
			base.transform.Find("OtherPlayerBehaviours").gameObject.SetActive(value: true);
			StartCoroutine(SetNameCoroutine());
		}
		if (base.isServer || base.isLocalPlayer)
		{
			GetComponent<PlayerPermissions>().enabled = true;
		}
	}

	public void EnableLocalBehaviours()
	{
		IsLocalPlayer = true;
		GetComponent<CharacterController>().enabled = true;
		GetComponent<FirstPersonController>().enabled = true;
		GetComponent<FirstPersonTransform>().enabled = true;
		GetComponent<PlayerCrouch>().enabled = true;
		base.transform.Find("ExtraLocalBehaviours").gameObject.SetActive(value: true);
		masterPlayerOBJ = FsmVariables.GlobalVariables.FindFsmGameObject("MasterPlayerOBJ");
		masterPlayerOBJ.Value = base.transform.gameObject;
	}

	private IEnumerator SetNameCoroutine()
	{
		PlayerObjectController pController = GetComponent<PlayerObjectController>();
		string playerName = "";
		while (playerName == "")
		{
			playerName = pController.PlayerName;
			yield return null;
		}
		base.transform.Find("PlayerCanvas").gameObject.SetActive(value: true);
		base.transform.Find("PlayerCanvas/PlayerName").GetComponent<TextMeshProUGUI>().text = playerName;
		base.transform.Find("PlayerCanvas/PlayerName").GetComponent<TextMeshProUGUI>().isOverlay = true;
		yield return null;
		if (base.isServer && (bool)LobbyController.Instance)
		{
			PlayMakerFSM component = LobbyController.Instance.ChatContainerOBJ.GetComponent<PlayMakerFSM>();
			component.FsmVariables.GetFsmString("Message").Value = LocalizationManager.instance.GetLocalizationString("nplayer") + playerName;
			component.SendEvent("Send_Data");
		}
		if (base.isServer && (bool)GameCanvas.Instance && GameCanvas.Instance.automaticallyRemoveP)
		{
			GetComponent<PlayerPermissions>().RemoveAllP();
		}
	}

	public override bool Weaved()
	{
		return true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// NetworkGameBehaviors
using System.Runtime.InteropServices;
using Dissonance.Integrations.MirrorIgnorance;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class NetworkGameBehaviors : NetworkBehaviour
{
	[SyncVar]
	public bool voiceChatEnabled;

	[Space(10f)]
	public GameObject voiceChatMainPrefab;

	public CustomNetworkManager networkManager;

	private GameObject createdVoiceChatMainOBJ;

	public bool NetworkvoiceChatEnabled
	{
		get
		{
			return voiceChatEnabled;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref voiceChatEnabled, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		if (voiceChatEnabled && !base.isServer)
		{
			CmdRefreshStatus();
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdServerEnableVoiceChat()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void NetworkGameBehaviors::CmdServerEnableVoiceChat()", 618377256, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	private void CmdRefreshStatus()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void NetworkGameBehaviors::CmdRefreshStatus()", 297219801, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcEnableVoiceChat()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void NetworkGameBehaviors::RpcEnableVoiceChat()", -1595055040, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void MainBehaviour()
	{
		if (!createdVoiceChatMainOBJ)
		{
			createdVoiceChatMainOBJ = Object.Instantiate(voiceChatMainPrefab);
		}
		AddVoiceChatProximityComponents();
	}

	private void AddVoiceChatProximityComponents()
	{
		foreach (PlayerObjectController gamePlayer in networkManager.GamePlayers)
		{
			if (!gamePlayer.GetComponent<MirrorIgnorancePlayer>())
			{
				gamePlayer.gameObject.AddComponent<MirrorIgnorancePlayer>();
			}
		}
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdServerEnableVoiceChat()
	{
		if (base.isServer && !voiceChatEnabled)
		{
			NetworkvoiceChatEnabled = true;
			RpcEnableVoiceChat();
		}
	}

	protected static void InvokeUserCode_CmdServerEnableVoiceChat(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdServerEnableVoiceChat called on client.");
		}
		else
		{
			((NetworkGameBehaviors)obj).UserCode_CmdServerEnableVoiceChat();
		}
	}

	protected void UserCode_CmdRefreshStatus()
	{
		RpcEnableVoiceChat();
	}

	protected static void InvokeUserCode_CmdRefreshStatus(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRefreshStatus called on client.");
		}
		else
		{
			((NetworkGameBehaviors)obj).UserCode_CmdRefreshStatus();
		}
	}

	protected void UserCode_RpcEnableVoiceChat()
	{
		MainBehaviour();
	}

	protected static void InvokeUserCode_RpcEnableVoiceChat(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcEnableVoiceChat called on server.");
		}
		else
		{
			((NetworkGameBehaviors)obj).UserCode_RpcEnableVoiceChat();
		}
	}

	static NetworkGameBehaviors()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkGameBehaviors), "System.Void NetworkGameBehaviors::CmdServerEnableVoiceChat()", InvokeUserCode_CmdServerEnableVoiceChat, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkGameBehaviors), "System.Void NetworkGameBehaviors::CmdRefreshStatus()", InvokeUserCode_CmdRefreshStatus, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(NetworkGameBehaviors), "System.Void NetworkGameBehaviors::RpcEnableVoiceChat()", InvokeUserCode_RpcEnableVoiceChat);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteBool(voiceChatEnabled);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteBool(voiceChatEnabled);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref voiceChatEnabled, null, reader.ReadBool());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref voiceChatEnabled, null, reader.ReadBool());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// NetworkSpawner
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Threading;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class NetworkSpawner : NetworkBehaviour
{
	[SyncVar]
	public string SuperMarketName = "Supermarket";

	[SyncVar]
	public Color SuperMarketColor = new Color(155f, 255f, 11f);

	public GameObject levelPropsOBJ;

	public GameObject containerParentOBJ;

	public GameObject containerPrefabOBJ;

	public GameObject trayPrefabOBJ;

	public GameObject orderBoxPrefabOBJ;

	public GameObject balePrefabOBJ;

	private GameObject currentTextContainerOBJ;

	[Space(10f)]
	public GameObject[] buildables;

	public GameObject[] props;

	public GameObject[] decorationProps;

	[Space(10f)]
	private string[] lettersArray = new string[27]
	{
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
		"K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",
		"U", "V", "W", "X", "Y", "Z", " "
	};

	public GameObject[] lettersPrefabsArray;

	public GameObject[] boxesPrefabsArray;

	[Space(10f)]
	public GameObject productAnimationPrefabOBJ;

	[Space(10f)]
	public GameObject ghostsSpawnpoint;

	public GameObject ghostPrefabOBJ;

	public Color[] ghostsColors;

	private bool ghostSpawned;

	[Space(10f)]
	public GameObject misterGruschPrefabOBJ;

	public GameObject gruschesParentOBJ;

	public PlayMakerFSM musicFSM;

	public bool isSaving;

	public bool hasGeneratedOrganizers;

	private int[] organizersIDs = new int[6] { 198, 199, 200, 201, 202, 203 };

	private Vector3[] organizersPositions = new Vector3[6]
	{
		new Vector3(10.96f, 0f, 2.55f),
		new Vector3(14.25f, 0f, 0.376f),
		new Vector3(16.351f, 0f, 3.155f),
		new Vector3(11.76131f, 0f, 2.55f),
		new Vector3(14.072f, 0f, -2.497f),
		new Vector3(10.038f, 0f, 2.425f)
	};

	private Vector3[] organizersRotation = new Vector3[6]
	{
		new Vector3(0f, 180f, 0f),
		Vector3.zero,
		new Vector3(0f, 180f, 0f),
		new Vector3(0f, 180f, 0f),
		Vector3.zero,
		new Vector3(0f, 180f, 0f)
	};

	public List<GameObject> camerasList = new List<GameObject>();

	public List<GameObject> speakersList = new List<GameObject>();

	private bool runningCoroutine;

	public string NetworkSuperMarketName
	{
		get
		{
			return SuperMarketName;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref SuperMarketName, 1uL, null);
		}
	}

	public Color NetworkSuperMarketColor
	{
		get
		{
			return SuperMarketColor;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref SuperMarketColor, 2uL, null);
		}
	}

	public override void OnStartClient()
	{
		UpdateSupermarketName(SuperMarketName);
		TurnSupermarketLettersEmission(enable: false);
	}

	public void AddCameraObject(GameObject cameraOBJ)
	{
		camerasList.Add(cameraOBJ);
	}

	public void RemoveCameraObjects()
	{
		if (camerasList.Count > 0 && !runningCoroutine && base.gameObject.activeSelf)
		{
			StartCoroutine(DelayedCameraListDelete());
		}
	}

	private IEnumerator DelayedCameraListDelete()
	{
		runningCoroutine = true;
		yield return null;
		camerasList.RemoveAll((GameObject x) => x == null);
		runningCoroutine = false;
	}

	public void AddSpeakerObject(GameObject cameraOBJ)
	{
		speakersList.Add(cameraOBJ);
	}

	public void RemoveSpeakerObjects()
	{
		if (speakersList.Count > 0 && !runningCoroutine && base.gameObject.activeSelf)
		{
			StartCoroutine(DelayedSpeakerListDelete());
		}
	}

	private IEnumerator DelayedSpeakerListDelete()
	{
		runningCoroutine = true;
		yield return null;
		speakersList.RemoveAll((GameObject x) => x == null);
		runningCoroutine = false;
	}

	[ClientRpc]
	public void RpcProductAnimation(int productID, Vector3 startPosition, Vector3 destination)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteVector3(startPosition);
		writer.WriteVector3(destination);
		SendRPCInternal("System.Void NetworkSpawner::RpcProductAnimation(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)", 1618108428, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSpawn(int prefabID, Vector3 pos, Vector3 rot)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(prefabID);
		writer.WriteVector3(pos);
		writer.WriteVector3(rot);
		SendCommandInternal("System.Void NetworkSpawner::CmdSpawn(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)", -503450129, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSpawnProp(int prefabID, Vector3 pos, Vector3 rot)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(prefabID);
		writer.WriteVector3(pos);
		writer.WriteVector3(rot);
		SendCommandInternal("System.Void NetworkSpawner::CmdSpawnProp(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)", -1804378598, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSpawnDecoration(int prefabID, Vector3 pos, Vector3 rot)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(prefabID);
		writer.WriteVector3(pos);
		writer.WriteVector3(rot);
		SendCommandInternal("System.Void NetworkSpawner::CmdSpawnDecoration(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)", -1893520475, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void GetMoveData(GameObject OBJToMove, Vector3 pos, Vector3 rot)
	{
		if (OBJToMove.GetComponent<NetworkIdentity>() != null)
		{
			CmdObjectMove(OBJToMove, pos, Quaternion.Euler(rot));
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdObjectMove(GameObject objToMove, Vector3 pos, Quaternion rot)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(objToMove);
		writer.WriteVector3(pos);
		writer.WriteQuaternion(rot);
		SendCommandInternal("System.Void NetworkSpawner::CmdObjectMove(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)", -1401052095, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateObjectOnClients(GameObject objToMove, Vector3 pos, Quaternion rot)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(objToMove);
		writer.WriteVector3(pos);
		writer.WriteQuaternion(rot);
		SendRPCInternal("System.Void NetworkSpawner::RpcUpdateObjectOnClients(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)", -104213225, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSpawnBox(int boxID, Vector3 pos, int ProductID, int numberOfProducts)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(boxID);
		writer.WriteVector3(pos);
		writer.WriteInt(ProductID);
		writer.WriteInt(numberOfProducts);
		SendCommandInternal("System.Void NetworkSpawner::CmdSpawnBox(System.Int32,UnityEngine.Vector3,System.Int32,System.Int32)", -1959037611, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSpawnTrayFromPlayer(Vector3 spawnpoint, string stringData, float YRotation)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(spawnpoint);
		writer.WriteString(stringData);
		writer.WriteFloat(YRotation);
		SendCommandInternal("System.Void NetworkSpawner::CmdSpawnTrayFromPlayer(UnityEngine.Vector3,System.String,System.Single)", 1285260007, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSpawnOrderBoxFromPlayer(Vector3 spawnpoint, float YRotation, string orderNumberData, string customerNameData, string itemsData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(spawnpoint);
		writer.WriteFloat(YRotation);
		writer.WriteString(orderNumberData);
		writer.WriteString(customerNameData);
		writer.WriteString(itemsData);
		SendCommandInternal("System.Void NetworkSpawner::CmdSpawnOrderBoxFromPlayer(UnityEngine.Vector3,System.Single,System.String,System.String,System.String)", -1007319308, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdDestroyBox(GameObject BoxToDestroy)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(BoxToDestroy);
		SendCommandInternal("System.Void NetworkSpawner::CmdDestroyBox(UnityEngine.GameObject)", 571244344, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void EmployeeSpawnBale(Vector3 spawnpoint)
	{
		NetworkServer.Spawn(Object.Instantiate(balePrefabOBJ, spawnpoint, Quaternion.identity));
	}

	public void EmployeeDestroyBox(GameObject BoxToDestroy)
	{
		NetworkServer.Destroy(BoxToDestroy);
	}

	[Command(requiresAuthority = false)]
	public void CmdSetSupermarketText(string SuperMarketText)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(SuperMarketText);
		SendCommandInternal("System.Void NetworkSpawner::CmdSetSupermarketText(System.String)", -727745423, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateSuperMarketName(string SuperMarketText)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(SuperMarketText);
		SendRPCInternal("System.Void NetworkSpawner::RpcUpdateSuperMarketName(System.String)", -700807513, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdSetSupermarketColor(Color SMarketColor)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteColor(SMarketColor);
		SendCommandInternal("System.Void NetworkSpawner::CmdSetSupermarketColor(UnityEngine.Color)", -824406067, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateSuperMarketColor(Color SMarketColor)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteColor(SMarketColor);
		SendRPCInternal("System.Void NetworkSpawner::RpcUpdateSuperMarketColor(UnityEngine.Color)", -1299855253, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void UpdateSuperMarketColor(Color SMarketColor)
	{
		if (!currentTextContainerOBJ)
		{
			return;
		}
		foreach (Transform item in currentTextContainerOBJ.transform)
		{
			item.GetComponent<MeshRenderer>().material.SetColor("_BaseColor", SMarketColor);
			item.GetComponent<MeshRenderer>().material.SetColor("_EmissionColor", SMarketColor * 3.5f);
		}
	}

	public void TurnSupermarketLettersEmission(bool enable)
	{
		if (!currentTextContainerOBJ)
		{
			return;
		}
		if (enable)
		{
			foreach (Transform item in currentTextContainerOBJ.transform)
			{
				item.GetComponent<MeshRenderer>().material.EnableKeyword("_EMISSION");
			}
			return;
		}
		foreach (Transform item2 in currentTextContainerOBJ.transform)
		{
			item2.GetComponent<MeshRenderer>().material.DisableKeyword("_EMISSION");
		}
	}

	private void UpdateSupermarketName(string SuperMarketText)
	{
		if ((bool)currentTextContainerOBJ)
		{
			Object.Destroy(currentTextContainerOBJ);
		}
		currentTextContainerOBJ = Object.Instantiate(containerPrefabOBJ, containerParentOBJ.transform);
		float num = 0f;
		float num2 = 1f / 9f;
		float num3 = 0f;
		bool flag = true;
		SuperMarketText = SuperMarketText.ToUpper();
		string text = SuperMarketText;
		for (int i = 0; i < text.Length; i++)
		{
			string text2 = text[i].ToString();
			for (int j = 0; j < lettersArray.Length; j++)
			{
				string text3 = lettersArray[j];
				if (text2 == text3)
				{
					GameObject obj = lettersPrefabsArray[j];
					float x = obj.GetComponent<BoxCollider>().size.x;
					if (!flag)
					{
						num += (num3 / 2f + num2 + x / 2f) * 2.25f;
					}
					flag = false;
					GameObject obj2 = Object.Instantiate(obj, currentTextContainerOBJ.transform);
					obj2.transform.localPosition = new Vector3(num, 0f, 0f);
					obj2.transform.rotation = Quaternion.Euler(new Vector3(0f, 180f, 0f));
					obj2.GetComponent<MeshRenderer>().material.SetColor("_BaseColor", SuperMarketColor);
					obj2.GetComponent<MeshRenderer>().material.SetColor("_EmissionColor", SuperMarketColor * 3.5f);
					num3 = x;
					break;
				}
			}
		}
		currentTextContainerOBJ.transform.position -= new Vector3(num / 2f, 0f, 0f);
		if (GetComponent<GameData>().timeOfDay < 19f)
		{
			TurnSupermarketLettersEmission(enable: false);
		}
	}

	public void HalloweenGhostSpawn()
	{
		if (base.isServer && !ghostSpawned)
		{
			StartCoroutine(CreateGhosts());
		}
	}

	private IEnumerator CreateGhosts()
	{
		ghostSpawned = true;
		int maxGhosts = 1;
		if (NetworkServer.connections.Count > 1)
		{
			maxGhosts = Mathf.Clamp(GameData.Instance.gameDay / 7, 1, 6 + NetworkServer.connections.Count);
		}
		while (maxGhosts > 0 && GameData.Instance.timeOfDay > 18f)
		{
			maxGhosts--;
			yield return new WaitForSeconds(Random.Range(30f, 90f));
			Vector3 position = ghostsSpawnpoint.transform.GetChild(Random.Range(0, ghostsSpawnpoint.transform.childCount)).transform.position;
			GameObject obj = Object.Instantiate(ghostPrefabOBJ, position, Quaternion.identity);
			HalloweenGhost component = obj.GetComponent<HalloweenGhost>();
			component.NetworkghostColor = ghostsColors[Random.Range(0, ghostsColors.Length)];
			component.hits = Random.Range(3, 5);
			NetworkServer.Spawn(obj);
			yield return null;
		}
		ghostSpawned = false;
		yield return null;
	}

	public void MisterGruschSpawn()
	{
		if (base.isServer)
		{
			GameObject gameObject = NPC_Manager.Instance.transform.Find("NPC_Spawnpoints").gameObject;
			Transform child = gameObject.transform.GetChild(Random.Range(0, gameObject.transform.childCount));
			GameObject obj = Object.Instantiate(misterGruschPrefabOBJ, child.position, Quaternion.identity);
			obj.transform.SetParent(gruschesParentOBJ.transform);
			NetworkServer.Spawn(obj);
		}
	}

	public void CallMisterCoroutine(Vector3 misterPosition)
	{
		StartCoroutine(MiniGruschesSpawn(misterPosition));
	}

	private IEnumerator MiniGruschesSpawn(Vector3 misterPosition)
	{
		WaitForSeconds waitTime = new WaitForSeconds(0.2f);
		int numberOfMiniesToSpawn = 10 + GameData.Instance.difficulty + NetworkServer.connections.Count * 2;
		numberOfMiniesToSpawn = Mathf.Clamp(numberOfMiniesToSpawn, 3, 30);
		while (numberOfMiniesToSpawn > 0)
		{
			GameObject obj = Object.Instantiate(misterGruschPrefabOBJ, misterPosition, Quaternion.identity);
			obj.transform.SetParent(gruschesParentOBJ.transform);
			obj.transform.localScale = new Vector3(0.4f, 0.4f, 0.4f);
			obj.GetComponent<MisterGrusch>().Networkhits = 1;
			obj.GetComponent<MisterGrusch>().NetworkisAMiniGrusch = true;
			obj.transform.Find("Pivot_MisterGrusch/Meshes").gameObject.SetActive(value: true);
			NetworkServer.Spawn(obj);
			numberOfMiniesToSpawn--;
			yield return waitTime;
		}
		yield return null;
	}

	public void MisterGruschMusicPlay(int index)
	{
		musicFSM.FsmVariables.GetFsmInt("Z_GruschIndex").Value = index;
		musicFSM.SendEvent("Send_Data_3");
	}

	public override void OnStartServer()
	{
		bool value = FsmVariables.GlobalVariables.GetFsmBool("LoadingFromAutosave").Value;
		StartCoroutine(LoadSpawnCoroutine(value));
	}

	private IEnumerator LoadSpawnCoroutine(bool autosave)
	{
		string filepath = string.Concat(str2: (!autosave) ? FsmVariables.GlobalVariables.GetFsmString("CurrentFilename").Value : "Autosaves/Autosave001.es3", str0: Application.persistentDataPath, str1: "/");
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		ES3.CacheFile(filepath, settings);
		ES3Settings settings2 = new ES3Settings(filepath, ES3.Location.Cache);
		CultureInfo cultureInfo = new CultureInfo(Thread.CurrentThread.CurrentCulture.Name);
		if (cultureInfo.NumberFormat.NumberDecimalSeparator != ",")
		{
			cultureInfo.NumberFormat.NumberDecimalSeparator = ",";
			Thread.CurrentThread.CurrentCulture = cultureInfo;
		}
		for (int i = 0; i < 5000; i++)
		{
			string key = "propdata" + i;
			string key2 = "propinfoproduct" + i;
			if (!ES3.KeyExists(key, filepath, settings2))
			{
				break;
			}
			string[] array = ES3.Load<string>(key, filepath, settings2).Split(char.Parse("|"));
			int index = int.Parse(array[0]);
			int num = int.Parse(array[1]);
			float x = float.Parse(array[2]);
			float y = float.Parse(array[3]);
			float z = float.Parse(array[4]);
			float y2 = float.Parse(array[5]);
			GameObject obj2 = Object.Instantiate(buildables[num]);
			obj2.transform.SetParent(levelPropsOBJ.transform.GetChild(index));
			obj2.transform.position = new Vector3(x, y, z);
			obj2.transform.rotation = Quaternion.Euler(new Vector3(0f, y2, 0f));
			int[] networkproductInfoArray = ES3.Load<int[]>(key2, filepath, settings2);
			obj2.GetComponent<Data_Container>().NetworkproductInfoArray = networkproductInfoArray;
			NetworkServer.Spawn(obj2);
			obj2.GetComponent<Data_Container>().ActivateShelvesFromLoad();
		}
		yield return null;
		for (int j = 0; j < 5000; j++)
		{
			string key3 = "decopropdata" + j;
			if (!ES3.KeyExists(key3, filepath, settings2))
			{
				break;
			}
			string[] array2 = ES3.Load<string>(key3, filepath, settings2).Split(char.Parse("|"));
			int index2 = int.Parse(array2[0]);
			int num2 = int.Parse(array2[1]);
			float x2 = float.Parse(array2[2]);
			float y3 = float.Parse(array2[3]);
			float z2 = float.Parse(array2[4]);
			float y4 = float.Parse(array2[5]);
			GameObject obj3 = decorationProps[num2];
			GameObject gameObject = Object.Instantiate(obj3);
			gameObject.transform.SetParent(levelPropsOBJ.transform.GetChild(index2));
			gameObject.transform.position = new Vector3(x2, y3, z2);
			gameObject.transform.rotation = Quaternion.Euler(new Vector3(0f, y4, 0f));
			if (num2 == 4)
			{
				string[] array3 = ES3.Load<string>("decopropdataextra" + j, filepath, settings2).Split(char.Parse("|"));
				gameObject.GetComponent<DecorationExtraData>().NetworkintValue = int.Parse(array3[0]);
				gameObject.GetComponent<DecorationExtraData>().NetworkstringValue = array3[1];
			}
			if ((bool)obj3.GetComponent<PaintableDecoration>())
			{
				string[] array4 = ES3.Load<string>("decopaintabledata" + j, filepath, settings2).Split(char.Parse("|"));
				gameObject.GetComponent<PaintableDecoration>().NetworkmainValue = int.Parse(array4[0]);
				gameObject.GetComponent<PaintableDecoration>().NetworksecondaryValue = int.Parse(array4[1]);
			}
			if ((bool)obj3.GetComponent<PictureFrameBehaviour>())
			{
				string[] array5 = ES3.Load<string>("decopicturedata" + j, filepath, settings2).Split(char.Parse("|"));
				gameObject.GetComponent<PictureFrameBehaviour>().NetworkdefaultPaintingIndex = int.Parse(array5[0]);
				gameObject.GetComponent<PictureFrameBehaviour>().NetworkpictureSize = new Vector2(float.Parse(array5[1]), float.Parse(array5[2]));
				gameObject.GetComponent<PictureFrameBehaviour>().NetworkpictureURL = array5[3];
			}
			NetworkServer.Spawn(gameObject);
		}
		if (!hasGeneratedOrganizers)
		{
			hasGeneratedOrganizers = true;
			for (int k = 0; k < organizersIDs.Length; k++)
			{
				int num3 = organizersIDs[k];
				GameObject obj4 = Object.Instantiate(decorationProps[num3]);
				obj4.transform.SetParent(levelPropsOBJ.transform.GetChild(7));
				obj4.transform.position = organizersPositions[k];
				obj4.transform.rotation = Quaternion.Euler(organizersRotation[k]);
				NetworkServer.Spawn(obj4);
			}
		}
		if (autosave)
		{
			GetComponent<GameData>().LoadFromAutosave();
		}
	}

	public void SaveProps(bool autosave)
	{
		if (!isSaving)
		{
			StartCoroutine(SavePropsCoroutine(autosave));
		}
	}

	private IEnumerator SavePropsCoroutine(bool autosave)
	{
		isSaving = true;
		GameCanvas.Instance.transform.Find("SavingContainer").gameObject.SetActive(value: true);
		yield return new WaitForSeconds(0.5f);
		int counter = 0;
		string filepath = string.Concat(str2: (!autosave) ? FsmVariables.GlobalVariables.GetFsmString("CurrentFilename").Value : "Autosaves/Autosave001.es3", str0: Application.persistentDataPath, str1: "/");
		ES3Settings cacheSettings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		ES3.CacheFile(filepath, cacheSettings);
		ES3Settings settings = new ES3Settings(filepath, ES3.Location.Cache);
		CultureInfo cultureInfo = new CultureInfo(Thread.CurrentThread.CurrentCulture.Name);
		if (cultureInfo.NumberFormat.NumberDecimalSeparator != ",")
		{
			cultureInfo.NumberFormat.NumberDecimalSeparator = ",";
			Thread.CurrentThread.CurrentCulture = cultureInfo;
		}
		for (int i = 0; i < 4; i++)
		{
			GameObject gameObject = levelPropsOBJ.transform.GetChild(i).gameObject;
			if (gameObject.transform.childCount != 0)
			{
				for (int j = 0; j < gameObject.transform.childCount; j++)
				{
					GameObject gameObject2 = gameObject.transform.GetChild(j).gameObject;
					string value = i + "|" + gameObject2.GetComponent<Data_Container>().containerID + "|" + gameObject2.transform.position.x + "|" + gameObject2.transform.position.y + "|" + gameObject2.transform.position.z + "|" + gameObject2.transform.rotation.eulerAngles.y;
					ES3.Save("propdata" + counter, value, filepath, settings);
					string key = "propinfoproduct" + counter;
					int[] productInfoArray = gameObject2.GetComponent<Data_Container>().productInfoArray;
					ES3.Save(key, productInfoArray, filepath, settings);
					counter++;
				}
			}
		}
		yield return null;
		for (int k = counter; (float)k < float.PositiveInfinity; k++)
		{
			string key2 = "propdata" + counter;
			if (!ES3.KeyExists(key2, filepath, settings))
			{
				break;
			}
			ES3.DeleteKey(key2, filepath, settings);
		}
		yield return null;
		counter = 0;
		int num = 0;
		GameObject parentOBJ2 = levelPropsOBJ.transform.GetChild(7).gameObject;
		for (int l = 0; (float)l < float.PositiveInfinity; l++)
		{
			string key3 = "decopropdata" + num;
			if (!ES3.KeyExists(key3, filepath, settings))
			{
				break;
			}
			ES3.DeleteKey(key3, filepath, settings);
			num++;
		}
		yield return null;
		for (int m = 0; m < parentOBJ2.transform.childCount; m++)
		{
			GameObject gameObject3 = parentOBJ2.transform.GetChild(m).gameObject;
			string value2 = "7|" + gameObject3.GetComponent<BuildableInfo>().decorationID + "|" + gameObject3.transform.position.x + "|" + gameObject3.transform.position.y + "|" + gameObject3.transform.position.z + "|" + gameObject3.transform.rotation.eulerAngles.y;
			ES3.Save("decopropdata" + counter, value2, filepath, settings);
			if (gameObject3.GetComponent<BuildableInfo>().decorationID == 4)
			{
				string key4 = "decopropdataextra" + counter;
				string value3 = gameObject3.GetComponent<DecorationExtraData>().intValue + "|" + gameObject3.GetComponent<DecorationExtraData>().stringValue;
				ES3.Save(key4, value3, filepath, settings);
			}
			if ((bool)gameObject3.GetComponent<PaintableDecoration>())
			{
				string key5 = "decopaintabledata" + counter;
				string value4 = gameObject3.GetComponent<PaintableDecoration>().mainValue + "|" + gameObject3.GetComponent<PaintableDecoration>().secondaryValue;
				ES3.Save(key5, value4, filepath, settings);
			}
			if ((bool)gameObject3.GetComponent<PictureFrameBehaviour>())
			{
				string key6 = "decopicturedata" + counter;
				string value5 = gameObject3.GetComponent<PictureFrameBehaviour>().defaultPaintingIndex + "|" + gameObject3.GetComponent<PictureFrameBehaviour>().pictureSize.x + "|" + gameObject3.GetComponent<PictureFrameBehaviour>().pictureSize.y + "|" + gameObject3.GetComponent<PictureFrameBehaviour>().pictureURL;
				ES3.Save(key6, value5, filepath, settings);
			}
			counter++;
		}
		yield return null;
		ES3.StoreCachedFile(filepath, cacheSettings);
		yield return null;
		GameCanvas.Instance.transform.Find("SavingContainer").gameObject.SetActive(value: false);
		isSaving = false;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_RpcProductAnimation__Int32__Vector3__Vector3(int productID, Vector3 startPosition, Vector3 destination)
	{
		Object.Instantiate(productAnimationPrefabOBJ, startPosition, Quaternion.identity).GetComponent<ProductAnimation>().ExecuteAnimation(productID, destination);
	}

	protected static void InvokeUserCode_RpcProductAnimation__Int32__Vector3__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcProductAnimation called on server.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_RpcProductAnimation__Int32__Vector3__Vector3(reader.ReadInt(), reader.ReadVector3(), reader.ReadVector3());
		}
	}

	protected void UserCode_CmdSpawn__Int32__Vector3__Vector3(int prefabID, Vector3 pos, Vector3 rot)
	{
		GameObject gameObject = buildables[prefabID];
		int cost = gameObject.GetComponent<Data_Container>().cost;
		int parentIndex = gameObject.GetComponent<Data_Container>().parentIndex;
		if ((bool)gameObject.GetComponent<Data_Container>())
		{
			parentIndex = gameObject.GetComponent<Data_Container>().parentIndex;
		}
		GameObject obj = Object.Instantiate(gameObject, pos, Quaternion.Euler(rot));
		obj.transform.SetParent(levelPropsOBJ.transform.GetChild(parentIndex));
		NetworkServer.Spawn(obj);
		GetComponent<GameData>().CmdAlterFunds(-cost);
	}

	protected static void InvokeUserCode_CmdSpawn__Int32__Vector3__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawn called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdSpawn__Int32__Vector3__Vector3(reader.ReadInt(), reader.ReadVector3(), reader.ReadVector3());
		}
	}

	protected void UserCode_CmdSpawnProp__Int32__Vector3__Vector3(int prefabID, Vector3 pos, Vector3 rot)
	{
		GameObject obj = Object.Instantiate(props[prefabID], pos, Quaternion.Euler(rot));
		obj.transform.SetParent(levelPropsOBJ.transform.GetChild(5));
		NetworkServer.Spawn(obj);
	}

	protected static void InvokeUserCode_CmdSpawnProp__Int32__Vector3__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnProp called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdSpawnProp__Int32__Vector3__Vector3(reader.ReadInt(), reader.ReadVector3(), reader.ReadVector3());
		}
	}

	protected void UserCode_CmdSpawnDecoration__Int32__Vector3__Vector3(int prefabID, Vector3 pos, Vector3 rot)
	{
		GameObject obj = Object.Instantiate(decorationProps[prefabID], pos, Quaternion.Euler(rot));
		obj.transform.SetParent(levelPropsOBJ.transform.GetChild(7));
		NetworkServer.Spawn(obj);
	}

	protected static void InvokeUserCode_CmdSpawnDecoration__Int32__Vector3__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnDecoration called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdSpawnDecoration__Int32__Vector3__Vector3(reader.ReadInt(), reader.ReadVector3(), reader.ReadVector3());
		}
	}

	protected void UserCode_CmdObjectMove__GameObject__Vector3__Quaternion(GameObject objToMove, Vector3 pos, Quaternion rot)
	{
		objToMove.transform.position = pos;
		objToMove.transform.rotation = rot;
		RpcUpdateObjectOnClients(objToMove, pos, rot);
	}

	protected static void InvokeUserCode_CmdObjectMove__GameObject__Vector3__Quaternion(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdObjectMove called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdObjectMove__GameObject__Vector3__Quaternion(reader.ReadGameObject(), reader.ReadVector3(), reader.ReadQuaternion());
		}
	}

	protected void UserCode_RpcUpdateObjectOnClients__GameObject__Vector3__Quaternion(GameObject objToMove, Vector3 pos, Quaternion rot)
	{
		objToMove.transform.position = pos;
		objToMove.transform.rotation = rot;
	}

	protected static void InvokeUserCode_RpcUpdateObjectOnClients__GameObject__Vector3__Quaternion(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateObjectOnClients called on server.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_RpcUpdateObjectOnClients__GameObject__Vector3__Quaternion(reader.ReadGameObject(), reader.ReadVector3(), reader.ReadQuaternion());
		}
	}

	protected void UserCode_CmdSpawnBox__Int32__Vector3__Int32__Int32(int boxID, Vector3 pos, int ProductID, int numberOfProducts)
	{
	}

	protected static void InvokeUserCode_CmdSpawnBox__Int32__Vector3__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnBox called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdSpawnBox__Int32__Vector3__Int32__Int32(reader.ReadInt(), reader.ReadVector3(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdSpawnTrayFromPlayer__Vector3__String__Single(Vector3 spawnpoint, string stringData, float YRotation)
	{
		GameObject obj = Object.Instantiate(trayPrefabOBJ, spawnpoint, Quaternion.Euler(new Vector3(0f, YRotation, 0f)));
		obj.GetComponent<TrayData>().NetworkitemsData = stringData;
		NetworkServer.Spawn(obj);
	}

	protected static void InvokeUserCode_CmdSpawnTrayFromPlayer__Vector3__String__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnTrayFromPlayer called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdSpawnTrayFromPlayer__Vector3__String__Single(reader.ReadVector3(), reader.ReadString(), reader.ReadFloat());
		}
	}

	protected void UserCode_CmdSpawnOrderBoxFromPlayer__Vector3__Single__String__String__String(Vector3 spawnpoint, float YRotation, string orderNumberData, string customerNameData, string itemsData)
	{
		GameObject obj = Object.Instantiate(orderBoxPrefabOBJ, spawnpoint, Quaternion.Euler(new Vector3(0f, YRotation, 0f)));
		obj.GetComponent<OrderPackagingBox>().NetworkorderNumberStr = orderNumberData;
		obj.GetComponent<OrderPackagingBox>().NetworkcustomerName = customerNameData;
		obj.GetComponent<OrderPackagingBox>().NetworkitemsInBoxData = itemsData;
		NetworkServer.Spawn(obj);
	}

	protected static void InvokeUserCode_CmdSpawnOrderBoxFromPlayer__Vector3__Single__String__String__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnOrderBoxFromPlayer called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdSpawnOrderBoxFromPlayer__Vector3__Single__String__String__String(reader.ReadVector3(), reader.ReadFloat(), reader.ReadString(), reader.ReadString(), reader.ReadString());
		}
	}

	protected void UserCode_CmdDestroyBox__GameObject(GameObject BoxToDestroy)
	{
		NetworkServer.Destroy(BoxToDestroy);
	}

	protected static void InvokeUserCode_CmdDestroyBox__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdDestroyBox called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdDestroyBox__GameObject(reader.ReadGameObject());
		}
	}

	protected void UserCode_CmdSetSupermarketText__String(string SuperMarketText)
	{
		NetworkSuperMarketName = SuperMarketText;
		RpcUpdateSuperMarketName(SuperMarketText);
	}

	protected static void InvokeUserCode_CmdSetSupermarketText__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetSupermarketText called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdSetSupermarketText__String(reader.ReadString());
		}
	}

	protected void UserCode_RpcUpdateSuperMarketName__String(string SuperMarketText)
	{
		UpdateSupermarketName(SuperMarketText);
	}

	protected static void InvokeUserCode_RpcUpdateSuperMarketName__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateSuperMarketName called on server.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_RpcUpdateSuperMarketName__String(reader.ReadString());
		}
	}

	protected void UserCode_CmdSetSupermarketColor__Color(Color SMarketColor)
	{
		NetworkSuperMarketColor = SMarketColor;
		RpcUpdateSuperMarketColor(SMarketColor);
	}

	protected static void InvokeUserCode_CmdSetSupermarketColor__Color(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetSupermarketColor called on client.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_CmdSetSupermarketColor__Color(reader.ReadColor());
		}
	}

	protected void UserCode_RpcUpdateSuperMarketColor__Color(Color SMarketColor)
	{
		UpdateSuperMarketColor(SMarketColor);
	}

	protected static void InvokeUserCode_RpcUpdateSuperMarketColor__Color(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateSuperMarketColor called on server.");
		}
		else
		{
			((NetworkSpawner)obj).UserCode_RpcUpdateSuperMarketColor__Color(reader.ReadColor());
		}
	}

	static NetworkSpawner()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdSpawn(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)", InvokeUserCode_CmdSpawn__Int32__Vector3__Vector3, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdSpawnProp(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)", InvokeUserCode_CmdSpawnProp__Int32__Vector3__Vector3, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdSpawnDecoration(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)", InvokeUserCode_CmdSpawnDecoration__Int32__Vector3__Vector3, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdObjectMove(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)", InvokeUserCode_CmdObjectMove__GameObject__Vector3__Quaternion, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdSpawnBox(System.Int32,UnityEngine.Vector3,System.Int32,System.Int32)", InvokeUserCode_CmdSpawnBox__Int32__Vector3__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdSpawnTrayFromPlayer(UnityEngine.Vector3,System.String,System.Single)", InvokeUserCode_CmdSpawnTrayFromPlayer__Vector3__String__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdSpawnOrderBoxFromPlayer(UnityEngine.Vector3,System.Single,System.String,System.String,System.String)", InvokeUserCode_CmdSpawnOrderBoxFromPlayer__Vector3__Single__String__String__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdDestroyBox(UnityEngine.GameObject)", InvokeUserCode_CmdDestroyBox__GameObject, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdSetSupermarketText(System.String)", InvokeUserCode_CmdSetSupermarketText__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NetworkSpawner), "System.Void NetworkSpawner::CmdSetSupermarketColor(UnityEngine.Color)", InvokeUserCode_CmdSetSupermarketColor__Color, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(NetworkSpawner), "System.Void NetworkSpawner::RpcProductAnimation(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)", InvokeUserCode_RpcProductAnimation__Int32__Vector3__Vector3);
		RemoteProcedureCalls.RegisterRpc(typeof(NetworkSpawner), "System.Void NetworkSpawner::RpcUpdateObjectOnClients(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)", InvokeUserCode_RpcUpdateObjectOnClients__GameObject__Vector3__Quaternion);
		RemoteProcedureCalls.RegisterRpc(typeof(NetworkSpawner), "System.Void NetworkSpawner::RpcUpdateSuperMarketName(System.String)", InvokeUserCode_RpcUpdateSuperMarketName__String);
		RemoteProcedureCalls.RegisterRpc(typeof(NetworkSpawner), "System.Void NetworkSpawner::RpcUpdateSuperMarketColor(UnityEngine.Color)", InvokeUserCode_RpcUpdateSuperMarketColor__Color);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteString(SuperMarketName);
			writer.WriteColor(SuperMarketColor);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteString(SuperMarketName);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteColor(SuperMarketColor);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref SuperMarketName, null, reader.ReadString());
			GeneratedSyncVarDeserialize(ref SuperMarketColor, null, reader.ReadColor());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref SuperMarketName, null, reader.ReadString());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref SuperMarketColor, null, reader.ReadColor());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// NewBufferSystem
using UnityEngine;

public class NewBufferSystem : MonoBehaviour
{
	public int[] bValues;

	public int[] tValues;

	public bool[] unlValues;

	public void AdaptNewBufferValue()
	{
		string text = Application.persistentDataPath + "/z_altbuffervalues1.es3";
		if (ES3.FileExists(text))
		{
			return;
		}
		string text2 = Application.persistentDataPath + "/buffervalues1.es3";
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		ES3.CacheFile(text2, settings);
		ES3Settings settings2 = new ES3Settings(text2, ES3.Location.Cache);
		if (ES3.FileExists(text2))
		{
			if (ES3.KeyExists("bValues", text2, settings2))
			{
				bValues = ES3.Load<int[]>("bValues", text2, settings2);
			}
			if (ES3.KeyExists("tValues", text2, settings2))
			{
				tValues = ES3.Load<int[]>("tValues", text2, settings2);
			}
			if (ES3.KeyExists("unlValues", text2, settings2))
			{
				unlValues = ES3.Load<bool[]>("unlValues", text2, settings2);
			}
			ES3Settings settings3 = new ES3Settings(text, ES3.EncryptionType.None, "");
			ES3.Save("bValues", bValues, text, settings3);
			ES3.Save("tValues", tValues, text, settings3);
			ES3.Save("unlValues", unlValues, text, settings3);
		}
		else
		{
			ES3Settings settings4 = new ES3Settings(text, ES3.EncryptionType.None, "");
			ES3.Save("bValues", bValues, text, settings4);
			ES3.Save("tValues", tValues, text, settings4);
			ES3.Save("unlValues", unlValues, text, settings4);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// NewPath
using System.Collections.Generic;
using UnityEngine;

public class NewPath : MonoBehaviour
{
	private List<Vector3> points = new List<Vector3>();

	public int pointLenght;

	public Vector3 mousePos;

	public string pathName;

	public bool errors;

	public bool exit;

	public GameObject par;

	[HideInInspector]
	[SerializeField]
	public PathType PathType;

	public List<Vector3> PointsGet()
	{
		return points;
	}

	public void PointSet(int index, Vector3 pos)
	{
		points.Add(pos);
		if (par == null)
		{
			par = new GameObject();
			par.name = "New path points";
			par.transform.parent = base.gameObject.transform;
		}
		GameObject obj = Object.Instantiate(GameObject.Find("Population System").GetComponent<PopulationSystemManager>().pointPrefab, pos, Quaternion.identity);
		obj.name = "p" + index;
		obj.transform.parent = par.transform;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// NPC_CustomerInfo
using System.Collections.Generic;
using UnityEngine;

public class NPC_CustomerInfo : MonoBehaviour
{
	public float[] compensatedWeightChances = new float[3] { 1f, 0f, 0f };

	public float[] necessitiesChances = new float[11]
	{
		0f, 0.25f, 0.1f, 0.1f, 0f, 0.15f, 0.05f, 0f, 0.15f, 0f,
		1f
	};

	public List<int> preferedPremiumIndexes;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// NPC_Info
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Animations.Rigging;

public class NPC_Info : NetworkBehaviour
{
	[SyncVar]
	public int NPCID;

	[SyncVar]
	public bool isEmployee;

	[SyncVar]
	public bool isCustomer;

	[SyncVar]
	public int boxProductID;

	[SyncVar]
	public int boxNumberOfProducts;

	[SyncVar]
	public string NPCName;

	[SyncVar(hook = "ChangeEmployeeHat")]
	public int hatID;

	public int state;

	public bool isAThief;

	public bool alreadyGaveMoney;

	public bool hasComplainedAboutFilth;

	public bool hasSlipped;

	public int shelfThatHasTheItem;

	public GameObject halloweenHeadPrefabOBJ;

	public bool surveillanceChecked;

	public bool isBystander;

	[Space(10f)]
	public int taskPriority;

	public float productItemPlaceWait = 0.5f;

	public int[] productAvailableArray;

	public int equippedItem;

	public GameObject dummyBoxPrefab;

	public GameObject dummyCardboardBale;

	public GameObject dummyOrderBox;

	public GameObject randomBox;

	public GameObject currentCardboardBale;

	public GameObject closestCardboardBaler;

	public GameObject currentFurnitureToFix;

	public bool playingCoroutine;

	public int thiefProductsNumber;

	public bool thiefFleeing;

	public bool thiefAssignedChaser;

	public GameObject currentChasedThiefOBJ;

	public bool chasingThief;

	public bool chaserUpdatingPathing;

	public int employeeAssignedCheckoutIndex = -1;

	public GameObject droppedProductOBJ;

	public int currentFreeStorageIndex;

	public GameObject currentFreeStorageOBJ;

	public bool selfcheckoutAssigned;

	public int selfcheckoutIndex = -1;

	public bool isCurrentlySelfcheckouting;

	private float selfCheckoutSum;

	public bool placingProducts;

	[Space(10f)]
	public GameObject messagePrefab;

	public GameObject stolenProductPrefab;

	public GameObject productCheckoutPrefab;

	public GameObject slipSoundPrefabOBJ;

	[Space(10f)]
	public int currentCheckoutIndex;

	public int currentQueueNumber;

	[Space(10f)]
	public float carryingProductsPrice;

	public bool paidForItsBelongings;

	[Space(10f)]
	public List<int> productsIDToBuy = new List<int>();

	public List<int> productsIDCarrying = new List<int>();

	public List<int> productsIDInCheckout = new List<int>();

	public List<float> productsCarryingPrice = new List<float>();

	public int numberOfProductsCarried;

	[Space(10f)]
	public int syncBoxProductID;

	[Space(10f)]
	public int customerOrderNumber;

	public float customerOrderFinalPrice;

	[Space(10f)]
	public int salary;

	public int cashierValue;

	public int restockerValue;

	public int storageValue;

	public int securityValue;

	public int technicianValue;

	public int orderingValue;

	public int manufacturingValue;

	public int cashierExperience;

	public int restockerExperience;

	public int storageExperience;

	public int securityExperience;

	public int technicianExperience;

	public int orderingExperience;

	public int manufacturingExperience;

	public int cashierLevel;

	public int restockerLevel;

	public int storageLevel;

	public int securityLevel;

	public int technicianLevel;

	public int orderingLevel;

	public int manufacturingLevel;

	public bool employeeDismissed;

	[Space(10f)]
	public int packagingAssignedOrderIndex = -1;

	public string packagingAssignedOrderData;

	public List<int> packagingAssignedOrderProducts;

	public List<int> packagingPackedOrderProducts;

	public int[] orderProductLocationInfoArray;

	private GameObject characterOBJ;

	private Animator npcAnimator;

	public float xzSpeed;

	private bool beingPushed;

	public GameObject instantiatedOBJ;

	public GameObject employeeHatOBJ;

	public GameObject employeeBroomOBJ;

	private int oldSkinIndex;

	private GameObject instantiatedBroomSkinOBJ;

	private TwoBoneIKConstraint rightHandConstraint;

	private TwoBoneIKConstraint leftHandConstraint;

	private Transform rightHandOBJ;

	private Transform rightHandDestinationOBJ;

	private Transform leftHandOBJ;

	private Transform leftHandDestinationOBJ;

	private bool navmeshCheck;

	private NavMeshAgent thisAgent;

	public GameObject surveillanceIconPrefabOBJ;

	private int[] nonOffesiveMessageIndexes = new int[5] { 0, 1, 4, 5, 7 };

	public Action<int, int> _Mirror_SyncVarHookDelegate_hatID;

	public int NetworkNPCID
	{
		get
		{
			return NPCID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref NPCID, 1uL, null);
		}
	}

	public bool NetworkisEmployee
	{
		get
		{
			return isEmployee;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref isEmployee, 2uL, null);
		}
	}

	public bool NetworkisCustomer
	{
		get
		{
			return isCustomer;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref isCustomer, 4uL, null);
		}
	}

	public int NetworkboxProductID
	{
		get
		{
			return boxProductID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref boxProductID, 8uL, null);
		}
	}

	public int NetworkboxNumberOfProducts
	{
		get
		{
			return boxNumberOfProducts;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref boxNumberOfProducts, 16uL, null);
		}
	}

	public string NetworkNPCName
	{
		get
		{
			return NPCName;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref NPCName, 32uL, null);
		}
	}

	public int NetworkhatID
	{
		get
		{
			return hatID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref hatID, 64uL, _Mirror_SyncVarHookDelegate_hatID);
		}
	}

	public override void OnStartClient()
	{
		CreateNPCCharacter();
		if (!base.isServer && isCustomer)
		{
			ClientParentNPC();
		}
		if (!base.isServer && isEmployee)
		{
			EmployeeParentNPC();
		}
		StartCoroutine(SetNPCData());
	}

	public override void OnStartServer()
	{
		base.OnStartServer();
		thisAgent = GetComponent<NavMeshAgent>();
	}

	private IEnumerator SetNPCData()
	{
		yield return new WaitForSeconds(2f);
		if (NPCName != "")
		{
			SetNPCName();
		}
		if (hatID > 0)
		{
			ChangeEmployeeHat(0, hatID);
		}
	}

	private IEnumerator AddHalloweenHead()
	{
		yield return new WaitForSeconds(2f);
		if (GameData.Instance.timeOfDay > 18.75f && (bool)characterOBJ && (bool)characterOBJ.transform.Find("Bip01/Bip01 Pelvis/Bip01 Spine/Bip01 Spine1/Bip01 Spine2/Bip01 Neck/Bip01 Head"))
		{
			GameObject obj = UnityEngine.Object.Instantiate(halloweenHeadPrefabOBJ);
			obj.transform.SetParent(characterOBJ.transform.Find("Bip01/Bip01 Pelvis/Bip01 Spine/Bip01 Spine1/Bip01 Spine2/Bip01 Neck/Bip01 Head"));
			obj.transform.localPosition = new Vector3(0.075f, 0f, 0f);
			obj.transform.localRotation = Quaternion.Euler(new Vector3(270f, 90f, 0f));
		}
	}

	private void CreateNPCCharacter()
	{
		GameObject original = NPC_Manager.Instance.NPCsArray[NPCID];
		if (isEmployee)
		{
			original = NPC_Manager.Instance.NPCsEmployeesArray[NPCID];
		}
		characterOBJ = UnityEngine.Object.Instantiate(original);
		characterOBJ.transform.SetParent(base.transform);
		characterOBJ.transform.localPosition = Vector3.zero;
		characterOBJ.transform.localRotation = Quaternion.identity;
		npcAnimator = characterOBJ.GetComponent<Animator>();
		if (isEmployee)
		{
			rightHandOBJ = characterOBJ.transform.Find("IKOBJs/RightHandTarget");
			leftHandOBJ = characterOBJ.transform.Find("IKOBJs/LeftHandTarget");
			rightHandConstraint = characterOBJ.transform.Find("Rig/RigHandIK").GetComponent<TwoBoneIKConstraint>();
			leftHandConstraint = characterOBJ.transform.Find("Rig/LeftHandIK").GetComponent<TwoBoneIKConstraint>();
			employeeBroomOBJ = characterOBJ.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("BroomOBJ").Value;
		}
	}

	private void ClientParentNPC()
	{
		if ((bool)NPC_Manager.Instance)
		{
			base.transform.SetParent(NPC_Manager.Instance.customersnpcParentOBJ.transform);
		}
		else
		{
			StartCoroutine(DelayedClientParentNPC());
		}
	}

	private IEnumerator DelayedClientParentNPC()
	{
		yield return new WaitForSeconds(2f);
		if ((bool)NPC_Manager.Instance)
		{
			base.transform.SetParent(NPC_Manager.Instance.customersnpcParentOBJ.transform);
		}
	}

	private void EmployeeParentNPC()
	{
		if ((bool)NPC_Manager.Instance)
		{
			base.transform.SetParent(NPC_Manager.Instance.employeeParentOBJ.transform);
		}
		else
		{
			StartCoroutine(DelayedEmployeeParentNPC());
		}
	}

	private IEnumerator DelayedEmployeeParentNPC()
	{
		yield return new WaitForSeconds(2f);
		if ((bool)NPC_Manager.Instance)
		{
			base.transform.SetParent(NPC_Manager.Instance.employeeParentOBJ.transform);
		}
	}

	private void FixedUpdate()
	{
		if ((bool)npcAnimator)
		{
			npcAnimator.SetFloat("MoveFactor", GetComponent<NPC_Speed>().velocity);
		}
		if (isEmployee)
		{
			if (equippedItem > 0 && (bool)instantiatedOBJ)
			{
				if (!rightHandDestinationOBJ)
				{
					rightHandDestinationOBJ = instantiatedOBJ.transform.Find("RightHandIK");
					rightHandConstraint.weight = 1f;
				}
				if (!leftHandDestinationOBJ)
				{
					leftHandDestinationOBJ = instantiatedOBJ.transform.Find("LeftHandIK");
					leftHandConstraint.weight = 1f;
				}
				rightHandOBJ.position = rightHandDestinationOBJ.position;
				rightHandOBJ.rotation = rightHandDestinationOBJ.rotation;
				leftHandOBJ.position = leftHandDestinationOBJ.position;
				leftHandOBJ.rotation = leftHandDestinationOBJ.rotation;
			}
			else
			{
				if ((bool)rightHandConstraint && rightHandConstraint.weight == 1f)
				{
					rightHandConstraint.weight = 0f;
				}
				if ((bool)leftHandConstraint && leftHandConstraint.weight == 1f)
				{
					leftHandConstraint.weight = 0f;
				}
			}
		}
		if (base.isServer && thisAgent.isOnOffMeshLink && !navmeshCheck)
		{
			StartCoroutine(OffMeshTraverseCoroutine());
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdAnimationPlay(int animationIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(animationIndex);
		SendCommandInternal("System.Void NPC_Info::CmdAnimationPlay(System.Int32)", -403099646, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void AuxiliarAnimationPlay(int animationIndex)
	{
		if (!beingPushed)
		{
			StartCoroutine(StopSpeed());
		}
		int value = (int)Mathf.Floor((float)thiefProductsNumber / 4f);
		value = Mathf.Clamp(value, 1, 5);
		if (isAThief && productsIDCarrying.Count > 0 && thiefProductsNumber > 0)
		{
			for (int i = 0; i < value + 1 && i < productsIDCarrying.Count; i++)
			{
				GameObject obj = UnityEngine.Object.Instantiate(stolenProductPrefab, NPC_Manager.Instance.droppedProductsParentOBJ.transform);
				obj.transform.position = base.transform.position + new Vector3(UnityEngine.Random.Range(-0.4f, 0.4f), 0f, UnityEngine.Random.Range(-0.4f, 0.4f));
				obj.GetComponent<StolenProductSpawn>().NetworkproductID = productsIDCarrying[i];
				obj.GetComponent<StolenProductSpawn>().NetworkproductCarryingPrice = productsCarryingPrice[i] * 0.8f;
				NetworkServer.Spawn(obj);
				productsIDCarrying.RemoveAt(i);
				productsCarryingPrice.RemoveAt(i);
			}
		}
		if (isAThief && productsIDCarrying.Count == 0 && (bool)base.transform.Find("ThiefCanvas").gameObject && base.transform.Find("ThiefCanvas").gameObject.activeSelf)
		{
			RpcHideThief();
		}
		int num = ((!NPC_Manager.Instance.offensiveNPCs) ? nonOffesiveMessageIndexes[UnityEngine.Random.Range(0, nonOffesiveMessageIndexes.Length)] : UnityEngine.Random.Range(0, 9));
		RpcAnimationPlay(animationIndex);
		RPCNotificationAboveHead("NPCmessagehit" + num, "");
	}

	[ClientRpc]
	public void RpcShowThief()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void NPC_Info::RpcShowThief()", -1373127503, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void RpcHideThief()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void NPC_Info::RpcHideThief()", -1402377378, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void RpcEmployeeHitThief()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void NPC_Info::RpcEmployeeHitThief()", 34869927, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAnimationPlay(int animationIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(animationIndex);
		SendRPCInternal("System.Void NPC_Info::RpcAnimationPlay(System.Int32)", 1467481995, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator StopSpeed()
	{
		float speedToRestore = GetComponent<NavMeshAgent>().speed;
		beingPushed = true;
		GetComponent<NavMeshAgent>().speed = 0f;
		yield return new WaitForSeconds(1.5f);
		GetComponent<NavMeshAgent>().speed = speedToRestore;
		beingPushed = false;
	}

	public void CallPathing()
	{
		if (!chaserUpdatingPathing)
		{
			StartCoroutine(PathingCooldown());
		}
	}

	private IEnumerator PathingCooldown()
	{
		chaserUpdatingPathing = true;
		NavMeshAgent component = GetComponent<NavMeshAgent>();
		if (!component.pathPending)
		{
			component.SetDestination(currentChasedThiefOBJ.transform.position);
		}
		yield return new WaitForSeconds(0.25f);
		chaserUpdatingPathing = false;
	}

	[ClientRpc]
	public void RpcShowBroom(bool set, int skinIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(set);
		writer.WriteInt(skinIndex);
		SendRPCInternal("System.Void NPC_Info::RpcShowBroom(System.Boolean,System.Int32)", -764411484, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void EquipNPCItem(int index)
	{
		equippedItem = index;
		RpcEquipNPCItem(index, boxProductID);
	}

	[ClientRpc]
	private void RpcEquipNPCItem(int equippedIndex, int productID)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(equippedIndex);
		writer.WriteInt(productID);
		SendRPCInternal("System.Void NPC_Info::RpcEquipNPCItem(System.Int32,System.Int32)", -701976784, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void PlaceProducts(GameObject checkoutOBJ)
	{
		StartCoroutine(PlaceProductsCoroutine(checkoutOBJ));
	}

	private IEnumerator PlaceProductsCoroutine(GameObject checkoutOBJ)
	{
		while (productsIDCarrying.Count > 0)
		{
			yield return new WaitForSeconds(productItemPlaceWait);
			int num = productsIDCarrying[0];
			float networkproductCarryingPrice = productsCarryingPrice[0];
			productsIDCarrying.RemoveAt(0);
			productsCarryingPrice.RemoveAt(0);
			GameObject gameObject = UnityEngine.Object.Instantiate(productCheckoutPrefab);
			ProductCheckoutSpawn component = gameObject.GetComponent<ProductCheckoutSpawn>();
			component.NetworkproductID = num;
			component.NetworkcheckoutOBJ = checkoutOBJ.transform.GetChild(currentCheckoutIndex).gameObject;
			component.NetworkNPCOBJ = base.gameObject;
			component.NetworkproductCarryingPrice = networkproductCarryingPrice;
			component.internalDataContainerListIndex = productsIDInCheckout.Count;
			productsIDInCheckout.Add(num);
			int num2 = 0;
			float num3 = 0f;
			float num4 = 0f;
			foreach (int item in productsIDInCheckout)
			{
				float num5 = ((!ProductListing.Instance.productPrefabs[item].GetComponent<Data_Product>().hasTrueCollider) ? ProductListing.Instance.productPrefabs[item].GetComponent<BoxCollider>().size.x : ProductListing.Instance.productPrefabs[item].GetComponent<Data_Product>().trueCollider.x);
				if (productsIDInCheckout.Count == 1)
				{
					num3 = num5 / 2f;
					break;
				}
				num3 += num5 / 2f + num4 / 2f + 0.01f;
				if (num3 + num5 / 2f > 0.5f)
				{
					num2++;
					num3 = num5 / 2f;
					if (num2 > 6)
					{
						num2 = 0;
					}
				}
				num4 = num5;
			}
			gameObject.transform.position = checkoutOBJ.transform.GetChild(currentCheckoutIndex).transform.Find("CheckoutItemPosition").transform.TransformPoint(new Vector3(num3, 0f, (float)num2 * 0.15f));
			gameObject.transform.rotation = checkoutOBJ.transform.GetChild(currentCheckoutIndex).rotation;
			checkoutOBJ.transform.GetChild(currentCheckoutIndex).GetComponent<Data_Container>().internalProductListForEmployees.Add(gameObject);
			NetworkServer.Spawn(gameObject);
		}
		yield return null;
	}

	public void StartCustomerSelfCheckout(GameObject selfCheckoutOBJ)
	{
		StartCoroutine(CustomerSelfCheckout(selfCheckoutOBJ));
	}

	private IEnumerator CustomerSelfCheckout(GameObject selfCheckoutOBJ)
	{
		Data_Container dContainer = selfCheckoutOBJ.GetComponent<Data_Container>();
		Transform bagsTransform = selfCheckoutOBJ.transform.Find("Bags");
		Vector3 originPosition = selfCheckoutOBJ.transform.Find("CheckoutItemPosition").transform.position;
		float minSelfWait = NPC_Manager.Instance.minSelfCheckoutWait;
		float maxSelfWait = NPC_Manager.Instance.maxSelfCheckoutWait;
		if (dContainer.isBroken)
		{
			minSelfWait *= UnityEngine.Random.Range(1.8f, 3.4f);
			maxSelfWait *= UnityEngine.Random.Range(1.8f, 3.4f);
		}
		while (productsIDCarrying.Count > 0)
		{
			yield return new WaitForSeconds(UnityEngine.Random.Range(minSelfWait, maxSelfWait));
			int productID = productsIDCarrying[0];
			float num = productsCarryingPrice[0];
			productsIDCarrying.RemoveAt(0);
			productsCarryingPrice.RemoveAt(0);
			selfCheckoutSum += num;
			dContainer.SelfCheckoutActivateBag();
			if ((bool)bagsTransform)
			{
				int index = 0;
				for (int i = 0; i < bagsTransform.childCount && bagsTransform.transform.GetChild(i).gameObject.activeSelf; i++)
				{
					index = i;
				}
				Vector3 destination = bagsTransform.transform.GetChild(index).transform.position + new Vector3(0f, 0.3f, 0f);
				GameData.Instance.GetComponent<NetworkSpawner>().RpcProductAnimation(productID, originPosition, destination);
			}
		}
		yield return new WaitForSeconds(1.5f);
		dContainer.SelfCheckoutDeactivateBag();
		GameData.Instance.CmdAlterFunds(selfCheckoutSum);
		selfCheckoutSum = 0f;
		state = -1;
		StartWaitState(1f, 3);
		yield return null;
	}

	public void StartWaitState(float TimeToWait, int targetState)
	{
		StartCoroutine(WaitState(TimeToWait, targetState));
	}

	private IEnumerator WaitState(float TimeToWait, int targetState)
	{
		playingCoroutine = true;
		yield return new WaitForSeconds(TimeToWait);
		state = targetState;
		yield return null;
		playingCoroutine = false;
	}

	public void StopCoroutinesFromManager()
	{
		if (playingCoroutine)
		{
			StopAllCoroutines();
			playingCoroutine = false;
		}
	}

	public void StartPlayAnimationState(int targetState)
	{
		StartCoroutine(PlayAnimationState(targetState));
	}

	private IEnumerator PlayAnimationState(int targetState)
	{
		yield return new WaitForSeconds(1f);
		state = targetState;
		yield return null;
	}

	public void ComplainAboutFilth()
	{
		if (!isAThief)
		{
			GameData.Instance.complainedAboutFilth++;
			hasComplainedAboutFilth = true;
			RPCNotificationAboveHead("NPCmessage5", "");
		}
	}

	public void SlipEvent()
	{
		hasSlipped = true;
		RPCNotificationAboveHead("NPCmessagehit5", "");
		RpcSlipEvent();
		RpcAnimationPlay(0);
		if (!beingPushed)
		{
			StartCoroutine(StopSpeed());
		}
	}

	[ClientRpc]
	private void RpcSlipEvent()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void NPC_Info::RpcSlipEvent()", 1584305596, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void RPCNotificationAboveHead(string message1, string messageAddon)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(message1);
		writer.WriteString(messageAddon);
		SendRPCInternal("System.Void NPC_Info::RPCNotificationAboveHead(System.String,System.String)", -2110386630, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void UpdateNPCName(string newName)
	{
		if (!base.transform.Find("NameCanvas").gameObject.activeSelf)
		{
			base.transform.Find("NameCanvas").gameObject.SetActive(value: true);
			base.transform.Find("NameCanvas/NPCName").GetComponent<TextMeshProUGUI>().isOverlay = true;
		}
		base.transform.Find("NameCanvas/NPCName").GetComponent<TextMeshProUGUI>().text = newName;
	}

	private void SetNPCName()
	{
		base.transform.Find("NameCanvas").gameObject.SetActive(value: true);
		base.transform.Find("NameCanvas/NPCName").GetComponent<TextMeshProUGUI>().text = NPCName;
		base.transform.Find("NameCanvas/NPCName").GetComponent<TextMeshProUGUI>().isOverlay = true;
	}

	private void ChangeEmployeeHat(int oldHatIndex, int newHatIndex)
	{
		GameObject gameObject = null;
		foreach (Transform item in base.transform)
		{
			if ((bool)item.GetComponent<Animator>())
			{
				gameObject = item.gameObject;
				break;
			}
		}
		if (!(gameObject == null))
		{
			if ((bool)employeeHatOBJ)
			{
				UnityEngine.Object.Destroy(employeeHatOBJ);
			}
			if (newHatIndex != 0 && (bool)FirstPersonController.Instance)
			{
				newHatIndex = Mathf.Clamp(newHatIndex, 0, FirstPersonController.Instance.GetComponent<PlayerNetwork>().hatsArray.Length - 1);
				GameObject value = gameObject.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("HatSpot").Value;
				employeeHatOBJ = UnityEngine.Object.Instantiate(FirstPersonController.Instance.GetComponent<PlayerNetwork>().hatsArray[newHatIndex], value.transform);
				employeeHatOBJ.transform.localPosition = employeeHatOBJ.GetComponent<HatInfo>().offset;
				employeeHatOBJ.transform.localRotation = Quaternion.Euler(employeeHatOBJ.GetComponent<HatInfo>().rotation);
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdSurveillanceSet()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void NPC_Info::CmdSurveillanceSet()", -1455653132, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcSurveillanceSet(bool wasAThief)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(wasAThief);
		SendRPCInternal("System.Void NPC_Info::RpcSurveillanceSet(System.Boolean)", -1932603784, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator OffMeshTraverseCoroutine()
	{
		navmeshCheck = true;
		while (thisAgent.isOnOffMeshLink)
		{
			OffMeshLinkData currentOffMeshLinkData = thisAgent.currentOffMeshLinkData;
			Vector3 vector = currentOffMeshLinkData.endPos + Vector3.up * thisAgent.baseOffset;
			base.transform.position = Vector3.MoveTowards(base.transform.position, vector, thisAgent.speed * Time.deltaTime);
			Quaternion to = Quaternion.LookRotation(currentOffMeshLinkData.endPos, base.transform.position);
			base.transform.rotation = Quaternion.RotateTowards(base.transform.rotation, to, 10f * Time.deltaTime);
			if (thisAgent.transform.position == vector)
			{
				thisAgent.CompleteOffMeshLink();
			}
			yield return null;
		}
		yield return null;
		navmeshCheck = false;
	}

	[Command(requiresAuthority = false)]
	public void CmdPushAgentViaTransform(Vector3 direction)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(direction);
		SendCommandInternal("System.Void NPC_Info::CmdPushAgentViaTransform(UnityEngine.Vector3)", -1712275489, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator PushingAgentTransform(Vector3 direction)
	{
		float beingExtinguishedTime = 0f;
		direction = direction.normalized;
		while (beingExtinguishedTime < 1.4f)
		{
			beingExtinguishedTime += Time.deltaTime;
			base.transform.position += direction * Time.deltaTime * 7f;
			yield return null;
		}
		yield return null;
	}

	private void OnDestroy()
	{
		if (!base.isServer || !isAThief || productsIDCarrying.Count <= 0)
		{
			return;
		}
		GameData.Instance.timesRobbed++;
		float num = 0f;
		foreach (float item in productsCarryingPrice)
		{
			num += item;
		}
		GameData.Instance.moneyLostBecauseRobbing += num;
	}

	public NPC_Info()
	{
		_Mirror_SyncVarHookDelegate_hatID = ChangeEmployeeHat;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdAnimationPlay__Int32(int animationIndex)
	{
		AuxiliarAnimationPlay(animationIndex);
	}

	protected static void InvokeUserCode_CmdAnimationPlay__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAnimationPlay called on client.");
		}
		else
		{
			((NPC_Info)obj).UserCode_CmdAnimationPlay__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcShowThief()
	{
		base.transform.Find("ThiefCanvas").gameObject.SetActive(value: true);
	}

	protected static void InvokeUserCode_RpcShowThief(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcShowThief called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RpcShowThief();
		}
	}

	protected void UserCode_RpcHideThief()
	{
		base.transform.Find("ThiefCanvas").gameObject.SetActive(value: false);
	}

	protected static void InvokeUserCode_RpcHideThief(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcHideThief called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RpcHideThief();
		}
	}

	protected void UserCode_RpcEmployeeHitThief()
	{
		if ((bool)npcAnimator)
		{
			npcAnimator.SetFloat("AnimationFloat", 1f);
			npcAnimator.Play("Animation");
			base.transform.Find("HitSound").GetComponent<AudioSource>().Play();
		}
	}

	protected static void InvokeUserCode_RpcEmployeeHitThief(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcEmployeeHitThief called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RpcEmployeeHitThief();
		}
	}

	protected void UserCode_RpcAnimationPlay__Int32(int animationIndex)
	{
		if ((bool)npcAnimator)
		{
			npcAnimator.SetFloat("AnimationFloat", animationIndex);
			npcAnimator.Play("Animation");
			GetComponent<AudioSource>().Play();
		}
	}

	protected static void InvokeUserCode_RpcAnimationPlay__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAnimationPlay called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RpcAnimationPlay__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcShowBroom__Boolean__Int32(bool set, int skinIndex)
	{
		if (!employeeBroomOBJ)
		{
			return;
		}
		employeeBroomOBJ.SetActive(set);
		if (set && skinIndex != oldSkinIndex)
		{
			oldSkinIndex = skinIndex;
			if ((bool)instantiatedBroomSkinOBJ)
			{
				UnityEngine.Object.Destroy(instantiatedBroomSkinOBJ);
			}
			if (skinIndex == 0)
			{
				employeeBroomOBJ.GetComponent<MeshRenderer>().enabled = true;
				return;
			}
			GameObject original = AchievementsManager.Instance.unlockablesPrefabsArray[skinIndex];
			instantiatedBroomSkinOBJ = UnityEngine.Object.Instantiate(original, employeeBroomOBJ.transform);
			instantiatedBroomSkinOBJ.transform.localPosition = Vector3.zero;
			instantiatedBroomSkinOBJ.transform.localRotation = Quaternion.Euler(Vector3.zero);
			instantiatedBroomSkinOBJ.transform.localScale = new Vector3(1.3f, 1.3f, 1.3f);
			employeeBroomOBJ.GetComponent<MeshRenderer>().enabled = false;
		}
	}

	protected static void InvokeUserCode_RpcShowBroom__Boolean__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcShowBroom called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RpcShowBroom__Boolean__Int32(reader.ReadBool(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcEquipNPCItem__Int32__Int32(int equippedIndex, int productID)
	{
		equippedItem = equippedIndex;
		switch (equippedIndex)
		{
		case 0:
			if (base.transform.Find("EquippedItem").transform.childCount > 0)
			{
				UnityEngine.Object.Destroy(base.transform.Find("EquippedItem").transform.GetChild(0).gameObject);
				instantiatedOBJ = null;
			}
			break;
		case 1:
			instantiatedOBJ = UnityEngine.Object.Instantiate(dummyBoxPrefab);
			instantiatedOBJ.transform.parent = base.transform.Find("EquippedItem").transform;
			instantiatedOBJ.transform.localPosition = Vector3.zero;
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 90f, 0f);
			instantiatedOBJ.transform.Find("Canvas").gameObject.SetActive(value: false);
			if ((bool)instantiatedOBJ.transform.Find("BoxMesh") && (bool)ProductListing.Instance)
			{
				instantiatedOBJ.transform.Find("BoxMesh").gameObject.SetActive(value: true);
				ProductListing.Instance.SetBoxColor(instantiatedOBJ, productID);
			}
			break;
		case 2:
		{
			instantiatedOBJ = UnityEngine.Object.Instantiate(dummyBoxPrefab);
			instantiatedOBJ.transform.parent = base.transform.Find("EquippedItem").transform;
			instantiatedOBJ.transform.localPosition = Vector3.zero;
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 90f, 0f);
			instantiatedOBJ.transform.Find("Canvas").gameObject.SetActive(value: false);
			GameObject obj2 = UnityEngine.Object.Instantiate(dummyCardboardBale, instantiatedOBJ.transform);
			obj2.transform.localPosition = new Vector3(-0.03f, 0.09f, 0f);
			obj2.transform.localRotation = Quaternion.Euler(0f, 270f, 0f);
			obj2.transform.localScale = new Vector3(0.3f, 0.3f, 0.3f);
			obj2.name = "Bale";
			break;
		}
		case 3:
		{
			instantiatedOBJ = UnityEngine.Object.Instantiate(dummyBoxPrefab);
			instantiatedOBJ.transform.parent = base.transform.Find("EquippedItem").transform;
			instantiatedOBJ.transform.localPosition = Vector3.zero;
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 90f, 0f);
			instantiatedOBJ.transform.Find("Canvas").gameObject.SetActive(value: false);
			GameObject obj = UnityEngine.Object.Instantiate(dummyOrderBox, instantiatedOBJ.transform);
			obj.transform.localPosition = new Vector3(-0.03f, 0.09f, 0f);
			obj.transform.localRotation = Quaternion.Euler(0f, 180f, 0f);
			obj.transform.localScale = new Vector3(2f, 1.5f, 1.6f);
			obj.name = "OrderBox";
			break;
		}
		}
	}

	protected static void InvokeUserCode_RpcEquipNPCItem__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcEquipNPCItem called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RpcEquipNPCItem__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcSlipEvent()
	{
		UnityEngine.Object.Instantiate(slipSoundPrefabOBJ, base.transform.position, Quaternion.identity);
	}

	protected static void InvokeUserCode_RpcSlipEvent(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSlipEvent called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RpcSlipEvent();
		}
	}

	protected void UserCode_RPCNotificationAboveHead__String__String(string message1, string messageAddon)
	{
		GameObject obj = UnityEngine.Object.Instantiate(messagePrefab, base.transform.position + Vector3.up * 1.8f, Quaternion.identity);
		string text = LocalizationManager.instance.GetLocalizationString(message1);
		if (messageAddon != "")
		{
			text += LocalizationManager.instance.GetLocalizationString(messageAddon);
		}
		obj.GetComponent<TextMeshPro>().text = text;
		obj.SetActive(value: true);
	}

	protected static void InvokeUserCode_RPCNotificationAboveHead__String__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RPCNotificationAboveHead called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RPCNotificationAboveHead__String__String(reader.ReadString(), reader.ReadString());
		}
	}

	protected void UserCode_CmdSurveillanceSet()
	{
		surveillanceChecked = true;
		bool wasAThief = false;
		if (isAThief && !thiefFleeing)
		{
			wasAThief = true;
			isAThief = false;
		}
		RpcSurveillanceSet(wasAThief);
	}

	protected static void InvokeUserCode_CmdSurveillanceSet(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSurveillanceSet called on client.");
		}
		else
		{
			((NPC_Info)obj).UserCode_CmdSurveillanceSet();
		}
	}

	protected void UserCode_RpcSurveillanceSet__Boolean(bool wasAThief)
	{
		surveillanceChecked = true;
		GameObject gameObject = UnityEngine.Object.Instantiate(surveillanceIconPrefabOBJ);
		gameObject.transform.position = base.transform.position + new Vector3(0f, 2f, 0f);
		if (wasAThief)
		{
			AchievementsManager.Instance.AddLocalAchievementPoint(13);
			gameObject.transform.GetChild(0).GetChild(1).gameObject.SetActive(value: true);
		}
		else
		{
			AchievementsManager.Instance.AddLocalAchievementPoint(12);
		}
	}

	protected static void InvokeUserCode_RpcSurveillanceSet__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSurveillanceSet called on server.");
		}
		else
		{
			((NPC_Info)obj).UserCode_RpcSurveillanceSet__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_CmdPushAgentViaTransform__Vector3(Vector3 direction)
	{
		if (!navmeshCheck)
		{
			StartCoroutine(PushingAgentTransform(direction));
			RpcAnimationPlay(0);
			RPCNotificationAboveHead("NPCmessagehit5", "");
		}
	}

	protected static void InvokeUserCode_CmdPushAgentViaTransform__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdPushAgentViaTransform called on client.");
		}
		else
		{
			((NPC_Info)obj).UserCode_CmdPushAgentViaTransform__Vector3(reader.ReadVector3());
		}
	}

	static NPC_Info()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Info), "System.Void NPC_Info::CmdAnimationPlay(System.Int32)", InvokeUserCode_CmdAnimationPlay__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Info), "System.Void NPC_Info::CmdSurveillanceSet()", InvokeUserCode_CmdSurveillanceSet, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Info), "System.Void NPC_Info::CmdPushAgentViaTransform(UnityEngine.Vector3)", InvokeUserCode_CmdPushAgentViaTransform__Vector3, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RpcShowThief()", InvokeUserCode_RpcShowThief);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RpcHideThief()", InvokeUserCode_RpcHideThief);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RpcEmployeeHitThief()", InvokeUserCode_RpcEmployeeHitThief);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RpcAnimationPlay(System.Int32)", InvokeUserCode_RpcAnimationPlay__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RpcShowBroom(System.Boolean,System.Int32)", InvokeUserCode_RpcShowBroom__Boolean__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RpcEquipNPCItem(System.Int32,System.Int32)", InvokeUserCode_RpcEquipNPCItem__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RpcSlipEvent()", InvokeUserCode_RpcSlipEvent);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RPCNotificationAboveHead(System.String,System.String)", InvokeUserCode_RPCNotificationAboveHead__String__String);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Info), "System.Void NPC_Info::RpcSurveillanceSet(System.Boolean)", InvokeUserCode_RpcSurveillanceSet__Boolean);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(NPCID);
			writer.WriteBool(isEmployee);
			writer.WriteBool(isCustomer);
			writer.WriteInt(boxProductID);
			writer.WriteInt(boxNumberOfProducts);
			writer.WriteString(NPCName);
			writer.WriteInt(hatID);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(NPCID);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteBool(isEmployee);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteBool(isCustomer);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteInt(boxProductID);
		}
		if ((syncVarDirtyBits & 0x10L) != 0L)
		{
			writer.WriteInt(boxNumberOfProducts);
		}
		if ((syncVarDirtyBits & 0x20L) != 0L)
		{
			writer.WriteString(NPCName);
		}
		if ((syncVarDirtyBits & 0x40L) != 0L)
		{
			writer.WriteInt(hatID);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref NPCID, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref isEmployee, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref isCustomer, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref boxProductID, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref boxNumberOfProducts, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref NPCName, null, reader.ReadString());
			GeneratedSyncVarDeserialize(ref hatID, _Mirror_SyncVarHookDelegate_hatID, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref NPCID, null, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref isEmployee, null, reader.ReadBool());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref isCustomer, null, reader.ReadBool());
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref boxProductID, null, reader.ReadInt());
		}
		if ((num & 0x10L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref boxNumberOfProducts, null, reader.ReadInt());
		}
		if ((num & 0x20L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref NPCName, null, reader.ReadString());
		}
		if ((num & 0x40L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref hatID, _Mirror_SyncVarHookDelegate_hatID, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// NPC_Manager
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.UI;

public class NPC_Manager : NetworkBehaviour
{
	public static NPC_Manager Instance;

	[SyncVar]
	public string[] hiredEmployeesData;

	[SyncVar]
	public string[] todaysEmployeesData;

	[SyncVar]
	public int[] priorityArray;

	[SyncVar]
	public int numberOfHiredEmployees;

	[SyncVar]
	public int rerollTimes;

	public bool alreadySetRerolls;

	public int rerollsPerDay;

	public GameObject[] employeesArray;

	public float currentHappinessLevel;

	public bool offensiveNPCs = true;

	private bool spawnedEmployees;

	[Space(10f)]
	public int maxDummyNPCs;

	public GameObject[] NPCsArray;

	public bool interruptBoxRecycling;

	public Sprite buttonOff;

	public Sprite buttonOn;

	public AnimationCurve selfcheckoutChanceCurve;

	[Space(10f)]
	public GameObject[] NPCsEmployeesArray;

	public GameObject employeeParentOBJ;

	public GameObject restSpotOBJ;

	public GameObject employeeSpawnpoint;

	public GameObject trashSpotOBJ;

	public GameObject recycleSpot1OBJ;

	public GameObject recycleSpot2OBJ;

	public GameObject leftoverBoxesSpotOBJ;

	public GameObject patrolPositionOBJ;

	public GameObject droppedProductsParentOBJ;

	public GameObject interruptRecyclingButtonOBJ;

	public GameObject orderingDepartmentSpotOBJ;

	public int maxEmployees;

	public float extraEmployeeSpeedFactor;

	public float extraCheckoutMoney = 1f;

	public float employeeItemPlaceWait = 0.2f;

	public float productCheckoutWait = 0.75f;

	public float minSelfCheckoutWait = 1.1f;

	public float maxSelfCheckoutWait = 2.25f;

	public float surveillanceFactor;

	public bool employeeRecycleBoxes;

	public int selfcheckoutExtraProductsFromPerk;

	public bool closestRecyclePerk;

	public bool employeesOnRiot;

	private List<string> auxiliarList = new List<string>();

	private List<GameObject> indexedBoxesList = new List<GameObject>();

	private List<GameObject> thievesList = new List<GameObject>();

	private List<int> employeesCheckoutIndexes = new List<int>();

	[Space(10f)]
	public GameObject dummynpcParentOBJ;

	public GameObject customersnpcParentOBJ;

	public GameObject spawnPointsOBJ;

	public GameObject destroyPointsOBJ;

	public GameObject randomPointsOBJ;

	public Transform exitPoints;

	[Space(10f)]
	public GameObject shelvesOBJ;

	public GameObject checkoutOBJ;

	public GameObject storageOBJ;

	public GameObject boxesOBJ;

	public GameObject selfCheckoutOBJ;

	[Space(10f)]
	public GameObject npcAgentPrefab;

	public GameObject productCheckoutPrefab;

	[Space(10f)]
	public AnimationCurve salePerPriceChanceReductionFactor;

	[Space(10f)]
	public bool mainShelfUpdateIsRunning;

	public bool mainUpdateIsBeingCalculated;

	public List<string> lowProductCountList = new List<string>();

	public List<string> mediumProductCountList = new List<string>();

	public List<string> highProductCountList = new List<string>();

	public List<string> veryHighProductCountList = new List<string>();

	private List<string> auxiliarProductList = new List<string>();

	private float[] productsThreshholdArray = new float[4] { 0.25f, 0.5f, 0.75f, 1f };

	public List<GameObject> cardboardBalerList = new List<GameObject>();

	public List<GameObject> orderPickupPointsList = new List<GameObject>();

	public List<GameObject> brokenFurnitureList = new List<GameObject>();

	public List<string> NPCsOrdersList = new List<string>();

	public bool initialEmployeesSpawnIsFinished;

	private bool ordersSpawnCooldown;

	private string[] productsPerNecessities = new string[11]
	{
		"54-55-56-57-58-59-60-108-109-125-162-163-164-165-166-167-168-169-170-171-172-173-174-175", "74-75-76-77-78-79-80-81-82-83-84-85-86-87-88-89-90-91-92-93-94-95-96-97-98-100-101-102-103", "11-146-147-148-149-230-231-232-233-234-235-236", "54-55-56-57-61-62-63-64-65-66-67-68-69-72-73", "75-80-85-86", "258-259-260-261-262-263-264-265-266-267-268-269-270-271-272-273-274-275-276-277-278-279-280", "281-282-283-284-285-286-287-288-289-290-291-292-293-294-295-296", "214-215-216-217-218-219-220-221-222-223-224-225-226", "176-177-178-179-180-181-182-183-184-185-186-187-188-189-190", "4-4-4-4-4",
		"0-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-33-34-35-36-37-38-39-40-41-42-43-44-45-46-47-48-49-50-51-52-53-116-123-127-128-129-134-135-136"
	};

	private List<int> premiumProducts = new List<int> { 173, 175, 186, 287, 296, 297, 299 };

	private bool dummySpawnCooldown;

	private bool spawnCooldown;

	private bool coroutinePlaying;

	private int counter;

	private int counter2;

	public string[] NetworkhiredEmployeesData
	{
		get
		{
			return hiredEmployeesData;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref hiredEmployeesData, 1uL, null);
		}
	}

	public string[] NetworktodaysEmployeesData
	{
		get
		{
			return todaysEmployeesData;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref todaysEmployeesData, 2uL, null);
		}
	}

	public int[] NetworkpriorityArray
	{
		get
		{
			return priorityArray;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref priorityArray, 4uL, null);
		}
	}

	public int NetworknumberOfHiredEmployees
	{
		get
		{
			return numberOfHiredEmployees;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref numberOfHiredEmployees, 8uL, null);
		}
	}

	public int NetworkrerollTimes
	{
		get
		{
			return rerollTimes;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref rerollTimes, 16uL, null);
		}
	}

	private void Awake()
	{
		if (Instance == null)
		{
			Instance = this;
		}
	}

	public override void OnStartClient()
	{
		if (!base.isServer)
		{
			CmdRequestHappinessLevel();
			StartCoroutine(RequestRecycleStatus());
		}
		if (base.isServer && !alreadySetRerolls)
		{
			StartCoroutine(DelayedSetReroll());
		}
	}

	private void FixedUpdate()
	{
		if (!base.isServer)
		{
			return;
		}
		if (dummynpcParentOBJ.transform.childCount < maxDummyNPCs && !dummySpawnCooldown)
		{
			StartCoroutine(SpawnDummyNCP());
		}
		DummyNPCControl();
		if (shelvesOBJ.transform.childCount < 1 || checkoutOBJ.transform.childCount < 1 || !ProductListing.Instance.unlockedProductTiers[0])
		{
			return;
		}
		int childCount = employeeParentOBJ.transform.childCount;
		if (!spawnedEmployees)
		{
			spawnedEmployees = true;
			StartCoroutine(InitEmployeeSpawn());
			StartCoroutine(DelayedHappinessCalculation());
		}
		if (childCount > 0)
		{
			if (!mainShelfUpdateIsRunning)
			{
				StartCoroutine(MainRestockUpdate());
			}
			EmployeeNPCControl(counter2);
			counter2++;
			if (counter2 >= childCount)
			{
				counter2 = 0;
			}
		}
		if (!GameData.Instance.isSupermarketOpen && GameData.Instance.timeOfDay < 8.05f)
		{
			return;
		}
		if (customersnpcParentOBJ.transform.childCount < GameData.Instance.maxCustomersNPCs && !spawnCooldown && GameData.Instance.timeOfDay < 22f)
		{
			StartCoroutine(SpawnCustomerNPC());
		}
		if (orderPickupPointsList.Count > 0 && NPCsOrdersList.Count > 0 && !ordersSpawnCooldown)
		{
			for (int i = 0; i < orderPickupPointsList.Count; i++)
			{
				if ((bool)orderPickupPointsList[i])
				{
					StartCoroutine(SpawnOrderCustomerNPC());
					break;
				}
			}
		}
		int childCount2 = customersnpcParentOBJ.transform.childCount;
		if (childCount2 != 0)
		{
			if (counter >= childCount2 - 1)
			{
				counter = 0;
			}
			else
			{
				counter++;
			}
			CustomerNPCControl(counter);
		}
	}

	private IEnumerator RequestRecycleStatus()
	{
		yield return new WaitForSeconds(5f);
		CmdRequestRecycleStatus();
	}

	[Command(requiresAuthority = false)]
	public void CmdUpdateRecycleStatus()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void NPC_Manager::CmdUpdateRecycleStatus()", -234006800, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdRequestRecycleStatus()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void NPC_Manager::CmdRequestRecycleStatus()", 615025302, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateRecycleStatus(bool value)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(value);
		SendRPCInternal("System.Void NPC_Manager::RpcUpdateRecycleStatus(System.Boolean)", 2009389500, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator DelayedSetReroll()
	{
		yield return new WaitForSeconds(5f);
		while (!GameData.Instance)
		{
			yield return null;
		}
		int gameDay = GameData.Instance.gameDay;
		if (gameDay > 3)
		{
			SetRerollingTimes(gameDay);
		}
	}

	private void SetRerollingTimes(int gameDay)
	{
		int value = Mathf.CeilToInt(gameDay / 5);
		NetworkrerollTimes = Mathf.Clamp(value, 1, 30);
		alreadySetRerolls = true;
	}

	[Command(requiresAuthority = false)]
	public void CmdRerollCall()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void NPC_Manager::CmdRerollCall()", -653429368, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcRerollCall(bool deactivateReroll)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(deactivateReroll);
		SendRPCInternal("System.Void NPC_Manager::RpcRerollCall(System.Boolean)", 715403938, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void UpdateTodayEmployeesOnClients(int index, string data)
	{
		RpcUpdateTodayEmployeesOnClients(index, data);
	}

	[ClientRpc]
	private void RpcUpdateTodayEmployeesOnClients(int index, string data)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteString(data);
		SendRPCInternal("System.Void NPC_Manager::RpcUpdateTodayEmployeesOnClients(System.Int32,System.String)", 159412762, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdHireEmployeeData(int employeeIndex, string employeeName)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(employeeIndex);
		writer.WriteString(employeeName);
		SendCommandInternal("System.Void NPC_Manager::CmdHireEmployeeData(System.Int32,System.String)", -1537443135, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcClientHire(int employeeIndex, int hiredIndex, string data)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(employeeIndex);
		writer.WriteInt(hiredIndex);
		writer.WriteString(data);
		SendRPCInternal("System.Void NPC_Manager::RpcClientHire(System.Int32,System.Int32,System.String)", 1899696612, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdDismissEmployeeData(int employeeIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(employeeIndex);
		SendCommandInternal("System.Void NPC_Manager::CmdDismissEmployeeData(System.Int32)", 689063053, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcClientDismiss(int employeeIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(employeeIndex);
		SendRPCInternal("System.Void NPC_Manager::RpcClientDismiss(System.Int32)", 446288465, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SetHiredEmployeesNumber()
	{
		int num = 0;
		string[] array = hiredEmployeesData;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i] != "")
			{
				num++;
			}
		}
		NetworknumberOfHiredEmployees = num;
	}

	private IEnumerator InitEmployeeSpawn()
	{
		yield return new WaitForSeconds(5f);
		for (int i = 0; i < hiredEmployeesData.Length; i++)
		{
			if (hiredEmployeesData[i] != "")
			{
				SpawnEmployeeByIndex(i);
			}
		}
		SetHiredEmployeesNumber();
		initialEmployeesSpawnIsFinished = true;
	}

	private IEnumerator DelayedHappinessCalculation()
	{
		yield return new WaitForSeconds(2f);
		CalculateDayHappinessLevel();
	}

	private void CalculateDayHappinessLevel()
	{
		Transform child = GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(7);
		currentHappinessLevel = 0f;
		foreach (Transform item in child)
		{
			if ((bool)item.GetComponent<BuildableInfo>())
			{
				currentHappinessLevel += item.GetComponent<BuildableInfo>().employeeHappiness;
			}
		}
		RpcRequestHappinessLevel(currentHappinessLevel);
	}

	[Command(requiresAuthority = false)]
	private void CmdRequestHappinessLevel()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void NPC_Manager::CmdRequestHappinessLevel()", -1117082196, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcRequestHappinessLevel(float happinessLevel)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(happinessLevel);
		SendRPCInternal("System.Void NPC_Manager::RpcRequestHappinessLevel(System.Single)", 841705234, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SpawnEmployeeByIndex(int index)
	{
		string[] array = hiredEmployeesData[index].Split("|");
		if (array.Length < 14)
		{
			array = AdaptOldEmployeeDataToNewData(index);
		}
		int networkNPCID = int.Parse(array[0]);
		int salary = int.Parse(array[1]);
		int cashierValue = int.Parse(array[2]);
		int restockerValue = int.Parse(array[3]);
		int storageValue = int.Parse(array[4]);
		int securityValue = int.Parse(array[5]);
		int technicianValue = int.Parse(array[6]);
		int orderingValue = int.Parse(array[7]);
		int manufacturingValue = int.Parse(array[8]);
		string networkNPCName = array[9];
		int networkhatID = int.Parse(array[10]);
		int cashierExperience = int.Parse(array[11]);
		int restockerExperience = int.Parse(array[12]);
		int storageExperience = int.Parse(array[13]);
		int securityExperience = int.Parse(array[14]);
		int technicianExperience = int.Parse(array[15]);
		int orderingExperience = int.Parse(array[16]);
		int manufacturingExperience = int.Parse(array[17]);
		Vector3 position = employeeSpawnpoint.transform.position + new Vector3(Random.Range(-1f, 1f), 0f, Random.Range(-1f, 1f));
		GameObject gameObject = Object.Instantiate(npcAgentPrefab, position, Quaternion.identity);
		gameObject.transform.SetParent(employeeParentOBJ.transform);
		gameObject.transform.Find("TrashTrigger").gameObject.SetActive(value: false);
		NPC_Info component = gameObject.GetComponent<NPC_Info>();
		component.NetworkNPCID = networkNPCID;
		component.NetworkisEmployee = true;
		component.salary = salary;
		component.cashierValue = cashierValue;
		component.restockerValue = restockerValue;
		component.storageValue = storageValue;
		component.securityValue = securityValue;
		component.technicianValue = technicianValue;
		component.orderingValue = orderingValue;
		component.manufacturingValue = manufacturingValue;
		component.NetworkNPCName = networkNPCName;
		component.NetworkhatID = networkhatID;
		component.cashierExperience = cashierExperience;
		component.restockerExperience = restockerExperience;
		component.storageExperience = storageExperience;
		component.securityExperience = securityExperience;
		component.technicianExperience = technicianExperience;
		component.orderingExperience = orderingExperience;
		component.manufacturingExperience = manufacturingExperience;
		employeesArray[index] = gameObject;
		NetworkServer.Spawn(gameObject);
		NavMeshAgent component2 = gameObject.GetComponent<NavMeshAgent>();
		component2.agentTypeID = base.transform.Find("AgentSample").GetComponent<NavMeshAgent>().agentTypeID;
		component2.enabled = true;
		component2.speed = 2.5f + 2.5f * extraEmployeeSpeedFactor;
		component2.angularSpeed = 120f + 30f * extraEmployeeSpeedFactor;
		component2.acceleration = 8f + 16f * extraEmployeeSpeedFactor;
		component2.obstacleAvoidanceType = ObstacleAvoidanceType.NoObstacleAvoidance;
		SetEmployeesLevels(component);
	}

	private string[] AdaptOldEmployeeDataToNewData(int index)
	{
		string[] array = hiredEmployeesData[index].Split("|");
		int num = (int.Parse(array[2]) + int.Parse(array[3]) + int.Parse(array[4]) + int.Parse(array[5])) / 4;
		string text = array[0] + "|" + array[1] + "|" + array[2] + "|" + array[3] + "|" + array[4] + "|" + array[5] + "|" + num + "|" + num + "|" + num + "|" + array[6] + "|" + array[7] + "|" + array[8] + "|" + array[9] + "|" + array[10] + "|" + array[11] + "|1000|1000|1000";
		hiredEmployeesData[index] = text;
		return text.Split("|");
	}

	public void EndDaySaveEmployeesValues()
	{
		CalculateDayHappinessLevel();
		for (int i = 0; i < hiredEmployeesData.Length; i++)
		{
			GameObject gameObject = employeesArray[i];
			if (!(gameObject == null))
			{
				NPC_Info component = gameObject.GetComponent<NPC_Info>();
				int nPCID = component.NPCID;
				int salary = component.salary;
				int cashierValue = component.cashierValue;
				int restockerValue = component.restockerValue;
				int storageValue = component.storageValue;
				int securityValue = component.securityValue;
				int technicianValue = component.technicianValue;
				int orderingValue = component.orderingValue;
				int manufacturingValue = component.manufacturingValue;
				string nPCName = component.NPCName;
				int hatID = component.hatID;
				int cashierExperience = component.cashierExperience;
				int restockerExperience = component.restockerExperience;
				int storageExperience = component.storageExperience;
				int securityExperience = component.securityExperience;
				int technicianExperience = component.technicianExperience;
				int orderingExperience = component.orderingExperience;
				int manufacturingExperience = component.manufacturingExperience;
				hiredEmployeesData[i] = nPCID + "|" + salary + "|" + cashierValue + "|" + restockerValue + "|" + storageValue + "|" + securityValue + "|" + technicianValue + "|" + orderingValue + "|" + manufacturingValue + "|" + nPCName + "|" + hatID + "|" + cashierExperience + "|" + restockerExperience + "|" + storageExperience + "|" + securityExperience + "|" + technicianExperience + "|" + orderingExperience + "|" + manufacturingExperience;
				SetEmployeesLevels(component);
			}
		}
	}

	private void SetEmployeesLevels(NPC_Info npcinfoComponent)
	{
		npcinfoComponent.cashierLevel = Mathf.Clamp(Mathf.FloorToInt(npcinfoComponent.cashierExperience / 5000), 1, 100);
		npcinfoComponent.restockerLevel = Mathf.Clamp(Mathf.FloorToInt(npcinfoComponent.restockerExperience / 1000), 1, 100);
		npcinfoComponent.storageLevel = Mathf.Clamp(Mathf.FloorToInt(npcinfoComponent.storageExperience / 1000), 1, 100);
		npcinfoComponent.securityLevel = Mathf.Clamp(Mathf.FloorToInt(npcinfoComponent.securityExperience / 1000), 1, 100);
		npcinfoComponent.technicianLevel = Mathf.Clamp(Mathf.FloorToInt(npcinfoComponent.technicianExperience / 1000), 1, 100);
		npcinfoComponent.orderingLevel = Mathf.Clamp(Mathf.FloorToInt(npcinfoComponent.orderingExperience / 1000), 1, 100);
		npcinfoComponent.manufacturingLevel = Mathf.Clamp(Mathf.FloorToInt(npcinfoComponent.manufacturingExperience / 1000), 1, 100);
	}

	[Command(requiresAuthority = false)]
	public void CmdChangeEmployeeName(int index, string newName)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteString(newName);
		SendCommandInternal("System.Void NPC_Manager::CmdChangeEmployeeName(System.Int32,System.String)", 1013834196, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcChangeEmployeeName(GameObject employeeOBJ, string newName)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(employeeOBJ);
		writer.WriteString(newName);
		SendRPCInternal("System.Void NPC_Manager::RpcChangeEmployeeName(UnityEngine.GameObject,System.String)", 488901484, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdChangeEmployeeHat(int employeeIndex, int quantity)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(employeeIndex);
		writer.WriteInt(quantity);
		SendCommandInternal("System.Void NPC_Manager::CmdChangeEmployeeHat(System.Int32,System.Int32)", 1599155687, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcChangeEmployeeHat(int index, int newHatIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(newHatIndex);
		SendRPCInternal("System.Void NPC_Manager::RpcChangeEmployeeHat(System.Int32,System.Int32)", 438334612, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdChangeEmployeePriority(int employeeIndex, int whichPriority)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(employeeIndex);
		writer.WriteInt(whichPriority);
		SendCommandInternal("System.Void NPC_Manager::CmdChangeEmployeePriority(System.Int32,System.Int32)", -902137038, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcChangeEmployeePriority(int index, int currentPriorityValue)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		writer.WriteInt(currentPriorityValue);
		SendRPCInternal("System.Void NPC_Manager::RpcChangeEmployeePriority(System.Int32,System.Int32)", 1943642655, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdChangeAllEmployeePriorities(int whichPriority)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichPriority);
		SendCommandInternal("System.Void NPC_Manager::CmdChangeAllEmployeePriorities(System.Int32)", -1487051270, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcChangeAllEmployeePriorities(int currentPriorityValue)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(currentPriorityValue);
		SendRPCInternal("System.Void NPC_Manager::RpcChangeAllEmployeePriorities(System.Int32)", 12948923, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdLoadPrioritiesLayout(int[] loadedPrioritiesArray)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		GeneratedNetworkCode._Write_System.Int32[](writer, loadedPrioritiesArray);
		SendCommandInternal("System.Void NPC_Manager::CmdLoadPrioritiesLayout(System.Int32[])", 1971113061, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcLoadPrioritiesLayout(int[] loadedPrioritiesArray)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		GeneratedNetworkCode._Write_System.Int32[](writer, loadedPrioritiesArray);
		SendRPCInternal("System.Void NPC_Manager::RpcLoadPrioritiesLayout(System.Int32[])", -139425442, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public int RetrieveGlobalSalary()
	{
		int num = 0;
		for (int i = 0; i < employeesArray.Length; i++)
		{
			GameObject gameObject = employeesArray[i];
			if ((bool)gameObject)
			{
				num += gameObject.GetComponent<NPC_Info>().salary;
			}
		}
		return num;
	}

	private void AssignEmployeesPriorities()
	{
		for (int i = 0; i < priorityArray.Length; i++)
		{
			GameObject gameObject = employeesArray[i];
			if (gameObject == null)
			{
				continue;
			}
			NPC_Info component = gameObject.GetComponent<NPC_Info>();
			int taskPriority = component.taskPriority;
			int num = priorityArray[i];
			if (taskPriority != num)
			{
				if (taskPriority == 1 && num != 1)
				{
					component.employeeAssignedCheckoutIndex = -1;
				}
				if (component.playingCoroutine)
				{
					component.StopCoroutinesFromManager();
				}
				component.taskPriority = num;
				component.state = 0;
			}
		}
		UpdateEmployeeStats();
		UpdateEmployeeCheckouts();
	}

	public void UpdateEmployeeStats()
	{
		int num = 0;
		foreach (Transform item in employeeParentOBJ.transform)
		{
			NPC_Info component = item.GetComponent<NPC_Info>();
			NavMeshAgent component2 = item.GetComponent<NavMeshAgent>();
			component2.speed = 2.5f + 2.5f * extraEmployeeSpeedFactor;
			GameObject employeeBroomOBJ = component.employeeBroomOBJ;
			int taskPriority = component.taskPriority;
			switch (taskPriority)
			{
			case 2:
				component2.speed += 0.05f * (float)component.restockerLevel;
				break;
			case 3:
				component2.speed += 0.05f * (float)component.storageLevel;
				break;
			case 4:
				component2.speed += component2.speed * 0.8f + 0.05f * (float)component.securityLevel;
				break;
			case 5:
				component2.speed += 0.05f * (float)component.technicianLevel;
				break;
			case 6:
				component2.speed += 0.05f * (float)component.orderingLevel;
				break;
			}
			component2.speed = Mathf.Clamp(component2.speed, 1f, 12f);
			int skinIndex = 0;
			if ((bool)FirstPersonController.Instance)
			{
				skinIndex = FirstPersonController.Instance.GetComponent<PlayerSyncCharacter>().broomSkin;
			}
			if (taskPriority == 4)
			{
				component.RpcShowBroom(set: true, skinIndex);
			}
			else if ((bool)employeeBroomOBJ && employeeBroomOBJ.activeSelf)
			{
				component.RpcShowBroom(set: false, skinIndex);
			}
			num++;
			if ((float)num > currentHappinessLevel)
			{
				component2.speed *= 0.9f;
			}
		}
	}

	public void UpdateEmployeesBroomSkinFromAchievManager(int broomIndex)
	{
		foreach (Transform item in employeeParentOBJ.transform)
		{
			NPC_Info component = item.GetComponent<NPC_Info>();
			if (component.taskPriority == 4)
			{
				component.RpcShowBroom(set: true, broomIndex);
			}
		}
	}

	public void UpdateEmployeeCheckoutsFromDataContainer()
	{
		UpdateEmployeeCheckouts();
	}

	private void UpdateEmployeeCheckouts()
	{
		if (checkoutOBJ.transform.childCount == 0 || employeeParentOBJ.transform.childCount == 0)
		{
			return;
		}
		employeesCheckoutIndexes.Clear();
		foreach (Transform item in employeeParentOBJ.transform)
		{
			employeesCheckoutIndexes.Add(item.GetComponent<NPC_Info>().employeeAssignedCheckoutIndex);
		}
		for (int i = 0; i < checkoutOBJ.transform.childCount; i++)
		{
			Data_Container component = checkoutOBJ.transform.GetChild(i).GetComponent<Data_Container>();
			bool flag = false;
			for (int j = 0; j < employeesCheckoutIndexes.Count; j++)
			{
				if (employeesCheckoutIndexes[j] == i)
				{
					flag = true;
					component.isOccupiedByNPCCashier = true;
				}
			}
			if (!flag)
			{
				component.isOccupiedByNPCCashier = false;
			}
		}
	}

	private void EmployeeNPCControl(int employeeIndex)
	{
		if (employeeIndex >= employeeParentOBJ.transform.childCount)
		{
			return;
		}
		GameObject gameObject = employeeParentOBJ.transform.GetChild(employeeIndex).gameObject;
		NPC_Info component = gameObject.GetComponent<NPC_Info>();
		int state = component.state;
		NavMeshAgent component2 = gameObject.GetComponent<NavMeshAgent>();
		int taskPriority = component.taskPriority;
		if (component.employeeDismissed)
		{
			if (Vector3.Distance(gameObject.transform.position, employeeSpawnpoint.transform.position) < 2f)
			{
				NetworkServer.Destroy(gameObject);
			}
		}
		else if (employeesOnRiot)
		{
			if (component.equippedItem > 0)
			{
				DropBoxOnGround(component);
				UnequipBox(component);
			}
			if (state != 0)
			{
				component.state = 0;
			}
		}
		else
		{
			if (state == -1)
			{
				return;
			}
			if (taskPriority == 4 && state == 2)
			{
				if ((bool)component.currentChasedThiefOBJ)
				{
					if (component.currentChasedThiefOBJ.transform.position.x < -15f || component.currentChasedThiefOBJ.transform.position.x > 38f || component.currentChasedThiefOBJ.GetComponent<NPC_Info>().productsIDCarrying.Count == 0)
					{
						component.state = 0;
						return;
					}
					if (Vector3.Distance(gameObject.transform.position, component.currentChasedThiefOBJ.transform.position) < 3f)
					{
						component2.SetDestination(gameObject.transform.position);
						component.state = 3;
					}
					else
					{
						component.CallPathing();
					}
				}
				else
				{
					component.state = 0;
				}
			}
			if (component2.pathPending || !(component2.remainingDistance <= component2.stoppingDistance) || (component2.hasPath && component2.velocity.sqrMagnitude != 0f))
			{
				return;
			}
			switch (taskPriority)
			{
			case 0:
				switch (state)
				{
				case 0:
					if (component.equippedItem > 0)
					{
						DropBoxOnGround(component);
						UnequipBox(component);
					}
					else
					{
						component2.destination = AttemptToGetRestPosition();
						component.state = 1;
					}
					break;
				default:
					component.state = 0;
					break;
				case 1:
					break;
				}
				break;
			case 1:
				switch (state)
				{
				case 0:
				case 1:
				{
					if (component.equippedItem > 0)
					{
						DropBoxOnGround(component);
						UnequipBox(component);
						break;
					}
					int num = CashierGetAvailableCheckout();
					if (num != -1)
					{
						component.employeeAssignedCheckoutIndex = num;
						UpdateEmployeeCheckouts();
						component2.destination = checkoutOBJ.transform.GetChild(num).transform.Find("EmployeePosition").transform.position;
						component.state = 2;
					}
					else
					{
						component.state = 10;
					}
					break;
				}
				case 10:
					if (Vector3.Distance(component.transform.position, restSpotOBJ.transform.position) > 6.5f)
					{
						component2.destination = AttemptToGetRestPosition();
						break;
					}
					component.StartWaitState(2f, 0);
					component.state = -1;
					break;
				case 2:
					component.RPCNotificationAboveHead("NPCemployee0", "");
					component.StartWaitState(1.5f, 3);
					component.state = -1;
					break;
				case 3:
					if (CheckIfCustomerInQueue(component.employeeAssignedCheckoutIndex))
					{
						if (checkoutOBJ.transform.GetChild(component.employeeAssignedCheckoutIndex).GetComponent<Data_Container>().checkoutQueue[0])
						{
							if (checkoutOBJ.transform.GetChild(component.employeeAssignedCheckoutIndex).GetComponent<Data_Container>().productsLeft > 0)
							{
								component.state = 5;
							}
							else
							{
								component.state = 4;
							}
						}
						else
						{
							component.state = 4;
						}
					}
					else if (checkoutOBJ.transform.GetChild(component.employeeAssignedCheckoutIndex).GetComponent<Data_Container>().isCheckoutClosed)
					{
						component.employeeAssignedCheckoutIndex = -1;
						component.state = 0;
					}
					else
					{
						component.state = 4;
					}
					break;
				case 4:
					component.StartWaitState(1.5f, 3);
					component.state = -1;
					break;
				case 5:
				{
					if (checkoutOBJ.transform.GetChild(component.employeeAssignedCheckoutIndex).GetComponent<Data_Container>().productsLeft == 0)
					{
						component.state = 7;
						break;
					}
					float timeToWait2 = Mathf.Clamp(productCheckoutWait - (float)component.cashierLevel * 0.01f, 0.05f, 1f);
					component.StartWaitState(timeToWait2, 6);
					component.state = -1;
					break;
				}
				case 6:
				{
					List<GameObject> internalProductListForEmployees = checkoutOBJ.transform.GetChild(component.employeeAssignedCheckoutIndex).GetComponent<Data_Container>().internalProductListForEmployees;
					int value = component.cashierLevel / 15;
					value = Mathf.Clamp(value, 1, 10);
					int num2 = Mathf.Clamp(component.cashierValue - value - 1, 2, 10);
					int num3 = 0;
					for (int i = 0; i < internalProductListForEmployees.Count; i++)
					{
						GameObject gameObject2 = internalProductListForEmployees[i];
						if (gameObject2 != null)
						{
							component.cashierExperience += num2;
							gameObject2.GetComponent<ProductCheckoutSpawn>().AddProductFromNPCEmployee();
							num3++;
							if (num3 >= value)
							{
								break;
							}
						}
					}
					component.state = 5;
					break;
				}
				case 7:
				{
					GameObject currentNPC = checkoutOBJ.transform.GetChild(component.employeeAssignedCheckoutIndex).GetComponent<Data_Container>().currentNPC;
					if (!currentNPC)
					{
						component.state = 3;
					}
					if (currentNPC.GetComponent<NPC_Info>().alreadyGaveMoney)
					{
						checkoutOBJ.transform.GetChild(component.employeeAssignedCheckoutIndex).GetComponent<Data_Container>().AuxReceivePayment(0f, applyEmployeeRate: true);
						component.state = 3;
					}
					else
					{
						float timeToWait = Mathf.Clamp(productCheckoutWait - (float)component.cashierLevel * 0.01f, 0.05f, 1f);
						component.StartWaitState(timeToWait, 7);
						component.state = -1;
					}
					break;
				}
				default:
					component.state = 0;
					break;
				}
				break;
			case 2:
				switch (state)
				{
				case 0:
					if (component.equippedItem > 0)
					{
						DropBoxOnGround(component);
						UnequipBox(component);
						break;
					}
					if (mainUpdateIsBeingCalculated)
					{
						component.StartWaitState(0.2f, 0);
						component.state = -1;
						break;
					}
					component.productAvailableArray = ReturnWeightedRestockerTask(gameObject);
					if (component.productAvailableArray[0] == -1)
					{
						if (Vector3.Distance(component.transform.position, restSpotOBJ.transform.position) > 6.5f)
						{
							component2.destination = AttemptToGetRestPosition();
							break;
						}
						component.StartWaitState(2f, 0);
						component.state = -1;
					}
					else
					{
						component2.destination = storageOBJ.transform.GetChild(component.productAvailableArray[2]).transform.Find("Standspot").transform.position;
						component.state = 2;
					}
					break;
				case 2:
				{
					Data_Container component6 = storageOBJ.transform.GetChild(component.productAvailableArray[2]).GetComponent<Data_Container>();
					int[] productInfoArray2 = component6.productInfoArray;
					int num13 = productInfoArray2[component.productAvailableArray[3]];
					if (num13 == component.productAvailableArray[5])
					{
						int num14 = productInfoArray2[component.productAvailableArray[3] + 1];
						if (num14 <= 0)
						{
							component.StartWaitState(2f, 0);
							component.state = -1;
							break;
						}
						if ((bool)storageOBJ.transform.GetChild(component.productAvailableArray[2]).transform.Find("CanvasSigns"))
						{
							component6.EmployeeUpdateArrayValuesStorage(component.productAvailableArray[3], num13, -1);
						}
						else
						{
							component6.EmployeeUpdateArrayValuesStorage(component.productAvailableArray[3], -1, -1);
						}
						component.NetworkboxProductID = num13;
						component.NetworkboxNumberOfProducts = num14;
						component.EquipNPCItem(1);
						component2.destination = shelvesOBJ.transform.GetChild(component.productAvailableArray[0]).transform.Find("Standspot").transform.position;
						component.state = 3;
					}
					else
					{
						component.StartWaitState(2f, 0);
						component.state = -1;
					}
					break;
				}
				case 3:
					if (shelvesOBJ.transform.GetChild(component.productAvailableArray[0]).GetComponent<Data_Container>().productInfoArray[component.productAvailableArray[1]] == component.productAvailableArray[4])
					{
						component.state = 4;
					}
					else
					{
						component.state = 5;
					}
					break;
				case 4:
				{
					Data_Container component5 = shelvesOBJ.transform.GetChild(component.productAvailableArray[0]).GetComponent<Data_Container>();
					int num11 = component5.productInfoArray[component.productAvailableArray[1] + 1];
					int maxProductsPerRow = GetMaxProductsPerRow(component.productAvailableArray[0], component.productAvailableArray[4]);
					if (component.boxNumberOfProducts > 0 && num11 < maxProductsPerRow)
					{
						int value4 = maxProductsPerRow - num11;
						value4 = Mathf.Clamp(value4, 1, component.restockerLevel);
						int boxNumberOfProducts = component.boxNumberOfProducts;
						boxNumberOfProducts = Mathf.Clamp(boxNumberOfProducts, 1, component.restockerLevel);
						int num12 = boxNumberOfProducts;
						if (value4 < boxNumberOfProducts)
						{
							num12 = value4;
						}
						component5.EmployeeAddsItemToRow(component.productAvailableArray[1], num12);
						component.NetworkboxNumberOfProducts = component.boxNumberOfProducts - num12;
						component.StartWaitState(employeeItemPlaceWait, 4);
						component.state = -1;
						component.restockerExperience += component.restockerValue;
					}
					else if (component.boxNumberOfProducts > 0 && CheckIfShelfWithSameProduct(component.productAvailableArray[4], component, component.productAvailableArray[0]))
					{
						component2.destination = shelvesOBJ.transform.GetChild(component.productAvailableArray[0]).transform.Find("Standspot").transform.position;
						component.state = 3;
					}
					else
					{
						component.state = 5;
					}
					break;
				}
				case 5:
				{
					if (component.boxNumberOfProducts <= 0)
					{
						GameObject closestCardboardBaler2 = GetClosestCardboardBaler(gameObject);
						if ((bool)closestCardboardBaler2)
						{
							component.closestCardboardBaler = closestCardboardBaler2;
							component2.destination = closestCardboardBaler2.transform.Find("Standspot").transform.position;
							component.state = 30;
						}
						else if (closestRecyclePerk)
						{
							component2.destination = trashSpotOBJ.transform.position;
							component.state = 9;
						}
						else if (employeeRecycleBoxes && !interruptBoxRecycling)
						{
							float num15 = Vector3.Distance(gameObject.transform.position, recycleSpot1OBJ.transform.position);
							float num16 = Vector3.Distance(gameObject.transform.position, recycleSpot2OBJ.transform.position);
							if (num15 < num16)
							{
								component2.destination = recycleSpot1OBJ.transform.position;
								component.state = 9;
							}
							else
							{
								component2.destination = recycleSpot2OBJ.transform.position;
								component.state = 9;
							}
						}
						else
						{
							component2.destination = trashSpotOBJ.transform.position;
							component.state = 6;
						}
						break;
					}
					int storageContainerWithBoxToMerge3 = GetStorageContainerWithBoxToMerge(component.boxProductID);
					if (storageContainerWithBoxToMerge3 >= 0)
					{
						component.currentFreeStorageIndex = storageContainerWithBoxToMerge3;
						component2.destination = storageOBJ.transform.GetChild(storageContainerWithBoxToMerge3).transform.Find("Standspot").transform.position;
						component.state = 20;
						break;
					}
					int freeStorageContainer4 = GetFreeStorageContainer(component.boxProductID);
					if (freeStorageContainer4 >= 0)
					{
						component2.destination = storageOBJ.transform.GetChild(freeStorageContainer4).transform.Find("Standspot").transform.position;
						component.state = 7;
					}
					else
					{
						component2.destination = leftoverBoxesSpotOBJ.transform.position;
						component.state = 8;
					}
					break;
				}
				case 6:
					UnequipBox(component);
					break;
				case 7:
				{
					int storageContainerWithBoxToMerge2 = GetStorageContainerWithBoxToMerge(component.boxProductID);
					if (storageContainerWithBoxToMerge2 >= 0)
					{
						component.currentFreeStorageIndex = storageContainerWithBoxToMerge2;
						component2.destination = storageOBJ.transform.GetChild(storageContainerWithBoxToMerge2).transform.Find("Standspot").transform.position;
						component.state = 20;
						break;
					}
					int freeStorageContainer3 = GetFreeStorageContainer(component.boxProductID);
					if (freeStorageContainer3 >= 0)
					{
						int freeStorageRow2 = GetFreeStorageRow(freeStorageContainer3, component.boxProductID);
						if (freeStorageRow2 >= 0)
						{
							storageOBJ.transform.GetChild(freeStorageContainer3).GetComponent<Data_Container>().EmployeeUpdateArrayValuesStorage(freeStorageRow2 * 2, component.boxProductID, component.boxNumberOfProducts);
							component.state = 6;
						}
						else
						{
							component.StartWaitState(1.5f, 5);
							component.state = -1;
						}
					}
					else
					{
						component.StartWaitState(1.5f, 5);
						component.state = -1;
					}
					break;
				}
				case 8:
				{
					Vector3 spawnpoint2 = leftoverBoxesSpotOBJ.transform.position + new Vector3(Random.Range(-1f, 1f), 4f, Random.Range(-1f, 1f));
					GameData.Instance.GetComponent<ManagerBlackboard>().SpawnBoxFromEmployee(spawnpoint2, component.boxProductID, component.boxNumberOfProducts);
					component.state = 6;
					break;
				}
				case 9:
				{
					float fundsToAdd3 = 1.5f * (float)GameData.Instance.GetComponent<UpgradesManager>().boxRecycleFactor;
					AchievementsManager.Instance.CmdAddAchievementPoint(2, 1);
					GameData.Instance.CmdAlterFunds(fundsToAdd3);
					component.state = 6;
					break;
				}
				case 20:
				{
					int storageRowWithBoxToMerge2 = GetStorageRowWithBoxToMerge(component.currentFreeStorageIndex, component.boxProductID);
					if (storageRowWithBoxToMerge2 >= 0)
					{
						EmployeeMergeBoxContents(component, component.currentFreeStorageIndex, component.boxProductID, storageRowWithBoxToMerge2);
						component.StartWaitState(1f, 5);
						component.state = -1;
					}
					else
					{
						component.StartWaitState(1f, 5);
						component.state = -1;
					}
					break;
				}
				case 30:
					if ((bool)component.closestCardboardBaler)
					{
						component.closestCardboardBaler.GetComponent<CardboardBaler>().AuxiliarAddBoxToBaler(component.boxProductID);
						UnequipBox(component);
					}
					else
					{
						component.StartWaitState(1f, 0);
						component.state = -1;
					}
					break;
				default:
					component.state = 0;
					break;
				case 1:
					break;
				}
				break;
			case 3:
				switch (state)
				{
				case 0:
					if (component.equippedItem > 0)
					{
						DropBoxOnGround(component);
						UnequipBox(component);
					}
					else if (GetFreeStorageContainer(10000) < 0)
					{
						GameObject randomGroundBoxAllowedInStorage = GetRandomGroundBoxAllowedInStorage(gameObject);
						if ((bool)randomGroundBoxAllowedInStorage)
						{
							component.randomBox = randomGroundBoxAllowedInStorage;
							component2.destination = randomGroundBoxAllowedInStorage.transform.position;
							component.state = 1;
						}
						else
						{
							component.state = 10;
						}
					}
					else
					{
						GameObject randomGroundBox = GetRandomGroundBox(gameObject);
						if ((bool)randomGroundBox && NavMesh.SamplePosition(new Vector3(randomGroundBox.transform.position.x, 0f, randomGroundBox.transform.position.z), out var hit2, 1f, -1))
						{
							component.randomBox = randomGroundBox;
							component2.destination = hit2.position;
							component.state = 1;
						}
						else
						{
							component.state = 10;
						}
					}
					break;
				case 10:
					if (Vector3.Distance(component.transform.position, restSpotOBJ.transform.position) > 6.5f)
					{
						component2.destination = AttemptToGetRestPosition();
						break;
					}
					component.StartWaitState(2f, 0);
					component.state = -1;
					break;
				case 1:
					if ((bool)component.randomBox)
					{
						Vector3 a2 = new Vector3(component.randomBox.transform.position.x, 0f, component.randomBox.transform.position.z);
						Vector3 b2 = new Vector3(component.transform.position.x, 0f, component.transform.position.z);
						if (Vector3.Distance(a2, b2) < 2f)
						{
							BoxData component4 = component.randomBox.GetComponent<BoxData>();
							component.NetworkboxProductID = component4.productID;
							component.NetworkboxNumberOfProducts = component4.numberOfProducts;
							component.EquipNPCItem(1);
							GameData.Instance.GetComponent<NetworkSpawner>().EmployeeDestroyBox(component.randomBox);
							if (component4.numberOfProducts > 0)
							{
								component.state = 18;
							}
							else
							{
								component.state = 6;
							}
							break;
						}
					}
					component.StartWaitState(1f, 0);
					component.state = -1;
					break;
				case 2:
				{
					int freeStorageContainer2 = GetFreeStorageContainer(component.boxProductID);
					if (freeStorageContainer2 >= 0)
					{
						component.currentFreeStorageIndex = freeStorageContainer2;
						component.currentFreeStorageOBJ = storageOBJ.transform.GetChild(freeStorageContainer2).gameObject;
						component2.destination = storageOBJ.transform.GetChild(freeStorageContainer2).transform.Find("Standspot").transform.position;
						component.state = 3;
					}
					else
					{
						component2.destination = leftoverBoxesSpotOBJ.transform.position;
						component.state = 4;
					}
					break;
				}
				case 3:
				{
					int freeStorageContainer = GetFreeStorageContainer(component.boxProductID);
					if (freeStorageContainer >= 0 && component.currentFreeStorageIndex == freeStorageContainer && (bool)component.currentFreeStorageOBJ)
					{
						int freeStorageRow = GetFreeStorageRow(freeStorageContainer, component.boxProductID);
						if (freeStorageRow >= 0)
						{
							storageOBJ.transform.GetChild(freeStorageContainer).GetComponent<Data_Container>().EmployeeUpdateArrayValuesStorage(freeStorageRow * 2, component.boxProductID, component.boxNumberOfProducts);
							component.state = 5;
							component.storageExperience += component.storageValue;
						}
						else
						{
							component.StartWaitState(1.5f, 2);
							component.state = -1;
						}
					}
					else
					{
						component.StartWaitState(1.5f, 2);
						component.state = -1;
					}
					break;
				}
				case 4:
				{
					Vector3 spawnpoint = leftoverBoxesSpotOBJ.transform.position + new Vector3(Random.Range(-1f, 1f), 3f, Random.Range(-1f, 1f));
					GameData.Instance.GetComponent<ManagerBlackboard>().SpawnBoxFromEmployee(spawnpoint, component.boxProductID, component.boxNumberOfProducts);
					component.state = 5;
					break;
				}
				case 5:
					UnequipBox(component);
					break;
				case 6:
				{
					GameObject closestCardboardBaler = GetClosestCardboardBaler(gameObject);
					if ((bool)closestCardboardBaler)
					{
						component.closestCardboardBaler = closestCardboardBaler;
						component2.destination = closestCardboardBaler.transform.Find("Standspot").transform.position;
						component.state = 33;
					}
					else if (closestRecyclePerk)
					{
						component2.destination = trashSpotOBJ.transform.position;
						component.state = 7;
					}
					else if (employeeRecycleBoxes && !interruptBoxRecycling)
					{
						float num9 = Vector3.Distance(gameObject.transform.position, recycleSpot1OBJ.transform.position);
						float num10 = Vector3.Distance(gameObject.transform.position, recycleSpot2OBJ.transform.position);
						if (num9 < num10)
						{
							component2.destination = recycleSpot1OBJ.transform.position;
							component.state = 7;
						}
						else
						{
							component2.destination = recycleSpot2OBJ.transform.position;
							component.state = 7;
						}
					}
					else
					{
						component2.destination = trashSpotOBJ.transform.position;
						component.state = 5;
					}
					break;
				}
				case 7:
				{
					float fundsToAdd2 = 1.5f * (float)GameData.Instance.GetComponent<UpgradesManager>().boxRecycleFactor;
					AchievementsManager.Instance.CmdAddAchievementPoint(2, 1);
					GameData.Instance.CmdAlterFunds(fundsToAdd2);
					component.state = 5;
					break;
				}
				case 18:
					if (MoreThanOneBoxToMergeCheck(component.boxProductID))
					{
						component.state = 19;
					}
					else
					{
						component.state = 2;
					}
					break;
				case 19:
				{
					if (component.boxNumberOfProducts <= 0)
					{
						component.state = 6;
						break;
					}
					int storageContainerWithBoxToMerge = GetStorageContainerWithBoxToMerge(component.boxProductID);
					if (storageContainerWithBoxToMerge >= 0)
					{
						component.currentFreeStorageIndex = storageContainerWithBoxToMerge;
						component2.destination = storageOBJ.transform.GetChild(storageContainerWithBoxToMerge).transform.Find("Standspot").transform.position;
						component.state = 20;
					}
					else
					{
						component.state = 2;
					}
					break;
				}
				case 20:
				{
					int storageRowWithBoxToMerge = GetStorageRowWithBoxToMerge(component.currentFreeStorageIndex, component.boxProductID);
					if (storageRowWithBoxToMerge >= 0)
					{
						EmployeeMergeBoxContents(component, component.currentFreeStorageIndex, component.boxProductID, storageRowWithBoxToMerge);
						component.StartWaitState(1.5f, 19);
						component.state = -1;
					}
					else
					{
						component.StartWaitState(1.5f, 19);
						component.state = -1;
					}
					break;
				}
				case 33:
					if ((bool)component.closestCardboardBaler)
					{
						component.closestCardboardBaler.GetComponent<CardboardBaler>().AuxiliarAddBoxToBaler(component.boxProductID);
						UnequipBox(component);
					}
					else
					{
						component.StartWaitState(1f, 0);
						component.state = -1;
					}
					break;
				default:
					component.state = 0;
					break;
				}
				break;
			case 4:
				switch (state)
				{
				case 0:
				{
					if (component.equippedItem > 0)
					{
						DropBoxOnGround(component);
						UnequipBox(component);
						break;
					}
					GameObject thiefTarget = GetThiefTarget();
					if (thiefTarget != null)
					{
						component.currentChasedThiefOBJ = thiefTarget;
						component.state = 2;
					}
					else if (IsFirstSecurityEmployee(gameObject) || (customersnpcParentOBJ.transform.childCount == 0 && GameData.Instance.timeOfDay > 22f))
					{
						GameObject closestDropProduct = GetClosestDropProduct(gameObject);
						if (closestDropProduct != null)
						{
							component.droppedProductOBJ = closestDropProduct;
							component.state = 4;
							component2.destination = closestDropProduct.transform.position;
						}
						else
						{
							component.state = 1;
						}
					}
					else
					{
						component.state = 1;
					}
					break;
				}
				case 1:
				{
					int num8 = RetrieveCorrectPatrolPoint(gameObject);
					Transform transform = ((num8 >= patrolPositionOBJ.transform.childCount) ? patrolPositionOBJ.transform.GetChild(0) : patrolPositionOBJ.transform.GetChild(num8));
					if (Vector3.Distance(component.transform.position, transform.position) > 3f)
					{
						component2.destination = transform.position;
						break;
					}
					component.StartWaitState(1f, 0);
					component.state = -1;
					break;
				}
				case 3:
					if ((bool)component.currentChasedThiefOBJ && component.currentChasedThiefOBJ.GetComponent<NPC_Info>().productsIDCarrying.Count > 0)
					{
						component.currentChasedThiefOBJ.GetComponent<NPC_Info>().AuxiliarAnimationPlay(0);
						component.RpcEmployeeHitThief();
						float timeToWait3 = Mathf.Clamp(1.45f - (float)component.securityLevel * 0.01f, 0.5f, 2f);
						component.StartWaitState(timeToWait3, 2);
						component.state = -1;
						component.securityExperience += 5 * component.securityValue;
					}
					else
					{
						component.StartWaitState(0.5f, 0);
						component.state = -1;
					}
					break;
				case 4:
					if (component.droppedProductOBJ != null)
					{
						component.droppedProductOBJ.GetComponent<StolenProductSpawn>().RecoverStolenProductFromEmployee();
						component.StartWaitState(0.5f, 0);
						component.state = -1;
						component.securityExperience++;
					}
					else
					{
						component.state = 0;
					}
					break;
				default:
					component.state = 0;
					break;
				case 2:
					break;
				}
				break;
			case 5:
				switch (state)
				{
				case 0:
				{
					if (component.equippedItem > 0)
					{
						DropBoxOnGround(component);
						UnequipBox(component);
						break;
					}
					GameObject furnitureToFix = GetFurnitureToFix(gameObject);
					if ((bool)furnitureToFix)
					{
						component.currentFurnitureToFix = furnitureToFix;
						component2.destination = furnitureToFix.transform.Find("Standspot").position;
						component.state = 1;
					}
					else
					{
						component.state = 10;
					}
					break;
				}
				case 10:
				{
					GameObject closestBale = GetClosestBale(gameObject);
					if ((bool)closestBale)
					{
						if (NavMesh.SamplePosition(new Vector3(closestBale.transform.position.x, 0f, closestBale.transform.position.z), out var hit, 1f, -1))
						{
							component.currentCardboardBale = closestBale;
							component2.destination = hit.position;
							component.state = 30;
						}
					}
					else if (Vector3.Distance(component.transform.position, restSpotOBJ.transform.position) > 6.5f)
					{
						component2.destination = AttemptToGetRestPosition();
					}
					else
					{
						component.StartWaitState(2f, 0);
						component.state = -1;
					}
					break;
				}
				case 1:
					if ((bool)component.currentFurnitureToFix && RetrieveFurnitureRepairState(component.currentFurnitureToFix))
					{
						float value3 = 8f - (float)component.technicianLevel * 0.1f;
						value3 = Mathf.Clamp(value3, 2f, 8f);
						component.StartWaitState(value3, 2);
						component.state = -1;
					}
					break;
				case 2:
					if ((bool)component.currentFurnitureToFix && RetrieveFurnitureRepairState(component.currentFurnitureToFix))
					{
						if ((bool)component.currentFurnitureToFix.GetComponent<Data_Container>())
						{
							component.currentFurnitureToFix.GetComponent<Data_Container>().CmdFixBreakingEvent();
						}
						else if ((bool)component.currentFurnitureToFix.GetComponent<CardboardBaler>())
						{
							component.currentFurnitureToFix.GetComponent<CardboardBaler>().CmdFixBreakingEvent();
						}
						component.technicianExperience += component.technicianLevel * 10;
					}
					component.StartWaitState(2f, 0);
					component.state = -1;
					break;
				case 3:
					UnequipBox(component);
					break;
				case 30:
					if ((bool)component.currentCardboardBale)
					{
						Vector3 a = new Vector3(component.currentCardboardBale.transform.position.x, 0f, component.currentCardboardBale.transform.position.z);
						Vector3 b = new Vector3(component.transform.position.x, 0f, component.transform.position.z);
						if (Vector3.Distance(a, b) < 2f)
						{
							component.EquipNPCItem(2);
							GameData.Instance.GetComponent<NetworkSpawner>().EmployeeDestroyBox(component.currentCardboardBale);
							component.state = 31;
							break;
						}
					}
					component.StartWaitState(1f, 0);
					component.state = -1;
					break;
				case 31:
					if (closestRecyclePerk)
					{
						component2.destination = trashSpotOBJ.transform.position;
						component.state = 32;
					}
					else if (employeeRecycleBoxes && !interruptBoxRecycling)
					{
						float num6 = Vector3.Distance(gameObject.transform.position, recycleSpot1OBJ.transform.position);
						float num7 = Vector3.Distance(gameObject.transform.position, recycleSpot2OBJ.transform.position);
						if (num6 < num7)
						{
							component2.destination = recycleSpot1OBJ.transform.position;
							component.state = 32;
						}
						else
						{
							component2.destination = recycleSpot2OBJ.transform.position;
							component.state = 32;
						}
					}
					else
					{
						component2.destination = trashSpotOBJ.transform.position;
						component.state = 3;
					}
					break;
				case 32:
				{
					float fundsToAdd = 18f * (float)GameData.Instance.GetComponent<UpgradesManager>().boxRecycleFactor;
					AchievementsManager.Instance.CmdAddAchievementPoint(16, 1);
					GameData.Instance.CmdAlterFunds(fundsToAdd);
					component.technicianExperience += component.technicianLevel;
					component.state = 3;
					break;
				}
				default:
					component.state = 0;
					break;
				}
				break;
			case 6:
				switch (state)
				{
				case 0:
					if (component.equippedItem > 0)
					{
						DropBoxOnGround(component);
						UnequipBox(component);
						break;
					}
					if (GameData.Instance.GetComponent<UpgradesManager>().addonsBought[0] && OrderPackaging.Instance.isOrderDepartmentActivated && RetrieveAnOrderPickupPoint(checkIfFull: false) != null)
					{
						int num4 = RetrievePackagingFreeOrderIndex();
						if (num4 >= 0)
						{
							component.packagingAssignedOrderIndex = num4;
							component2.destination = AttemptToGetOrderingDepartmentPosition();
							component.state = 1;
							break;
						}
					}
					component.state = 10;
					break;
				case 10:
					if (Vector3.Distance(component.transform.position, restSpotOBJ.transform.position) > 6.5f)
					{
						component2.destination = AttemptToGetRestPosition();
						break;
					}
					component.StartWaitState(2f, 0);
					component.state = -1;
					break;
				case 1:
					if (OrderPackaging.Instance.ordersData[component.packagingAssignedOrderIndex] != "")
					{
						component.packagingAssignedOrderData = OrderPackaging.Instance.ordersData[component.packagingAssignedOrderIndex];
						OrderPackaging.Instance.RemoveOrderFromEmployee(component.packagingAssignedOrderIndex);
						string[] array2 = component.packagingAssignedOrderData.Split("|");
						if (array2[3] == "")
						{
							component.StartWaitState(2f, 0);
							component.state = -1;
							break;
						}
						string[] array3 = array2[3].Split("_");
						for (int l = 0; l < array3.Length; l++)
						{
							component.packagingAssignedOrderProducts.Add(int.Parse(array3[l]));
						}
						int value2 = component.orderingLevel / 2;
						value2 = Mathf.Clamp(value2, 1, 25);
						for (int m = 0; m < value2; m++)
						{
							int item2 = ProductListing.Instance.availableProducts[Random.Range(0, ProductListing.Instance.availableProducts.Count)];
							component.packagingAssignedOrderProducts.Add(item2);
						}
						if (component.packagingPackedOrderProducts.Count > 0)
						{
							component.packagingPackedOrderProducts.Clear();
						}
						component.EquipNPCItem(3);
						component.StartWaitState(1.5f, 2);
						component.state = -1;
					}
					else
					{
						component.StartWaitState(2f, 0);
						component.state = -1;
					}
					break;
				case 2:
					if (component.packagingAssignedOrderProducts.Count > 0)
					{
						int iDProduct = component.packagingAssignedOrderProducts[0];
						int[] storageShelfWithProduct = GetStorageShelfWithProduct(iDProduct);
						if (storageShelfWithProduct[0] > -1)
						{
							component.orderProductLocationInfoArray = storageShelfWithProduct;
							GameObject gameObject6 = ((storageShelfWithProduct[0] != 0) ? shelvesOBJ : storageOBJ);
							component2.destination = gameObject6.transform.GetChild(storageShelfWithProduct[1]).transform.Find("Standspot").position;
							component.state = 3;
						}
						else
						{
							component.packagingAssignedOrderProducts.RemoveAt(0);
							component.StartWaitState(1.5f, 2);
							component.state = -1;
						}
					}
					else if (component.packagingPackedOrderProducts.Count > 0)
					{
						component.StartWaitState(1f, 4);
						component.state = -1;
					}
					else
					{
						component.StartWaitState(2f, 0);
						component.state = -1;
					}
					break;
				case 3:
				{
					GameObject gameObject5 = ((component.orderProductLocationInfoArray[0] != 0) ? shelvesOBJ : storageOBJ);
					Data_Container component3 = gameObject5.transform.GetChild(component.orderProductLocationInfoArray[1]).GetComponent<Data_Container>();
					int[] productInfoArray = component3.productInfoArray;
					int num5 = productInfoArray[component.orderProductLocationInfoArray[2] + 1];
					if (component.packagingAssignedOrderProducts[0] == productInfoArray[component.orderProductLocationInfoArray[2]] && num5 > 0)
					{
						if (component.orderProductLocationInfoArray[0] == 0)
						{
							if (num5 == 1)
							{
								if ((bool)component3.transform.Find("CanvasSigns"))
								{
									component3.EmployeeUpdateArrayValuesStorage(component.orderProductLocationInfoArray[2], component.packagingAssignedOrderProducts[0], -1);
								}
								else
								{
									component3.EmployeeUpdateArrayValuesStorage(component.orderProductLocationInfoArray[2], -1, -1);
								}
								GameData.Instance.GetComponent<ManagerBlackboard>().SpawnBoxFromEmployee(gameObject.transform.position, component.packagingAssignedOrderProducts[0], 0);
							}
							else
							{
								component3.EmployeeUpdateArrayValuesStorage(component.orderProductLocationInfoArray[2], component.packagingAssignedOrderProducts[0], num5 - 1);
							}
						}
						else
						{
							component3.NPCGetsItemFromRow(component.packagingAssignedOrderProducts[0]);
						}
						component.packagingPackedOrderProducts.Add(component.packagingAssignedOrderProducts[0]);
						component.packagingAssignedOrderProducts.RemoveAt(0);
					}
					component.StartWaitState(1.5f, 2);
					component.state = -1;
					break;
				}
				case 4:
				{
					GameObject gameObject4 = RetrieveAnOrderPickupPoint(checkIfFull: true);
					if (gameObject4 != null)
					{
						component2.destination = gameObject4.transform.Find("Standspot").position;
						component.state = 5;
					}
					else
					{
						component.RPCNotificationAboveHead("emplomsgnopckp", "");
						component.StartWaitState(8f, 4);
						component.state = -1;
					}
					break;
				}
				case 5:
				{
					GameObject gameObject3 = RetrieveAnOrderPickupPoint(checkIfFull: true);
					if (Vector3.Distance(gameObject3.transform.position, gameObject.transform.position) < 4f)
					{
						StringBuilder stringBuilder = new StringBuilder();
						for (int j = 0; j < component.packagingPackedOrderProducts.Count; j++)
						{
							stringBuilder.Append(component.packagingPackedOrderProducts[j].ToString());
							if (j != component.packagingPackedOrderProducts.Count - 1)
							{
								stringBuilder.Append("_");
							}
						}
						string[] array = component.packagingAssignedOrderData.Split("|");
						string item = array[0] + "|" + array[1] + "|" + array[2] + "|" + stringBuilder.ToString();
						NPCsOrdersList.Add(item);
						string boxData = array[0] + "|" + stringBuilder.ToString();
						string[] pickupsData = gameObject3.GetComponent<OrderPickupPoint>().pickupsData;
						for (int k = 0; k < pickupsData.Length; k++)
						{
							if (pickupsData[k] == "")
							{
								gameObject3.GetComponent<OrderPickupPoint>().AddOrderBox(k, boxData);
								break;
							}
						}
						AchievementsManager.Instance.CmdAddAchievementPoint(19, 1);
						component.orderingExperience += component.orderingValue * 25;
						UnequipBox(component);
						component.StartWaitState(1.5f, 0);
						component.state = -1;
					}
					else
					{
						component.StartWaitState(1.5f, 4);
						component.state = -1;
					}
					break;
				}
				case 6:
				case 7:
				case 8:
				case 9:
					break;
				}
				break;
			case 7:
				if (state == 0 && component.equippedItem > 0)
				{
					DropBoxOnGround(component);
					UnequipBox(component);
				}
				break;
			default:
				Debug.Log("Impossible employee current task case. Check logs.");
				break;
			}
		}
	}

	private Vector3 AttemptToGetRestPosition()
	{
		Vector3 vector = restSpotOBJ.transform.position + new Vector3(Random.Range(-4f, 4f), 0f, Random.Range(-4f, 4f));
		if (NavMesh.SamplePosition(vector, out var hit, 1f, -1) && hit.distance > 0.02f)
		{
			vector = hit.position;
		}
		return vector;
	}

	private Vector3 AttemptToGetOrderingDepartmentPosition()
	{
		Vector3 vector = orderingDepartmentSpotOBJ.transform.position + new Vector3(Random.Range(-1.5f, 1.5f), 0f, Random.Range(-1.5f, 1.5f));
		if (NavMesh.SamplePosition(vector, out var hit, 1f, -1) && hit.distance > 0.02f)
		{
			vector = hit.position;
		}
		return vector;
	}

	private void DropBoxOnGround(NPC_Info npcInfo)
	{
		Vector3 spawnpoint = npcInfo.transform.position + npcInfo.transform.forward * 0.5f + new Vector3(0f, 1f, 0f);
		if ((bool)npcInfo.instantiatedOBJ && (bool)npcInfo.instantiatedOBJ.transform.Find("Bale"))
		{
			GameData.Instance.GetComponent<NetworkSpawner>().EmployeeSpawnBale(spawnpoint);
		}
		else if (!npcInfo.instantiatedOBJ || !npcInfo.instantiatedOBJ.transform.Find("OrderBox"))
		{
			GameData.Instance.GetComponent<ManagerBlackboard>().SpawnBoxFromEmployee(spawnpoint, npcInfo.boxProductID, npcInfo.boxNumberOfProducts);
		}
	}

	private void UnequipBox(NPC_Info npcInfo)
	{
		npcInfo.EquipNPCItem(0);
		npcInfo.NetworkboxProductID = 0;
		npcInfo.NetworkboxNumberOfProducts = 0;
		npcInfo.StartWaitState(1.5f, 0);
		npcInfo.state = -1;
	}

	private int CashierGetAvailableCheckout()
	{
		if (checkoutOBJ.transform.childCount == 0)
		{
			return -1;
		}
		for (int i = 0; i < checkoutOBJ.transform.childCount; i++)
		{
			Data_Container component = checkoutOBJ.transform.GetChild(i).GetComponent<Data_Container>();
			if (!component.isCheckoutClosed && !component.isOccupiedByNPCCashier)
			{
				return i;
			}
		}
		return -1;
	}

	private bool CheckIfCustomerInQueue(int checkoutIndex)
	{
		if (checkoutIndex >= checkoutOBJ.transform.childCount || checkoutIndex < 0)
		{
			return false;
		}
		bool[] checkoutQueue = checkoutOBJ.transform.GetChild(checkoutIndex).GetComponent<Data_Container>().checkoutQueue;
		for (int i = 0; i < checkoutQueue.Length; i++)
		{
			if (checkoutQueue[i])
			{
				return true;
			}
		}
		return false;
	}

	public int GetMaxProductsPerRow(int containerIndex, int ProductID)
	{
		float shelfLength = shelvesOBJ.transform.GetChild(containerIndex).GetComponent<Data_Container>().shelfLength;
		float shelfWidth = shelvesOBJ.transform.GetChild(containerIndex).GetComponent<Data_Container>().shelfWidth;
		float shelfHeight = shelvesOBJ.transform.GetChild(containerIndex).GetComponent<Data_Container>().shelfHeight;
		GameObject obj = ProductListing.Instance.productPrefabs[ProductID];
		Vector3 size = obj.GetComponent<BoxCollider>().size;
		bool isStackable = obj.GetComponent<Data_Product>().isStackable;
		int value = Mathf.FloorToInt(shelfLength / (size.x * 1.1f));
		value = Mathf.Clamp(value, 1, 100);
		int value2 = Mathf.FloorToInt(shelfWidth / (size.z * 1.1f));
		value2 = Mathf.Clamp(value2, 1, 100);
		int result = value * value2;
		if (isStackable)
		{
			int value3 = Mathf.FloorToInt(shelfHeight / (size.y * 1.1f));
			value3 = Mathf.Clamp(value3, 1, 100);
			result = value * value2 * value3;
		}
		return result;
	}

	private IEnumerator MainRestockUpdate()
	{
		mainShelfUpdateIsRunning = true;
		WaitForSeconds waitTimeBetweenUpdates = new WaitForSeconds(5f);
		List<int> auxiliarOrderingList = new List<int>();
		int performanceCounter = 0;
		int numberOfRestockingEmployees = GetNumberOfRestockingEmployees();
		while (shelvesOBJ.transform.childCount > 0 && storageOBJ.transform.childCount > 0 && numberOfRestockingEmployees > 0)
		{
			mainUpdateIsBeingCalculated = true;
			numberOfRestockingEmployees = GetNumberOfRestockingEmployees();
			for (int p = 0; p < productsThreshholdArray.Length; p++)
			{
				for (int i = 0; i < shelvesOBJ.transform.childCount; i++)
				{
					int[] productInfoArray = shelvesOBJ.transform.GetChild(i).GetComponent<Data_Container>().productInfoArray;
					int num = productInfoArray.Length / 2;
					for (int j = 0; j < num; j++)
					{
						auxiliarProductList.Clear();
						int num2 = productInfoArray[j * 2];
						if (num2 < 0)
						{
							continue;
						}
						int num3 = productInfoArray[j * 2 + 1];
						int maxProductsPerRow = GetMaxProductsPerRow(i, num2);
						int num4 = Mathf.FloorToInt((float)maxProductsPerRow * productsThreshholdArray[p]);
						if (num3 < num4)
						{
							for (int k = 0; k < storageOBJ.transform.childCount; k++)
							{
								int[] productInfoArray2 = storageOBJ.transform.GetChild(k).GetComponent<Data_Container>().productInfoArray;
								int num5 = productInfoArray2.Length / 2;
								for (int l = 0; l < num5; l++)
								{
									int num6 = productInfoArray2[l * 2];
									if (num6 >= 0 && num6 == num2 && productInfoArray2[l * 2 + 1] > 0)
									{
										string item = i + "|" + j * 2 + "|" + k + "|" + l * 2 + "|" + num2 + "|" + num6;
										auxiliarProductList.Add(item);
									}
								}
							}
						}
						if (auxiliarProductList.Count > 0)
						{
							string item2 = auxiliarProductList[Random.Range(0, auxiliarProductList.Count)];
							auxiliarOrderingList.Add(maxProductsPerRow);
							switch (p)
							{
							case 0:
								lowProductCountList.Add(item2);
								break;
							case 1:
								mediumProductCountList.Add(item2);
								break;
							case 2:
								highProductCountList.Add(item2);
								break;
							case 3:
								veryHighProductCountList.Add(item2);
								break;
							}
						}
					}
					performanceCounter++;
					if (performanceCounter >= 5)
					{
						performanceCounter = 0;
						yield return null;
					}
				}
				int index = 0;
				switch (p)
				{
				case 0:
					lowProductCountList = lowProductCountList.OrderBy((string d) => auxiliarOrderingList[index++]).ToList();
					break;
				case 1:
					mediumProductCountList = mediumProductCountList.OrderBy((string d) => auxiliarOrderingList[index++]).ToList();
					break;
				case 2:
					highProductCountList = highProductCountList.OrderBy((string d) => auxiliarOrderingList[index++]).ToList();
					break;
				case 3:
					veryHighProductCountList = veryHighProductCountList.OrderBy((string d) => auxiliarOrderingList[index++]).ToList();
					break;
				}
				auxiliarOrderingList.Clear();
				if (lowProductCountList.Count + mediumProductCountList.Count + highProductCountList.Count + veryHighProductCountList.Count > numberOfRestockingEmployees)
				{
					break;
				}
			}
			mainUpdateIsBeingCalculated = false;
			yield return waitTimeBetweenUpdates;
			lowProductCountList.Clear();
			mediumProductCountList.Clear();
			highProductCountList.Clear();
			veryHighProductCountList.Clear();
			yield return null;
		}
		yield return new WaitForSeconds(1f);
		mainShelfUpdateIsRunning = false;
	}

	private int GetNumberOfRestockingEmployees()
	{
		int num = 0;
		foreach (Transform item in employeeParentOBJ.transform)
		{
			if (item.GetComponent<NPC_Info>().taskPriority == 2)
			{
				num++;
			}
		}
		return num;
	}

	private int[] ReturnWeightedRestockerTask(GameObject employeeRequesterOBJ)
	{
		int[] array = new int[6] { -1, -1, -1, -1, -1, -1 };
		int num = 0;
		int num2 = 0;
		foreach (Transform item in employeeParentOBJ.transform)
		{
			if (item.GetComponent<NPC_Info>().taskPriority == 2)
			{
				if (item.gameObject == employeeRequesterOBJ)
				{
					num = num2;
				}
				num2++;
			}
		}
		int num3 = lowProductCountList.Count + mediumProductCountList.Count + highProductCountList.Count + veryHighProductCountList.Count;
		if (num3 == 0)
		{
			return array;
		}
		if (num2 <= num3)
		{
			List<string> list = new List<string>();
			foreach (string lowProductCount in lowProductCountList)
			{
				list.Add(lowProductCount);
			}
			foreach (string mediumProductCount in mediumProductCountList)
			{
				list.Add(mediumProductCount);
			}
			foreach (string highProductCount in highProductCountList)
			{
				list.Add(highProductCount);
			}
			foreach (string veryHighProductCount in veryHighProductCountList)
			{
				list.Add(veryHighProductCount);
			}
			string text = ((num >= list.Count) ? list[Random.Range(0, list.Count)] : list[num]);
			string[] array2 = text.Split("|");
			array[0] = int.Parse(array2[0]);
			array[1] = int.Parse(array2[1]);
			array[2] = int.Parse(array2[2]);
			array[3] = int.Parse(array2[3]);
			array[4] = int.Parse(array2[4]);
			array[5] = int.Parse(array2[5]);
			return array;
		}
		for (int i = 0; i < productsThreshholdArray.Length; i++)
		{
			List<string> list2 = new List<string>();
			switch (i)
			{
			case 0:
				list2 = lowProductCountList;
				break;
			case 1:
				list2 = mediumProductCountList;
				break;
			case 2:
				list2 = highProductCountList;
				break;
			case 3:
				list2 = veryHighProductCountList;
				break;
			}
			if (list2.Count != 0 && num < list2.Count)
			{
				string[] array3 = list2[num].Split("|");
				array[0] = int.Parse(array3[0]);
				array[1] = int.Parse(array3[1]);
				array[2] = int.Parse(array3[2]);
				array[3] = int.Parse(array3[3]);
				array[4] = int.Parse(array3[4]);
				array[5] = int.Parse(array3[5]);
				return array;
			}
		}
		return array;
	}

	private int GetFreeStorageContainer(int boxIDProduct)
	{
		if (storageOBJ.transform.childCount == 0)
		{
			return -1;
		}
		List<float> storageLabeledDistances = new List<float>();
		List<float> storageUnlabeledDistances = new List<float>();
		List<int> list = new List<int>();
		List<int> list2 = new List<int>();
		for (int i = 0; i < storageOBJ.transform.childCount; i++)
		{
			float num = Vector3.Distance(Vector3.zero, storageOBJ.transform.GetChild(i).position);
			num = Mathf.Round(num * 1000f) / 1000f;
			if (storageOBJ.transform.GetChild(i).GetComponent<Data_Container>().containerID == 5)
			{
				storageLabeledDistances.Add(num);
				list.Add(i);
			}
			else
			{
				storageUnlabeledDistances.Add(num);
				list2.Add(i);
			}
		}
		int index = 0;
		list = list.OrderBy((int d) => storageLabeledDistances[index++]).ToList();
		int index2 = 0;
		list2 = list2.OrderBy((int d) => storageUnlabeledDistances[index2++]).ToList();
		for (int j = 0; j < list.Count; j++)
		{
			int num2 = list[j];
			if (num2 >= storageOBJ.transform.childCount)
			{
				continue;
			}
			int[] productInfoArray = storageOBJ.transform.GetChild(num2).GetComponent<Data_Container>().productInfoArray;
			int num3 = productInfoArray.Length / 2;
			for (int k = 0; k < num3; k++)
			{
				int num4 = productInfoArray[k * 2];
				int num5 = productInfoArray[k * 2 + 1];
				if (storageOBJ.transform.GetChild(num2).transform.Find("BoxContainer").gameObject.transform.GetChild(k).transform.childCount <= 0 && num4 == boxIDProduct && num5 <= 0)
				{
					return num2;
				}
			}
		}
		for (int l = 0; l < list2.Count; l++)
		{
			int num6 = list2[l];
			if (num6 >= storageOBJ.transform.childCount)
			{
				continue;
			}
			int[] productInfoArray2 = storageOBJ.transform.GetChild(num6).GetComponent<Data_Container>().productInfoArray;
			int num7 = productInfoArray2.Length / 2;
			for (int m = 0; m < num7; m++)
			{
				if (productInfoArray2[m * 2] == -1)
				{
					return num6;
				}
			}
		}
		for (int n = 0; n < list.Count; n++)
		{
			int num8 = list[n];
			if (num8 >= storageOBJ.transform.childCount)
			{
				continue;
			}
			int[] productInfoArray3 = storageOBJ.transform.GetChild(num8).GetComponent<Data_Container>().productInfoArray;
			int num9 = productInfoArray3.Length / 2;
			for (int num10 = 0; num10 < num9; num10++)
			{
				int num11 = productInfoArray3[num10 * 2];
				_ = productInfoArray3[num10 * 2 + 1];
				if (storageOBJ.transform.GetChild(num8).transform.Find("BoxContainer").gameObject.transform.GetChild(num10).transform.childCount <= 0 && num11 == -1)
				{
					return num8;
				}
			}
		}
		return -1;
	}

	private int GetFreeStorageRow(int storageContainerIndex, int boxIDProduct)
	{
		if (storageContainerIndex >= storageOBJ.transform.childCount)
		{
			return -1;
		}
		int[] productInfoArray = storageOBJ.transform.GetChild(storageContainerIndex).GetComponent<Data_Container>().productInfoArray;
		int num = productInfoArray.Length / 2;
		for (int i = 0; i < num; i++)
		{
			int num2 = productInfoArray[i * 2];
			int num3 = productInfoArray[i * 2 + 1];
			if (storageOBJ.transform.GetChild(storageContainerIndex).transform.Find("BoxContainer").gameObject.transform.GetChild(i).transform.childCount <= 0 && num2 == boxIDProduct && num3 <= 0)
			{
				return i;
			}
		}
		for (int j = 0; j < num; j++)
		{
			if (productInfoArray[j * 2] == -1)
			{
				return j;
			}
		}
		return -1;
	}

	private bool MoreThanOneBoxToMergeCheck(int boxIDProduct)
	{
		if (storageOBJ.transform.childCount == 0)
		{
			return false;
		}
		int num = 0;
		for (int i = 0; i < storageOBJ.transform.childCount; i++)
		{
			int[] productInfoArray = storageOBJ.transform.GetChild(i).GetComponent<Data_Container>().productInfoArray;
			int num2 = productInfoArray.Length / 2;
			for (int j = 0; j < num2; j++)
			{
				int num3 = productInfoArray[j * 2];
				int num4 = productInfoArray[j * 2 + 1];
				if (num3 == boxIDProduct && storageOBJ.transform.GetChild(i).transform.Find("BoxContainer").transform.GetChild(j).transform.childCount > 0 && num4 < ProductListing.Instance.productPrefabs[num3].GetComponent<Data_Product>().maxItemsPerBox)
				{
					num++;
					if (num > 1)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	private int GetStorageContainerWithBoxToMerge(int boxIDProduct)
	{
		if (storageOBJ.transform.childCount == 0)
		{
			return -1;
		}
		for (int i = 0; i < storageOBJ.transform.childCount; i++)
		{
			int[] productInfoArray = storageOBJ.transform.GetChild(i).GetComponent<Data_Container>().productInfoArray;
			int num = productInfoArray.Length / 2;
			for (int j = 0; j < num; j++)
			{
				int num2 = productInfoArray[j * 2];
				int num3 = productInfoArray[j * 2 + 1];
				if (num2 == boxIDProduct && storageOBJ.transform.GetChild(i).transform.Find("BoxContainer").transform.GetChild(j).transform.childCount > 0 && num3 < ProductListing.Instance.productPrefabs[num2].GetComponent<Data_Product>().maxItemsPerBox)
				{
					return i;
				}
			}
		}
		return -1;
	}

	private int GetStorageRowWithBoxToMerge(int storageContainerIndex, int boxIDProduct)
	{
		if (storageContainerIndex >= storageOBJ.transform.childCount)
		{
			return -1;
		}
		int[] productInfoArray = storageOBJ.transform.GetChild(storageContainerIndex).GetComponent<Data_Container>().productInfoArray;
		int num = productInfoArray.Length / 2;
		for (int i = 0; i < num; i++)
		{
			int num2 = productInfoArray[i * 2];
			int num3 = productInfoArray[i * 2 + 1];
			if (num2 == boxIDProduct && storageOBJ.transform.GetChild(storageContainerIndex).transform.Find("BoxContainer").transform.GetChild(i).transform.childCount > 0 && num3 < ProductListing.Instance.productPrefabs[num2].GetComponent<Data_Product>().maxItemsPerBox)
			{
				return i;
			}
		}
		return -1;
	}

	private void EmployeeMergeBoxContents(NPC_Info npcInfoComponent, int storageContainerIndex, int BoxIDProduct, int rowIndex)
	{
		if (storageContainerIndex < storageOBJ.transform.childCount)
		{
			Data_Container component = storageOBJ.transform.GetChild(storageContainerIndex).GetComponent<Data_Container>();
			int maxItemsPerBox = ProductListing.Instance.productPrefabs[BoxIDProduct].GetComponent<Data_Product>().maxItemsPerBox;
			int num = component.productInfoArray[rowIndex * 2 + 1];
			if (num + npcInfoComponent.boxNumberOfProducts > maxItemsPerBox)
			{
				int num2 = maxItemsPerBox - num;
				npcInfoComponent.NetworkboxNumberOfProducts = npcInfoComponent.boxNumberOfProducts - num2;
				component.EmployeeUpdateArrayValuesStorage(rowIndex * 2, BoxIDProduct, maxItemsPerBox);
			}
			else
			{
				component.EmployeeUpdateArrayValuesStorage(rowIndex * 2, BoxIDProduct, num + npcInfoComponent.boxNumberOfProducts);
				npcInfoComponent.NetworkboxNumberOfProducts = 0;
			}
		}
	}

	private GameObject GetRandomGroundBox(GameObject employeeRequesterOBJ)
	{
		if (boxesOBJ.transform.childCount == 0)
		{
			return null;
		}
		int priorityIndex = GetPriorityIndex(employeeRequesterOBJ, 3);
		List<GameObject> list = new List<GameObject>();
		foreach (Transform item in boxesOBJ.transform)
		{
			if (list.Count > priorityIndex)
			{
				break;
			}
			if (NavMesh.SamplePosition(new Vector3(item.transform.position.x, 0f, item.transform.position.z), out var _, 1f, -1))
			{
				list.Add(item.gameObject);
			}
		}
		if (list.Count > 0)
		{
			if (priorityIndex < list.Count)
			{
				return list[priorityIndex];
			}
			return list[Random.Range(0, list.Count)];
		}
		return null;
	}

	private int GetPriorityIndex(GameObject employeeRequesterOBJ, int taskPriorityIndex)
	{
		int num = 0;
		foreach (Transform item in employeeParentOBJ.transform)
		{
			if (item.GetComponent<NPC_Info>().taskPriority == taskPriorityIndex)
			{
				if (item.gameObject == employeeRequesterOBJ)
				{
					break;
				}
				num++;
			}
		}
		return num;
	}

	private GameObject GetRandomGroundBoxAllowedInStorage(GameObject employeeRequesterOBJ)
	{
		int priorityIndex = GetPriorityIndex(employeeRequesterOBJ, 3);
		if (storageOBJ.transform.childCount == 0 || boxesOBJ.transform.childCount == 0)
		{
			return null;
		}
		indexedBoxesList.Clear();
		for (int i = 0; i < boxesOBJ.transform.childCount; i++)
		{
			GameObject gameObject = boxesOBJ.transform.GetChild(i).gameObject;
			int productID = gameObject.GetComponent<BoxData>().productID;
			if (indexedBoxesList.Count >= 25)
			{
				break;
			}
			for (int j = 0; j < storageOBJ.transform.childCount; j++)
			{
				int[] productInfoArray = storageOBJ.transform.GetChild(j).GetComponent<Data_Container>().productInfoArray;
				int num = productInfoArray.Length / 2;
				for (int k = 0; k < num; k++)
				{
					int num2 = productInfoArray[k * 2];
					int num3 = productInfoArray[k * 2 + 1];
					if (storageOBJ.transform.GetChild(j).transform.Find("BoxContainer").gameObject.transform.GetChild(k).transform.childCount <= 0 && num2 == productID && num3 <= 0)
					{
						indexedBoxesList.Add(gameObject);
					}
				}
			}
		}
		if (indexedBoxesList.Count > 0)
		{
			if (priorityIndex < indexedBoxesList.Count)
			{
				return indexedBoxesList[priorityIndex];
			}
			return indexedBoxesList[Random.Range(0, indexedBoxesList.Count)];
		}
		return null;
	}

	private bool CheckIfShelfWithSameProduct(int productIDToCheck, NPC_Info npcInfoComponent, int currentShelfIndex)
	{
		for (int i = 0; i < productsThreshholdArray.Length; i++)
		{
			auxiliarList.Clear();
			for (int j = 0; j < shelvesOBJ.transform.childCount; j++)
			{
				int[] productInfoArray = shelvesOBJ.transform.GetChild(j).GetComponent<Data_Container>().productInfoArray;
				int num = productInfoArray.Length / 2;
				for (int k = 0; k < num; k++)
				{
					int num2 = productInfoArray[k * 2];
					if (num2 != productIDToCheck)
					{
						continue;
					}
					int num3 = productInfoArray[k * 2 + 1];
					int num4 = Mathf.FloorToInt((float)GetMaxProductsPerRow(j, num2) * productsThreshholdArray[i]);
					if (num3 == 0 || num3 < num4)
					{
						if (j == currentShelfIndex)
						{
							npcInfoComponent.productAvailableArray[1] = k * 2;
							return true;
						}
						string item = j + "|" + k * 2;
						auxiliarList.Add(item);
					}
				}
			}
			if (auxiliarList.Count > 0)
			{
				string[] array = auxiliarList[Random.Range(0, auxiliarList.Count)].Split("|");
				npcInfoComponent.productAvailableArray[0] = int.Parse(array[0]);
				npcInfoComponent.productAvailableArray[1] = int.Parse(array[1]);
				return true;
			}
		}
		return false;
	}

	private GameObject GetThiefTarget()
	{
		if (customersnpcParentOBJ.transform.childCount == 0)
		{
			return null;
		}
		thievesList.Clear();
		foreach (Transform item in customersnpcParentOBJ.transform)
		{
			NPC_Info component = item.GetComponent<NPC_Info>();
			if (component.isAThief && component.thiefFleeing && component.productsIDCarrying.Count > 0 && item.position.z < -3f && item.position.x > -15f && item.position.x < 38f)
			{
				thievesList.Add(item.gameObject);
				if (!component.thiefAssignedChaser)
				{
					component.thiefAssignedChaser = true;
					return item.gameObject;
				}
			}
		}
		if (thievesList.Count > 0)
		{
			return thievesList[Random.Range(0, thievesList.Count)];
		}
		return null;
	}

	private bool IsFirstSecurityEmployee(GameObject employeeToCheck)
	{
		for (int i = 0; i < employeesArray.Length; i++)
		{
			GameObject gameObject = employeesArray[i];
			if ((bool)gameObject && gameObject.GetComponent<NPC_Info>().taskPriority == 4)
			{
				if (gameObject == employeeToCheck)
				{
					return true;
				}
				return false;
			}
		}
		return false;
	}

	private int RetrieveCorrectPatrolPoint(GameObject employeeToCheck)
	{
		int num = 0;
		for (int i = 0; i < employeesArray.Length; i++)
		{
			GameObject gameObject = employeesArray[i];
			if ((bool)gameObject && gameObject.GetComponent<NPC_Info>().taskPriority == 4)
			{
				if (gameObject == employeeToCheck)
				{
					return num;
				}
				num++;
			}
		}
		return 0;
	}

	private GameObject GetClosestDropProduct(GameObject currentEmployeeOBJ)
	{
		if (droppedProductsParentOBJ.transform.childCount == 0)
		{
			return null;
		}
		float num = 100f;
		GameObject gameObject = null;
		foreach (Transform item in droppedProductsParentOBJ.transform)
		{
			float num2 = Vector3.Distance(item.position, currentEmployeeOBJ.transform.position);
			if (num2 < num)
			{
				num = num2;
				gameObject = item.gameObject;
			}
		}
		if (gameObject != null)
		{
			return gameObject;
		}
		return null;
	}

	private GameObject GetClosestCardboardBaler(GameObject currentEmployeeOBJ)
	{
		if (cardboardBalerList.Count == 0)
		{
			return null;
		}
		float num = 100f;
		GameObject gameObject = null;
		for (int i = 0; i < cardboardBalerList.Count; i++)
		{
			GameObject gameObject2 = cardboardBalerList[i];
			if (!(gameObject2 == null))
			{
				float num2 = Vector3.Distance(gameObject2.transform.position, currentEmployeeOBJ.transform.position);
				if (num2 < num)
				{
					num = num2;
					gameObject = gameObject2;
				}
			}
		}
		if (gameObject != null)
		{
			return gameObject;
		}
		return null;
	}

	private GameObject GetClosestBale(GameObject currentEmployeeOBJ)
	{
		Transform child = GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(9);
		if (child.transform.childCount == 0)
		{
			return null;
		}
		int priorityIndex = GetPriorityIndex(currentEmployeeOBJ, 5);
		if (priorityIndex < child.transform.childCount)
		{
			return child.transform.GetChild(priorityIndex).gameObject;
		}
		return null;
	}

	private GameObject GetFurnitureToFix(GameObject currentEmployeeOBJ)
	{
		int priorityIndex = GetPriorityIndex(currentEmployeeOBJ, 5);
		if (brokenFurnitureList.Count > 0 && priorityIndex < brokenFurnitureList.Count)
		{
			return brokenFurnitureList[priorityIndex];
		}
		return null;
	}

	public void RemoveFurnitureOBJFromList(GameObject OBJToRemove)
	{
		if (brokenFurnitureList.Count <= 0)
		{
			return;
		}
		for (int i = 0; i < brokenFurnitureList.Count; i++)
		{
			if (brokenFurnitureList[i] == OBJToRemove)
			{
				brokenFurnitureList.RemoveAt(i);
				break;
			}
		}
	}

	private bool RetrieveFurnitureRepairState(GameObject furnitureOBJ)
	{
		if ((bool)furnitureOBJ)
		{
			if ((bool)furnitureOBJ.GetComponent<Data_Container>())
			{
				return furnitureOBJ.GetComponent<Data_Container>().isBroken;
			}
			if ((bool)furnitureOBJ.GetComponent<CardboardBaler>())
			{
				return furnitureOBJ.GetComponent<CardboardBaler>().isBroken;
			}
		}
		return false;
	}

	private int RetrievePackagingFreeOrderIndex()
	{
		string[] ordersData = OrderPackaging.Instance.ordersData;
		for (int i = 0; i < ordersData.Length; i++)
		{
			if (ordersData[i] != "")
			{
				return i;
			}
		}
		return -1;
	}

	private GameObject RetrieveAnOrderPickupPoint(bool checkIfFull)
	{
		if (orderPickupPointsList.Count > 0)
		{
			for (int i = 0; i < orderPickupPointsList.Count; i++)
			{
				if (!(orderPickupPointsList[i] != null))
				{
					continue;
				}
				if (checkIfFull)
				{
					string[] pickupsData = orderPickupPointsList[i].GetComponent<OrderPickupPoint>().pickupsData;
					for (int j = 0; j < pickupsData.Length; j++)
					{
						if (pickupsData[j] == "")
						{
							return orderPickupPointsList[i];
						}
					}
					continue;
				}
				return orderPickupPointsList[i];
			}
		}
		return null;
	}

	private int[] GetStorageShelfWithProduct(int IDProduct)
	{
		int[] array = new int[3] { -1, -1, -1 };
		GameObject[] array2 = new GameObject[2] { storageOBJ, shelvesOBJ };
		for (int i = 0; i < array2.Length; i++)
		{
			GameObject gameObject = array2[i];
			array[0] = i;
			if (gameObject.transform.childCount == 0)
			{
				continue;
			}
			for (int j = 0; j < gameObject.transform.childCount; j++)
			{
				int[] productInfoArray = gameObject.transform.GetChild(j).GetComponent<Data_Container>().productInfoArray;
				int num = productInfoArray.Length / 2;
				for (int k = 0; k < num; k++)
				{
					int num2 = productInfoArray[k * 2];
					int num3 = productInfoArray[k * 2 + 1];
					if (num2 == IDProduct && num3 > 0)
					{
						array[1] = j;
						array[2] = k * 2;
						return array;
					}
				}
			}
		}
		array[0] = -1;
		return array;
	}

	public void RemoveCustomers()
	{
		if (customersnpcParentOBJ.transform.childCount > 0 && !coroutinePlaying)
		{
			StartCoroutine(RemoveCustomersCoroutine());
		}
	}

	private IEnumerator RemoveCustomersCoroutine()
	{
		coroutinePlaying = true;
		yield return new WaitForSeconds(3f);
		while (customersnpcParentOBJ.transform.childCount > 0)
		{
			Object.Destroy(customersnpcParentOBJ.transform.GetChild(customersnpcParentOBJ.transform.childCount - 1).gameObject);
			yield return null;
		}
		yield return null;
		coroutinePlaying = false;
	}

	private IEnumerator SpawnOrderCustomerNPC()
	{
		ordersSpawnCooldown = true;
		yield return new WaitForSeconds(5f);
		string text = NPCsOrdersList[0];
		NPCsOrdersList.RemoveAt(0);
		string[] array = text.Split("|");
		_ = array[1];
		string[] array2 = array[3].Split("_");
		Vector3 position = spawnPointsOBJ.transform.GetChild(Random.Range(0, spawnPointsOBJ.transform.childCount - 1)).transform.position;
		GameObject gameObject = Object.Instantiate(npcAgentPrefab, position, Quaternion.identity);
		gameObject.transform.SetParent(customersnpcParentOBJ.transform);
		NPC_Info component = gameObject.GetComponent<NPC_Info>();
		component.NetworkNPCID = int.Parse(array[2]);
		component.NetworkisCustomer = true;
		component.customerOrderNumber = int.Parse(array[0]);
		for (int i = 0; i < array2.Length; i++)
		{
			component.productsIDToBuy.Add(int.Parse(array2[i]));
		}
		NetworkServer.Spawn(gameObject);
		NavMeshAgent component2 = gameObject.GetComponent<NavMeshAgent>();
		SetAgentData(component2);
		component2.destination = exitPoints.GetChild(Random.Range(0, exitPoints.childCount)).transform.position;
		component.state = 30;
		ordersSpawnCooldown = false;
	}

	private IEnumerator SpawnCustomerNPC()
	{
		spawnCooldown = true;
		float value = 5f - (float)(GameData.Instance.gameDay + GameData.Instance.difficulty + NetworkServer.connections.Count) * 0.05f;
		float value2 = 12f - (float)(GameData.Instance.gameDay + GameData.Instance.difficulty + NetworkServer.connections.Count) * 0.12f;
		value = Mathf.Clamp(value, 2f, float.PositiveInfinity);
		value2 = Mathf.Clamp(value2, 4f, float.PositiveInfinity);
		yield return new WaitForSeconds(Random.Range(value, value2));
		int gameDay = GameData.Instance.gameDay;
		float num;
		float value3;
		if (NetworkServer.connections.Count <= 1)
		{
			num = Mathf.Clamp(surveillanceFactor, 0f, 0.25f);
			value3 = ((float)gameDay - 7f) * 0.05f + (float)GameData.Instance.difficulty * 0.1f;
			value3 = Mathf.Clamp(value3, 0f, 1.25f + (float)GameData.Instance.difficulty);
		}
		else
		{
			num = Mathf.Clamp(surveillanceFactor, 0f, 0.1f);
			value3 = ((float)gameDay - 7f) * 0.15f + (float)GameData.Instance.difficulty * 0.15f;
			value3 = Mathf.Clamp(value3, 0f, 2f + (float)GameData.Instance.difficulty + (float)NetworkServer.connections.Count);
		}
		float num2 = Random.Range(0.1f, 100f);
		num2 /= 1f - num;
		Vector3 position = spawnPointsOBJ.transform.GetChild(Random.Range(0, spawnPointsOBJ.transform.childCount - 1)).transform.position;
		GameObject obj = Object.Instantiate(npcAgentPrefab, position, Quaternion.identity);
		obj.transform.SetParent(customersnpcParentOBJ.transform);
		NPC_Info component = obj.GetComponent<NPC_Info>();
		component.NetworkNPCID = Random.Range(0, NPCsArray.Length - 1);
		component.NetworkisCustomer = true;
		component.productItemPlaceWait = Mathf.Clamp(0.5f - (float)GameData.Instance.gameDay * 0.003f, 0.1f, 0.5f);
		if (num2 < value3)
		{
			component.isAThief = true;
		}
		NetworkServer.Spawn(obj);
		component.productsIDToBuy = GenerateCompensatedList(component.NPCID);
		component.productsIDToBuy.Sort();
		if ((double)Random.value < 0.5)
		{
			component.productsIDToBuy.Reverse();
		}
		NavMeshAgent component2 = obj.GetComponent<NavMeshAgent>();
		SetAgentData(component2);
		Vector3 position2 = shelvesOBJ.transform.GetChild(Random.Range(0, shelvesOBJ.transform.childCount)).Find("Standspot").transform.position;
		component2.destination = position2;
		spawnCooldown = false;
	}

	private void SetAgentData(NavMeshAgent agent)
	{
		agent.enabled = true;
		agent.stoppingDistance = 1f;
		agent.speed = 1.9f + (float)Mathf.Clamp(GameData.Instance.gameDay - 7, 0, 40) * 0.07f + (float)NetworkServer.connections.Count * 0.1f + (float)GameData.Instance.difficulty * 0.15f;
		agent.angularSpeed = 120f + (float)Mathf.Clamp(GameData.Instance.gameDay / 2, 0, 60);
		agent.acceleration = 8f + (float)Mathf.Clamp(GameData.Instance.gameDay / 3, 0, 24);
	}

	private List<int> GenerateCompensatedList(int NPCID)
	{
		int num = Random.Range(2 + GameData.Instance.difficulty, GameData.Instance.maxProductsCustomersToBuy);
		if (ProductListing.Instance.availableProducts.Count < 100)
		{
			return RandomListFallback(num);
		}
		NPC_CustomerInfo component = NPCsArray[NPCID].GetComponent<NPC_CustomerInfo>();
		int num2 = ReturnWeightedIndex(component.compensatedWeightChances);
		if (num2 < 0)
		{
			return RandomListFallback(num);
		}
		List<int> list = new List<int>();
		switch (num2)
		{
		case 0:
			return RandomListFallback(num);
		case 1:
		{
			int num3 = ReturnWeightedIndex(component.necessitiesChances);
			if (num3 < productsPerNecessities.Length)
			{
				string text = productsPerNecessities[num3];
				if (text == "")
				{
					return RandomListFallback(num);
				}
				string[] array = text.Split("-");
				List<int> list2 = new List<int>();
				for (int j = 0; j < array.Length; j++)
				{
					list2.Add(int.Parse(array[j]));
				}
				for (int k = 0; k < num; k++)
				{
					int item2 = list2[Random.Range(0, list2.Count)];
					if (ProductListing.Instance.availableProducts.Contains(item2))
					{
						list.Add(item2);
					}
				}
				break;
			}
			Debug.Log("Wrong necessity index. A customer has a necessity over the range.");
			return RandomListFallback(num);
		}
		case 2:
		{
			num = Random.Range(3, 8);
			List<int> preferedPremiumIndexes = premiumProducts;
			if (component.preferedPremiumIndexes.Count > 0)
			{
				preferedPremiumIndexes = component.preferedPremiumIndexes;
			}
			for (int i = 0; i < num; i++)
			{
				int item = preferedPremiumIndexes[Random.Range(0, preferedPremiumIndexes.Count)];
				if (ProductListing.Instance.availableProducts.Contains(item))
				{
					list.Add(item);
				}
			}
			break;
		}
		default:
			return RandomListFallback(num);
		}
		if (list.Count == 0)
		{
			return RandomListFallback(num);
		}
		if (ProductListing.Instance.productsIDOnSale.Count > 0)
		{
			foreach (int item3 in ExtraProductsOnSaleToAdd())
			{
				list.Add(item3);
			}
		}
		return list;
	}

	private List<int> RandomListFallback(int productsAmountToBuy)
	{
		List<int> list = new List<int>();
		for (int i = 0; i < productsAmountToBuy; i++)
		{
			int item = ProductListing.Instance.availableProducts[Random.Range(0, ProductListing.Instance.availableProducts.Count)];
			list.Add(item);
		}
		if (ProductListing.Instance.productsIDOnSale.Count > 0)
		{
			foreach (int item2 in ExtraProductsOnSaleToAdd())
			{
				list.Add(item2);
				AchievementsManager.Instance.CmdAddAchievementPoint(17, 1);
			}
		}
		return list;
	}

	private List<int> ExtraProductsOnSaleToAdd()
	{
		List<int> list = new List<int>();
		for (int i = 0; i < ProductListing.Instance.productsIDOnSale.Count; i++)
		{
			int num = ProductListing.Instance.productsIDOnSale[i];
			int value = 5;
			if (i < ProductListing.Instance.productsSaleDiscount.Count)
			{
				value = ProductListing.Instance.productsSaleDiscount[i];
			}
			value = Mathf.Clamp(value, 5, 45);
			float basePricePerUnit = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>().basePricePerUnit;
			basePricePerUnit = Mathf.Clamp(basePricePerUnit, 0f, 199f);
			float num2 = salePerPriceChanceReductionFactor.Evaluate(basePricePerUnit) / 100f + 0.01f * (float)(value / 5);
			if (Random.value < num2)
			{
				list.Add(num);
			}
		}
		return list;
	}

	private int ReturnWeightedIndex(float[] directiveWeights)
	{
		float num = 0f;
		for (int i = 0; i < directiveWeights.Length; i++)
		{
			num += directiveWeights[i];
		}
		float num2 = Random.Range(0f, num);
		float num3 = 0f;
		for (int j = 0; j < directiveWeights.Length; j++)
		{
			num3 += directiveWeights[j];
			if (num2 <= num3)
			{
				return j;
			}
		}
		return -1;
	}

	private void CustomerNPCControl(int NPCIndex)
	{
		GameObject gameObject = customersnpcParentOBJ.transform.GetChild(NPCIndex).gameObject;
		NPC_Info component = gameObject.GetComponent<NPC_Info>();
		int state = component.state;
		NavMeshAgent component2 = gameObject.GetComponent<NavMeshAgent>();
		if (state == -1 || component2.pathPending || !(component2.remainingDistance <= component2.stoppingDistance) || (component2.hasPath && component2.velocity.sqrMagnitude != 0f))
		{
			return;
		}
		if (component.productsIDToBuy.Count > 0)
		{
			switch (state)
			{
			case 0:
			{
				int productID = component.productsIDToBuy[0];
				int num9 = WhichShelfHasItem(productID);
				if (num9 == -1)
				{
					GameData.Instance.AddNotFoundList(productID);
					component.productsIDToBuy.RemoveAt(0);
					component.RPCNotificationAboveHead("NPCmessage0", "product" + productID);
					component.StartWaitState(1.5f, 0);
					component.state = -1;
				}
				else
				{
					component.shelfThatHasTheItem = num9;
					Vector3 position = shelvesOBJ.transform.GetChild(num9).Find("Standspot").transform.position;
					component2.destination = position;
					component.state = 1;
				}
				break;
			}
			case 1:
			{
				int num3 = component.productsIDToBuy[0];
				if (IsItemInShelf(component.shelfThatHasTheItem, num3))
				{
					float num4 = ProductListing.Instance.productPlayerPricing[num3];
					Data_Product component4 = ProductListing.Instance.productPrefabs[num3].GetComponent<Data_Product>();
					int productTier2 = component4.productTier;
					float num5 = component4.basePricePerUnit * ProductListing.Instance.tierInflation[productTier2] * Random.Range(2f, 2.5f);
					component.productsIDToBuy.RemoveAt(0);
					if (num4 > num5)
					{
						component.StartWaitState(1.5f, 0);
						component.RPCNotificationAboveHead("NPCmessage1", "product" + num3);
						GameData.Instance.AddExpensiveList(num3);
					}
					else
					{
						if (ProductListing.Instance.productsIDOnSale.Count > 0 && ProductListing.Instance.productsIDOnSale.Contains(num3))
						{
							for (int m = 0; m < ProductListing.Instance.productsIDOnSale.Count; m++)
							{
								if (ProductListing.Instance.productsIDOnSale[m] == num3 && m < ProductListing.Instance.productsSaleDiscount.Count)
								{
									int num6 = ProductListing.Instance.productsSaleDiscount[m];
									num4 = num4 * (float)(100 - num6) / 100f;
									break;
								}
							}
						}
						component.productsIDCarrying.Add(num3);
						component.productsCarryingPrice.Add(num4);
						component.numberOfProductsCarried++;
						component.StartWaitState(1.5f, 0);
						shelvesOBJ.transform.GetChild(component.shelfThatHasTheItem).GetComponent<Data_Container>().NPCGetsItemFromRow(num3);
					}
					component.state = -1;
				}
				else
				{
					component.state = 0;
				}
				break;
			}
			case 30:
			{
				bool flag2 = false;
				for (int n = 0; n < orderPickupPointsList.Count; n++)
				{
					if ((bool)orderPickupPointsList[n])
					{
						flag2 = true;
						break;
					}
				}
				if (!flag2)
				{
					component.state = -1;
					component.StartWaitState(1.5f, 98);
					component.productsIDToBuy.Clear();
					component.selfcheckoutAssigned = true;
					break;
				}
				bool flag3 = false;
				for (int num7 = 0; num7 < orderPickupPointsList.Count; num7++)
				{
					if (!orderPickupPointsList[num7])
					{
						continue;
					}
					int[] ordersNumbers2 = orderPickupPointsList[num7].GetComponent<OrderPickupPoint>().ordersNumbers;
					for (int num8 = 0; num8 < ordersNumbers2.Length; num8++)
					{
						if (component.customerOrderNumber == ordersNumbers2[num8])
						{
							flag3 = true;
							component.state = 31;
							component2.destination = orderPickupPointsList[num7].transform.Find("Standspot").transform.position;
							break;
						}
					}
					if (flag3)
					{
						break;
					}
				}
				if (!flag3)
				{
					component.state = -1;
					component.StartWaitState(1.5f, 30);
				}
				break;
			}
			case 31:
			{
				bool flag = false;
				for (int i = 0; i < orderPickupPointsList.Count; i++)
				{
					if (!orderPickupPointsList[i])
					{
						continue;
					}
					int[] ordersNumbers = orderPickupPointsList[i].GetComponent<OrderPickupPoint>().ordersNumbers;
					for (int j = 0; j < ordersNumbers.Length; j++)
					{
						if (component.customerOrderNumber != ordersNumbers[j])
						{
							continue;
						}
						flag = true;
						string[] array = orderPickupPointsList[i].GetComponent<OrderPickupPoint>().ordersItemData[j].Split("_");
						for (int k = 0; k < array.Length; k++)
						{
							int num = int.Parse(array[k]);
							for (int l = 0; l < component.productsIDToBuy.Count; l++)
							{
								if (num == component.productsIDToBuy[l])
								{
									Data_Product component3 = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>();
									int productTier = component3.productTier;
									float num2 = component3.basePricePerUnit * ProductListing.Instance.tierInflation[productTier] * Random.Range(3.25f, 3.5f);
									component.customerOrderFinalPrice += num2;
									component.productsIDToBuy.RemoveAt(l);
									break;
								}
							}
						}
						orderPickupPointsList[i].GetComponent<OrderPickupPoint>().NPCRetrieveBox(j);
						if (component.productsIDToBuy.Count > 0)
						{
							component.state = -1;
							component.StartWaitState(1.5f, 30);
							break;
						}
						component.selfcheckoutAssigned = true;
						component.customerOrderFinalPrice = Mathf.Round(component.customerOrderFinalPrice * 100f) / 100f;
						AchievementsManager.Instance.CmdAddAchievementPoint(20, (int)component.customerOrderFinalPrice);
						GameData.Instance.CmdAlterFunds(component.customerOrderFinalPrice);
						component.state = -1;
						component.StartWaitState(1.5f, 98);
						break;
					}
					if (flag)
					{
						break;
					}
				}
				break;
			}
			default:
				Debug.Log("npc case error");
				break;
			}
			return;
		}
		if (component.isAThief && state < 2)
		{
			component2.destination = exitPoints.GetChild(Random.Range(0, exitPoints.childCount)).transform.position;
			component2.speed *= 1.25f;
			if (offensiveNPCs)
			{
				component.RPCNotificationAboveHead("NPCmessage4", "");
			}
			component.RpcShowThief();
			component.thiefFleeing = true;
			component.thiefProductsNumber = component.productsIDCarrying.Count;
			component.StartWaitState(2f, 11);
			component.state = -1;
			return;
		}
		if (component.productsIDCarrying.Count == 0 && state < 2)
		{
			component2.destination = exitPoints.GetChild(Random.Range(0, exitPoints.childCount)).transform.position;
			component.RPCNotificationAboveHead("NPCmessage2", "");
			component.StartWaitState(2f, 10);
			component.state = -1;
			return;
		}
		if (!component.selfcheckoutAssigned && selfCheckoutOBJ.transform.childCount > 0 && !component.isAThief)
		{
			int availableSelfCheckout = GetAvailableSelfCheckout(component);
			if (availableSelfCheckout > -1)
			{
				component.selfcheckoutIndex = availableSelfCheckout;
				selfCheckoutOBJ.transform.GetChild(availableSelfCheckout).GetComponent<Data_Container>().checkoutQueue[0] = true;
			}
			component.selfcheckoutAssigned = true;
		}
		if (component.selfcheckoutIndex > -1)
		{
			switch (state)
			{
			case 0:
			case 1:
				component2.destination = selfCheckoutOBJ.transform.GetChild(component.selfcheckoutIndex).transform.Find("Standspot").transform.position;
				component.state = 2;
				break;
			case 2:
				if (!component.isCurrentlySelfcheckouting)
				{
					component.isCurrentlySelfcheckouting = true;
					component.StartCustomerSelfCheckout(selfCheckoutOBJ.transform.GetChild(component.selfcheckoutIndex).gameObject);
				}
				break;
			case 3:
				component.paidForItsBelongings = true;
				GameData.Instance.dailyCustomers++;
				AchievementsManager.Instance.CmdAddAchievementPoint(3, 1);
				component2.destination = destroyPointsOBJ.transform.GetChild(Random.Range(0, destroyPointsOBJ.transform.childCount - 1)).transform.position;
				selfCheckoutOBJ.transform.GetChild(component.selfcheckoutIndex).GetComponent<Data_Container>().checkoutQueue[0] = false;
				component.state = 99;
				break;
			case 99:
				Object.Destroy(gameObject);
				break;
			default:
				Debug.Log("npc case error selfcheckout");
				break;
			}
			return;
		}
		switch (state)
		{
		case 0:
		case 1:
		{
			component.selfcheckoutAssigned = true;
			int num10 = CheckForAFreeCheckout();
			if (num10 == -1)
			{
				component.isAThief = true;
				component.RPCNotificationAboveHead("NPCmessage3", "");
				component.StartWaitState(2f, 1);
				component.state = -1;
			}
			else
			{
				Transform transform = checkoutOBJ.transform.GetChild(num10).transform.Find("QueueAssign");
				component2.destination = transform.position;
				component.state = 2;
			}
			break;
		}
		case 2:
		{
			int num11 = CheckForAFreeCheckout();
			if (num11 == -1)
			{
				component.state = 1;
				break;
			}
			int checkoutQueueNumber = GetCheckoutQueueNumber(num11);
			component.currentCheckoutIndex = num11;
			component.currentQueueNumber = checkoutQueueNumber;
			Transform child = checkoutOBJ.transform.GetChild(num11).transform.Find("QueuePositions").transform.GetChild(checkoutQueueNumber);
			component2.destination = child.position;
			component.state = 3;
			break;
		}
		case 3:
			if (component.currentQueueNumber == 0)
			{
				if (component.productsIDCarrying.Count == component.numberOfProductsCarried)
				{
					checkoutOBJ.transform.GetChild(component.currentCheckoutIndex).GetComponent<Data_Container>().NetworkproductsLeft = component.numberOfProductsCarried;
				}
				if (component.productsIDCarrying.Count == 0)
				{
					component.state = 4;
				}
				else if (!component.placingProducts)
				{
					component.PlaceProducts(checkoutOBJ);
					component.placingProducts = true;
				}
			}
			else
			{
				int num12 = component.currentQueueNumber - 1;
				Data_Container component5 = checkoutOBJ.transform.GetChild(component.currentCheckoutIndex).GetComponent<Data_Container>();
				if (!component5.checkoutQueue[num12])
				{
					component5.checkoutQueue[component.currentQueueNumber] = false;
					component.currentQueueNumber = num12;
					component5.checkoutQueue[component.currentQueueNumber] = true;
					Transform child2 = checkoutOBJ.transform.GetChild(component.currentCheckoutIndex).transform.Find("QueuePositions").transform.GetChild(component.currentQueueNumber);
					component2.destination = child2.position;
				}
			}
			break;
		case 4:
			if (checkoutOBJ.transform.GetChild(component.currentCheckoutIndex).GetComponent<Data_Container>().productsLeft == 0)
			{
				component.state = 5;
			}
			break;
		case 5:
			if (!component.alreadyGaveMoney)
			{
				component.alreadyGaveMoney = true;
				int index = Random.Range(0, 2);
				checkoutOBJ.transform.GetChild(component.currentCheckoutIndex).GetComponent<Data_Container>().RpcShowPaymentMethod(index);
			}
			break;
		case 10:
			component.paidForItsBelongings = true;
			GameData.Instance.dailyCustomers++;
			AchievementsManager.Instance.CmdAddAchievementPoint(3, 1);
			component2.destination = destroyPointsOBJ.transform.GetChild(Random.Range(0, destroyPointsOBJ.transform.childCount)).transform.position;
			component.state = 99;
			break;
		case 11:
			component2.destination = base.transform.Find("ThiefRoamSpots").transform.GetChild(Random.Range(0, base.transform.Find("ThiefRoamSpots").transform.childCount - 1)).transform.position + new Vector3(Random.Range(-3f, 3f), 0f, Random.Range(-3f, 3f));
			component.StartWaitState(1f, 12);
			component.state = -1;
			break;
		case 12:
			component2.destination = base.transform.Find("ThiefRoamSpots").transform.GetChild(Random.Range(0, base.transform.Find("ThiefRoamSpots").transform.childCount - 1)).transform.position + new Vector3(Random.Range(-3f, 3f), 0f, Random.Range(-3f, 3f));
			component.StartWaitState(1f, 13);
			component.state = -1;
			break;
		case 13:
			component2.destination = destroyPointsOBJ.transform.GetChild(Random.Range(0, destroyPointsOBJ.transform.childCount)).transform.position;
			component.state = 99;
			break;
		case 98:
			component.paidForItsBelongings = true;
			component2.destination = destroyPointsOBJ.transform.GetChild(Random.Range(0, destroyPointsOBJ.transform.childCount)).transform.position;
			component.state = 99;
			break;
		case 99:
			Object.Destroy(gameObject);
			break;
		default:
			Debug.Log("npc case error 2");
			break;
		}
	}

	private int WhichShelfHasItem(int productID)
	{
		for (int i = 0; i < shelvesOBJ.transform.childCount; i++)
		{
			int[] productInfoArray = shelvesOBJ.transform.GetChild(i).gameObject.GetComponent<Data_Container>().productInfoArray;
			int num = productInfoArray.Length / 2;
			for (int j = 0; j < num; j++)
			{
				int num2 = productInfoArray[j * 2];
				int num3 = productInfoArray[j * 2 + 1];
				if (num2 == productID && num3 > 0)
				{
					return i;
				}
			}
		}
		return -1;
	}

	private bool IsItemInShelf(int shelfToCheck, int productID)
	{
		if (shelfToCheck == -1 || shelfToCheck >= shelvesOBJ.transform.childCount)
		{
			Debug.Log("NPC IsItem InShelf Returning Shelf Error");
			return false;
		}
		int[] productInfoArray = shelvesOBJ.transform.GetChild(shelfToCheck).gameObject.GetComponent<Data_Container>().productInfoArray;
		int num = productInfoArray.Length / 2;
		for (int i = 0; i < num; i++)
		{
			int num2 = productInfoArray[i * 2];
			int num3 = productInfoArray[i * 2 + 1];
			if (num2 == productID && num3 != 0)
			{
				return true;
			}
		}
		return false;
	}

	private int CheckForAFreeCheckout()
	{
		int result = 0;
		int num = 100;
		bool flag = true;
		for (int i = 0; i < checkoutOBJ.transform.childCount; i++)
		{
			int num2 = 0;
			Data_Container component = checkoutOBJ.transform.GetChild(i).GetComponent<Data_Container>();
			bool[] checkoutQueue = component.checkoutQueue;
			if (checkoutQueue[^1] || component.isCheckoutClosed)
			{
				continue;
			}
			bool[] array = checkoutQueue;
			for (int j = 0; j < array.Length; j++)
			{
				if (array[j])
				{
					num2++;
				}
			}
			if (num2 != checkoutQueue.Length)
			{
				flag = false;
				if (num2 < num)
				{
					num = num2;
					result = i;
				}
			}
		}
		if (flag)
		{
			return -1;
		}
		return result;
	}

	private int GetCheckoutQueueNumber(int freeCheckoutIndex)
	{
		bool[] checkoutQueue = checkoutOBJ.transform.GetChild(freeCheckoutIndex).GetComponent<Data_Container>().checkoutQueue;
		int num = 69;
		for (int num2 = checkoutQueue.Length - 1; num2 >= 0; num2--)
		{
			if (checkoutQueue[num2])
			{
				checkoutQueue[num] = true;
				return num;
			}
			num = num2;
		}
		checkoutQueue[0] = true;
		return 0;
	}

	private int GetAvailableSelfCheckout(NPC_Info npcInfo)
	{
		if (npcInfo.productsIDCarrying.Count > 18 + selfcheckoutExtraProductsFromPerk + ProductListing.Instance.productsIDOnSale.Count / 2 || npcInfo.productsIDCarrying.Count == 0)
		{
			return -1;
		}
		float time = Mathf.Clamp((18 + selfcheckoutExtraProductsFromPerk) / npcInfo.productsIDCarrying.Count, 0f, 1f);
		if (selfcheckoutChanceCurve.Evaluate(time) < Random.value)
		{
			for (int i = 0; i < selfCheckoutOBJ.transform.childCount; i++)
			{
				if (!selfCheckoutOBJ.transform.GetChild(i).GetComponent<Data_Container>().checkoutQueue[0])
				{
					if (npcInfo.productsIDCarrying.Count > 6 && Random.value < 0.02f + (float)GameData.Instance.difficulty * 0.005f)
					{
						int index = Random.Range(0, npcInfo.productsIDCarrying.Count);
						npcInfo.productsIDCarrying.RemoveAt(index);
						npcInfo.productsCarryingPrice.RemoveAt(index);
					}
					return i;
				}
			}
		}
		return -1;
	}

	private IEnumerator SpawnDummyNCP()
	{
		dummySpawnCooldown = true;
		yield return new WaitForSeconds(Random.Range(1f, 6f));
		Vector3 position = spawnPointsOBJ.transform.GetChild(Random.Range(0, spawnPointsOBJ.transform.childCount - 1)).transform.position;
		GameObject obj = Object.Instantiate(npcAgentPrefab, position, Quaternion.identity);
		obj.transform.SetParent(dummynpcParentOBJ.transform);
		obj.GetComponent<NPC_Info>().NetworkNPCID = Random.Range(0, NPCsArray.Length - 1);
		obj.GetComponent<NPC_Info>().isBystander = true;
		NetworkServer.Spawn(obj);
		NavMeshAgent component = obj.GetComponent<NavMeshAgent>();
		component.enabled = true;
		component.destination = randomPointsOBJ.transform.GetChild(Random.Range(0, randomPointsOBJ.transform.childCount - 1)).transform.position;
		yield return new WaitForSeconds(0.3f);
		dummySpawnCooldown = false;
	}

	private void DummyNPCControl()
	{
		if (dummynpcParentOBJ.transform.childCount <= 0)
		{
			return;
		}
		for (int i = 0; i < dummynpcParentOBJ.transform.childCount; i++)
		{
			GameObject gameObject = dummynpcParentOBJ.transform.GetChild(i).gameObject;
			NPC_Info component = gameObject.GetComponent<NPC_Info>();
			int state = component.state;
			NavMeshAgent component2 = gameObject.GetComponent<NavMeshAgent>();
			if (state != -1 && !component2.pathPending && component2.remainingDistance <= component2.stoppingDistance && (!component2.hasPath || component2.velocity.sqrMagnitude == 0f))
			{
				switch (state)
				{
				case 0:
					component.StartWaitState(Random.Range(4f, 12f), 1);
					break;
				case 1:
					component2.destination = destroyPointsOBJ.transform.GetChild(Random.Range(0, destroyPointsOBJ.transform.childCount - 1)).transform.position;
					component.state = 99;
					break;
				case 99:
					Object.Destroy(gameObject);
					break;
				}
			}
		}
	}

	public void ConvertBystanderToCustomer(GameObject npcOBJ)
	{
		NPC_Info component = npcOBJ.GetComponent<NPC_Info>();
		if (Random.value < 0.66f)
		{
			component.RPCNotificationAboveHead("bystndrcnvrt1", "");
			component.surveillanceChecked = true;
			return;
		}
		AchievementsManager.Instance.CmdAddAchievementPoint(23, 1);
		_ = spawnPointsOBJ.transform.GetChild(Random.Range(0, spawnPointsOBJ.transform.childCount - 1)).transform.position;
		npcOBJ.transform.SetParent(customersnpcParentOBJ.transform);
		component.NetworkNPCID = Random.Range(0, NPCsArray.Length - 1);
		component.NetworkisCustomer = true;
		component.isBystander = false;
		component.productItemPlaceWait = Mathf.Clamp(0.5f - (float)GameData.Instance.gameDay * 0.003f, 0.1f, 0.5f);
		component.productsIDToBuy = GenerateCompensatedList(component.NPCID);
		component.productsIDToBuy.Sort();
		if ((double)Random.value < 0.5)
		{
			component.productsIDToBuy.Reverse();
		}
		NavMeshAgent component2 = npcOBJ.GetComponent<NavMeshAgent>();
		SetAgentData(component2);
		Vector3 position = shelvesOBJ.transform.GetChild(Random.Range(0, shelvesOBJ.transform.childCount)).Find("Standspot").transform.position;
		component2.destination = position;
		component.state = 0;
		SetAgentData(component2);
		component.RPCNotificationAboveHead("bystndrcnvrt", "");
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdUpdateRecycleStatus()
	{
		interruptBoxRecycling = !interruptBoxRecycling;
		RpcUpdateRecycleStatus(interruptBoxRecycling);
	}

	protected static void InvokeUserCode_CmdUpdateRecycleStatus(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUpdateRecycleStatus called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdUpdateRecycleStatus();
		}
	}

	protected void UserCode_CmdRequestRecycleStatus()
	{
		RpcUpdateRecycleStatus(interruptBoxRecycling);
	}

	protected static void InvokeUserCode_CmdRequestRecycleStatus(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestRecycleStatus called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdRequestRecycleStatus();
		}
	}

	protected void UserCode_RpcUpdateRecycleStatus__Boolean(bool value)
	{
		if (!base.isServer)
		{
			interruptBoxRecycling = value;
		}
		if (interruptBoxRecycling)
		{
			interruptRecyclingButtonOBJ.GetComponent<Image>().color = Color.green;
			interruptRecyclingButtonOBJ.GetComponent<Image>().sprite = buttonOn;
		}
		else
		{
			interruptRecyclingButtonOBJ.GetComponent<Image>().color = Color.red;
			interruptRecyclingButtonOBJ.GetComponent<Image>().sprite = buttonOff;
		}
	}

	protected static void InvokeUserCode_RpcUpdateRecycleStatus__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateRecycleStatus called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcUpdateRecycleStatus__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_CmdRerollCall()
	{
		if (rerollTimes > 0)
		{
			NetworkrerollTimes = rerollTimes - 1;
			GetComponent<EmployeesDataGeneration>().GenerateTodayEmployeesData();
			bool deactivateReroll = false;
			if (rerollTimes == 0)
			{
				deactivateReroll = true;
			}
			RpcRerollCall(deactivateReroll);
		}
	}

	protected static void InvokeUserCode_CmdRerollCall(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRerollCall called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdRerollCall();
		}
	}

	protected void UserCode_RpcRerollCall__Boolean(bool deactivateReroll)
	{
		if (deactivateReroll)
		{
			GetComponent<EmployeesDataGeneration>().rerollOBJ.SetActive(value: false);
		}
		GetComponent<EmployeesDataGeneration>().SpawnUICVs();
	}

	protected static void InvokeUserCode_RpcRerollCall__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRerollCall called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcRerollCall__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcUpdateTodayEmployeesOnClients__Int32__String(int index, string data)
	{
		todaysEmployeesData[index] = data;
	}

	protected static void InvokeUserCode_RpcUpdateTodayEmployeesOnClients__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateTodayEmployeesOnClients called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcUpdateTodayEmployeesOnClients__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_CmdHireEmployeeData__Int32__String(int employeeIndex, string employeeName)
	{
		if (numberOfHiredEmployees >= maxEmployees || todaysEmployeesData[employeeIndex] == "" || employeeName.Contains("|"))
		{
			return;
		}
		for (int i = 0; i < hiredEmployeesData.Length; i++)
		{
			if (hiredEmployeesData[i] == "")
			{
				string text = todaysEmployeesData[employeeIndex];
				todaysEmployeesData[employeeIndex] = "";
				hiredEmployeesData[i] = text + "|" + employeeName + "|0|5000|1000|1000|1000|1000|1000|1000";
				RpcClientHire(employeeIndex, i, text + "|" + employeeName + "|0|5000|1000|1000|1000|1000|1000|1000");
				SpawnEmployeeByIndex(i);
				break;
			}
		}
		SetHiredEmployeesNumber();
	}

	protected static void InvokeUserCode_CmdHireEmployeeData__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdHireEmployeeData called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdHireEmployeeData__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_RpcClientHire__Int32__Int32__String(int employeeIndex, int hiredIndex, string data)
	{
		if (!base.isServer)
		{
			todaysEmployeesData[employeeIndex] = "";
			hiredEmployeesData[hiredIndex] = data;
		}
		GetComponent<EmployeesDataGeneration>().SpawnUICVs();
		GameData.Instance.transform.Find("Audio_AcquirePerk").GetComponent<AudioSource>().Play();
		GameCanvas.Instance.CreateImportantNotification("hiredemployee");
	}

	protected static void InvokeUserCode_RpcClientHire__Int32__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcClientHire called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcClientHire__Int32__Int32__String(reader.ReadInt(), reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_CmdDismissEmployeeData__Int32(int employeeIndex)
	{
		if ((bool)employeesArray[employeeIndex] && !(hiredEmployeesData[employeeIndex] == ""))
		{
			NPC_Info component = employeesArray[employeeIndex].GetComponent<NPC_Info>();
			component.employeeDismissed = true;
			component.StopAllCoroutines();
			employeesArray[employeeIndex].GetComponent<NavMeshAgent>().destination = employeeSpawnpoint.transform.position;
			if (component.equippedItem > 0)
			{
				DropBoxOnGround(component);
				UnequipBox(component);
			}
			hiredEmployeesData[employeeIndex] = "";
			employeesArray[employeeIndex] = null;
			priorityArray[employeeIndex] = 0;
			RpcClientDismiss(employeeIndex);
			SetHiredEmployeesNumber();
		}
	}

	protected static void InvokeUserCode_CmdDismissEmployeeData__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdDismissEmployeeData called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdDismissEmployeeData__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcClientDismiss__Int32(int employeeIndex)
	{
		if (!base.isServer)
		{
			hiredEmployeesData[employeeIndex] = "";
			employeesArray[employeeIndex] = null;
			priorityArray[employeeIndex] = 0;
		}
		GetComponent<EmployeesDataGeneration>().SpawnUIDismiss();
		GameData.Instance.transform.Find("Audio_AcquirePerk").GetComponent<AudioSource>().Play();
		GameCanvas.Instance.CreateImportantNotification("dismissedemployee");
	}

	protected static void InvokeUserCode_RpcClientDismiss__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcClientDismiss called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcClientDismiss__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdRequestHappinessLevel()
	{
		RpcRequestHappinessLevel(currentHappinessLevel);
	}

	protected static void InvokeUserCode_CmdRequestHappinessLevel(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestHappinessLevel called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdRequestHappinessLevel();
		}
	}

	protected void UserCode_RpcRequestHappinessLevel__Single(float happinessLevel)
	{
		if (!base.isServer)
		{
			currentHappinessLevel = happinessLevel;
		}
	}

	protected static void InvokeUserCode_RpcRequestHappinessLevel__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRequestHappinessLevel called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcRequestHappinessLevel__Single(reader.ReadFloat());
		}
	}

	protected void UserCode_CmdChangeEmployeeName__Int32__String(int index, string newName)
	{
		if (newName.Length > 0 && newName.Length < 26 && !newName.Contains("|"))
		{
			GameObject gameObject = employeesArray[index];
			gameObject.GetComponent<NPC_Info>().NetworkNPCName = newName;
			string[] array = hiredEmployeesData[index].Split("|");
			int num = int.Parse(array[0]);
			int num2 = int.Parse(array[1]);
			int num3 = int.Parse(array[2]);
			int num4 = int.Parse(array[3]);
			int num5 = int.Parse(array[4]);
			int num6 = int.Parse(array[5]);
			int num7 = int.Parse(array[6]);
			int num8 = int.Parse(array[7]);
			int num9 = int.Parse(array[8]);
			string text = array[9];
			int num10 = int.Parse(array[10]);
			int num11 = int.Parse(array[11]);
			int num12 = int.Parse(array[12]);
			int num13 = int.Parse(array[13]);
			int num14 = int.Parse(array[14]);
			int num15 = int.Parse(array[15]);
			int num16 = int.Parse(array[16]);
			int num17 = int.Parse(array[17]);
			hiredEmployeesData[index] = num + "|" + num2 + "|" + num3 + "|" + num4 + "|" + num5 + "|" + num6 + "|" + num7 + "|" + num8 + "|" + num9 + "|" + text + "|" + num10 + "|" + num11 + "|" + num12 + "|" + num13 + "|" + num14 + "|" + num15 + "|" + num16 + "|" + num17;
			RpcChangeEmployeeName(gameObject, newName);
		}
	}

	protected static void InvokeUserCode_CmdChangeEmployeeName__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeEmployeeName called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdChangeEmployeeName__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_RpcChangeEmployeeName__GameObject__String(GameObject employeeOBJ, string newName)
	{
		employeeOBJ.GetComponent<NPC_Info>().UpdateNPCName(newName);
	}

	protected static void InvokeUserCode_RpcChangeEmployeeName__GameObject__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcChangeEmployeeName called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcChangeEmployeeName__GameObject__String(reader.ReadGameObject(), reader.ReadString());
		}
	}

	protected void UserCode_CmdChangeEmployeeHat__Int32__Int32(int employeeIndex, int quantity)
	{
		if ((bool)employeesArray[employeeIndex])
		{
			int num = employeesArray[employeeIndex].GetComponent<NPC_Info>().hatID + quantity;
			if (num >= GetComponent<EmployeesDataGeneration>().hatSprites.Length)
			{
				num = 0;
			}
			else if (num < 0)
			{
				num = GetComponent<EmployeesDataGeneration>().hatSprites.Length - 1;
			}
			employeesArray[employeeIndex].GetComponent<NPC_Info>().NetworkhatID = num;
			RpcChangeEmployeeHat(employeeIndex, num);
		}
	}

	protected static void InvokeUserCode_CmdChangeEmployeeHat__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeEmployeeHat called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdChangeEmployeeHat__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcChangeEmployeeHat__Int32__Int32(int index, int newHatIndex)
	{
		GetComponent<EmployeesDataGeneration>().UpdateEmployeeHat(index, newHatIndex);
	}

	protected static void InvokeUserCode_RpcChangeEmployeeHat__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcChangeEmployeeHat called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcChangeEmployeeHat__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdChangeEmployeePriority__Int32__Int32(int employeeIndex, int whichPriority)
	{
		if ((bool)employeesArray[employeeIndex])
		{
			priorityArray[employeeIndex] = whichPriority;
			AssignEmployeesPriorities();
			RpcChangeEmployeePriority(employeeIndex, whichPriority);
		}
	}

	protected static void InvokeUserCode_CmdChangeEmployeePriority__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeEmployeePriority called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdChangeEmployeePriority__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcChangeEmployeePriority__Int32__Int32(int index, int currentPriorityValue)
	{
		if (!base.isServer)
		{
			priorityArray[index] = currentPriorityValue;
		}
		GetComponent<EmployeesDataGeneration>().UpdateEmployeePriority(index, currentPriorityValue);
	}

	protected static void InvokeUserCode_RpcChangeEmployeePriority__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcChangeEmployeePriority called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcChangeEmployeePriority__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdChangeAllEmployeePriorities__Int32(int whichPriority)
	{
		if (numberOfHiredEmployees == 0)
		{
			return;
		}
		for (int i = 0; i < employeesArray.Length; i++)
		{
			if ((bool)employeesArray[i])
			{
				priorityArray[i] = whichPriority;
			}
		}
		AssignEmployeesPriorities();
		RpcChangeAllEmployeePriorities(whichPriority);
	}

	protected static void InvokeUserCode_CmdChangeAllEmployeePriorities__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeAllEmployeePriorities called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdChangeAllEmployeePriorities__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcChangeAllEmployeePriorities__Int32(int currentPriorityValue)
	{
		if (!base.isServer)
		{
			for (int i = 0; i < priorityArray.Length; i++)
			{
				priorityArray[i] = currentPriorityValue;
			}
		}
		GetComponent<EmployeesDataGeneration>().UpdateAllEmployeePriorities(currentPriorityValue);
	}

	protected static void InvokeUserCode_RpcChangeAllEmployeePriorities__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcChangeAllEmployeePriorities called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcChangeAllEmployeePriorities__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdLoadPrioritiesLayout__Int32[](int[] loadedPrioritiesArray)
	{
		if (numberOfHiredEmployees == 0)
		{
			return;
		}
		for (int i = 0; i < loadedPrioritiesArray.Length; i++)
		{
			if (i < priorityArray.Length)
			{
				priorityArray[i] = loadedPrioritiesArray[i];
			}
		}
		AssignEmployeesPriorities();
		RpcLoadPrioritiesLayout(loadedPrioritiesArray);
	}

	protected static void InvokeUserCode_CmdLoadPrioritiesLayout__Int32[](NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdLoadPrioritiesLayout called on client.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_CmdLoadPrioritiesLayout__Int32[](GeneratedNetworkCode._Read_System.Int32[](reader));
		}
	}

	protected void UserCode_RpcLoadPrioritiesLayout__Int32[](int[] loadedPrioritiesArray)
	{
		if (!base.isServer)
		{
			for (int i = 0; i < loadedPrioritiesArray.Length; i++)
			{
				if (i < priorityArray.Length)
				{
					priorityArray[i] = loadedPrioritiesArray[i];
				}
			}
		}
		GetComponent<EmployeesDataGeneration>().SetTaskLayout(loadedPrioritiesArray);
	}

	protected static void InvokeUserCode_RpcLoadPrioritiesLayout__Int32[](NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcLoadPrioritiesLayout called on server.");
		}
		else
		{
			((NPC_Manager)obj).UserCode_RpcLoadPrioritiesLayout__Int32[](GeneratedNetworkCode._Read_System.Int32[](reader));
		}
	}

	static NPC_Manager()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdUpdateRecycleStatus()", InvokeUserCode_CmdUpdateRecycleStatus, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdRequestRecycleStatus()", InvokeUserCode_CmdRequestRecycleStatus, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdRerollCall()", InvokeUserCode_CmdRerollCall, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdHireEmployeeData(System.Int32,System.String)", InvokeUserCode_CmdHireEmployeeData__Int32__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdDismissEmployeeData(System.Int32)", InvokeUserCode_CmdDismissEmployeeData__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdRequestHappinessLevel()", InvokeUserCode_CmdRequestHappinessLevel, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdChangeEmployeeName(System.Int32,System.String)", InvokeUserCode_CmdChangeEmployeeName__Int32__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdChangeEmployeeHat(System.Int32,System.Int32)", InvokeUserCode_CmdChangeEmployeeHat__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdChangeEmployeePriority(System.Int32,System.Int32)", InvokeUserCode_CmdChangeEmployeePriority__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdChangeAllEmployeePriorities(System.Int32)", InvokeUserCode_CmdChangeAllEmployeePriorities__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(NPC_Manager), "System.Void NPC_Manager::CmdLoadPrioritiesLayout(System.Int32[])", InvokeUserCode_CmdLoadPrioritiesLayout__Int32[], requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcUpdateRecycleStatus(System.Boolean)", InvokeUserCode_RpcUpdateRecycleStatus__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcRerollCall(System.Boolean)", InvokeUserCode_RpcRerollCall__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcUpdateTodayEmployeesOnClients(System.Int32,System.String)", InvokeUserCode_RpcUpdateTodayEmployeesOnClients__Int32__String);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcClientHire(System.Int32,System.Int32,System.String)", InvokeUserCode_RpcClientHire__Int32__Int32__String);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcClientDismiss(System.Int32)", InvokeUserCode_RpcClientDismiss__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcRequestHappinessLevel(System.Single)", InvokeUserCode_RpcRequestHappinessLevel__Single);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcChangeEmployeeName(UnityEngine.GameObject,System.String)", InvokeUserCode_RpcChangeEmployeeName__GameObject__String);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcChangeEmployeeHat(System.Int32,System.Int32)", InvokeUserCode_RpcChangeEmployeeHat__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcChangeEmployeePriority(System.Int32,System.Int32)", InvokeUserCode_RpcChangeEmployeePriority__Int32__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcChangeAllEmployeePriorities(System.Int32)", InvokeUserCode_RpcChangeAllEmployeePriorities__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(NPC_Manager), "System.Void NPC_Manager::RpcLoadPrioritiesLayout(System.Int32[])", InvokeUserCode_RpcLoadPrioritiesLayout__Int32[]);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.String[](writer, hiredEmployeesData);
			GeneratedNetworkCode._Write_System.String[](writer, todaysEmployeesData);
			GeneratedNetworkCode._Write_System.Int32[](writer, priorityArray);
			writer.WriteInt(numberOfHiredEmployees);
			writer.WriteInt(rerollTimes);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, hiredEmployeesData);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, todaysEmployeesData);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Int32[](writer, priorityArray);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteInt(numberOfHiredEmployees);
		}
		if ((syncVarDirtyBits & 0x10L) != 0L)
		{
			writer.WriteInt(rerollTimes);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref hiredEmployeesData, null, GeneratedNetworkCode._Read_System.String[](reader));
			GeneratedSyncVarDeserialize(ref todaysEmployeesData, null, GeneratedNetworkCode._Read_System.String[](reader));
			GeneratedSyncVarDeserialize(ref priorityArray, null, GeneratedNetworkCode._Read_System.Int32[](reader));
			GeneratedSyncVarDeserialize(ref numberOfHiredEmployees, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref rerollTimes, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref hiredEmployeesData, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref todaysEmployeesData, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref priorityArray, null, GeneratedNetworkCode._Read_System.Int32[](reader));
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref numberOfHiredEmployees, null, reader.ReadInt());
		}
		if ((num & 0x10L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref rerollTimes, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// NPC_Speed
using System.Collections;
using UnityEngine;

public class NPC_Speed : MonoBehaviour
{
	public float velocity;

	private void Start()
	{
		StartCoroutine(CalculateVelocity());
	}

	private IEnumerator CalculateVelocity()
	{
		while (Application.isPlaying)
		{
			Vector3 prevPos = base.transform.position;
			yield return new WaitForEndOfFrame();
			velocity = (prevPos - base.transform.position).magnitude / Time.deltaTime;
			velocity = Mathf.Round(velocity * 10f) / 10f;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OldBackupsManager
using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;

public class OldBackupsManager : MonoBehaviour
{
	public int numberOfMainFilesToIterate = 200;

	public int numberOfBackupsToCheckEachFile = 2000;

	public GameObject UIDeleteOldBackupsOBJ;

	[Space(10f)]
	public TextMeshProUGUI fixAutosaveField;

	private void Start()
	{
		StartCoroutine(DelayedManager());
	}

	private IEnumerator DelayedManager()
	{
		UIDeleteOldBackupsOBJ.SetActive(value: true);
		yield return new WaitForSeconds(0.5f);
		string appFilePath = Application.persistentDataPath;
		int fileCounter = 0;
		int backupCounter = 0;
		int maxBackupCounter = 0;
		for (int i = 0; i < numberOfMainFilesToIterate + 1; i++)
		{
			string text = "StoreFile" + i + ".es3";
			if (ES3.FileExists(appFilePath + "/" + text))
			{
				int maxBackupDay = 0;
				string baseName = appFilePath + "/StoreFile" + i;
				for (int j = 0; j < numberOfBackupsToCheckEachFile + 1; j++)
				{
					if (ES3.FileExists(baseName + "Day" + j + ".es3"))
					{
						maxBackupDay = j;
					}
					backupCounter++;
					if (backupCounter > 500)
					{
						backupCounter = 0;
						yield return null;
					}
				}
				if (maxBackupDay > 11)
				{
					int num = maxBackupDay - 11;
					for (int j = num - 1; j >= 0; j--)
					{
						string text2 = baseName + "Day" + j + ".es3";
						if (ES3.FileExists(text2))
						{
							ES3.CopyFile(text2, appFilePath + "/OldBackups/StoreFile" + i + "Day" + j + ".es3");
							ES3.DeleteFile(text2);
						}
						maxBackupCounter++;
						if (maxBackupCounter > 10)
						{
							maxBackupCounter = 0;
							yield return null;
						}
					}
				}
			}
			fileCounter++;
			if (fileCounter > 50)
			{
				fileCounter = 0;
				yield return null;
			}
		}
		UIDeleteOldBackupsOBJ.SetActive(value: false);
	}

	public void AttemptAutosaveFix()
	{
		string text = "Autosaves/Autosave001.es3";
		string filePath = Application.persistentDataPath + text;
		string text2 = Application.persistentDataPath + "/Autosaves/";
		if (!ES3.DirectoryExists(text2))
		{
			fixAutosaveField.text = "No autosave folder detected.";
			fixAutosaveField.transform.gameObject.SetActive(value: true);
			return;
		}
		string[] files = ES3.GetFiles(text2);
		if (files.Length <= 1 && ES3.FileExists(filePath))
		{
			fixAutosaveField.text = "No additional saves detected in the autosave folder.";
			fixAutosaveField.transform.gameObject.SetActive(value: true);
			return;
		}
		int num = 0;
		string text3 = "";
		List<string> list = new List<string>();
		List<int> list2 = new List<int>();
		for (int i = 0; i < files.Length; i++)
		{
			string text4 = files[i].Split(".")[0];
			if (text4.Contains("Day"))
			{
				int num2 = int.Parse(text4.Split("Day")[1]);
				list2.Add(num2);
				list.Add(text4);
				if (num2 > num)
				{
					text3 = text4;
					num = num2;
				}
			}
		}
		for (int j = 0; j < list.Count; j++)
		{
			string text5 = list[j];
			string text6 = ((!(text5 == text3)) ? ("StoreFile95Day" + list2[j] + ".es3") : "StoreFile95.es3");
			string text7 = Application.persistentDataPath + "/Autosaves/" + text5 + ".es3";
			string newFilePath = Application.persistentDataPath + "/" + text6;
			ES3.CopyFile(text7, newFilePath);
			ES3.DeleteFile(text7);
		}
		if (ES3.FileExists(filePath))
		{
			ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
			ES3.Save("autosaveOriginalFilename", "StoreFile95.es3", filePath, settings);
		}
		fixAutosaveField.text = "Autosave fixing completed. Your store should appear at the end of your saves list.";
		fixAutosaveField.transform.gameObject.SetActive(value: true);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OnEnableSetParent
using UnityEngine;

public class OnEnableSetParent : MonoBehaviour
{
	private void OnEnable()
	{
		base.transform.parent = base.transform.parent.transform;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OpenDiscordURL
using UnityEngine;

public class OpenDiscordURL : MonoBehaviour
{
	public void OpenDiscordURLMethod()
	{
		Application.OpenURL("https://discord.gg/deaddevstellnolies");
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OptimizationLayerCullDistance
using UnityEngine;

public class OptimizationLayerCullDistance : MonoBehaviour
{
	private void Start()
	{
		Camera component = GetComponent<Camera>();
		float[] array = new float[32];
		array[1] = 20f;
		component.layerCullDistances = array;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderDummyBoxBehaviour
using Rewired;
using StarterAssets;
using UnityEngine;

public class OrderDummyBoxBehaviour : MonoBehaviour
{
	public LayerMask raycastMask;

	private Player MainPlayer;

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
	}

	private void Update()
	{
		if (MainPlayer.GetButtonDown("Main Action") && Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, raycastMask) && (bool)hitInfo.transform.GetComponent<ZOrderDummy>() && (bool)hitInfo.transform.parent.transform.parent.GetComponent<OrderPickupPoint>())
		{
			int siblingIndex = hitInfo.transform.GetSiblingIndex();
			if (!(hitInfo.transform.parent.transform.parent.GetComponent<OrderPickupPoint>().pickupsData[siblingIndex] != ""))
			{
				string boxData = FirstPersonController.Instance.GetComponent<PlayerNetwork>().orderNumberData + "|" + FirstPersonController.Instance.GetComponent<PlayerNetwork>().orderItemsInBoxData;
				hitInfo.transform.parent.transform.parent.GetComponent<OrderPickupPoint>().AddOrderBox(siblingIndex, boxData);
				FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeEquippedItem(0);
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderingDevice
using System.Collections;
using Mirror;
using Rewired;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class OrderingDevice : MonoBehaviour
{
	public GameObject orderingItemPrefabOBJ;

	public GameObject listParentOBJ;

	public GameObject softwareBCK;

	public LayerMask raycastMask;

	public TextMeshProUGUI clockField;

	public AudioSource stylusTapAudioSource;

	public Animator stylusAnimator;

	public GameObject animHighlightParent;

	[Space(10f)]
	public GameObject canvasOBJ;

	[Space(10f)]
	public Image productImage;

	public TextMeshProUGUI productNameField;

	public TextMeshProUGUI brandNameField;

	public TextMeshProUGUI itemsPerBoxField;

	public TextMeshProUGUI pricePerUnitField;

	public TextMeshProUGUI pricePerBoxField;

	public TextMeshProUGUI totalPriceField;

	public TextMeshProUGUI totalBoxesAmount;

	public TextMeshProUGUI productsInShoppingListField;

	[Space(10f)]
	public TextMeshProUGUI itemsInStoreField;

	public TextMeshProUGUI boxesInStoreField;

	public TextMeshProUGUI itemsInStorageField;

	public TextMeshProUGUI boxesInStorageField;

	public TextMeshProUGUI itemsToFillField;

	public TextMeshProUGUI boxesToFillField;

	private int currentProductID = -1;

	private int oldProductID = -1;

	private bool updatingProduct;

	private int counter;

	private CustomNetworkManager manager;

	private ProductListing pListingComponent;

	private ManagerBlackboard mBlacboardComponent;

	private TextMeshProUGUI gameCanvasClockField;

	private Player MainPlayer;

	private CustomCameraController cCameraController;

	private bool haveToRecreateListAgain;

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
	}

	private void OnEnable()
	{
		pListingComponent = ProductListing.Instance;
		mBlacboardComponent = GameData.Instance.GetComponent<ManagerBlackboard>();
		manager = NetworkManager.singleton as CustomNetworkManager;
		cCameraController = Camera.main.GetComponent<CustomCameraController>();
		gameCanvasClockField = GameCanvas.Instance.transform.Find("GameData/Time").GetComponent<TextMeshProUGUI>();
		canvasOBJ.SetActive(value: true);
		CopyManagerBlackboardList();
		if (GameData.Instance.GetComponent<UpgradesManager>().softwareUpgradePerk)
		{
			softwareBCK.SetActive(value: false);
		}
	}

	private void Update()
	{
		clockField.text = gameCanvasClockField.text;
		if (cCameraController.isInCameraEvent)
		{
			haveToRecreateListAgain = true;
			return;
		}
		if (haveToRecreateListAgain)
		{
			StartCoroutine(RecreateListAgain());
			haveToRecreateListAgain = false;
			return;
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, raycastMask))
		{
			if ((bool)hitInfo.transform.GetComponent<InteractableContainer>())
			{
				int siblingIndex = hitInfo.transform.GetSiblingIndex();
				int num = hitInfo.transform.parent.transform.parent.GetComponent<Data_Container>().productInfoArray[siblingIndex * 2];
				if (num < 0)
				{
					oldProductID = -2;
					ClearAllData();
				}
				if (num >= 0 && oldProductID != num)
				{
					currentProductID = num;
					SetCurrentProductData(num);
					oldProductID = num;
				}
			}
			else
			{
				oldProductID = -4;
				ClearAllData();
			}
		}
		else
		{
			oldProductID = -5;
			ClearAllData();
		}
		if (updatingProduct)
		{
			if (counter > 30)
			{
				counter = 0;
				UpdateProductExistences();
			}
			counter++;
			if (MainPlayer.GetButtonDown("Main Action"))
			{
				AddProduct(currentProductID);
				stylusAnimator.SetFloat("AnimationFactor", 0f);
				stylusAnimator.Play("StylusAnimation");
				StartCoroutine(AnimationHighlight(0));
			}
			if (MainPlayer.GetButtonDown("Secondary Action"))
			{
				ClearProduct(currentProductID);
			}
		}
		if (MainPlayer.GetButtonDown("Build") && GameData.Instance.GetComponent<ManagerBlackboard>().shoppingListParent.transform.childCount > 0 && listParentOBJ.transform.childCount > 0)
		{
			if (GameData.Instance.gameFunds < GameData.Instance.GetComponent<ManagerBlackboard>().shoppingTotalCharge)
			{
				GameCanvas.Instance.CreateCanvasNotification("message6");
				return;
			}
			totalPriceField.text = "$0.00";
			productsInShoppingListField.text = "x0";
			totalBoxesAmount.text = "x0";
			GameData.Instance.GetComponent<ManagerBlackboard>().BuyCargo();
			DestroyUIObjects();
			stylusAnimator.SetFloat("AnimationFactor", 2f);
			stylusAnimator.Play("StylusAnimation");
			StartCoroutine(AnimationHighlight(2));
		}
	}

	private void SetCurrentProductData(int productID)
	{
		updatingProduct = true;
		GameObject gameObject = pListingComponent.productPrefabs[productID];
		float num = pListingComponent.tierInflation[gameObject.GetComponent<Data_Product>().productTier];
		int maxItemsPerBox = gameObject.GetComponent<Data_Product>().maxItemsPerBox;
		float basePricePerUnit = gameObject.GetComponent<Data_Product>().basePricePerUnit;
		basePricePerUnit *= num;
		basePricePerUnit = Mathf.Round(basePricePerUnit * 100f) / 100f;
		float num2 = basePricePerUnit * (float)maxItemsPerBox;
		num2 = Mathf.Round(num2 * 100f) / 100f;
		productImage.sprite = pListingComponent.productSprites[productID];
		string key = "product" + productID;
		string localizationString = LocalizationManager.instance.GetLocalizationString(key);
		productNameField.text = localizationString;
		string productBrand = gameObject.GetComponent<Data_Product>().productBrand;
		brandNameField.text = productBrand;
		itemsPerBoxField.text = "x" + maxItemsPerBox;
		pricePerUnitField.text = "$" + basePricePerUnit;
		pricePerBoxField.text = "$" + num2;
		StartCoroutine(SetInListField(productID));
	}

	private void ClearAllData()
	{
		if (updatingProduct)
		{
			productImage.sprite = null;
			productNameField.text = "";
			brandNameField.text = "";
			itemsPerBoxField.text = "x00";
			pricePerUnitField.text = "$0.00";
			pricePerBoxField.text = "$0.00";
			itemsInStoreField.text = "x0";
			boxesInStoreField.text = "x0";
			itemsInStorageField.text = "x0";
			boxesInStorageField.text = "x0";
			itemsToFillField.text = "x0";
			boxesToFillField.text = "x0";
			productsInShoppingListField.text = "0";
			currentProductID = -1;
			updatingProduct = false;
		}
	}

	private void UpdateProductExistences()
	{
		GameObject employeeParentOBJ = NPC_Manager.Instance.employeeParentOBJ;
		int childCount = employeeParentOBJ.transform.childCount;
		GameObject shelvesOBJ = NPC_Manager.Instance.shelvesOBJ;
		GameObject storageOBJ = NPC_Manager.Instance.storageOBJ;
		int num = 0;
		int num2 = 0;
		GameObject gameObject = pListingComponent.productPrefabs[currentProductID];
		for (int i = 0; i < shelvesOBJ.transform.childCount; i++)
		{
			int[] productInfoArray = shelvesOBJ.transform.GetChild(i).GetComponent<Data_Container>().productInfoArray;
			int num3 = productInfoArray.Length / 2;
			for (int j = 0; j < num3; j++)
			{
				int num4 = productInfoArray[j * 2];
				if (num4 >= 0 && currentProductID == num4)
				{
					int num5 = productInfoArray[j * 2 + 1];
					if (num5 >= 0)
					{
						num += num5;
						int maxProductsPerRow = NPC_Manager.Instance.GetMaxProductsPerRow(i, currentProductID);
						num2 += maxProductsPerRow - num5;
					}
				}
			}
		}
		itemsInStoreField.text = "x" + num;
		itemsToFillField.text = "x" + num2;
		int maxItemsPerBox = gameObject.GetComponent<Data_Product>().maxItemsPerBox;
		float num6 = (float)num / (float)maxItemsPerBox;
		num6 = Mathf.Round(num6 * 100f) / 100f;
		boxesInStoreField.text = "x" + num6;
		float num7 = (float)num2 / (float)maxItemsPerBox;
		num7 = Mathf.Round(num7 * 100f) / 100f;
		boxesToFillField.text = "x" + num7;
		int num8 = 0;
		for (int k = 0; k < storageOBJ.transform.childCount; k++)
		{
			int[] productInfoArray2 = storageOBJ.transform.GetChild(k).GetComponent<Data_Container>().productInfoArray;
			int num9 = productInfoArray2.Length / 2;
			for (int l = 0; l < num9; l++)
			{
				int num10 = productInfoArray2[l * 2];
				if (num10 >= 0 && currentProductID == num10)
				{
					int num11 = productInfoArray2[l * 2 + 1];
					if (num11 > 0)
					{
						num8 += num11;
					}
				}
			}
		}
		Transform child = GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(4);
		if (child.childCount > 0)
		{
			foreach (Transform item in child)
			{
				BoxData component = item.GetComponent<BoxData>();
				int productID = component.productID;
				if (currentProductID == productID)
				{
					int numberOfProducts = component.numberOfProducts;
					if (numberOfProducts > 0)
					{
						num8 += numberOfProducts;
					}
				}
			}
		}
		if (childCount > 0)
		{
			for (int m = 0; m < childCount; m++)
			{
				int boxProductID = employeeParentOBJ.transform.GetChild(m).transform.GetComponent<NPC_Info>().boxProductID;
				if (currentProductID == boxProductID)
				{
					int boxNumberOfProducts = employeeParentOBJ.transform.GetChild(m).transform.GetComponent<NPC_Info>().boxNumberOfProducts;
					if (boxNumberOfProducts > 0)
					{
						num8 += boxNumberOfProducts;
					}
				}
			}
		}
		if ((bool)manager)
		{
			foreach (PlayerObjectController gamePlayer in manager.GamePlayers)
			{
				int syncedProductID = gamePlayer.GetComponent<PlayerSyncCharacter>().syncedProductID;
				if (currentProductID == syncedProductID)
				{
					int syncedNumberOfProducts = gamePlayer.GetComponent<PlayerSyncCharacter>().syncedNumberOfProducts;
					if (syncedNumberOfProducts > 0)
					{
						num8 += syncedNumberOfProducts;
					}
				}
			}
		}
		itemsInStorageField.text = "x" + num8;
		float num12 = (float)num8 / (float)maxItemsPerBox;
		num12 = Mathf.Round(num12 * 100f) / 100f;
		boxesInStorageField.text = "x" + num12;
	}

	private void CopyManagerBlackboardList()
	{
		GameObject shoppingListParent = GameData.Instance.GetComponent<ManagerBlackboard>().shoppingListParent;
		for (int i = 0; i < shoppingListParent.transform.childCount; i++)
		{
			int thisSkillIndex = shoppingListParent.transform.GetChild(i).GetComponent<InteractableData>().thisSkillIndex;
			AddProductbase(thisSkillIndex);
		}
		StartCoroutine(CalculateShoppingListTotal());
	}

	private void AddProduct(int productID)
	{
		AddProductbase(productID);
		float boxPrice = RetrievePricePerBox(productID);
		GameData.Instance.GetComponent<ManagerBlackboard>().AddShoppingListProduct(productID, boxPrice);
		StartCoroutine(SetInListField(productID));
		StartCoroutine(CalculateShoppingListTotal());
	}

	private float RetrievePricePerBox(int productID)
	{
		GameObject gameObject = pListingComponent.productPrefabs[productID];
		float num = pListingComponent.tierInflation[gameObject.GetComponent<Data_Product>().productTier];
		int maxItemsPerBox = gameObject.GetComponent<Data_Product>().maxItemsPerBox;
		return Mathf.Round(Mathf.Round(gameObject.GetComponent<Data_Product>().basePricePerUnit * num * 100f) / 100f * (float)maxItemsPerBox * 100f) / 100f;
	}

	private void AddProductbase(int productID)
	{
		GameObject obj = Object.Instantiate(orderingItemPrefabOBJ, listParentOBJ.transform);
		obj.transform.SetAsFirstSibling();
		obj.GetComponent<OrderingListReferences>().productID = productID;
		float price = RetrievePricePerBox(productID);
		obj.GetComponent<OrderingListReferences>().priceField.text = ProductListing.Instance.ConvertFloatToTextPrice(price);
		obj.GetComponent<OrderingListReferences>().productImage.sprite = pListingComponent.productSprites[productID];
		string key = "product" + productID;
		string localizationString = LocalizationManager.instance.GetLocalizationString(key);
		obj.GetComponent<OrderingListReferences>().productNameField.text = localizationString;
	}

	private void ClearProduct(int productID)
	{
		if (listParentOBJ.transform.childCount == 0)
		{
			return;
		}
		for (int i = 0; i < listParentOBJ.transform.childCount; i++)
		{
			Transform child = listParentOBJ.transform.GetChild(i);
			if (child.GetComponent<OrderingListReferences>().productID == productID)
			{
				Object.Destroy(child.gameObject);
				stylusAnimator.SetFloat("AnimationFactor", 1f);
				stylusAnimator.Play("StylusAnimation");
				StartCoroutine(AnimationHighlight(1));
				int childCount = GameData.Instance.GetComponent<ManagerBlackboard>().shoppingListParent.transform.childCount;
				if (i < childCount)
				{
					int indexToRemove = childCount - 1 - i;
					GameData.Instance.GetComponent<ManagerBlackboard>().RemoveShoppingListProduct(indexToRemove);
				}
				break;
			}
		}
		StartCoroutine(SetInListField(productID));
		StartCoroutine(CalculateShoppingListTotal());
	}

	private IEnumerator SetInListField(int productID)
	{
		yield return new WaitForEndOfFrame();
		int num = 0;
		foreach (Transform item in listParentOBJ.transform)
		{
			if (item.GetComponent<OrderingListReferences>().productID == productID)
			{
				num++;
			}
		}
		productsInShoppingListField.text = num.ToString();
	}

	private IEnumerator RecreateListAgain()
	{
		DestroyUIObjects();
		yield return new WaitForEndOfFrame();
		CopyManagerBlackboardList();
	}

	private void DestroyUIObjects()
	{
		int childCount = listParentOBJ.transform.childCount;
		for (int i = 0; i < childCount; i++)
		{
			Object.Destroy(listParentOBJ.transform.GetChild(listParentOBJ.transform.childCount - 1 - i).gameObject);
		}
	}

	private IEnumerator CalculateShoppingListTotal()
	{
		GameObject managerListParentOBJ = GameData.Instance.GetComponent<ManagerBlackboard>().shoppingListParent;
		yield return new WaitForEndOfFrame();
		totalBoxesAmount.text = "x" + listParentOBJ.transform.childCount;
		float num = 0f;
		if (managerListParentOBJ.transform.childCount > 0)
		{
			foreach (Transform item in managerListParentOBJ.transform)
			{
				string text = item.transform.Find("BoxPrice").GetComponent<TextMeshProUGUI>().text;
				text = text.Substring(2);
				num += float.Parse(text);
			}
		}
		string text2 = ProductListing.Instance.ConvertFloatToTextPrice(num);
		totalPriceField.text = text2;
	}

	private IEnumerator AnimationHighlight(int index)
	{
		GameObject highlightOBJ = animHighlightParent.transform.GetChild(index).gameObject;
		yield return new WaitForSeconds(0.25f);
		highlightOBJ.SetActive(value: true);
		yield return new WaitForSeconds(0.1f);
		highlightOBJ.SetActive(value: false);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderingListReferences
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class OrderingListReferences : MonoBehaviour
{
	public int productID;

	public TextMeshProUGUI productNameField;

	public TextMeshProUGUI priceField;

	public Image productImage;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderingTray
using System.Collections;
using System.Collections.Generic;
using System.Text;
using HutongGames.PlayMaker;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class OrderingTray : MonoBehaviour
{
	public bool isLocalPlayer;

	public int binWidth = 90;

	public int binLength = 60;

	public int padding = 1;

	public GameObject positionPivotOBJ;

	public GameObject destroyContainerOBJ;

	[Space(10f)]
	public List<int> itemsInTray;

	public LayerMask raycastMask;

	public bool isThisPlayerLocal;

	private Player MainPlayer;

	public List<Rect> occupiedRects = new List<Rect>();

	public List<Rect> freeRectangles = new List<Rect>();

	private MaxRectsBinPack binPack;

	public string assembledItemData;

	[Space(10f)]
	public GameObject extraOrderingTabletOBJ;

	public TextMeshProUGUI tableNumberField;

	public GameObject UIextraOrderingItemPrefab;

	public GameObject extraOrderingItemsParent;

	private PinpointShelfFromTray pinpointComponent;

	private bool extraOrderingTabletEnabled;

	private int currentOrderIndex;

	private List<int> itemsLeftInList;

	private bool initialListGenerated;

	private float keyWaitingTime = 0.15f;

	private bool onKeyCooldown;

	private bool allItemsAreTheSame;

	private void Start()
	{
		if (isLocalPlayer)
		{
			MainPlayer = ReInput.players.GetPlayer(0);
			binPack = new MaxRectsBinPack(binWidth, binLength);
			binPack.allowRotations = false;
			if (assembledItemData != "")
			{
				UnpackAssembledItemData();
			}
			CheckIfOrderTabletActivation();
		}
	}

	public void CheckIfOrderTabletActivation()
	{
		if (OrderPackaging.Instance.currentOrderIn[0] != "" || OrderPackaging.Instance.currentOrderIn[1] != "" || OrderPackaging.Instance.currentOrderIn[2] != "" || OrderPackaging.Instance.currentOrderIn[3] != "")
		{
			if (!OrderPackaging.Instance.pinpointerComponent)
			{
				GameObject gameObject = Object.Instantiate(OrderPackaging.Instance.pinpointerPrefabOBJ);
				OrderPackaging.Instance.pinpointerComponent = gameObject.GetComponent<PinpointShelfFromTray>();
			}
			pinpointComponent = OrderPackaging.Instance.pinpointerComponent;
			itemsLeftInList = new List<int>();
			extraOrderingTabletOBJ.SetActive(value: true);
			extraOrderingTabletEnabled = true;
			GenerateItemsInOrderingTablet();
		}
	}

	public void UpdateTrayFromCommand(string itemDataString)
	{
		if (!isLocalPlayer)
		{
			assembledItemData = itemDataString;
			itemsInTray.Clear();
			UnpackAssembledItemData();
		}
	}

	private void UnpackAssembledItemData()
	{
		if (assembledItemData != "")
		{
			string[] array = assembledItemData.Split("|");
			foreach (string s in array)
			{
				itemsInTray.Add(int.Parse(s));
			}
		}
		UnoptimizedVisualItemTrayGeneration();
	}

	private void Update()
	{
		if (!isLocalPlayer || FsmVariables.GlobalVariables.GetFsmBool("InChat").Value)
		{
			return;
		}
		if (extraOrderingTabletEnabled && MainPlayer.GetButtonDown("Build"))
		{
			currentOrderIndex++;
			initialListGenerated = false;
			if (currentOrderIndex > 3)
			{
				currentOrderIndex = 0;
			}
			GenerateItemsInOrderingTablet();
		}
		if (MainPlayer.GetButtonUp("Main Action") || MainPlayer.GetButtonUp("Secondary Action"))
		{
			onKeyCooldown = false;
			StopAllCoroutines();
		}
		if (!MainPlayer.GetButton("Main Action") && !MainPlayer.GetButton("Secondary Action"))
		{
			return;
		}
		bool flag = true;
		if (MainPlayer.GetButton("Secondary Action"))
		{
			flag = false;
		}
		if (!Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, raycastMask))
		{
			return;
		}
		if ((bool)hitInfo.transform.GetComponent<InteractableContainer>())
		{
			bool isStorageShelf = hitInfo.transform.GetComponent<InteractableContainer>().isStorageShelf;
			int siblingIndex = hitInfo.transform.GetSiblingIndex();
			Data_Container component = hitInfo.transform.parent.transform.parent.GetComponent<Data_Container>();
			int num = component.productInfoArray[siblingIndex * 2];
			int num2 = component.productInfoArray[siblingIndex * 2 + 1];
			if ((num == -1 || (num >= 0 && num2 <= 0)) && !hitInfo.transform.GetComponent<InteractableContainer>().isStorageShelf && allItemsAreTheSame && flag && itemsInTray.Count > 0)
			{
				if (!onKeyCooldown)
				{
					StartCoroutine(HoldKeyCooldown());
					int productIDToAdd = itemsInTray[0];
					component.AddItemFromOrderingTray(hitInfo.transform.GetSiblingIndex(), productIDToAdd);
				}
				return;
			}
			if (num > -1 && num2 >= 0)
			{
				if (onKeyCooldown)
				{
					return;
				}
				StartCoroutine(HoldKeyCooldown());
				if (flag)
				{
					if (itemsInTray.Contains(num))
					{
						if (!isStorageShelf)
						{
							component.AddItemFromOrderingTray(hitInfo.transform.GetSiblingIndex(), num);
						}
						else
						{
							component.BoxItemFromStorageTray(hitInfo.transform.GetSiblingIndex(), adding: true);
						}
					}
				}
				else if (!isStorageShelf)
				{
					component.RemoveItemFromOrderingTray(hitInfo.transform.GetSiblingIndex());
				}
				else
				{
					component.BoxItemFromStorageTray(hitInfo.transform.GetSiblingIndex(), adding: false);
				}
			}
		}
		if ((bool)hitInfo.transform.GetComponent<TrashPlace>() && itemsInTray.Count > 0)
		{
			itemsInTray.Clear();
			UnoptimizedVisualItemTrayGeneration();
			hitInfo.transform.GetComponent<AudioSource>().Play();
		}
		if (!hitInfo.transform.GetComponent<OrderPackagingReference>() || onKeyCooldown)
		{
			return;
		}
		StartCoroutine(HoldKeyCooldown());
		OrderPackaging oPackagingComponent = hitInfo.transform.GetComponent<OrderPackagingReference>().oPackagingComponent;
		if (flag)
		{
			if (itemsInTray.Count > 0)
			{
				int productID = itemsInTray[itemsInTray.Count - 1];
				oPackagingComponent.AddItemToTable(productID, hitInfo.transform.GetSiblingIndex());
			}
			return;
		}
		int siblingIndex2 = hitInfo.transform.GetSiblingIndex();
		List<int> list = new List<int>();
		switch (siblingIndex2)
		{
		case 0:
			list = oPackagingComponent.itemsInTray0;
			break;
		case 1:
			list = oPackagingComponent.itemsInTray1;
			break;
		case 2:
			list = oPackagingComponent.itemsInTray2;
			break;
		case 3:
			list = oPackagingComponent.itemsInTray3;
			break;
		}
		if (list.Count > 0)
		{
			oPackagingComponent.RemoveItemFromTable(this, hitInfo.transform.GetSiblingIndex());
		}
	}

	private IEnumerator HoldKeyCooldown()
	{
		onKeyCooldown = true;
		yield return new WaitForSeconds(keyWaitingTime);
		onKeyCooldown = false;
	}

	public bool AddItemToTray(int productID)
	{
		Data_Product component = ProductListing.Instance.productPrefabs[productID].GetComponent<Data_Product>();
		Vector3 vector = ((!component.hasTrueCollider) ? ProductListing.Instance.productPrefabs[productID].GetComponent<BoxCollider>().size : component.trueCollider);
		binPack.Insert(Mathf.CeilToInt(vector.x * 100f + (float)padding), Mathf.CeilToInt(vector.z * 100f + (float)padding), MaxRectsBinPack.FreeRectChoiceHeuristic.RectBestShortSideFit);
		occupiedRects = binPack.usedRectangles;
		freeRectangles = binPack.freeRectangles;
		if (itemsInTray.Count == occupiedRects.Count - 1)
		{
			return true;
		}
		GameCanvas.Instance.CreateCanvasNotification("message19");
		return false;
	}

	public void PlacingItemCallback(int productID)
	{
		for (int i = 0; i < itemsInTray.Count; i++)
		{
			if (itemsInTray[i] == productID)
			{
				itemsInTray.RemoveAt(i);
				break;
			}
		}
		UnoptimizedVisualItemTrayGeneration();
	}

	public void GettingItemCallback(int productID)
	{
		itemsInTray.Add(productID);
		if (extraOrderingTabletEnabled && itemsLeftInList.Contains(productID))
		{
			for (int i = 0; i < itemsLeftInList.Count; i++)
			{
				if (productID == itemsLeftInList[i])
				{
					itemsLeftInList.RemoveAt(i);
					break;
				}
			}
			GenerateItemsInOrderingTablet();
		}
		UnoptimizedVisualItemTrayGeneration();
	}

	private void UnoptimizedVisualItemTrayGeneration()
	{
		if (positionPivotOBJ.transform.childCount > 0)
		{
			foreach (Transform item in positionPivotOBJ.transform)
			{
				Object.Destroy(item.gameObject);
			}
		}
		binPack = new MaxRectsBinPack(binWidth, binLength);
		binPack.allowRotations = false;
		if (isLocalPlayer)
		{
			allItemsAreTheSame = CheckIfAllItemsInTrayAreTheSame();
			AssembleItemDataString();
		}
		for (int i = 0; i < itemsInTray.Count; i++)
		{
			int num = itemsInTray[i];
			Data_Product component = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>();
			Vector3 vector = ((!component.hasTrueCollider) ? ProductListing.Instance.productPrefabs[num].GetComponent<BoxCollider>().size : component.trueCollider);
			binPack.Insert(Mathf.CeilToInt(vector.x * 100f + (float)padding), Mathf.CeilToInt(vector.z * 100f + (float)padding), MaxRectsBinPack.FreeRectChoiceHeuristic.RectBestShortSideFit);
		}
		occupiedRects = binPack.usedRectangles;
		freeRectangles = binPack.freeRectangles;
		for (int j = 0; j < occupiedRects.Count; j++)
		{
			Rect rect = occupiedRects[j];
			if (j < itemsInTray.Count)
			{
				int num2 = itemsInTray[j];
				GameObject gameObject = ProductListing.Instance.productPrefabs[num2];
				if ((bool)gameObject)
				{
					int num3 = Mathf.CeilToInt(rect.center.x);
					int num4 = Mathf.CeilToInt(rect.center.y);
					GameObject obj = Object.Instantiate(gameObject, positionPivotOBJ.transform);
					obj.transform.localPosition = new Vector3((float)num3 / 100f, 0f, (float)num4 / 100f);
					obj.transform.localRotation = Quaternion.Euler(new Vector3(0f, 180f, 0f));
				}
			}
		}
	}

	private void AssembleItemDataString()
	{
		if (itemsInTray.Count == 0)
		{
			assembledItemData = "";
		}
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < itemsInTray.Count; i++)
		{
			stringBuilder.Append(itemsInTray[i].ToString());
			if (i < itemsInTray.Count - 1)
			{
				stringBuilder.Append("|");
			}
		}
		assembledItemData = stringBuilder.ToString();
		FirstPersonController.Instance.GetComponent<PlayerNetwork>().trayData = assembledItemData;
		FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdUpdateTrayToEveryone(assembledItemData);
	}

	private bool CheckIfAllItemsInTrayAreTheSame()
	{
		if (itemsInTray.Count == 0)
		{
			return false;
		}
		int num = 0;
		for (int i = 0; i < itemsInTray.Count; i++)
		{
			if (i == 0)
			{
				num = itemsInTray[i];
			}
			else if (num != itemsInTray[i])
			{
				return false;
			}
		}
		return true;
	}

	public void RegenerateItemsFromBoxOrder(int whichTableIndex)
	{
		if (whichTableIndex == currentOrderIndex)
		{
			initialListGenerated = false;
			GenerateItemsInOrderingTablet();
		}
	}

	private void GenerateItemsInOrderingTablet()
	{
		int childCount = extraOrderingItemsParent.transform.childCount;
		if (childCount > 0)
		{
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(extraOrderingItemsParent.transform.GetChild(childCount - 1 - i).gameObject);
			}
		}
		currentOrderIndex = Mathf.Clamp(currentOrderIndex, 0, 3);
		string text = OrderPackaging.Instance.currentOrderIn[currentOrderIndex];
		tableNumberField.text = LocalizationManager.instance.GetLocalizationString("opckgng9") + " #" + (currentOrderIndex + 1);
		string text2 = "";
		List<int> list = new List<int>();
		switch (currentOrderIndex)
		{
		case 0:
			text2 = OrderPackaging.Instance.itemsData0;
			list = OrderPackaging.Instance.itemsInCurrentBox0;
			break;
		case 1:
			text2 = OrderPackaging.Instance.itemsData1;
			list = OrderPackaging.Instance.itemsInCurrentBox1;
			break;
		case 2:
			text2 = OrderPackaging.Instance.itemsData2;
			list = OrderPackaging.Instance.itemsInCurrentBox2;
			break;
		case 3:
			text2 = OrderPackaging.Instance.itemsData3;
			list = OrderPackaging.Instance.itemsInCurrentBox3;
			break;
		}
		if (text == "")
		{
			pinpointComponent.currentProductID = -10;
			pinpointComponent.DeactivatePinpointers();
			return;
		}
		string[] array = text.Split("|");
		if (array[3] == "")
		{
			pinpointComponent.currentProductID = -10;
			pinpointComponent.DeactivatePinpointers();
			return;
		}
		if (!initialListGenerated)
		{
			itemsLeftInList.Clear();
			string[] array2 = array[3].Split("_");
			for (int j = 0; j < array2.Length; j++)
			{
				itemsLeftInList.Add(int.Parse(array2[j]));
			}
			List<int> list2 = itemsInTray;
			for (int k = 0; k < list2.Count; k++)
			{
				int num = list2[k];
				for (int l = 0; l < itemsLeftInList.Count; l++)
				{
					if (num == itemsLeftInList[l])
					{
						itemsLeftInList.RemoveAt(l);
						break;
					}
				}
			}
			if (text2 != "")
			{
				string[] array3 = text2.Split("|");
				for (int m = 0; m < array3.Length; m++)
				{
					int num2 = int.Parse(array3[m]);
					for (int n = 0; n < itemsLeftInList.Count; n++)
					{
						if (num2 == itemsLeftInList[n])
						{
							itemsLeftInList.RemoveAt(n);
							break;
						}
					}
				}
			}
			if (list.Count > 0)
			{
				for (int num3 = 0; num3 < list.Count; num3++)
				{
					int num4 = list[num3];
					for (int num5 = 0; num5 < itemsLeftInList.Count; num5++)
					{
						if (num4 == itemsLeftInList[num5])
						{
							itemsLeftInList.RemoveAt(num5);
							break;
						}
					}
				}
			}
		}
		initialListGenerated = true;
		if (itemsLeftInList.Count > 0)
		{
			pinpointComponent.currentProductID = itemsLeftInList[0];
		}
		else
		{
			pinpointComponent.DeactivatePinpointers();
		}
		for (int num6 = 0; num6 < itemsLeftInList.Count; num6++)
		{
			int num7 = itemsLeftInList[num6];
			GameObject obj = Object.Instantiate(UIextraOrderingItemPrefab, extraOrderingItemsParent.transform);
			obj.transform.Find("ProductBrand").GetComponent<TextMeshProUGUI>().text = ProductListing.Instance.productPrefabs[num7].GetComponent<Data_Product>().productBrand;
			obj.transform.Find("ProductName").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("product" + num7);
			obj.transform.Find("ProductImage").GetComponent<Image>().sprite = ProductListing.Instance.productSprites[num7];
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderPackaging
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using HighlightPlus;
using Mirror;
using Mirror.RemoteCalls;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class OrderPackaging : NetworkBehaviour
{
	public static OrderPackaging Instance;

	[SyncVar]
	public bool isOrderDepartmentActivated;

	[SyncVar]
	public string[] ordersData;

	[SyncVar(hook = "OnItemsDataChange0")]
	public string itemsData0;

	[SyncVar(hook = "OnItemsDataChange1")]
	public string itemsData1;

	[SyncVar(hook = "OnItemsDataChange2")]
	public string itemsData2;

	[SyncVar(hook = "OnItemsDataChange3")]
	public string itemsData3;

	[SyncVar]
	public string[] currentOrderIn;

	private string[] ordersBackup = new string[4] { "", "", "", "" };

	public int binWidth = 140;

	public int binLength = 100;

	public int padding = 1;

	public LayerMask lMask;

	[Space(10f)]
	public bool controllingOrderPackaging;

	[Space(10f)]
	public string[] maleNames;

	public string[] maleSurnames;

	public string[] femaleNames;

	public string[] femaleSurnames;

	public Image openingButton;

	public Image notifyButton;

	public Sprite openStateSprite;

	public Sprite closedStateSprite;

	public TextMeshProUGUI openTextField;

	public GameObject orderPackagingBlackboardUIPrefab;

	public AudioSource notifyAudioSource;

	public GameObject tablesCanvasesParentOBJ;

	public GameObject tableOrderBlackboardUIPrefab;

	public GameObject[] tableOrderLayoutContainersOBJ;

	public GameObject orderItemUIPrefabOBJ;

	public GameObject blackboardUIOrdersParentOBJ;

	private float orderGenerationInterval = 3f;

	public float nextOrderTime = 9f;

	public int maxNumberOfDailyOrders;

	public int numberOfAssignedOrders;

	public int internalOrderNumber;

	[Space(10f)]
	public int currentTableIndex = -1;

	public GameObject positionPivotOBJ;

	public GameObject boxLimitOBJ;

	public GameObject orderBoxPrefabOBJ;

	public PlayMakerFSM overlappingFSM;

	public GameObject interactableCamerasParentOBJ;

	public GameObject itemSpawnPivotsParentOBJ;

	public GameObject boxContainersParentOBJ;

	public GameObject[] boxItemsParentsArray;

	private GameObject currentBoxItemsParentOBJ;

	private GameObject currentTableCanvasOBJ;

	public PinpointShelfFromTray pinpointerComponent;

	public GameObject pinpointerPrefabOBJ;

	private bool notifyOrdersOnArrival;

	public List<int> itemsInTray = new List<int>();

	private List<float> sortList = new List<float>();

	public List<Rect> occupiedRects = new List<Rect>();

	public List<Rect> freeRectangles = new List<Rect>();

	public List<int> itemsInTray0 = new List<int>();

	public List<int> itemsInTray1 = new List<int>();

	public List<int> itemsInTray2 = new List<int>();

	public List<int> itemsInTray3 = new List<int>();

	public List<int> itemsInCurrentBox0 = new List<int>();

	public List<int> itemsInCurrentBox1 = new List<int>();

	public List<int> itemsInCurrentBox2 = new List<int>();

	public List<int> itemsInCurrentBox3 = new List<int>();

	private MaxRectsBinPack binPack;

	private MaxRectsBinPack binPack0;

	private MaxRectsBinPack binPack1;

	private MaxRectsBinPack binPack2;

	private MaxRectsBinPack binPack3;

	private Player MainPlayer;

	private GameObject dummyProductOBJ;

	private HighlightEffect dummyHEffect;

	private float productYOffset;

	private Vector3[] productOffsetArray = new Vector3[4]
	{
		Vector3.zero,
		Vector3.zero,
		Vector3.zero,
		Vector3.zero
	};

	private bool canPlaceItem;

	private bool pressingDirectionalInput;

	private int currentIDPicked = -1;

	private bool loadedBox;

	public Action<string, string> _Mirror_SyncVarHookDelegate_itemsData0;

	public Action<string, string> _Mirror_SyncVarHookDelegate_itemsData1;

	public Action<string, string> _Mirror_SyncVarHookDelegate_itemsData2;

	public Action<string, string> _Mirror_SyncVarHookDelegate_itemsData3;

	public bool NetworkisOrderDepartmentActivated
	{
		get
		{
			return isOrderDepartmentActivated;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref isOrderDepartmentActivated, 1uL, null);
		}
	}

	public string[] NetworkordersData
	{
		get
		{
			return ordersData;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref ordersData, 2uL, null);
		}
	}

	public string NetworkitemsData0
	{
		get
		{
			return itemsData0;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref itemsData0, 4uL, _Mirror_SyncVarHookDelegate_itemsData0);
		}
	}

	public string NetworkitemsData1
	{
		get
		{
			return itemsData1;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref itemsData1, 8uL, _Mirror_SyncVarHookDelegate_itemsData1);
		}
	}

	public string NetworkitemsData2
	{
		get
		{
			return itemsData2;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref itemsData2, 16uL, _Mirror_SyncVarHookDelegate_itemsData2);
		}
	}

	public string NetworkitemsData3
	{
		get
		{
			return itemsData3;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref itemsData3, 32uL, _Mirror_SyncVarHookDelegate_itemsData3);
		}
	}

	public string[] NetworkcurrentOrderIn
	{
		get
		{
			return currentOrderIn;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref currentOrderIn, 64uL, null);
		}
	}

	private void Awake()
	{
		if (Instance == null)
		{
			Instance = this;
		}
	}

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
	}

	public override void OnStartClient()
	{
		UnpackAllItemsData();
		InitialUIOrderCreation();
		if (isOrderDepartmentActivated)
		{
			ActivateOrderDepartment();
		}
	}

	public void ActivateDepartmentFromAutosave()
	{
		NetworkisOrderDepartmentActivated = true;
		InitialUIOrderCreation();
		ActivateOrderDepartment();
	}

	public void EnableFromFSMListener()
	{
		if (currentTableIndex < 0 || currentTableIndex >= boxContainersParentOBJ.transform.childCount)
		{
			Debug.Log("Bad order packaging index");
			return;
		}
		controllingOrderPackaging = true;
		boxLimitOBJ = boxContainersParentOBJ.transform.GetChild(currentTableIndex).gameObject;
		currentBoxItemsParentOBJ = boxItemsParentsArray[currentTableIndex];
		currentTableCanvasOBJ = tablesCanvasesParentOBJ.transform.GetChild(currentTableIndex).gameObject;
		string obj = currentOrderIn[currentTableIndex];
		currentTableCanvasOBJ.SetActive(value: true);
		if (obj == "")
		{
			currentTableCanvasOBJ.transform.GetChild(0).gameObject.SetActive(value: true);
			GenerateOrdersInInitialCanvas();
		}
		else
		{
			currentTableCanvasOBJ.transform.GetChild(1).gameObject.SetActive(value: true);
			GenerateOrderDataInTableCanvas(currentTableIndex, "");
			boxLimitOBJ.SetActive(value: true);
		}
	}

	public void DisableFromFSMListener()
	{
		currentTableIndex = -1;
		controllingOrderPackaging = false;
		boxLimitOBJ.SetActive(value: false);
		currentTableCanvasOBJ.SetActive(value: false);
		currentTableCanvasOBJ.transform.GetChild(0).gameObject.SetActive(value: false);
		currentTableCanvasOBJ.transform.GetChild(1).gameObject.SetActive(value: false);
	}

	private void Update()
	{
		if (base.isServer && isOrderDepartmentActivated && GameData.Instance.isSupermarketOpen && GameData.Instance.timeOfDay > nextOrderTime && numberOfAssignedOrders < maxNumberOfDailyOrders)
		{
			nextOrderTime = GameData.Instance.timeOfDay + (orderGenerationInterval + UnityEngine.Random.Range(-0.25f, 0.25f));
			GenerateTodayListOfOrders();
		}
		if (!controllingOrderPackaging || currentTableIndex < 0)
		{
			if ((bool)dummyProductOBJ)
			{
				DestroyDummyOBJ();
			}
			return;
		}
		bool button = MainPlayer.GetButton("Main Action");
		if (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), out var hitInfo, 100f, lMask))
		{
			if (!boxLimitOBJ.activeSelf)
			{
				return;
			}
			if ((bool)hitInfo.transform.GetComponent<Data_Product>())
			{
				if (hitInfo.transform.parent.CompareTag("AuxiliarOrderTag") && hitInfo.transform.parent.GetSiblingIndex() != currentTableIndex)
				{
					return;
				}
				if (button && !dummyProductOBJ)
				{
					int productID = hitInfo.transform.GetComponent<Data_Product>().productID;
					GameObject original = ProductListing.Instance.productPrefabs[productID];
					if (currentTableIndex > 1)
					{
						dummyProductOBJ = UnityEngine.Object.Instantiate(original, hitInfo.point, Quaternion.identity);
					}
					else
					{
						dummyProductOBJ = UnityEngine.Object.Instantiate(original, hitInfo.point, Quaternion.Euler(new Vector3(0f, 180f, 0f)));
					}
					dummyHEffect = dummyProductOBJ.AddComponent<HighlightEffect>();
					dummyHEffect.outline = 1f;
					dummyHEffect.outlineQuality = HighlightPlus.QualityLevel.Highest;
					dummyHEffect.outlineColor = Color.red;
					overlappingFSM.FsmVariables.GetFsmGameObject("ProductOBJ").Value = dummyProductOBJ;
					overlappingFSM.enabled = true;
					BoxCollider component = dummyProductOBJ.GetComponent<BoxCollider>();
					component.center += new Vector3(0f, 0.005f, 0f);
					if (dummyProductOBJ.GetComponent<Data_Product>().hasTrueCollider)
					{
						component.size = dummyProductOBJ.GetComponent<Data_Product>().trueCollider - new Vector3(0f, 0.01f, 0f);
					}
					else
					{
						component.size -= new Vector3(0f, 0.01f, 0f);
					}
					component.isTrigger = true;
					component.enabled = true;
					dummyProductOBJ.layer = LayerMask.NameToLayer("Water");
					productYOffset = component.size.y;
					productOffsetArray[0] = new Vector3(component.size.x * 0.75f / 2f, 0f, component.size.z * 0.75f / 2f);
					productOffsetArray[1] = new Vector3((0f - component.size.x) * 0.75f / 2f, 0f, component.size.z * 0.75f / 2f);
					productOffsetArray[2] = new Vector3(component.size.x * 0.75f / 2f, 0f, (0f - component.size.z) * 0.75f / 2f);
					productOffsetArray[3] = new Vector3((0f - component.size.x) * 0.75f / 2f, 0f, (0f - component.size.z) * 0.75f / 2f);
					dummyProductOBJ.AddComponent<Rigidbody>().isKinematic = true;
					dummyHEffect.highlighted = true;
					canPlaceItem = false;
					GameData.Instance.PlayPop2Sound();
					if (hitInfo.transform.CompareTag("Untagged"))
					{
						PickingItemFromTable(currentTableIndex, productID);
					}
					else
					{
						UnityEngine.Object.Destroy(hitInfo.transform.gameObject);
						List<int> list = new List<int>();
						switch (currentTableIndex)
						{
						case 0:
							list = itemsInCurrentBox0;
							break;
						case 1:
							list = itemsInCurrentBox1;
							break;
						case 2:
							list = itemsInCurrentBox2;
							break;
						case 3:
							list = itemsInCurrentBox3;
							break;
						}
						for (int i = 0; i < list.Count; i++)
						{
							if (list[i] == productID)
							{
								list.RemoveAt(i);
								break;
							}
						}
						switch (currentTableIndex)
						{
						case 0:
							itemsInCurrentBox0 = list;
							break;
						case 1:
							itemsInCurrentBox0 = list;
							break;
						case 2:
							itemsInCurrentBox0 = list;
							break;
						case 3:
							itemsInCurrentBox0 = list;
							break;
						}
					}
				}
			}
			if ((bool)dummyProductOBJ)
			{
				dummyProductOBJ.transform.position = hitInfo.point;
			}
		}
		if ((bool)dummyProductOBJ)
		{
			float axisRaw = MainPlayer.GetAxisRaw("MoveV");
			float axisRaw2 = MainPlayer.GetAxisRaw("MoveH");
			if (axisRaw2 > 0.1f && !pressingDirectionalInput)
			{
				dummyProductOBJ.transform.Rotate(0f, 90f, 0f, Space.World);
				pressingDirectionalInput = true;
			}
			else if (axisRaw2 < -0.1f && !pressingDirectionalInput)
			{
				dummyProductOBJ.transform.Rotate(0f, -90f, 0f, Space.World);
				pressingDirectionalInput = true;
			}
			if (pressingDirectionalInput && axisRaw == 0f && axisRaw2 == 0f)
			{
				pressingDirectionalInput = false;
			}
			Vector3 vector = boxLimitOBJ.transform.InverseTransformPoint(dummyProductOBJ.transform.position + new Vector3(0f, 0.01f, 0f));
			bool flag = false;
			for (int j = 0; j < productOffsetArray.Length; j++)
			{
				if (!Physics.Raycast(dummyProductOBJ.transform.TransformPoint(productOffsetArray[j]) + new Vector3(0f, 0.01f, 0f), Vector3.down, out var _, 0.02f, lMask))
				{
					flag = true;
					break;
				}
			}
			if (vector.x > -0.33f && vector.x < 0.33f && vector.y > -0.23f && vector.z > -0.49f && vector.z < 0.49f && vector.y + productYOffset < 0.2f && !overlappingFSM.FsmVariables.GetFsmBool("Overlapping").Value && !flag)
			{
				if (!canPlaceItem)
				{
					canPlaceItem = true;
					dummyHEffect.outlineColor = Color.green;
				}
			}
			else if (canPlaceItem)
			{
				canPlaceItem = false;
				dummyHEffect.outlineColor = Color.red;
			}
		}
		if (button || !dummyProductOBJ)
		{
			return;
		}
		int productID2 = dummyProductOBJ.GetComponent<Data_Product>().productID;
		if (canPlaceItem && (bool)currentBoxItemsParentOBJ)
		{
			GameObject gameObject = UnityEngine.Object.Instantiate(ProductListing.Instance.productPrefabs[productID2], currentBoxItemsParentOBJ.transform);
			gameObject.transform.position = dummyProductOBJ.transform.position;
			gameObject.transform.rotation = dummyProductOBJ.transform.rotation;
			gameObject.GetComponent<BoxCollider>().enabled = true;
			if (gameObject.GetComponent<Data_Product>().hasTrueCollider)
			{
				gameObject.GetComponent<BoxCollider>().size = dummyProductOBJ.GetComponent<Data_Product>().trueCollider;
			}
			gameObject.tag = "Plant";
			switch (currentTableIndex)
			{
			case 0:
				itemsInCurrentBox0.Add(productID2);
				break;
			case 1:
				itemsInCurrentBox1.Add(productID2);
				break;
			case 2:
				itemsInCurrentBox2.Add(productID2);
				break;
			case 3:
				itemsInCurrentBox3.Add(productID2);
				break;
			}
		}
		else
		{
			RestoreItemToTable(productID2, currentTableIndex);
		}
		GameData.Instance.PlayPopSound();
		DestroyDummyOBJ();
	}

	private void DestroyDummyOBJ()
	{
		UnityEngine.Object.Destroy(dummyProductOBJ);
		currentIDPicked = -1;
		overlappingFSM.enabled = false;
	}

	[Command(requiresAuthority = false)]
	public void CmdActivateOrderDepartment()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void OrderPackaging::CmdActivateOrderDepartment()", 1465519701, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcActivateOrderDepartment()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void OrderPackaging::RpcActivateOrderDepartment()", 698655672, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void ActivateOrderDepartment()
	{
		openTextField.text = LocalizationManager.instance.GetLocalizationString("lobby1");
		openTextField.color = Color.green;
		openingButton.sprite = openStateSprite;
		openingButton.color = Color.green;
		openingButton.transform.Find("Highlight").gameObject.SetActive(value: false);
		for (int i = 0; i < interactableCamerasParentOBJ.transform.childCount; i++)
		{
			interactableCamerasParentOBJ.transform.GetChild(i).gameObject.SetActive(value: true);
		}
	}

	public void NewDayDeactivateOrderDepartment()
	{
		NetworkisOrderDepartmentActivated = false;
		RpcDeactivateOrderDepartment();
		DayResetValues();
	}

	[ClientRpc]
	private void RpcDeactivateOrderDepartment()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void OrderPackaging::RpcDeactivateOrderDepartment()", -1765940451, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void DayResetValues()
	{
		maxNumberOfDailyOrders = 2 + GameData.Instance.gameDay / 10 + GameData.Instance.difficulty;
		maxNumberOfDailyOrders = Mathf.Clamp(maxNumberOfDailyOrders, 2, 40);
		numberOfAssignedOrders = 0;
		nextOrderTime = 9f;
		for (int i = 0; i < currentOrderIn.Length; i++)
		{
			currentOrderIn[i] = "";
			ordersBackup[i] = "";
		}
		for (int j = 0; j < ordersData.Length; j++)
		{
			ordersData[j] = "";
		}
		if (NPC_Manager.Instance.orderPickupPointsList.Count > 0)
		{
			for (int k = 0; k < NPC_Manager.Instance.orderPickupPointsList.Count; k++)
			{
				GameObject gameObject = NPC_Manager.Instance.orderPickupPointsList[k];
				if ((bool)gameObject && (bool)gameObject.GetComponent<OrderPickupPoint>())
				{
					NPC_Manager.Instance.orderPickupPointsList[k].GetComponent<OrderPickupPoint>().EndDayClearData();
				}
			}
		}
		RpcClearNewDayValues();
	}

	[ClientRpc]
	private void RpcClearNewDayValues()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void OrderPackaging::RpcClearNewDayValues()", -1060599058, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void GenerateTodayListOfOrders()
	{
		int num = Mathf.Clamp(NetworkServer.connections.Count / 2 + GameData.Instance.difficulty / 5, 1, 4);
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < num; i++)
		{
			int num2 = ReturnFreeIndexInOrdersArray();
			if (num2 == -1)
			{
				break;
			}
			int num3 = UnityEngine.Random.Range(0, NPC_Manager.Instance.NPCsArray.Length);
			string text;
			string text2;
			if (num3 < 53)
			{
				text = maleNames[UnityEngine.Random.Range(0, maleNames.Length)];
				text2 = maleSurnames[UnityEngine.Random.Range(0, maleNames.Length)];
			}
			else
			{
				text = femaleNames[UnityEngine.Random.Range(0, femaleNames.Length)];
				text2 = femaleSurnames[UnityEngine.Random.Range(0, femaleNames.Length)];
			}
			int num4 = UnityEngine.Random.Range(10 + GameData.Instance.difficulty, 25 + GameData.Instance.difficulty);
			List<int> list = new List<int>();
			for (int j = 0; j < num4; j++)
			{
				int item = ProductListing.Instance.availableProducts[UnityEngine.Random.Range(0, ProductListing.Instance.availableProducts.Count)];
				list.Add(item);
			}
			list.Sort();
			stringBuilder.Clear();
			for (int k = 0; k < list.Count; k++)
			{
				stringBuilder.Append(list[k].ToString());
				if (k != num4 - 1)
				{
					stringBuilder.Append("_");
				}
			}
			string text3 = internalOrderNumber + "|" + text + text2 + "|" + num3 + "|" + stringBuilder.ToString();
			ordersData[num2] = text3;
			RpcUpdateOrderOnClient(num2, text3);
			numberOfAssignedOrders++;
			internalOrderNumber++;
		}
		if (notifyOrdersOnArrival)
		{
			RpcNotifyOrder();
		}
	}

	[ClientRpc]
	private void RpcUpdateOrderOnClient(int freeIndex, string orderData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(freeIndex);
		writer.WriteString(orderData);
		SendRPCInternal("System.Void OrderPackaging::RpcUpdateOrderOnClient(System.Int32,System.String)", 34591653, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void InitialUIOrderCreation()
	{
		int childCount = blackboardUIOrdersParentOBJ.transform.childCount;
		for (int i = 0; i < childCount; i++)
		{
			UnityEngine.Object.Destroy(blackboardUIOrdersParentOBJ.transform.GetChild(childCount - 1 - i).gameObject);
		}
		for (int j = 0; j < ordersData.Length; j++)
		{
			if (ordersData[j] != "")
			{
				CreateUIOrderOnBlackboards(j, mainBlackboard: true);
			}
		}
	}

	private void CreateUIOrderOnBlackboards(int index, bool mainBlackboard)
	{
		string text = ordersData[index];
		if (!(text == ""))
		{
			string[] array = text.Split("|");
			string[] array2 = array[3].Split("_");
			GameObject gameObject;
			if (mainBlackboard)
			{
				gameObject = UnityEngine.Object.Instantiate(orderPackagingBlackboardUIPrefab, blackboardUIOrdersParentOBJ.transform);
			}
			else
			{
				Transform parent = tableOrderLayoutContainersOBJ[currentTableIndex].transform;
				gameObject = UnityEngine.Object.Instantiate(tableOrderBlackboardUIPrefab, parent);
				gameObject.GetComponent<OrderPackagingUIReferences>().playmakerOBJ.GetComponent<Button>().interactable = true;
				PlayMakerFSM component = gameObject.GetComponent<OrderPackagingUIReferences>().playmakerOBJ.GetComponent<PlayMakerFSM>();
				component.FsmVariables.GetFsmGameObject("DepartmentOBJ").Value = base.gameObject;
				component.FsmVariables.GetFsmInt("OrderIndex").Value = index;
				component.enabled = true;
			}
			gameObject.GetComponent<OrderPackagingUIReferences>().orderNumberField.text = "#" + array[0];
			gameObject.GetComponent<OrderPackagingUIReferences>().customerNameField.text = array[1];
			gameObject.GetComponent<OrderPackagingUIReferences>().itemsQuantityField.text = array2.Length.ToString();
			float num = 0f;
			for (int i = 0; i < array2.Length; i++)
			{
				int num2 = int.Parse(array2[i]);
				Vector3 size = ProductListing.Instance.productPrefabs[num2].GetComponent<BoxCollider>().size;
				num += size.x * size.y * size.z;
			}
			num = Mathf.Round(num * 100f) / 100f;
			gameObject.GetComponent<OrderPackagingUIReferences>().weightField.text = num * 50f + "kg.";
		}
	}

	private int ReturnFreeIndexInOrdersArray()
	{
		for (int i = 0; i < ordersData.Length; i++)
		{
			if (ordersData[i] == "")
			{
				return i;
			}
		}
		return -1;
	}

	[Command(requiresAuthority = false)]
	public void CmdEnableOrderNotifications()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void OrderPackaging::CmdEnableOrderNotifications()", -796928327, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcEnableOrderNotifications(bool boolValue)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(boolValue);
		SendRPCInternal("System.Void OrderPackaging::RpcEnableOrderNotifications(System.Boolean)", -295563157, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcNotifyOrder()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void OrderPackaging::RpcNotifyOrder()", -1006342886, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void GenerateOrdersInInitialCanvas()
	{
		if (currentTableIndex < 0 || currentTableIndex >= tableOrderLayoutContainersOBJ.Length)
		{
			return;
		}
		Transform transform = tableOrderLayoutContainersOBJ[currentTableIndex].transform;
		for (int i = 0; i < transform.childCount; i++)
		{
			UnityEngine.Object.Destroy(transform.GetChild(transform.childCount - 1 - i).gameObject);
		}
		for (int j = 0; j < ordersData.Length; j++)
		{
			if (!(ordersData[j] == ""))
			{
				CreateUIOrderOnBlackboards(j, mainBlackboard: false);
			}
		}
	}

	public void RemoveOrderFromEmployee(int whichOrderIndex)
	{
		ordersData[whichOrderIndex] = "";
		RpcUpdateOrderFromEmployee(whichOrderIndex);
	}

	[ClientRpc]
	private void RpcUpdateOrderFromEmployee(int whichOrderIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichOrderIndex);
		SendRPCInternal("System.Void OrderPackaging::RpcUpdateOrderFromEmployee(System.Int32)", -2077537993, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void AssignOrderToTable(int whichOrderIndex)
	{
		if (whichOrderIndex >= 0 && whichOrderIndex < ordersData.Length && currentTableIndex >= 0 && currentTableIndex < boxContainersParentOBJ.transform.childCount && !(ordersData[whichOrderIndex] == ""))
		{
			CmdAssignOrderToTable(currentTableIndex, whichOrderIndex);
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdAssignOrderToTable(int whichTableIndex, int whichOrderIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichTableIndex);
		writer.WriteInt(whichOrderIndex);
		SendCommandInternal("System.Void OrderPackaging::CmdAssignOrderToTable(System.Int32,System.Int32)", -980061396, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAssignOrderToTable(int whichTableIndex, string orderString, int whichOrderIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichTableIndex);
		writer.WriteString(orderString);
		writer.WriteInt(whichOrderIndex);
		SendRPCInternal("System.Void OrderPackaging::RpcAssignOrderToTable(System.Int32,System.String,System.Int32)", 1053042205, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void GenerateOrderDataInTableCanvas(int whichTableIndex, string auxiliarString)
	{
		string text = ((!(auxiliarString != "")) ? currentOrderIn[whichTableIndex] : auxiliarString);
		string[] array = text.Split("|");
		if (array[3] == "")
		{
			if ((bool)currentTableCanvasOBJ && whichTableIndex == currentTableIndex)
			{
				currentTableCanvasOBJ.transform.GetChild(0).gameObject.SetActive(value: true);
				currentTableCanvasOBJ.transform.GetChild(1).gameObject.SetActive(value: false);
				GenerateOrdersInInitialCanvas();
			}
			return;
		}
		string[] array2 = array[3].Split("_");
		if ((bool)currentTableCanvasOBJ)
		{
			currentTableCanvasOBJ.transform.Find("Order_Container/OrderNumber").GetComponent<TextMeshProUGUI>().text = "#" + array[0];
			currentTableCanvasOBJ.transform.Find("Order_Container/CustomerName").GetComponent<TextMeshProUGUI>().text = array[1];
		}
		Transform transform = currentTableCanvasOBJ.transform.Find("Order_Container/ItemsContainer");
		for (int i = 0; i < transform.childCount; i++)
		{
			UnityEngine.Object.Destroy(transform.GetChild(transform.childCount - 1 - i).gameObject);
		}
		for (int j = 0; j < array2.Length; j++)
		{
			int num = int.Parse(array2[j]);
			GameObject obj = UnityEngine.Object.Instantiate(orderItemUIPrefabOBJ, transform);
			obj.transform.Find("ProductImage").GetComponent<Image>().sprite = ProductListing.Instance.productSprites[num];
			obj.transform.Find("ProductName").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("product" + num);
			obj.transform.Find("BrandName").GetComponent<TextMeshProUGUI>().text = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>().productBrand;
		}
	}

	public void CreateBoxOrder()
	{
		if (currentTableIndex < 0 || currentTableIndex >= boxContainersParentOBJ.transform.childCount)
		{
			return;
		}
		List<int> list = new List<int>();
		switch (currentTableIndex)
		{
		case 0:
			list = itemsInCurrentBox0;
			break;
		case 1:
			list = itemsInCurrentBox1;
			break;
		case 2:
			list = itemsInCurrentBox2;
			break;
		case 3:
			list = itemsInCurrentBox3;
			break;
		}
		if (list.Count == 0)
		{
			return;
		}
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < list.Count; i++)
		{
			stringBuilder.Append(list[i].ToString());
			if (i != list.Count - 1)
			{
				stringBuilder.Append("_");
			}
		}
		ClearItemsInListAndInBox(currentTableIndex);
		CmdCreateBoxOrder(currentTableIndex, stringBuilder.ToString());
	}

	[Command(requiresAuthority = false)]
	private void CmdCreateBoxOrder(int whichTableIndex, string whichItemsData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichTableIndex);
		writer.WriteString(whichItemsData);
		SendCommandInternal("System.Void OrderPackaging::CmdCreateBoxOrder(System.Int32,System.String)", -1976365264, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void ServerCloseOrder(int whichTableIndex)
	{
		RpcOrderCompletedMessage(whichTableIndex);
		currentOrderIn[whichTableIndex] = "";
		NPC_Manager.Instance.NPCsOrdersList.Add(ordersBackup[whichTableIndex]);
		ClearItemsInListAndInBox(whichTableIndex);
	}

	[ClientRpc]
	private void RpcOrderCompletedMessage(int whichTableIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichTableIndex);
		SendRPCInternal("System.Void OrderPackaging::RpcOrderCompletedMessage(System.Int32)", -1764459644, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcCreateBoxOrder(int whichTableIndex, string recreatedOrderData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichTableIndex);
		writer.WriteString(recreatedOrderData);
		SendRPCInternal("System.Void OrderPackaging::RpcCreateBoxOrder(System.Int32,System.String)", 1318999727, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void ClearItemsInListAndInBox(int whichTableIndex)
	{
		Transform transform = boxItemsParentsArray[whichTableIndex].transform;
		for (int i = 0; i < transform.childCount; i++)
		{
			UnityEngine.Object.Destroy(transform.GetChild(transform.childCount - 1 - i).gameObject);
		}
		switch (currentTableIndex)
		{
		case 0:
			itemsInCurrentBox0.Clear();
			break;
		case 1:
			itemsInCurrentBox1.Clear();
			break;
		case 2:
			itemsInCurrentBox2.Clear();
			break;
		case 3:
			itemsInCurrentBox3.Clear();
			break;
		}
	}

	public void AddItemToTable(int productID, int tableIndex)
	{
		CmdAddItemToTable(productID, FirstPersonController.Instance.gameObject, tableIndex);
	}

	private void RestoreItemToTable(int productID, int tableIndex)
	{
		CmdAddItemToTable(productID, null, tableIndex);
	}

	[Command(requiresAuthority = false)]
	private void CmdAddItemToTable(int productID, GameObject playerOBJ, int tableIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteGameObject(playerOBJ);
		writer.WriteInt(tableIndex);
		SendCommandInternal("System.Void OrderPackaging::CmdAddItemToTable(System.Int32,UnityEngine.GameObject,System.Int32)", -1254413001, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAddItemToTable(int productID, GameObject playerOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteGameObject(playerOBJ);
		SendRPCInternal("System.Void OrderPackaging::RpcAddItemToTable(System.Int32,UnityEngine.GameObject)", -1873316887, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void PickingItemFromTable(int tableIndex, int productID)
	{
		if (tableIndex >= 0 && tableIndex < boxContainersParentOBJ.transform.childCount)
		{
			CmdRemoveItemFromTable(productID, null, tableIndex);
		}
	}

	public void RemoveItemFromTable(OrderingTray oComponent, int tableIndex)
	{
		if (tableIndex < 0 || tableIndex >= boxContainersParentOBJ.transform.childCount)
		{
			return;
		}
		switch (tableIndex)
		{
		case 0:
			if (itemsInTray0.Count == 0)
			{
				return;
			}
			itemsInTray = itemsInTray0;
			break;
		case 1:
			if (itemsInTray1.Count == 0)
			{
				return;
			}
			itemsInTray = itemsInTray1;
			break;
		case 2:
			if (itemsInTray2.Count == 0)
			{
				return;
			}
			itemsInTray = itemsInTray2;
			break;
		case 3:
			if (itemsInTray3.Count == 0)
			{
				return;
			}
			itemsInTray = itemsInTray3;
			break;
		}
		int productID = itemsInTray[itemsInTray.Count - 1];
		if (oComponent.AddItemToTray(productID))
		{
			CmdRemoveItemFromTable(productID, FirstPersonController.Instance.gameObject, tableIndex);
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdRemoveItemFromTable(int productID, GameObject playerOBJ, int tableIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteGameObject(playerOBJ);
		writer.WriteInt(tableIndex);
		SendCommandInternal("System.Void OrderPackaging::CmdRemoveItemFromTable(System.Int32,UnityEngine.GameObject,System.Int32)", 495306187, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcRemoveItemFromTable(int productID, GameObject playerOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteGameObject(playerOBJ);
		SendRPCInternal("System.Void OrderPackaging::RpcRemoveItemFromTable(System.Int32,UnityEngine.GameObject)", -1902303317, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void OnItemsDataChange0(string oldStr, string newStr)
	{
		UnpackItemsString(newStr, 0);
	}

	private void OnItemsDataChange1(string oldStr, string newStr)
	{
		UnpackItemsString(newStr, 1);
	}

	private void OnItemsDataChange2(string oldStr, string newStr)
	{
		UnpackItemsString(newStr, 2);
	}

	private void OnItemsDataChange3(string oldStr, string newStr)
	{
		UnpackItemsString(newStr, 3);
	}

	private void UnpackAllItemsData()
	{
		for (int i = 0; i < boxContainersParentOBJ.transform.childCount; i++)
		{
			switch (i)
			{
			case 0:
				UnpackItemsString(itemsData0, 0);
				break;
			case 1:
				UnpackItemsString(itemsData1, 1);
				break;
			case 2:
				UnpackItemsString(itemsData2, 2);
				break;
			case 3:
				UnpackItemsString(itemsData3, 3);
				break;
			}
		}
	}

	private void UnpackItemsString(string newStr, int whichTableIndex)
	{
		switch (whichTableIndex)
		{
		case 0:
			itemsInTray = itemsInTray0;
			break;
		case 1:
			itemsInTray = itemsInTray1;
			break;
		case 2:
			itemsInTray = itemsInTray2;
			break;
		case 3:
			itemsInTray = itemsInTray3;
			break;
		}
		itemsInTray.Clear();
		if (newStr != "")
		{
			string[] array = newStr.Split("|");
			foreach (string s in array)
			{
				itemsInTray.Add(int.Parse(s));
			}
			sortList.Clear();
			for (int j = 0; j < itemsInTray.Count; j++)
			{
				int num = itemsInTray[j];
				Data_Product component = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>();
				Vector3 vector = ((!component.hasTrueCollider) ? ProductListing.Instance.productPrefabs[num].GetComponent<BoxCollider>().size : component.trueCollider);
				sortList.Add(vector.y);
			}
			int index = 0;
			itemsInTray = itemsInTray.OrderBy((int d) => sortList[index++]).ToList();
			itemsInTray.Reverse();
			switch (whichTableIndex)
			{
			case 0:
				itemsInTray0 = itemsInTray;
				break;
			case 1:
				itemsInTray1 = itemsInTray;
				break;
			case 2:
				itemsInTray2 = itemsInTray;
				break;
			case 3:
				itemsInTray3 = itemsInTray;
				break;
			}
		}
		UnoptimizedVisualItemTrayGeneration(whichTableIndex);
	}

	private void UnoptimizedVisualItemTrayGeneration(int tableIndex)
	{
		positionPivotOBJ = itemSpawnPivotsParentOBJ.transform.GetChild(tableIndex).gameObject;
		if (positionPivotOBJ.transform.childCount > 0)
		{
			foreach (Transform item in positionPivotOBJ.transform)
			{
				UnityEngine.Object.Destroy(item.gameObject);
			}
		}
		switch (tableIndex)
		{
		case 0:
			binPack = binPack0;
			itemsInTray = itemsInTray0;
			break;
		case 1:
			binPack = binPack1;
			itemsInTray = itemsInTray1;
			break;
		case 2:
			binPack = binPack2;
			itemsInTray = itemsInTray2;
			break;
		case 3:
			binPack = binPack3;
			itemsInTray = itemsInTray3;
			break;
		}
		binPack = new MaxRectsBinPack(binWidth, binLength);
		binPack.allowRotations = false;
		for (int i = 0; i < itemsInTray.Count; i++)
		{
			int num = itemsInTray[i];
			Data_Product component = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>();
			Vector3 vector = ((!component.hasTrueCollider) ? ProductListing.Instance.productPrefabs[num].GetComponent<BoxCollider>().size : component.trueCollider);
			binPack.Insert(Mathf.CeilToInt(vector.x * 100f + (float)padding), Mathf.CeilToInt(vector.z * 100f + (float)padding), MaxRectsBinPack.FreeRectChoiceHeuristic.RectBestShortSideFit);
		}
		occupiedRects = binPack.usedRectangles;
		freeRectangles = binPack.freeRectangles;
		for (int j = 0; j < occupiedRects.Count; j++)
		{
			Rect rect = occupiedRects[j];
			if (j < itemsInTray.Count)
			{
				int num2 = itemsInTray[j];
				GameObject gameObject = ProductListing.Instance.productPrefabs[num2];
				if ((bool)gameObject)
				{
					int num3 = Mathf.CeilToInt(rect.center.x);
					int num4 = Mathf.CeilToInt(rect.center.y);
					GameObject obj = UnityEngine.Object.Instantiate(gameObject, positionPivotOBJ.transform);
					obj.transform.localPosition = new Vector3((float)num3 / 100f, 0f, (float)num4 / 100f);
					obj.GetComponent<BoxCollider>().enabled = true;
				}
			}
		}
		switch (tableIndex)
		{
		case 0:
			binPack0 = binPack;
			itemsInTray0 = itemsInTray;
			break;
		case 1:
			binPack1 = binPack;
			itemsInTray1 = itemsInTray;
			break;
		case 2:
			binPack2 = binPack;
			itemsInTray2 = itemsInTray;
			break;
		case 3:
			binPack3 = binPack;
			itemsInTray3 = itemsInTray;
			break;
		}
	}

	private void AssembleItemDataString(int tableIndex)
	{
		if (itemsInTray.Count == 0)
		{
			switch (tableIndex)
			{
			case 0:
				itemsInTray = itemsInTray0;
				NetworkitemsData0 = "";
				break;
			case 1:
				itemsInTray = itemsInTray1;
				NetworkitemsData1 = "";
				break;
			case 2:
				itemsInTray = itemsInTray2;
				NetworkitemsData2 = "";
				break;
			case 3:
				itemsInTray = itemsInTray3;
				NetworkitemsData3 = "";
				break;
			}
		}
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < itemsInTray.Count; i++)
		{
			stringBuilder.Append(itemsInTray[i].ToString());
			if (i < itemsInTray.Count - 1)
			{
				stringBuilder.Append("|");
			}
		}
		switch (tableIndex)
		{
		case 0:
			NetworkitemsData0 = stringBuilder.ToString();
			break;
		case 1:
			NetworkitemsData1 = stringBuilder.ToString();
			break;
		case 2:
			NetworkitemsData2 = stringBuilder.ToString();
			break;
		case 3:
			NetworkitemsData3 = stringBuilder.ToString();
			break;
		}
	}

	private bool isHoldingTray()
	{
		if (FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem == 9 && (bool)FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ && (bool)FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ.GetComponent<OrderingTray>())
		{
			return true;
		}
		return false;
	}

	public OrderPackaging()
	{
		_Mirror_SyncVarHookDelegate_itemsData0 = OnItemsDataChange0;
		_Mirror_SyncVarHookDelegate_itemsData1 = OnItemsDataChange1;
		_Mirror_SyncVarHookDelegate_itemsData2 = OnItemsDataChange2;
		_Mirror_SyncVarHookDelegate_itemsData3 = OnItemsDataChange3;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdActivateOrderDepartment()
	{
		if (!isOrderDepartmentActivated)
		{
			NetworkisOrderDepartmentActivated = true;
			RpcActivateOrderDepartment();
			DayResetValues();
		}
	}

	protected static void InvokeUserCode_CmdActivateOrderDepartment(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdActivateOrderDepartment called on client.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_CmdActivateOrderDepartment();
		}
	}

	protected void UserCode_RpcActivateOrderDepartment()
	{
		GameCanvas.Instance.CreateImportantNotification("opckgng2");
		GameData.Instance.transform.Find("Audio_Special").GetComponent<AudioSource>().Play();
		ActivateOrderDepartment();
	}

	protected static void InvokeUserCode_RpcActivateOrderDepartment(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcActivateOrderDepartment called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcActivateOrderDepartment();
		}
	}

	protected void UserCode_RpcDeactivateOrderDepartment()
	{
		openTextField.text = LocalizationManager.instance.GetLocalizationString("lobby2");
		openTextField.color = Color.red;
		openingButton.sprite = closedStateSprite;
		openingButton.color = Color.red;
		openingButton.transform.Find("Highlight").gameObject.SetActive(value: true);
		for (int i = 0; i < interactableCamerasParentOBJ.transform.childCount; i++)
		{
			interactableCamerasParentOBJ.transform.GetChild(i).gameObject.SetActive(value: false);
		}
	}

	protected static void InvokeUserCode_RpcDeactivateOrderDepartment(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcDeactivateOrderDepartment called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcDeactivateOrderDepartment();
		}
	}

	protected void UserCode_RpcClearNewDayValues()
	{
		if (!base.isServer)
		{
			for (int i = 0; i < currentOrderIn.Length; i++)
			{
				currentOrderIn[i] = "";
			}
			for (int j = 0; j < ordersData.Length; j++)
			{
				ordersData[j] = "";
			}
		}
		int childCount = blackboardUIOrdersParentOBJ.transform.childCount;
		if (childCount > 0)
		{
			for (int k = 0; k < childCount; k++)
			{
				UnityEngine.Object.Destroy(blackboardUIOrdersParentOBJ.transform.GetChild(childCount - 1 - k).gameObject);
			}
		}
		for (int l = 0; l < boxContainersParentOBJ.transform.childCount; l++)
		{
			ClearItemsInListAndInBox(l);
		}
	}

	protected static void InvokeUserCode_RpcClearNewDayValues(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcClearNewDayValues called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcClearNewDayValues();
		}
	}

	protected void UserCode_RpcUpdateOrderOnClient__Int32__String(int freeIndex, string orderData)
	{
		if (!base.isServer)
		{
			ordersData[freeIndex] = orderData;
		}
		CreateUIOrderOnBlackboards(freeIndex, mainBlackboard: true);
	}

	protected static void InvokeUserCode_RpcUpdateOrderOnClient__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateOrderOnClient called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcUpdateOrderOnClient__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_CmdEnableOrderNotifications()
	{
		notifyOrdersOnArrival = !notifyOrdersOnArrival;
		RpcEnableOrderNotifications(notifyOrdersOnArrival);
	}

	protected static void InvokeUserCode_CmdEnableOrderNotifications(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdEnableOrderNotifications called on client.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_CmdEnableOrderNotifications();
		}
	}

	protected void UserCode_RpcEnableOrderNotifications__Boolean(bool boolValue)
	{
		if (boolValue)
		{
			notifyButton.sprite = openStateSprite;
			notifyButton.color = Color.green;
			notifyButton.transform.Find("Highlight").GetComponent<Image>().sprite = openStateSprite;
		}
		else
		{
			notifyButton.sprite = closedStateSprite;
			notifyButton.color = Color.red;
			notifyButton.transform.Find("Highlight").GetComponent<Image>().sprite = closedStateSprite;
		}
	}

	protected static void InvokeUserCode_RpcEnableOrderNotifications__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcEnableOrderNotifications called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcEnableOrderNotifications__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcNotifyOrder()
	{
		GameCanvas.Instance.CreateCanvasNotification("opckgng11");
		notifyAudioSource.Play();
	}

	protected static void InvokeUserCode_RpcNotifyOrder(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcNotifyOrder called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcNotifyOrder();
		}
	}

	protected void UserCode_RpcUpdateOrderFromEmployee__Int32(int whichOrderIndex)
	{
		InitialUIOrderCreation();
		ordersData[whichOrderIndex] = "";
		if (controllingOrderPackaging && (bool)currentTableCanvasOBJ && currentTableCanvasOBJ.transform.GetChild(0).gameObject.activeSelf)
		{
			GenerateOrdersInInitialCanvas();
		}
	}

	protected static void InvokeUserCode_RpcUpdateOrderFromEmployee__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateOrderFromEmployee called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcUpdateOrderFromEmployee__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdAssignOrderToTable__Int32__Int32(int whichTableIndex, int whichOrderIndex)
	{
		if (whichOrderIndex >= 0 && whichOrderIndex < ordersData.Length && whichTableIndex >= 0 && whichTableIndex < boxContainersParentOBJ.transform.childCount && !(ordersData[whichOrderIndex] == ""))
		{
			currentOrderIn[whichTableIndex] = ordersData[whichOrderIndex];
			ordersBackup[whichTableIndex] = ordersData[whichOrderIndex];
			ordersData[whichOrderIndex] = "";
			RpcAssignOrderToTable(whichTableIndex, currentOrderIn[whichTableIndex], whichOrderIndex);
		}
	}

	protected static void InvokeUserCode_CmdAssignOrderToTable__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAssignOrderToTable called on client.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_CmdAssignOrderToTable__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcAssignOrderToTable__Int32__String__Int32(int whichTableIndex, string orderString, int whichOrderIndex)
	{
		ordersData[whichOrderIndex] = "";
		currentOrderIn[whichTableIndex] = orderString;
		GameCanvas.Instance.CreateCompoundWarning("opckgng3", " #" + (whichTableIndex + 1));
		GameData.Instance.transform.Find("Audio_Special").GetComponent<AudioSource>().Play();
		InitialUIOrderCreation();
		if (controllingOrderPackaging)
		{
			if ((bool)currentTableCanvasOBJ && whichTableIndex == currentTableIndex)
			{
				currentTableCanvasOBJ.transform.GetChild(0).gameObject.SetActive(value: false);
				currentTableCanvasOBJ.transform.GetChild(1).gameObject.SetActive(value: true);
				boxLimitOBJ.SetActive(value: true);
				GenerateOrderDataInTableCanvas(currentTableIndex, orderString);
			}
			else if ((bool)currentTableCanvasOBJ && currentTableCanvasOBJ.transform.GetChild(0).gameObject.activeSelf)
			{
				GenerateOrdersInInitialCanvas();
			}
		}
		if (isHoldingTray())
		{
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ.GetComponent<OrderingTray>().CheckIfOrderTabletActivation();
		}
	}

	protected static void InvokeUserCode_RpcAssignOrderToTable__Int32__String__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAssignOrderToTable called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcAssignOrderToTable__Int32__String__Int32(reader.ReadInt(), reader.ReadString(), reader.ReadInt());
		}
	}

	protected void UserCode_CmdCreateBoxOrder__Int32__String(int whichTableIndex, string whichItemsData)
	{
		if (whichTableIndex < 0 || whichTableIndex >= boxContainersParentOBJ.transform.childCount)
		{
			return;
		}
		string text = currentOrderIn[whichTableIndex];
		if (text == "" || whichItemsData == "")
		{
			return;
		}
		List<int> list = new List<int>();
		List<int> list2 = new List<int>();
		string[] array = whichItemsData.Split("_");
		for (int i = 0; i < array.Length; i++)
		{
			list.Add(int.Parse(array[i]));
		}
		string[] array2 = text.Split("|");
		if (array2[3] == "")
		{
			ServerCloseOrder(whichTableIndex);
			return;
		}
		string[] array3 = array2[3].Split("_");
		for (int j = 0; j < array3.Length; j++)
		{
			list2.Add(int.Parse(array3[j]));
		}
		for (int k = 0; k < list.Count; k++)
		{
			int num = list[k];
			for (int num2 = list2.Count - 1; num2 >= 0; num2--)
			{
				if (num == list2[num2])
				{
					list2.RemoveAt(num2);
					break;
				}
			}
		}
		if (list2.Count == 0)
		{
			ServerCloseOrder(whichTableIndex);
			string recreatedOrderData = array2[0] + "|" + array2[1] + "|" + array2[2] + "|";
			RpcCreateBoxOrder(whichTableIndex, recreatedOrderData);
		}
		else
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int l = 0; l < list2.Count; l++)
			{
				stringBuilder.Append(list2[l].ToString());
				if (l != list2.Count - 1)
				{
					stringBuilder.Append("_");
				}
			}
			string text2 = array2[0] + "|" + array2[1] + "|" + array2[2] + "|" + stringBuilder.ToString();
			currentOrderIn[whichTableIndex] = text2;
			RpcCreateBoxOrder(whichTableIndex, text2);
		}
		GameObject obj = UnityEngine.Object.Instantiate(orderBoxPrefabOBJ);
		obj.transform.position = itemSpawnPivotsParentOBJ.transform.GetChild(whichTableIndex).TransformPoint(new Vector3(0.79f, 1.55f, 2.63f));
		obj.GetComponent<OrderPackagingBox>().NetworkorderNumberStr = array2[0];
		obj.GetComponent<OrderPackagingBox>().NetworkcustomerName = array2[1];
		obj.GetComponent<OrderPackagingBox>().NetworkitemsInBoxData = whichItemsData;
		NetworkServer.Spawn(obj);
	}

	protected static void InvokeUserCode_CmdCreateBoxOrder__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdCreateBoxOrder called on client.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_CmdCreateBoxOrder__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_RpcOrderCompletedMessage__Int32(int whichTableIndex)
	{
		if (!base.isServer)
		{
			currentOrderIn[whichTableIndex] = "";
		}
		AchievementsManager.Instance.AddLocalAchievementPoint(19);
		GameCanvas.Instance.CreateCompoundWarning("opckgng6", " #" + (whichTableIndex + 1));
	}

	protected static void InvokeUserCode_RpcOrderCompletedMessage__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcOrderCompletedMessage called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcOrderCompletedMessage__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcCreateBoxOrder__Int32__String(int whichTableIndex, string recreatedOrderData)
	{
		if (!base.isServer)
		{
			currentOrderIn[whichTableIndex] = recreatedOrderData;
		}
		if (isHoldingTray())
		{
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ.GetComponent<OrderingTray>().RegenerateItemsFromBoxOrder(whichTableIndex);
		}
		if (controllingOrderPackaging && whichTableIndex == currentTableIndex)
		{
			GenerateOrderDataInTableCanvas(whichTableIndex, recreatedOrderData);
		}
	}

	protected static void InvokeUserCode_RpcCreateBoxOrder__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcCreateBoxOrder called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcCreateBoxOrder__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_CmdAddItemToTable__Int32__GameObject__Int32(int productID, GameObject playerOBJ, int tableIndex)
	{
		if (tableIndex < 0 || tableIndex >= boxContainersParentOBJ.transform.childCount)
		{
			return;
		}
		Data_Product component = ProductListing.Instance.productPrefabs[productID].GetComponent<Data_Product>();
		Vector3 vector = ((!component.hasTrueCollider) ? ProductListing.Instance.productPrefabs[productID].GetComponent<BoxCollider>().size : component.trueCollider);
		switch (tableIndex)
		{
		case 0:
			binPack = binPack0;
			itemsInTray = itemsInTray0;
			break;
		case 1:
			binPack = binPack1;
			itemsInTray = itemsInTray1;
			break;
		case 2:
			binPack = binPack2;
			itemsInTray = itemsInTray2;
			break;
		case 3:
			binPack = binPack3;
			itemsInTray = itemsInTray3;
			break;
		}
		binPack.Insert(Mathf.CeilToInt(vector.x * 100f + (float)padding), Mathf.CeilToInt(vector.z * 100f + (float)padding), MaxRectsBinPack.FreeRectChoiceHeuristic.RectBestShortSideFit);
		occupiedRects = binPack.usedRectangles;
		freeRectangles = binPack.freeRectangles;
		if (itemsInTray.Count == occupiedRects.Count - 1)
		{
			itemsInTray.Add(productID);
			AssembleItemDataString(tableIndex);
			RpcAddItemToTable(productID, playerOBJ);
			switch (tableIndex)
			{
			case 0:
				binPack0 = binPack;
				itemsInTray0 = itemsInTray;
				break;
			case 1:
				binPack1 = binPack;
				itemsInTray1 = itemsInTray;
				break;
			case 2:
				binPack2 = binPack;
				itemsInTray2 = itemsInTray;
				break;
			case 3:
				binPack3 = binPack;
				itemsInTray3 = itemsInTray;
				break;
			}
		}
	}

	protected static void InvokeUserCode_CmdAddItemToTable__Int32__GameObject__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddItemToTable called on client.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_CmdAddItemToTable__Int32__GameObject__Int32(reader.ReadInt(), reader.ReadGameObject(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcAddItemToTable__Int32__GameObject(int productID, GameObject playerOBJ)
	{
		if ((bool)playerOBJ && playerOBJ.name == "LocalGamePlayer" && FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem == 9 && (bool)FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ)
		{
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ.GetComponent<OrderingTray>().PlacingItemCallback(productID);
		}
	}

	protected static void InvokeUserCode_RpcAddItemToTable__Int32__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddItemToTable called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcAddItemToTable__Int32__GameObject(reader.ReadInt(), reader.ReadGameObject());
		}
	}

	protected void UserCode_CmdRemoveItemFromTable__Int32__GameObject__Int32(int productID, GameObject playerOBJ, int tableIndex)
	{
		switch (tableIndex)
		{
		case 0:
			if (itemsInTray0.Count == 0)
			{
				return;
			}
			itemsInTray = itemsInTray0;
			break;
		case 1:
			if (itemsInTray1.Count == 0)
			{
				return;
			}
			itemsInTray = itemsInTray1;
			break;
		case 2:
			if (itemsInTray2.Count == 0)
			{
				return;
			}
			itemsInTray = itemsInTray2;
			break;
		case 3:
			if (itemsInTray3.Count == 0)
			{
				return;
			}
			itemsInTray = itemsInTray3;
			break;
		}
		for (int i = 0; i < itemsInTray.Count; i++)
		{
			int num = itemsInTray[i];
			if (num == productID)
			{
				RpcRemoveItemFromTable(num, playerOBJ);
				itemsInTray.RemoveAt(i);
				AssembleItemDataString(tableIndex);
				break;
			}
		}
	}

	protected static void InvokeUserCode_CmdRemoveItemFromTable__Int32__GameObject__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRemoveItemFromTable called on client.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_CmdRemoveItemFromTable__Int32__GameObject__Int32(reader.ReadInt(), reader.ReadGameObject(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcRemoveItemFromTable__Int32__GameObject(int productID, GameObject playerOBJ)
	{
		if ((bool)playerOBJ && playerOBJ.name == "LocalGamePlayer" && FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem == 9 && (bool)FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ)
		{
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().instantiatedOBJ.GetComponent<OrderingTray>().GettingItemCallback(productID);
		}
	}

	protected static void InvokeUserCode_RpcRemoveItemFromTable__Int32__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRemoveItemFromTable called on server.");
		}
		else
		{
			((OrderPackaging)obj).UserCode_RpcRemoveItemFromTable__Int32__GameObject(reader.ReadInt(), reader.ReadGameObject());
		}
	}

	static OrderPackaging()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(OrderPackaging), "System.Void OrderPackaging::CmdActivateOrderDepartment()", InvokeUserCode_CmdActivateOrderDepartment, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(OrderPackaging), "System.Void OrderPackaging::CmdEnableOrderNotifications()", InvokeUserCode_CmdEnableOrderNotifications, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(OrderPackaging), "System.Void OrderPackaging::CmdAssignOrderToTable(System.Int32,System.Int32)", InvokeUserCode_CmdAssignOrderToTable__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(OrderPackaging), "System.Void OrderPackaging::CmdCreateBoxOrder(System.Int32,System.String)", InvokeUserCode_CmdCreateBoxOrder__Int32__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(OrderPackaging), "System.Void OrderPackaging::CmdAddItemToTable(System.Int32,UnityEngine.GameObject,System.Int32)", InvokeUserCode_CmdAddItemToTable__Int32__GameObject__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(OrderPackaging), "System.Void OrderPackaging::CmdRemoveItemFromTable(System.Int32,UnityEngine.GameObject,System.Int32)", InvokeUserCode_CmdRemoveItemFromTable__Int32__GameObject__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcActivateOrderDepartment()", InvokeUserCode_RpcActivateOrderDepartment);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcDeactivateOrderDepartment()", InvokeUserCode_RpcDeactivateOrderDepartment);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcClearNewDayValues()", InvokeUserCode_RpcClearNewDayValues);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcUpdateOrderOnClient(System.Int32,System.String)", InvokeUserCode_RpcUpdateOrderOnClient__Int32__String);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcEnableOrderNotifications(System.Boolean)", InvokeUserCode_RpcEnableOrderNotifications__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcNotifyOrder()", InvokeUserCode_RpcNotifyOrder);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcUpdateOrderFromEmployee(System.Int32)", InvokeUserCode_RpcUpdateOrderFromEmployee__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcAssignOrderToTable(System.Int32,System.String,System.Int32)", InvokeUserCode_RpcAssignOrderToTable__Int32__String__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcOrderCompletedMessage(System.Int32)", InvokeUserCode_RpcOrderCompletedMessage__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcCreateBoxOrder(System.Int32,System.String)", InvokeUserCode_RpcCreateBoxOrder__Int32__String);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcAddItemToTable(System.Int32,UnityEngine.GameObject)", InvokeUserCode_RpcAddItemToTable__Int32__GameObject);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPackaging), "System.Void OrderPackaging::RpcRemoveItemFromTable(System.Int32,UnityEngine.GameObject)", InvokeUserCode_RpcRemoveItemFromTable__Int32__GameObject);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteBool(isOrderDepartmentActivated);
			GeneratedNetworkCode._Write_System.String[](writer, ordersData);
			writer.WriteString(itemsData0);
			writer.WriteString(itemsData1);
			writer.WriteString(itemsData2);
			writer.WriteString(itemsData3);
			GeneratedNetworkCode._Write_System.String[](writer, currentOrderIn);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteBool(isOrderDepartmentActivated);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, ordersData);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteString(itemsData0);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteString(itemsData1);
		}
		if ((syncVarDirtyBits & 0x10L) != 0L)
		{
			writer.WriteString(itemsData2);
		}
		if ((syncVarDirtyBits & 0x20L) != 0L)
		{
			writer.WriteString(itemsData3);
		}
		if ((syncVarDirtyBits & 0x40L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, currentOrderIn);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref isOrderDepartmentActivated, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref ordersData, null, GeneratedNetworkCode._Read_System.String[](reader));
			GeneratedSyncVarDeserialize(ref itemsData0, _Mirror_SyncVarHookDelegate_itemsData0, reader.ReadString());
			GeneratedSyncVarDeserialize(ref itemsData1, _Mirror_SyncVarHookDelegate_itemsData1, reader.ReadString());
			GeneratedSyncVarDeserialize(ref itemsData2, _Mirror_SyncVarHookDelegate_itemsData2, reader.ReadString());
			GeneratedSyncVarDeserialize(ref itemsData3, _Mirror_SyncVarHookDelegate_itemsData3, reader.ReadString());
			GeneratedSyncVarDeserialize(ref currentOrderIn, null, GeneratedNetworkCode._Read_System.String[](reader));
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref isOrderDepartmentActivated, null, reader.ReadBool());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref ordersData, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref itemsData0, _Mirror_SyncVarHookDelegate_itemsData0, reader.ReadString());
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref itemsData1, _Mirror_SyncVarHookDelegate_itemsData1, reader.ReadString());
		}
		if ((num & 0x10L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref itemsData2, _Mirror_SyncVarHookDelegate_itemsData2, reader.ReadString());
		}
		if ((num & 0x20L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref itemsData3, _Mirror_SyncVarHookDelegate_itemsData3, reader.ReadString());
		}
		if ((num & 0x40L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref currentOrderIn, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderPackagingBox
using System.Runtime.InteropServices;
using Mirror;
using TMPro;

public class OrderPackagingBox : NetworkBehaviour
{
	[SyncVar]
	public string orderNumberStr;

	[SyncVar]
	public string customerName;

	[SyncVar]
	public string itemsInBoxData;

	public string NetworkorderNumberStr
	{
		get
		{
			return orderNumberStr;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref orderNumberStr, 1uL, null);
		}
	}

	public string NetworkcustomerName
	{
		get
		{
			return customerName;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref customerName, 2uL, null);
		}
	}

	public string NetworkitemsInBoxData
	{
		get
		{
			return itemsInBoxData;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref itemsInBoxData, 4uL, null);
		}
	}

	public override void OnStartClient()
	{
		base.transform.Find("Canvas/OrderNumber").GetComponent<TextMeshProUGUI>().text = "#" + orderNumberStr;
		base.transform.Find("Canvas/CustomerName").GetComponent<TextMeshProUGUI>().text = customerName;
	}

	public override bool Weaved()
	{
		return true;
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteString(orderNumberStr);
			writer.WriteString(customerName);
			writer.WriteString(itemsInBoxData);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteString(orderNumberStr);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteString(customerName);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteString(itemsInBoxData);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref orderNumberStr, null, reader.ReadString());
			GeneratedSyncVarDeserialize(ref customerName, null, reader.ReadString());
			GeneratedSyncVarDeserialize(ref itemsInBoxData, null, reader.ReadString());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref orderNumberStr, null, reader.ReadString());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref customerName, null, reader.ReadString());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref itemsInBoxData, null, reader.ReadString());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderPackagingReference
using UnityEngine;

public class OrderPackagingReference : MonoBehaviour
{
	public OrderPackaging oPackagingComponent;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderPackagingUIReferences
using TMPro;
using UnityEngine;

public class OrderPackagingUIReferences : MonoBehaviour
{
	public TextMeshProUGUI orderNumberField;

	public TextMeshProUGUI customerNameField;

	public TextMeshProUGUI itemsQuantityField;

	public TextMeshProUGUI weightField;

	public GameObject playmakerOBJ;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OrderPickupPoint
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class OrderPickupPoint : NetworkBehaviour
{
	[SyncVar]
	public string[] pickupsData;

	public int[] ordersNumbers;

	public string[] ordersItemData;

	public GameObject orderBoxPrefabOBJ;

	public string[] NetworkpickupsData
	{
		get
		{
			return pickupsData;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref pickupsData, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		UpdateBoxes();
	}

	public override void OnStartServer()
	{
		StartCoroutine(DelayedAdditionToManager());
	}

	private IEnumerator DelayedAdditionToManager()
	{
		yield return null;
		while (!NPC_Manager.Instance)
		{
			yield return null;
		}
		NPC_Manager.Instance.orderPickupPointsList.Add(base.gameObject);
	}

	public void AddOrderBox(int boxIndex, string boxData)
	{
		if (!(pickupsData[boxIndex] != "") && boxData.Contains("|") && boxIndex >= 0 && boxIndex < pickupsData.Length)
		{
			CmdAddOrderBox(boxIndex, boxData);
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdAddOrderBox(int boxIndex, string boxData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(boxIndex);
		writer.WriteString(boxData);
		SendCommandInternal("System.Void OrderPickupPoint::CmdAddOrderBox(System.Int32,System.String)", -2000994082, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAddOrderBox(int boxIndex, string boxData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(boxIndex);
		writer.WriteString(boxData);
		SendRPCInternal("System.Void OrderPickupPoint::RpcAddOrderBox(System.Int32,System.String)", -607190157, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void UpdateBoxes()
	{
		Transform transform = base.transform.Find("OrderBoxContainer");
		for (int i = 0; i < pickupsData.Length; i++)
		{
			Transform child = transform.transform.GetChild(i);
			if (pickupsData[i] != "" && child.transform.childCount == 0)
			{
				GameObject obj = Object.Instantiate(orderBoxPrefabOBJ, child);
				obj.transform.localPosition = Vector3.zero;
				obj.transform.localRotation = Quaternion.identity;
				child.tag = "Untagged";
			}
			else if (pickupsData[i] == "" && child.transform.childCount > 0)
			{
				child.tag = "Interactable";
				Object.Destroy(child.transform.GetChild(0).gameObject);
			}
		}
	}

	public void NPCRetrieveBox(int whichIndex)
	{
		pickupsData[whichIndex] = "";
		ordersNumbers[whichIndex] = -1;
		ordersItemData[whichIndex] = "";
		RpcClientRetrieveBox(whichIndex, updateBoxes: true);
	}

	[ClientRpc]
	private void RpcClientRetrieveBox(int whichIndex, bool updateBoxes)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichIndex);
		writer.WriteBool(updateBoxes);
		SendRPCInternal("System.Void OrderPickupPoint::RpcClientRetrieveBox(System.Int32,System.Boolean)", 557145472, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void EndDayClearData()
	{
		for (int i = 0; i < pickupsData.Length; i++)
		{
			if (pickupsData[i] != "")
			{
				pickupsData[i] = "";
				ordersNumbers[i] = -1;
				ordersItemData[i] = "";
			}
		}
		RpcEndDayClearData();
	}

	[ClientRpc]
	private void RpcEndDayClearData()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void OrderPickupPoint::RpcEndDayClearData()", -2019593878, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdAddOrderBox__Int32__String(int boxIndex, string boxData)
	{
		if (!(pickupsData[boxIndex] != "") && boxData.Contains("|") && boxIndex >= 0 && boxIndex < pickupsData.Length)
		{
			pickupsData[boxIndex] = boxData;
			string[] array = boxData.Split("|");
			ordersNumbers[boxIndex] = int.Parse(array[0]);
			ordersItemData[boxIndex] = array[1];
			RpcAddOrderBox(boxIndex, boxData);
		}
	}

	protected static void InvokeUserCode_CmdAddOrderBox__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddOrderBox called on client.");
		}
		else
		{
			((OrderPickupPoint)obj).UserCode_CmdAddOrderBox__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_RpcAddOrderBox__Int32__String(int boxIndex, string boxData)
	{
		if (!base.isServer)
		{
			pickupsData[boxIndex] = boxData;
		}
		UpdateBoxes();
	}

	protected static void InvokeUserCode_RpcAddOrderBox__Int32__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddOrderBox called on server.");
		}
		else
		{
			((OrderPickupPoint)obj).UserCode_RpcAddOrderBox__Int32__String(reader.ReadInt(), reader.ReadString());
		}
	}

	protected void UserCode_RpcClientRetrieveBox__Int32__Boolean(int whichIndex, bool updateBoxes)
	{
		if (!base.isServer)
		{
			pickupsData[whichIndex] = "";
			ordersNumbers[whichIndex] = -1;
			ordersItemData[whichIndex] = "";
		}
		if (updateBoxes)
		{
			UpdateBoxes();
		}
	}

	protected static void InvokeUserCode_RpcClientRetrieveBox__Int32__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcClientRetrieveBox called on server.");
		}
		else
		{
			((OrderPickupPoint)obj).UserCode_RpcClientRetrieveBox__Int32__Boolean(reader.ReadInt(), reader.ReadBool());
		}
	}

	protected void UserCode_RpcEndDayClearData()
	{
		if (!base.isServer)
		{
			for (int i = 0; i < pickupsData.Length; i++)
			{
				if (pickupsData[i] != "")
				{
					pickupsData[i] = "";
					ordersNumbers[i] = -1;
					ordersItemData[i] = "";
				}
			}
		}
		UpdateBoxes();
	}

	protected static void InvokeUserCode_RpcEndDayClearData(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcEndDayClearData called on server.");
		}
		else
		{
			((OrderPickupPoint)obj).UserCode_RpcEndDayClearData();
		}
	}

	static OrderPickupPoint()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(OrderPickupPoint), "System.Void OrderPickupPoint::CmdAddOrderBox(System.Int32,System.String)", InvokeUserCode_CmdAddOrderBox__Int32__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPickupPoint), "System.Void OrderPickupPoint::RpcAddOrderBox(System.Int32,System.String)", InvokeUserCode_RpcAddOrderBox__Int32__String);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPickupPoint), "System.Void OrderPickupPoint::RpcClientRetrieveBox(System.Int32,System.Boolean)", InvokeUserCode_RpcClientRetrieveBox__Int32__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(OrderPickupPoint), "System.Void OrderPickupPoint::RpcEndDayClearData()", InvokeUserCode_RpcEndDayClearData);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.String[](writer, pickupsData);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, pickupsData);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref pickupsData, null, GeneratedNetworkCode._Read_System.String[](reader));
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref pickupsData, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// OtherPropsBehaviour
using System.Collections;
using System.Globalization;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;
using Vuplex.WebView;

public class OtherPropsBehaviour : NetworkBehaviour
{
	[SyncVar]
	public int[] doorsState;

	[SyncVar]
	public string currentSyncedWebsite;

	[SyncVar]
	public int currentSyncedValue;

	public bool syncWebsites;

	public bool allowOtherPlayersToChangeURL;

	public bool[] syncWebsitesValue;

	public string[] websitesLinks;

	public float currentVideoTime;

	public WebViewPrefab wViewPrefab;

	[Space(10f)]
	public int currentLocalValue;

	private IWebView iwebView;

	private int currentWebsiteIndex = -1;

	private string oldWebsiteString;

	private bool YTCoroutineRunning;

	private int performanceCounter;

	private bool messageListenerCreated;

	private string eventValue;

	[Space(10f)]
	public GameObject[] doorsSettersArray;

	public GameObject[] leftDoorsArray;

	public GameObject[] rightDoorsArray;

	public int[] NetworkdoorsState
	{
		get
		{
			return doorsState;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref doorsState, 1uL, null);
		}
	}

	public string NetworkcurrentSyncedWebsite
	{
		get
		{
			return currentSyncedWebsite;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref currentSyncedWebsite, 2uL, null);
		}
	}

	public int NetworkcurrentSyncedValue
	{
		get
		{
			return currentSyncedValue;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref currentSyncedValue, 4uL, null);
		}
	}

	public override void OnStartClient()
	{
		base.OnStartClient();
		InitUpdateDoors();
	}

	public void WebsitesSyncControl()
	{
		if (!syncWebsites)
		{
			return;
		}
		if (performanceCounter < 120)
		{
			performanceCounter++;
			return;
		}
		performanceCounter = 0;
		if (iwebView == null)
		{
			iwebView = wViewPrefab.WebView;
			return;
		}
		if (!messageListenerCreated)
		{
			messageListenerCreated = true;
			iwebView.MessageEmitted += delegate(object sender, EventArgs<string> eventArgs)
			{
				eventValue = eventArgs.Value;
			};
		}
		if (base.isServer)
		{
			string url = iwebView.Url;
			if (url != oldWebsiteString)
			{
				oldWebsiteString = url;
				int num = CheckIfValidWebsite(url);
				if (num >= 0 && syncWebsitesValue[num])
				{
					NetworkcurrentSyncedWebsite = url;
				}
				currentWebsiteIndex = num;
			}
		}
		else if (base.isClient && oldWebsiteString != currentSyncedWebsite)
		{
			int num2 = CheckIfValidWebsite(currentSyncedWebsite);
			if (num2 >= 0 && num2 == 0)
			{
				string text = RetrieveYoutubeLink(currentSyncedWebsite, 0);
				if (text != "")
				{
					iwebView.LoadUrl(text);
					currentWebsiteIndex = 0;
				}
			}
			currentWebsiteIndex = num2;
			oldWebsiteString = currentSyncedWebsite;
		}
		if (currentWebsiteIndex != 0)
		{
			return;
		}
		JavaScriptSendMessageToCSharp();
		SetCurrentYoutubeTime();
		if (base.isServer)
		{
			NetworkcurrentSyncedValue = currentLocalValue;
		}
		else if (base.isClient && Mathf.Abs(currentSyncedValue - currentLocalValue) > 10)
		{
			string text2 = RetrieveYoutubeLink(currentSyncedWebsite, currentSyncedValue + 3);
			currentLocalValue = currentSyncedValue + 3;
			if (text2 != "")
			{
				iwebView.LoadUrl(text2);
			}
		}
	}

	private int CheckIfValidWebsite(string URLToValidate)
	{
		if (URLToValidate == null)
		{
			return -1;
		}
		for (int i = 0; i < websitesLinks.Length; i++)
		{
			string value = websitesLinks[i];
			if (URLToValidate.StartsWith(value))
			{
				return i;
			}
		}
		return -1;
	}

	private void SetCurrentYoutubeTime()
	{
		if (float.TryParse(eventValue, NumberStyles.Float, CultureInfo.GetCultureInfo("en-US"), out var result))
		{
			currentLocalValue = (int)result;
		}
	}

	private string RetrieveYoutubeLink(string baseURL, int time)
	{
		string text = "";
		if (baseURL.Contains("watch?v="))
		{
			text = baseURL.Split("watch?v=")[1];
			if (text.Contains("?"))
			{
				text = text.Split("?")[0];
			}
			else if (text.Contains("&"))
			{
				text = text.Split("&")[0];
			}
		}
		if (text != "")
		{
			return "https://www.youtube.com/embed/" + text + "?start=" + time + "&fs=1?rel=0&autoplay=1";
		}
		return "";
	}

	private void JavaScriptSendMessageToCSharp()
	{
		iwebView.ExecuteJavaScript("(async () => {\r\n\r\n        const result = String(document.getElementById('movie_player').getCurrentTime());\r\n\r\n        vuplex.postMessage(result);\r\n    })()");
	}

	public void RequestStringFromClient(string URLRequest)
	{
		CmdURLRequested(URLRequest);
	}

	[Command(requiresAuthority = false)]
	private void CmdURLRequested(string URLValue)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(URLValue);
		SendCommandInternal("System.Void OtherPropsBehaviour::CmdURLRequested(System.String)", 56363593, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdUpdateDoorSetter(int index)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(index);
		SendCommandInternal("System.Void OtherPropsBehaviour::CmdUpdateDoorSetter(System.Int32)", -1439890235, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private bool CorrectFlowFound(int index)
	{
		int[] array = new int[doorsState.Length];
		for (int i = 0; i < doorsState.Length; i++)
		{
			array[i] = doorsState[i];
		}
		array[index]++;
		if (array[index] >= 4)
		{
			array[index] = 0;
		}
		int[] array2 = array;
		for (int j = 0; j < array2.Length; j++)
		{
			if (array2[j] == 0)
			{
				return true;
			}
		}
		array2 = array;
		for (int j = 0; j < array2.Length; j++)
		{
			if (array2[j] != 1)
			{
				continue;
			}
			int[] array3 = array;
			for (int k = 0; k < array3.Length; k++)
			{
				if (array3[k] == 2)
				{
					return true;
				}
			}
		}
		return false;
	}

	[ClientRpc]
	private void RpcUpdateDoorSetter(int doorIndex, int state)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(doorIndex);
		writer.WriteInt(state);
		SendRPCInternal("System.Void OtherPropsBehaviour::RpcUpdateDoorSetter(System.Int32,System.Int32)", -859012755, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void UpdateDoorSetter(int doorIndex, int state)
	{
		GameObject gameObject = doorsSettersArray[doorIndex];
		for (int i = 0; i < doorsState.Length; i++)
		{
			if (i == state)
			{
				gameObject.transform.Find("Panels").transform.GetChild(i).gameObject.SetActive(value: true);
				gameObject.transform.Find("Navmesh").transform.GetChild(i).gameObject.SetActive(value: true);
			}
			else
			{
				gameObject.transform.Find("Panels").transform.GetChild(i).gameObject.SetActive(value: false);
				gameObject.transform.Find("Navmesh").transform.GetChild(i).gameObject.SetActive(value: false);
			}
		}
		UpdatePhysicalDoors(doorIndex, state);
	}

	private void InitUpdateDoors()
	{
		for (int i = 0; i < doorsSettersArray.Length; i++)
		{
			int state = doorsState[i];
			UpdateDoorSetter(i, state);
		}
	}

	private void UpdatePhysicalDoors(int doorIndex, int state)
	{
		if (state == 3)
		{
			leftDoorsArray[doorIndex].transform.eulerAngles = new Vector3(0f, 0f, 0f);
			rightDoorsArray[doorIndex].transform.eulerAngles = new Vector3(0f, 0f, 0f);
		}
		else
		{
			leftDoorsArray[doorIndex].transform.eulerAngles = new Vector3(0f, -163f, 0f);
			rightDoorsArray[doorIndex].transform.eulerAngles = new Vector3(0f, 163f, 0f);
		}
	}

	private IEnumerator DoorsAnimation(bool open)
	{
		yield return null;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdURLRequested__String(string URLValue)
	{
		if (syncWebsites && allowOtherPlayersToChangeURL)
		{
			int num = CheckIfValidWebsite(URLValue);
			if (num >= 0 && syncWebsitesValue[num])
			{
				URLValue.Contains("&autoplay=1");
				iwebView.LoadUrl(URLValue);
			}
		}
	}

	protected static void InvokeUserCode_CmdURLRequested__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdURLRequested called on client.");
		}
		else
		{
			((OtherPropsBehaviour)obj).UserCode_CmdURLRequested__String(reader.ReadString());
		}
	}

	protected void UserCode_CmdUpdateDoorSetter__Int32(int index)
	{
		if (CorrectFlowFound(index))
		{
			doorsState[index]++;
			if (doorsState[index] >= 4)
			{
				doorsState[index] = 0;
			}
			RpcUpdateDoorSetter(index, doorsState[index]);
		}
	}

	protected static void InvokeUserCode_CmdUpdateDoorSetter__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUpdateDoorSetter called on client.");
		}
		else
		{
			((OtherPropsBehaviour)obj).UserCode_CmdUpdateDoorSetter__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcUpdateDoorSetter__Int32__Int32(int doorIndex, int state)
	{
		UpdateDoorSetter(doorIndex, state);
	}

	protected static void InvokeUserCode_RpcUpdateDoorSetter__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateDoorSetter called on server.");
		}
		else
		{
			((OtherPropsBehaviour)obj).UserCode_RpcUpdateDoorSetter__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	static OtherPropsBehaviour()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(OtherPropsBehaviour), "System.Void OtherPropsBehaviour::CmdURLRequested(System.String)", InvokeUserCode_CmdURLRequested__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(OtherPropsBehaviour), "System.Void OtherPropsBehaviour::CmdUpdateDoorSetter(System.Int32)", InvokeUserCode_CmdUpdateDoorSetter__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(OtherPropsBehaviour), "System.Void OtherPropsBehaviour::RpcUpdateDoorSetter(System.Int32,System.Int32)", InvokeUserCode_RpcUpdateDoorSetter__Int32__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.Int32[](writer, doorsState);
			writer.WriteString(currentSyncedWebsite);
			writer.WriteInt(currentSyncedValue);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Int32[](writer, doorsState);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteString(currentSyncedWebsite);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteInt(currentSyncedValue);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref doorsState, null, GeneratedNetworkCode._Read_System.Int32[](reader));
			GeneratedSyncVarDeserialize(ref currentSyncedWebsite, null, reader.ReadString());
			GeneratedSyncVarDeserialize(ref currentSyncedValue, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref doorsState, null, GeneratedNetworkCode._Read_System.Int32[](reader));
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref currentSyncedWebsite, null, reader.ReadString());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref currentSyncedValue, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Paintable
using UnityEngine;

public class Paintable : MonoBehaviour
{
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PaintableAuxiliarHighlight
using HighlightPlus;
using UnityEngine;

public class PaintableAuxiliarHighlight : MonoBehaviour
{
	[SerializeField]
	private LayerMask lMask;

	private HighlightEffect hEffect;

	private void Start()
	{
		lMask = LayerMask.GetMask("Default");
		hEffect = base.gameObject.AddComponent<HighlightEffect>();
		hEffect.outline = 0f;
		hEffect.glow = 1f;
		hEffect.glowWidth = 1.5f;
		hEffect.glowQuality = HighlightPlus.QualityLevel.Highest;
		hEffect.highlighted = true;
	}

	private void Update()
	{
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
		{
			if (hitInfo.transform.gameObject != base.gameObject)
			{
				DestroyBehaviours();
			}
		}
		else
		{
			DestroyBehaviours();
		}
	}

	public void DestroyBehaviours()
	{
		if ((bool)hEffect)
		{
			Object.Destroy(hEffect);
		}
		Object.Destroy(this);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PaintableData
using UnityEngine;

public class PaintableData : MonoBehaviour
{
	public Material material;

	public float price = 50f;

	public Color[] ColorArray = new Color[1] { Color.white };

	public bool allowCustomColors;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PaintableDecoration
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class PaintableDecoration : NetworkBehaviour
{
	[SyncVar]
	public int mainValue;

	[SyncVar]
	public int secondaryValue;

	private bool coroutineIsRunning;

	public int NetworkmainValue
	{
		get
		{
			return mainValue;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref mainValue, 1uL, null);
		}
	}

	public int NetworksecondaryValue
	{
		get
		{
			return secondaryValue;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref secondaryValue, 2uL, null);
		}
	}

	public override void OnStartClient()
	{
		StartCoroutine(DelayedVisualsUpdate());
	}

	private IEnumerator DelayedVisualsUpdate()
	{
		coroutineIsRunning = true;
		yield return new WaitForSeconds(Random.Range(5f, 6f));
		UpdateVisuals(mainValue, secondaryValue);
		coroutineIsRunning = false;
	}

	[Command(requiresAuthority = false)]
	public void CmdSetPaintable(int whichPaintable, int whichColor)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichPaintable);
		writer.WriteInt(whichColor);
		SendCommandInternal("System.Void PaintableDecoration::CmdSetPaintable(System.Int32,System.Int32)", 679536647, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateVisuals(int whichPaintable, int whichColor)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(whichPaintable);
		writer.WriteInt(whichColor);
		SendRPCInternal("System.Void PaintableDecoration::RpcUpdateVisuals(System.Int32,System.Int32)", 1521842166, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void UpdateVisuals(int whichPaintable, int whichColor)
	{
		MeshRenderer component = base.transform.Find("Mesh").GetComponent<MeshRenderer>();
		GameData.Instance.GetComponent<PaintablesManager>().UpdateDecorationMesh(component, whichPaintable, whichColor);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdSetPaintable__Int32__Int32(int whichPaintable, int whichColor)
	{
		if ((bool)base.transform.Find("Mesh"))
		{
			NetworkmainValue = whichPaintable;
			NetworksecondaryValue = whichColor;
			RpcUpdateVisuals(whichPaintable, whichColor);
		}
	}

	protected static void InvokeUserCode_CmdSetPaintable__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetPaintable called on client.");
		}
		else
		{
			((PaintableDecoration)obj).UserCode_CmdSetPaintable__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcUpdateVisuals__Int32__Int32(int whichPaintable, int whichColor)
	{
		if (coroutineIsRunning)
		{
			StopAllCoroutines();
		}
		UpdateVisuals(whichPaintable, whichColor);
	}

	protected static void InvokeUserCode_RpcUpdateVisuals__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateVisuals called on server.");
		}
		else
		{
			((PaintableDecoration)obj).UserCode_RpcUpdateVisuals__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	static PaintableDecoration()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(PaintableDecoration), "System.Void PaintableDecoration::CmdSetPaintable(System.Int32,System.Int32)", InvokeUserCode_CmdSetPaintable__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(PaintableDecoration), "System.Void PaintableDecoration::RpcUpdateVisuals(System.Int32,System.Int32)", InvokeUserCode_RpcUpdateVisuals__Int32__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(mainValue);
			writer.WriteInt(secondaryValue);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(mainValue);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(secondaryValue);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref mainValue, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref secondaryValue, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref mainValue, null, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref secondaryValue, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PaintablesManager
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class PaintablesManager : NetworkBehaviour
{
	[SyncVar]
	public string[] paintablesValuesArray;

	public GameObject materialsDataRootOBJ;

	public GameObject paintablesRootOBJ;

	private PaintableData mainPaintableData;

	public string[] NetworkpaintablesValuesArray
	{
		get
		{
			return paintablesValuesArray;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref paintablesValuesArray, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		mainPaintableData = materialsDataRootOBJ.GetComponent<PaintableData>();
		InitAssignPaintables();
		StartCoroutine(InitAssignMaterials());
	}

	private void InitAssignPaintables()
	{
		foreach (Transform item in paintablesRootOBJ.transform)
		{
			item.gameObject.AddComponent<Paintable>();
		}
	}

	private IEnumerator InitAssignMaterials()
	{
		yield return new WaitForSeconds(8.5f);
		for (int i = 0; i < paintablesValuesArray.Length; i++)
		{
			string text = paintablesValuesArray[i];
			if (text == "")
			{
				continue;
			}
			if ((bool)paintablesRootOBJ.transform.GetChild(i).gameObject)
			{
				GameObject gameObject = paintablesRootOBJ.transform.GetChild(i).gameObject;
				string[] array = text.Split("|");
				for (int j = 0; j < array.Length; j++)
				{
					string text2 = array[j];
					if (!(text2 == ""))
					{
						if (!gameObject.transform.GetChild(j))
						{
							break;
						}
						string[] array2 = text2.Split("_");
						int index = int.Parse(array2[0]);
						if (!materialsDataRootOBJ.transform.GetChild(index))
						{
							break;
						}
						int num = int.Parse(array2[1]);
						MeshRenderer component = gameObject.transform.GetChild(j).GetComponent<MeshRenderer>();
						component.material = materialsDataRootOBJ.transform.GetChild(index).GetComponent<PaintableData>().material;
						if (num > 0 && num < mainPaintableData.ColorArray.Length)
						{
							component.material.SetColor("_BaseColor", mainPaintableData.ColorArray[num]);
						}
					}
				}
				yield return null;
				continue;
			}
			yield return null;
			break;
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdUpdateSingleParentMaterial(int parentIndex, int particularOBJIndex, int materialIndex, int colorIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(parentIndex);
		writer.WriteInt(particularOBJIndex);
		writer.WriteInt(materialIndex);
		writer.WriteInt(colorIndex);
		SendCommandInternal("System.Void PaintablesManager::CmdUpdateSingleParentMaterial(System.Int32,System.Int32,System.Int32,System.Int32)", 1648917459, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateSingleParentMaterial(string stringValue, int parentIndex, int particularOBJIndex, int materialIndex, int colorIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(stringValue);
		writer.WriteInt(parentIndex);
		writer.WriteInt(particularOBJIndex);
		writer.WriteInt(materialIndex);
		writer.WriteInt(colorIndex);
		SendRPCInternal("System.Void PaintablesManager::RpcUpdateSingleParentMaterial(System.String,System.Int32,System.Int32,System.Int32,System.Int32)", -59225074, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void UpdateDecorationMesh(MeshRenderer mRenderer, int materialIndex, int colorIndex)
	{
		mRenderer.material = materialsDataRootOBJ.transform.GetChild(materialIndex).GetComponent<PaintableData>().material;
		if (colorIndex > 0 && colorIndex < mainPaintableData.ColorArray.Length)
		{
			mRenderer.material.SetColor("_BaseColor", mainPaintableData.ColorArray[colorIndex]);
		}
		else
		{
			mRenderer.material.SetColor("_BaseColor", materialsDataRootOBJ.transform.GetChild(materialIndex).GetComponent<PaintableData>().ColorArray[0]);
		}
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdUpdateSingleParentMaterial__Int32__Int32__Int32__Int32(int parentIndex, int particularOBJIndex, int materialIndex, int colorIndex)
	{
		if (!paintablesRootOBJ.transform.GetChild(parentIndex).gameObject || parentIndex >= paintablesValuesArray.Length)
		{
			return;
		}
		GameObject gameObject = paintablesRootOBJ.transform.GetChild(parentIndex).gameObject;
		StringBuilder stringBuilder = new StringBuilder();
		string text;
		if (paintablesValuesArray[parentIndex] == "")
		{
			for (int i = 0; i < gameObject.transform.childCount - 1; i++)
			{
				stringBuilder.Append("|");
			}
			text = stringBuilder.ToString();
		}
		else
		{
			text = paintablesValuesArray[parentIndex];
		}
		StringBuilder stringBuilder2 = new StringBuilder();
		string[] array = text.Split("|");
		for (int j = 0; j < array.Length; j++)
		{
			if (j == particularOBJIndex)
			{
				string value = materialIndex + "_" + colorIndex;
				stringBuilder2.Append(value);
			}
			else
			{
				stringBuilder2.Append(array[j]);
			}
			if (j != array.Length - 1)
			{
				stringBuilder2.Append("|");
			}
		}
		paintablesValuesArray[parentIndex] = stringBuilder2.ToString();
		RpcUpdateSingleParentMaterial(stringBuilder2.ToString(), parentIndex, particularOBJIndex, materialIndex, colorIndex);
	}

	protected static void InvokeUserCode_CmdUpdateSingleParentMaterial__Int32__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUpdateSingleParentMaterial called on client.");
		}
		else
		{
			((PaintablesManager)obj).UserCode_CmdUpdateSingleParentMaterial__Int32__Int32__Int32__Int32(reader.ReadInt(), reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcUpdateSingleParentMaterial__String__Int32__Int32__Int32__Int32(string stringValue, int parentIndex, int particularOBJIndex, int materialIndex, int colorIndex)
	{
		if (!base.isServer)
		{
			paintablesValuesArray[parentIndex] = stringValue;
		}
		MeshRenderer component = paintablesRootOBJ.transform.GetChild(parentIndex).gameObject.transform.GetChild(particularOBJIndex).GetComponent<MeshRenderer>();
		component.material = materialsDataRootOBJ.transform.GetChild(materialIndex).GetComponent<PaintableData>().material;
		if (colorIndex > 0 && colorIndex < mainPaintableData.ColorArray.Length)
		{
			component.material.SetColor("_BaseColor", mainPaintableData.ColorArray[colorIndex]);
		}
		else
		{
			component.material.SetColor("_BaseColor", materialsDataRootOBJ.transform.GetChild(materialIndex).GetComponent<PaintableData>().ColorArray[0]);
		}
	}

	protected static void InvokeUserCode_RpcUpdateSingleParentMaterial__String__Int32__Int32__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateSingleParentMaterial called on server.");
		}
		else
		{
			((PaintablesManager)obj).UserCode_RpcUpdateSingleParentMaterial__String__Int32__Int32__Int32__Int32(reader.ReadString(), reader.ReadInt(), reader.ReadInt(), reader.ReadInt(), reader.ReadInt());
		}
	}

	static PaintablesManager()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(PaintablesManager), "System.Void PaintablesManager::CmdUpdateSingleParentMaterial(System.Int32,System.Int32,System.Int32,System.Int32)", InvokeUserCode_CmdUpdateSingleParentMaterial__Int32__Int32__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(PaintablesManager), "System.Void PaintablesManager::RpcUpdateSingleParentMaterial(System.String,System.Int32,System.Int32,System.Int32,System.Int32)", InvokeUserCode_RpcUpdateSingleParentMaterial__String__Int32__Int32__Int32__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.String[](writer, paintablesValuesArray);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.String[](writer, paintablesValuesArray);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref paintablesValuesArray, null, GeneratedNetworkCode._Read_System.String[](reader));
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref paintablesValuesArray, null, GeneratedNetworkCode._Read_System.String[](reader));
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ParticleScaleAdjust
using UnityEngine;

public class ParticleScaleAdjust : MonoBehaviour
{
	public ParticleSystem[] particleSystems;

	private float gameObjectScaleY;

	private void Start()
	{
		gameObjectScaleY = base.transform.localScale.y;
		ScaleParticles();
	}

	private void ScaleParticles()
	{
		ParticleSystem[] array = particleSystems;
		foreach (ParticleSystem obj in array)
		{
			ParticleSystem.MainModule main = obj.main;
			main.gravityModifierMultiplier *= gameObjectScaleY;
			obj.Simulate(0f, withChildren: true, restart: true);
			obj.Play();
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PathType
public enum PathType
{
	PeoplePath,
	AudiencePath
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PeopleController
using UnityEngine;

public class PeopleController : MonoBehaviour
{
	[HideInInspector]
	public float timer;

	[HideInInspector]
	public string[] animNames;

	[HideInInspector]
	public float damping;

	[HideInInspector]
	public Transform target;

	private void Start()
	{
		Tick();
	}

	private void Tick()
	{
		timer = 0f;
		int num = Random.Range(0, animNames.Length);
		SetAnimClip(animNames[num]);
		timer = Random.Range(3f, 5f);
	}

	public void SetTarget(Vector3 _target)
	{
		Vector3 worldPosition = new Vector3(_target.x, base.transform.position.y, _target.z);
		base.transform.LookAt(worldPosition);
	}

	private void Update()
	{
		if (timer >= 0f)
		{
			timer -= Time.deltaTime;
		}
		else
		{
			Tick();
		}
		if (target != null)
		{
			Vector3 forward = target.position - base.transform.position;
			forward.y = 0f;
			Quaternion b = Quaternion.LookRotation(forward);
			base.transform.rotation = Quaternion.Slerp(base.transform.rotation, b, Time.deltaTime * damping);
		}
	}

	public void SetAnimClip(string animName)
	{
		GetComponent<Animator>().CrossFade(animName, 0.1f, 0, Random.Range(0f, 1f));
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PeopleWalkPath
using System;
using System.Collections.Generic;
using UnityEngine;

public class PeopleWalkPath : WalkPath
{
	public enum EnumMove
	{
		Walk,
		Run
	}

	public enum EnumDir
	{
		Forward,
		Backward,
		HugLeft,
		HugRight,
		WeaveLeft,
		WeaveRight
	}

	[HideInInspector]
	[Tooltip("Type of movement / Тип движения")]
	[SerializeField]
	private EnumMove _moveType;

	[Tooltip("Direction of movement / Направление движения. Левостороннее, правостороннее, итд.")]
	[SerializeField]
	private EnumDir direction;

	[HideInInspector]
	[Tooltip("Speed of walk / Скорость ходьбы")]
	[SerializeField]
	private float walkSpeed = 1f;

	[HideInInspector]
	[Tooltip("Speed of run / Скорость бега")]
	[SerializeField]
	private float runSpeed = 4f;

	[HideInInspector]
	public bool isWalk;

	[HideInInspector]
	[SerializeField]
	[Tooltip("Set your animation speed? / Установить свою скорость анимации?")]
	private bool _overrideDefaultAnimationMultiplier = true;

	[HideInInspector]
	[SerializeField]
	[Tooltip("Speed animation of walking / Скорость анимации ходьбы")]
	private float _customWalkAnimationMultiplier = 1.1f;

	[HideInInspector]
	[SerializeField]
	[Tooltip("Running animation speed / Скорость анимации бега")]
	private float _customRunAnimationMultiplier = 0.3f;

	public override void DrawCurved(bool withDraw)
	{
		if (numberOfWays < 1)
		{
			numberOfWays = 1;
		}
		if (lineSpacing < 0.6f)
		{
			lineSpacing = 0.6f;
		}
		_forward = new bool[numberOfWays];
		isWalk = _moveType.ToString() == "Walk";
		for (int i = 0; i < numberOfWays; i++)
		{
			if (direction.ToString() == "Forward")
			{
				_forward[i] = true;
			}
			else if (direction.ToString() == "Backward")
			{
				_forward[i] = false;
			}
			else if (direction.ToString() == "HugLeft")
			{
				if ((i + 2) % 2 == 0)
				{
					_forward[i] = true;
				}
				else
				{
					_forward[i] = false;
				}
			}
			else if (direction.ToString() == "HugRight")
			{
				if ((i + 2) % 2 == 0)
				{
					_forward[i] = false;
				}
				else
				{
					_forward[i] = true;
				}
			}
			else if (direction.ToString() == "WeaveLeft")
			{
				if (i == 1 || i == 2 || (i - 1) % 4 == 0 || (i - 2) % 4 == 0)
				{
					_forward[i] = false;
				}
				else
				{
					_forward[i] = true;
				}
			}
			else if (direction.ToString() == "WeaveRight")
			{
				if (i == 1 || i == 2 || (i - 1) % 4 == 0 || (i - 2) % 4 == 0)
				{
					_forward[i] = true;
				}
				else
				{
					_forward[i] = false;
				}
			}
		}
		if (pathPoint.Count < 2)
		{
			return;
		}
		points = new Vector3[numberOfWays, pathPoint.Count + 2];
		pointLength[0] = pathPoint.Count + 2;
		for (int j = 0; j < pathPointTransform.Count; j++)
		{
			Vector3 vector;
			Vector3 vector2;
			if (j == 0)
			{
				vector = ((!loopPath) ? Vector3.zero : (pathPointTransform[pathPointTransform.Count - 1].transform.position - pathPointTransform[j].transform.position));
				vector2 = pathPointTransform[j].transform.position - pathPointTransform[j + 1].transform.position;
			}
			else if (j == pathPointTransform.Count - 1)
			{
				vector = pathPointTransform[j - 1].transform.position - pathPointTransform[j].transform.position;
				vector2 = ((!loopPath) ? Vector3.zero : (pathPointTransform[j].transform.position - pathPointTransform[0].transform.position));
			}
			else
			{
				vector = pathPointTransform[j - 1].transform.position - pathPointTransform[j].transform.position;
				vector2 = pathPointTransform[j].transform.position - pathPointTransform[j + 1].transform.position;
			}
			Vector3 vector3 = Vector3.Normalize(Quaternion.Euler(0f, 90f, 0f) * (vector + vector2));
			points[0, j + 1] = ((numberOfWays % 2 == 1) ? pathPointTransform[j].transform.position : (pathPointTransform[j].transform.position + vector3 * lineSpacing / 2f));
			if (numberOfWays > 1)
			{
				points[1, j + 1] = points[0, j + 1] - vector3 * lineSpacing;
			}
			for (int k = 1; k < numberOfWays; k++)
			{
				points[k, j + 1] = points[0, j + 1] + vector3 * lineSpacing * (float)Math.Pow(-1.0, k) * ((k + 1) / 2);
			}
		}
		for (int l = 0; l < numberOfWays; l++)
		{
			points[l, 0] = points[l, 1];
			points[l, pointLength[0] - 1] = points[l, pointLength[0] - 2];
		}
		if (!withDraw)
		{
			return;
		}
		for (int m = 0; m < numberOfWays; m++)
		{
			if (loopPath)
			{
				Gizmos.color = (_forward[m] ? Color.green : Color.red);
				Gizmos.DrawLine(points[m, 0], points[m, pathPoint.Count]);
			}
			for (int n = 1; n < pathPoint.Count; n++)
			{
				Gizmos.color = (_forward[m] ? Color.green : Color.red);
				Gizmos.DrawLine(points[m, n + 1], points[m, n]);
			}
		}
	}

	public override void SpawnOnePeople(int w, bool forward, float walkSpeed, float runSpeed)
	{
		int num = UnityEngine.Random.Range(0, peoplePrefabs.Length);
		GameObject gameObject = base.gameObject;
		gameObject = (forward ? UnityEngine.Object.Instantiate(peoplePrefabs[num], points[w, 1], Quaternion.identity) : UnityEngine.Object.Instantiate(peoplePrefabs[num], points[w, pointLength[0] - 2], Quaternion.identity));
		MovePath movePath = gameObject.AddComponent<MovePath>();
		movePath.randXFinish = UnityEngine.Random.Range(0f - randXPos, randXPos);
		movePath.randZFinish = UnityEngine.Random.Range(0f - randZPos, randZPos);
		gameObject.transform.parent = par.transform;
		movePath.walkPath = base.gameObject;
		string anim = ((!isWalk) ? "run" : "walk");
		movePath.InitializeAnimation(_overrideDefaultAnimationMultiplier, _customWalkAnimationMultiplier, _customRunAnimationMultiplier);
		if (!forward)
		{
			movePath.MyStart(w, pointLength[0] - 2, anim, loopPath, forward, walkSpeed, runSpeed);
			gameObject.transform.LookAt(points[w, pointLength[0] - 3]);
		}
		else
		{
			movePath.MyStart(w, 1, anim, loopPath, forward, walkSpeed, runSpeed);
			gameObject.transform.LookAt(points[w, 2]);
		}
	}

	public override void SpawnPeople()
	{
		List<GameObject> list = new List<GameObject>(peoplePrefabs);
		for (int num = list.Count - 1; num >= 0; num--)
		{
			if (list[num] == null)
			{
				list.RemoveAt(num);
			}
		}
		peoplePrefabs = list.ToArray();
		if (points == null)
		{
			DrawCurved(withDraw: false);
		}
		if (par == null)
		{
			par = new GameObject();
			par.transform.parent = base.gameObject.transform;
			par.name = "people";
		}
		int num2 = (loopPath ? (pointLength[0] - 1) : (pointLength[0] - 2));
		if (num2 < 2)
		{
			return;
		}
		int num3 = (loopPath ? (pointLength[0] - 1) : (pointLength[0] - 2));
		for (int i = 0; i < numberOfWays; i++)
		{
			_distances = new float[num3];
			float num4 = 0f;
			for (int j = 1; j < num3; j++)
			{
				num4 += ((!loopPath || j != num3 - 1) ? (points[i, j + 1] - points[i, j]) : (points[i, 1] - points[i, num3])).magnitude;
				_distances[j] = num4;
			}
			bool forward = false;
			switch (direction.ToString())
			{
			case "Forward":
				forward = true;
				break;
			case "Backward":
				forward = false;
				break;
			case "HugLeft":
				forward = (i + 2) % 2 == 0;
				break;
			case "HugRight":
				forward = (i + 2) % 2 != 0;
				break;
			case "WeaveLeft":
				forward = i != 1 && i != 2 && (i - 1) % 4 != 0 && (i - 2) % 4 != 0;
				break;
			case "WeaveRight":
				forward = i == 1 || i == 2 || (i - 1) % 4 == 0 || (i - 2) % 4 == 0;
				break;
			}
			int num5 = Mathf.FloorToInt(Density * num4 / _minimalObjectLength);
			float num6 = _minimalObjectLength + (num4 - (float)num5 * _minimalObjectLength) / (float)num5;
			int[] randomPrefabIndexes = CommonUtils.GetRandomPrefabIndexes(num5, ref peoplePrefabs);
			Vector3[] array = new Vector3[_distances.Length];
			for (int k = 1; k < _distances.Length; k++)
			{
				array[k - 1] = points[i, k];
			}
			array[_distances.Length - 1] = (loopPath ? points[i, 1] : points[i, _distances.Length]);
			for (int l = 0; l < num5; l++)
			{
				GameObject gameObject = base.gameObject;
				float num7 = UnityEngine.Random.Range((0f - num6) / 3f, num6 / 3f) + (float)i * num6;
				float distance = (float)(l + 1) * num6 + num7;
				Vector3 routePosition = GetRoutePosition(array, distance, num3, loopPath);
				float num8 = UnityEngine.Random.Range(0f - randXPos, randXPos);
				float num9 = UnityEngine.Random.Range(0f - randZPos, randZPos);
				routePosition = new Vector3(routePosition.x + num8, routePosition.y, routePosition.z + num9);
				Vector3 origin = new Vector3(routePosition.x, routePosition.y + 10000f, routePosition.z);
				RaycastHit[] array2 = Physics.RaycastAll(origin, Vector3.down, float.PositiveInfinity);
				float num10 = 0f;
				int num11 = 0;
				origin = new Vector3(routePosition.x, routePosition.y + 10000f, routePosition.z);
				array2 = Physics.RaycastAll(origin, Vector3.down, float.PositiveInfinity);
				for (int m = 0; m < array2.Length; m++)
				{
					if (num10 < Vector3.Distance(array2[0].point, origin))
					{
						num11 = m;
						num10 = Vector3.Distance(array2[0].point, origin);
					}
				}
				if (array2.Length != 0)
				{
					routePosition.y = array2[num11].point.y;
				}
				gameObject = UnityEngine.Object.Instantiate(peoplePrefabs[randomPrefabIndexes[l]], routePosition, Quaternion.identity);
				MovePath movePath = gameObject.AddComponent<MovePath>();
				movePath.randXFinish = num8;
				movePath.randZFinish = num9;
				gameObject.transform.parent = par.transform;
				movePath.walkPath = base.gameObject;
				movePath.MyStart(anim: (!isWalk) ? "run" : "walk", _w: i, _i: GetRoutePoint((float)(l + 1) * num6 + num7, i, num3, forward, loopPath), _loop: loopPath, _forward: forward, _walkSpeed: walkSpeed, _runSpeed: runSpeed);
				movePath.InitializeAnimation(_overrideDefaultAnimationMultiplier, _customWalkAnimationMultiplier, _customRunAnimationMultiplier);
				movePath.SetLookPosition();
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PictureFrameBehaviour
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;

public class PictureFrameBehaviour : NetworkBehaviour
{
	[SyncVar]
	public int defaultPaintingIndex;

	[SyncVar]
	public Vector2 pictureSize;

	[SyncVar]
	public string pictureURL;

	[SyncVar]
	public bool restrictURLInPublicGames;

	public MeshRenderer mRendererComponent;

	public GameObject settingsCanvasOBJ;

	public GameObject activationCanvas;

	public GameObject DLCBlockOBJ;

	public Button URLButton;

	public bool isAPictureFrame;

	public TextMeshProUGUI paintingIndexField;

	public TextMeshProUGUI xSizeField;

	public TextMeshProUGUI ySizeField;

	public int NetworkdefaultPaintingIndex
	{
		get
		{
			return defaultPaintingIndex;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref defaultPaintingIndex, 1uL, null);
		}
	}

	public Vector2 NetworkpictureSize
	{
		get
		{
			return pictureSize;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref pictureSize, 2uL, null);
		}
	}

	public string NetworkpictureURL
	{
		get
		{
			return pictureURL;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref pictureURL, 4uL, null);
		}
	}

	public bool NetworkrestrictURLInPublicGames
	{
		get
		{
			return restrictURLInPublicGames;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref restrictURLInPublicGames, 8uL, null);
		}
	}

	public override void OnStartClient()
	{
		if (base.isServer)
		{
			NetworkrestrictURLInPublicGames = GameCanvas.Instance.isPGame;
		}
		if (pictureURL != "" && !restrictURLInPublicGames)
		{
			StartCoroutine(DownloadAndSetImage(pictureURL));
		}
		else
		{
			SetDefaultImage(defaultPaintingIndex);
		}
		if (isAPictureFrame)
		{
			SetPictureSize(pictureSize.x, pictureSize.y);
		}
		if (GameCanvas.Instance.isCool)
		{
			DLCBlockOBJ.SetActive(value: false);
			URLButton.interactable = true;
		}
	}

	private IEnumerator DownloadAndSetImage(string urlString)
	{
		yield return new WaitForSeconds(Random.Range(8f, 10f));
		UnityWebRequest request = UnityWebRequestTexture.GetTexture(urlString);
		yield return request.SendWebRequest();
		if (request.result != UnityWebRequest.Result.ConnectionError && request.result != UnityWebRequest.Result.ProtocolError)
		{
			if (isAPictureFrame)
			{
				mRendererComponent.material.mainTexture = ((DownloadHandlerTexture)request.downloadHandler).texture;
			}
			else
			{
				mRendererComponent.material.SetTexture("_MainTexture", ((DownloadHandlerTexture)request.downloadHandler).texture);
			}
		}
	}

	public void RequestURLChange(string URLstring)
	{
		if (!(URLstring == "") && !GameCanvas.Instance.isPGame && !URLstring.Contains("|") && !restrictURLInPublicGames && GameCanvas.Instance.isCool)
		{
			CmdChangeURL(URLstring);
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdChangeURL(string URLstring)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(URLstring);
		SendCommandInternal("System.Void PictureFrameBehaviour::CmdChangeURL(System.String)", -1283586470, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator ServerSetImage(string urlString)
	{
		UnityWebRequest request = UnityWebRequestTexture.GetTexture(urlString);
		yield return request.SendWebRequest();
		if (request.result != UnityWebRequest.Result.ConnectionError && request.result != UnityWebRequest.Result.ProtocolError)
		{
			NetworkpictureURL = urlString;
			if (isAPictureFrame)
			{
				mRendererComponent.material.mainTexture = ((DownloadHandlerTexture)request.downloadHandler).texture;
			}
			else
			{
				mRendererComponent.material.SetTexture("_MainTexture", ((DownloadHandlerTexture)request.downloadHandler).texture);
			}
			RpcChangeURL(urlString);
		}
	}

	[ClientRpc]
	private void RpcChangeURL(string URLstring)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(URLstring);
		SendRPCInternal("System.Void PictureFrameBehaviour::RpcChangeURL(System.String)", 524653605, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator ClientSetImage(string urlString)
	{
		UnityWebRequest request = UnityWebRequestTexture.GetTexture(urlString);
		yield return request.SendWebRequest();
		if (request.result != UnityWebRequest.Result.ConnectionError && request.result != UnityWebRequest.Result.ProtocolError)
		{
			mRendererComponent.material.mainTexture = ((DownloadHandlerTexture)request.downloadHandler).texture;
			RpcChangeURL(urlString);
		}
	}

	public void SetPictureSize(bool addSize, bool whichSize)
	{
		float num = pictureSize.x;
		float num2 = pictureSize.y;
		if (addSize)
		{
			if (whichSize)
			{
				num += 0.25f;
			}
			else
			{
				num2 += 0.25f;
			}
		}
		else if (whichSize)
		{
			num -= 0.25f;
		}
		else
		{
			num2 -= 0.25f;
		}
		num = Mathf.Clamp(num, 1f, 8f);
		num2 = Mathf.Clamp(num2, 1f, 4.5f);
		CmdSetPictureSize(num, num2);
	}

	[Command(requiresAuthority = false)]
	private void CmdSetPictureSize(float xSize, float ySize)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(xSize);
		writer.WriteFloat(ySize);
		SendCommandInternal("System.Void PictureFrameBehaviour::CmdSetPictureSize(System.Single,System.Single)", 236356124, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcSetPictureSize(float xSize, float ySize)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(xSize);
		writer.WriteFloat(ySize);
		SendRPCInternal("System.Void PictureFrameBehaviour::RpcSetPictureSize(System.Single,System.Single)", 789904929, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SetPictureSize(float xSize, float ySize)
	{
		xSize = Mathf.Round(xSize * 100f) / 100f;
		ySize = Mathf.Round(ySize * 100f) / 100f;
		xSizeField.text = xSize.ToString();
		ySizeField.text = ySize.ToString();
		mRendererComponent.transform.localScale = new Vector3(xSize, ySize, 1f);
		GetComponent<BoxCollider>().size = new Vector3(xSize, ySize, 0.05f);
		GetComponent<BoxCollider>().center = new Vector3((0f - xSize) / 2f, ySize / 2f, 0.025f);
	}

	public void ChooseDefaultIndex(bool add)
	{
		if (pictureURL != "")
		{
			return;
		}
		int num = defaultPaintingIndex;
		int num2 = ((!isAPictureFrame) ? GameCanvas.Instance.adsTexturesArray.Length : GameCanvas.Instance.defaultPaintingsArray.Length);
		if (add)
		{
			num++;
			if (num >= num2)
			{
				num = 0;
			}
		}
		else
		{
			num--;
			if (num < 0)
			{
				num = num2 - 1;
			}
		}
		CmdChangeDefaultImage(num);
	}

	[Command(requiresAuthority = false)]
	private void CmdChangeDefaultImage(int newIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(newIndex);
		SendCommandInternal("System.Void PictureFrameBehaviour::CmdChangeDefaultImage(System.Int32)", 1189358442, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcChangeDefaultImage(int newIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(newIndex);
		SendRPCInternal("System.Void PictureFrameBehaviour::RpcChangeDefaultImage(System.Int32)", 1129359129, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SetDefaultImage(int newIndex)
	{
		if (isAPictureFrame)
		{
			mRendererComponent.material.mainTexture = GameCanvas.Instance.defaultPaintingsArray[newIndex];
		}
		else
		{
			mRendererComponent.material.SetTexture("_MainTexture", GameCanvas.Instance.adsTexturesArray[newIndex]);
		}
		paintingIndexField.text = newIndex.ToString();
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdChangeURL__String(string URLstring)
	{
		if (!(URLstring == "") && !GameCanvas.Instance.isPGame)
		{
			StartCoroutine(ServerSetImage(URLstring));
		}
	}

	protected static void InvokeUserCode_CmdChangeURL__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeURL called on client.");
		}
		else
		{
			((PictureFrameBehaviour)obj).UserCode_CmdChangeURL__String(reader.ReadString());
		}
	}

	protected void UserCode_RpcChangeURL__String(string URLstring)
	{
		if (!base.isServer)
		{
			StartCoroutine(ClientSetImage(URLstring));
		}
	}

	protected static void InvokeUserCode_RpcChangeURL__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcChangeURL called on server.");
		}
		else
		{
			((PictureFrameBehaviour)obj).UserCode_RpcChangeURL__String(reader.ReadString());
		}
	}

	protected void UserCode_CmdSetPictureSize__Single__Single(float xSize, float ySize)
	{
		xSize = Mathf.Clamp(xSize, 1f, 8f);
		ySize = Mathf.Clamp(ySize, 1f, 4.5f);
		NetworkpictureSize = new Vector2(xSize, ySize);
		RpcSetPictureSize(xSize, ySize);
	}

	protected static void InvokeUserCode_CmdSetPictureSize__Single__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetPictureSize called on client.");
		}
		else
		{
			((PictureFrameBehaviour)obj).UserCode_CmdSetPictureSize__Single__Single(reader.ReadFloat(), reader.ReadFloat());
		}
	}

	protected void UserCode_RpcSetPictureSize__Single__Single(float xSize, float ySize)
	{
		SetPictureSize(xSize, ySize);
	}

	protected static void InvokeUserCode_RpcSetPictureSize__Single__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSetPictureSize called on server.");
		}
		else
		{
			((PictureFrameBehaviour)obj).UserCode_RpcSetPictureSize__Single__Single(reader.ReadFloat(), reader.ReadFloat());
		}
	}

	protected void UserCode_CmdChangeDefaultImage__Int32(int newIndex)
	{
		int num = ((!isAPictureFrame) ? GameCanvas.Instance.adsTexturesArray.Length : GameCanvas.Instance.defaultPaintingsArray.Length);
		if (newIndex >= 0 && newIndex < num)
		{
			NetworkdefaultPaintingIndex = newIndex;
			RpcChangeDefaultImage(newIndex);
		}
	}

	protected static void InvokeUserCode_CmdChangeDefaultImage__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeDefaultImage called on client.");
		}
		else
		{
			((PictureFrameBehaviour)obj).UserCode_CmdChangeDefaultImage__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcChangeDefaultImage__Int32(int newIndex)
	{
		SetDefaultImage(newIndex);
	}

	protected static void InvokeUserCode_RpcChangeDefaultImage__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcChangeDefaultImage called on server.");
		}
		else
		{
			((PictureFrameBehaviour)obj).UserCode_RpcChangeDefaultImage__Int32(reader.ReadInt());
		}
	}

	static PictureFrameBehaviour()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(PictureFrameBehaviour), "System.Void PictureFrameBehaviour::CmdChangeURL(System.String)", InvokeUserCode_CmdChangeURL__String, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(PictureFrameBehaviour), "System.Void PictureFrameBehaviour::CmdSetPictureSize(System.Single,System.Single)", InvokeUserCode_CmdSetPictureSize__Single__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(PictureFrameBehaviour), "System.Void PictureFrameBehaviour::CmdChangeDefaultImage(System.Int32)", InvokeUserCode_CmdChangeDefaultImage__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(PictureFrameBehaviour), "System.Void PictureFrameBehaviour::RpcChangeURL(System.String)", InvokeUserCode_RpcChangeURL__String);
		RemoteProcedureCalls.RegisterRpc(typeof(PictureFrameBehaviour), "System.Void PictureFrameBehaviour::RpcSetPictureSize(System.Single,System.Single)", InvokeUserCode_RpcSetPictureSize__Single__Single);
		RemoteProcedureCalls.RegisterRpc(typeof(PictureFrameBehaviour), "System.Void PictureFrameBehaviour::RpcChangeDefaultImage(System.Int32)", InvokeUserCode_RpcChangeDefaultImage__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(defaultPaintingIndex);
			writer.WriteVector2(pictureSize);
			writer.WriteString(pictureURL);
			writer.WriteBool(restrictURLInPublicGames);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(defaultPaintingIndex);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteVector2(pictureSize);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteString(pictureURL);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteBool(restrictURLInPublicGames);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref defaultPaintingIndex, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref pictureSize, null, reader.ReadVector2());
			GeneratedSyncVarDeserialize(ref pictureURL, null, reader.ReadString());
			GeneratedSyncVarDeserialize(ref restrictURLInPublicGames, null, reader.ReadBool());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref defaultPaintingIndex, null, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref pictureSize, null, reader.ReadVector2());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref pictureURL, null, reader.ReadString());
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref restrictURLInPublicGames, null, reader.ReadBool());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PinpointShelf
using System.Collections.Generic;
using StarterAssets;
using UnityEngine;

public class PinpointShelf : MonoBehaviour
{
	public int currentProductID = -10;

	public GameObject pinpointerPrefabOBJ;

	private bool pinpointersHaveBeenGenerated;

	private List<GameObject> currentPinpointersList = new List<GameObject>();

	private List<GameObject> poolingList = new List<GameObject>();

	private void Update()
	{
		if (currentProductID >= 0)
		{
			int equippedItem = FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem;
			if (!pinpointersHaveBeenGenerated && equippedItem == 1)
			{
				GeneratePinpointers();
			}
			if (equippedItem != 1)
			{
				DeactivatePinpointers();
			}
		}
	}

	private void GeneratePinpointers()
	{
		pinpointersHaveBeenGenerated = true;
		currentPinpointersList.Clear();
		int num = 0;
		Transform[] array = new Transform[2]
		{
			GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(0),
			GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(1)
		};
		float[] array2 = new float[2] { 2.5f, 3.7f };
		for (int i = 0; i < array.Length; i++)
		{
			Transform obj = array[i];
			float y = array2[i];
			foreach (Transform item in obj)
			{
				int[] productInfoArray = item.GetComponent<Data_Container>().productInfoArray;
				int num2 = productInfoArray.Length / 2;
				for (int j = 0; j < num2; j++)
				{
					if (productInfoArray[j * 2] == currentProductID)
					{
						GameObject gameObject;
						if (num < poolingList.Count)
						{
							gameObject = poolingList[num];
							gameObject.SetActive(value: true);
						}
						else
						{
							gameObject = Object.Instantiate(pinpointerPrefabOBJ, base.transform.parent);
							poolingList.Add(gameObject);
						}
						gameObject.transform.position = new Vector3(item.transform.position.x, y, item.transform.position.z);
						currentPinpointersList.Add(gameObject);
						num++;
						break;
					}
				}
			}
		}
	}

	private void DeactivatePinpointers()
	{
		foreach (GameObject currentPinpointers in currentPinpointersList)
		{
			currentPinpointers.SetActive(value: false);
		}
		currentProductID = -10;
		pinpointersHaveBeenGenerated = false;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PinpointShelfFromTray
using System.Collections.Generic;
using StarterAssets;
using UnityEngine;

public class PinpointShelfFromTray : MonoBehaviour
{
	public int currentProductID = -10;

	private int oldProductID = -10;

	public GameObject pinpointerPrefabOBJ;

	private List<GameObject> currentPinpointersList = new List<GameObject>();

	private List<GameObject> poolingList = new List<GameObject>();

	private void Update()
	{
		int equippedItem = FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem;
		if (equippedItem == 9 && oldProductID != currentProductID)
		{
			oldProductID = currentProductID;
			GeneratePinpointers();
		}
		if (equippedItem != 9)
		{
			DeactivatePinpointers();
		}
	}

	private void GeneratePinpointers()
	{
		foreach (GameObject currentPinpointers in currentPinpointersList)
		{
			currentPinpointers.SetActive(value: false);
		}
		if (currentProductID < 0)
		{
			return;
		}
		currentPinpointersList.Clear();
		int num = 0;
		Transform[] array = new Transform[2]
		{
			GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(0),
			GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(1)
		};
		float[] array2 = new float[2] { 2.5f, 3.7f };
		for (int i = 0; i < array.Length; i++)
		{
			Transform obj = array[i];
			float y = array2[i];
			foreach (Transform item in obj)
			{
				int[] productInfoArray = item.GetComponent<Data_Container>().productInfoArray;
				int num2 = productInfoArray.Length / 2;
				for (int j = 0; j < num2; j++)
				{
					if (productInfoArray[j * 2] == currentProductID && productInfoArray[j * 2 + 1] > 0)
					{
						GameObject gameObject;
						if (num < poolingList.Count)
						{
							gameObject = poolingList[num];
							gameObject.SetActive(value: true);
						}
						else
						{
							gameObject = Object.Instantiate(pinpointerPrefabOBJ, base.transform.parent);
							poolingList.Add(gameObject);
						}
						gameObject.transform.position = new Vector3(item.transform.position.x, y, item.transform.position.z);
						currentPinpointersList.Add(gameObject);
						num++;
						break;
					}
				}
			}
		}
	}

	public void DeactivatePinpointers()
	{
		foreach (GameObject currentPinpointers in currentPinpointersList)
		{
			currentPinpointers.SetActive(value: false);
		}
		currentProductID = -10;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayerCrouch
using System.Collections;
using Rewired;
using StarterAssets;
using UnityEngine;

public class PlayerCrouch : MonoBehaviour
{
	public GameObject equippedParentOBJ;

	private CharacterController m_CharacterController;

	private FirstPersonController pController;

	private bool m_Crouch;

	private bool canCrouch;

	private float m_OriginalHeight;

	private float m_OriginalCenter;

	private GameObject viewpointOBJ;

	private float viewpointStandHeight;

	private Player MainPlayer;

	private int playerId;

	private const float k_Half = 0.5f;

	private const float k_HeightReduction = 0.7f;

	private bool canStand;

	private void Start()
	{
		m_CharacterController = GetComponent<CharacterController>();
		m_OriginalHeight = m_CharacterController.height;
		m_OriginalCenter = m_CharacterController.center.y;
		canCrouch = true;
		MainPlayer = ReInput.players.GetPlayer(playerId);
		viewpointOBJ = base.transform.Find("Viewpoint_Pivot/Viewpoint").gameObject;
		viewpointStandHeight = viewpointOBJ.transform.localPosition.y;
		pController = GetComponent<FirstPersonController>();
	}

	private void Update()
	{
		if (MainPlayer.GetButtonDown("Crouch") && pController.allowPlayerInput && !Camera.main.GetComponent<CustomCameraController>().inEmoteEvent)
		{
			m_Crouch = !m_Crouch;
			CheckCrouch();
		}
	}

	private void CheckCrouch()
	{
		if (!canCrouch)
		{
			return;
		}
		GameObject gameObject = null;
		foreach (Transform item in base.transform)
		{
			if (item.name == "Character")
			{
				gameObject = base.transform.Find("Character").gameObject;
				break;
			}
		}
		if (gameObject == null)
		{
			return;
		}
		if (m_Crouch)
		{
			m_CharacterController.height = m_OriginalHeight * 0.7f;
			m_CharacterController.center = new Vector3(0f, m_OriginalCenter * 0.7f, 0f);
			pController.IsCrouching = true;
			GetComponent<PlayerNetwork>().ChangeCrouchValue(crouchValue: true);
			StartCoroutine(LerpFloat(gameObject, set: true));
			return;
		}
		canStand = PreventStandingInLowHeadRoom();
		if (!canStand)
		{
			m_Crouch = !m_Crouch;
			return;
		}
		m_CharacterController.height = m_OriginalHeight;
		m_CharacterController.center = new Vector3(0f, m_OriginalCenter, 0f);
		pController.IsCrouching = false;
		GetComponent<PlayerNetwork>().ChangeCrouchValue(crouchValue: false);
		StartCoroutine(LerpFloat(gameObject, set: false));
	}

	private IEnumerator LerpFloat(GameObject characterOBJ, bool set)
	{
		canCrouch = false;
		float lerpInValue = (set ? viewpointStandHeight : (viewpointStandHeight * 0.7f));
		float lerpOutValue = (set ? (viewpointStandHeight * 0.7f) : viewpointStandHeight);
		float animInValue = (set ? 0f : 1f);
		float animOutValue = (set ? 1f : 0f);
		float crouchInValue = (set ? 1f : 0.49f);
		float crouchOutValue = (set ? 0.49f : 1f);
		float elapsedTime = 0f;
		float waitTime = 0.15f;
		while (elapsedTime < waitTime)
		{
			float y = Mathf.Lerp(lerpInValue, lerpOutValue, elapsedTime / waitTime);
			float value = Mathf.Lerp(animInValue, animOutValue, elapsedTime / waitTime);
			float y2 = Mathf.Lerp(crouchInValue, crouchOutValue, elapsedTime / waitTime);
			viewpointOBJ.transform.localPosition = new Vector3(0f, y, 0f);
			characterOBJ.GetComponent<Animator>().SetFloat("CrouchFactor", value);
			equippedParentOBJ.transform.localPosition = new Vector3(0f, y2, 0.4f);
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		viewpointOBJ.transform.localPosition = new Vector3(0f, lerpOutValue, 0f);
		characterOBJ.GetComponent<Animator>().SetFloat("CrouchFactor", animOutValue);
		equippedParentOBJ.transform.localPosition = new Vector3(0f, crouchOutValue, 0.4f);
		yield return null;
		canCrouch = true;
	}

	private bool PreventStandingInLowHeadRoom()
	{
		if (Physics.SphereCast(new Ray(base.transform.position + Vector3.up * m_CharacterController.radius * 0.5f, Vector3.up), maxDistance: m_CharacterController.height - m_CharacterController.radius * 0.5f + 0.5f, radius: m_CharacterController.radius * 0.5f, layerMask: -1, queryTriggerInteraction: QueryTriggerInteraction.Ignore))
		{
			return false;
		}
		return true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayerListItem
using Steamworks;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class PlayerListItem : MonoBehaviour
{
	public GameObject playerOBJ;

	public string PlayerName;

	public int ConnectionID;

	public ulong PlayerSteamID;

	public bool AvatarReceived;

	public TextMeshProUGUI PlayerNameText;

	public RawImage PlayerIcon;

	protected Callback<AvatarImageLoaded_t> ImageLoaded;

	private void Start()
	{
		ImageLoaded = Callback<AvatarImageLoaded_t>.Create(OnImageLoaded);
	}

	private void OnImageLoaded(AvatarImageLoaded_t callback)
	{
		if (callback.m_steamID.m_SteamID == PlayerSteamID)
		{
			PlayerIcon.texture = GetSteamImageAsTexture(callback.m_iImage);
		}
	}

	private void GetPlayerIcon()
	{
		int largeFriendAvatar = SteamFriends.GetLargeFriendAvatar((CSteamID)PlayerSteamID);
		if (largeFriendAvatar != -1)
		{
			PlayerIcon.texture = GetSteamImageAsTexture(largeFriendAvatar);
		}
	}

	public void SetPlayerValues()
	{
		PlayerNameText.text = PlayerName;
		if (!AvatarReceived)
		{
			GetPlayerIcon();
		}
	}

	private Texture2D GetSteamImageAsTexture(int iImage)
	{
		Texture2D texture2D = null;
		if (SteamUtils.GetImageSize(iImage, out var pnWidth, out var pnHeight))
		{
			byte[] array = new byte[pnWidth * pnHeight * 4];
			if (SteamUtils.GetImageRGBA(iImage, array, (int)(pnWidth * pnHeight * 4)))
			{
				texture2D = new Texture2D((int)pnWidth, (int)pnHeight, TextureFormat.RGBA32, mipChain: false, linear: true);
				texture2D.LoadRawTextureData(array);
				texture2D.Apply();
			}
		}
		AvatarReceived = true;
		return texture2D;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayerNetwork
using System;
using System.Collections;
using System.Runtime.InteropServices;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.UI;

public class PlayerNetwork : NetworkBehaviour
{
	[SyncVar(hook = "OnChangeEquipment")]
	public int equippedItem;

	[SyncVar(hook = "OnChangeCharacter")]
	public int characterID;

	[SyncVar(hook = "OnChangeHat")]
	public int hatID;

	[SyncVar(hook = "OnCrouch")]
	public bool isCrouching;

	public GameObject dummyBoxPrefab;

	public GameObject[] equippedPrefabs;

	public GameObject[] playerCharacter;

	public GameObject[] hatsArray;

	public GameObject equippedParentOBJ;

	public GameObject hatSpawnspot;

	public int extraParameter1;

	public int extraParameter2;

	public string trayData;

	public int auxiliarData = -1;

	public string orderNumberData;

	public string orderCustomerNameData;

	public string orderItemsInBoxData;

	public LayerMask lMask;

	public LayerMask interactableMask;

	public LayerMask playerRaycastMask;

	private Player MainPlayer;

	private int playerId;

	public GameObject instantiatedOBJ;

	private TextMeshProUGUI canvasTMP;

	private GameObject pricingCanvas;

	private TextMeshProUGUI productNameTMP;

	private TextMeshProUGUI productBrandTMP;

	private Image productImage;

	private TextMeshProUGUI marketPriceTMP;

	private TextMeshProUGUI yourPriceTMP;

	private float pPrice;

	public int oldProductID;

	private int oldCanvasProductID;

	public GameObject hatOBJ;

	private GameObject gameCanvasProductOBJ;

	private bool dropCooldown;

	private bool backupBool;

	private bool crouchCoroutineRunning;

	private Coroutine coroutineVariable;

	public AudioClip[] pricingSoundsArray;

	public GameObject pinpointPrefabOBJ;

	public GameObject extinguisherParticlePrefabOBJ;

	private GameObject instantiatedPinpointOBJ;

	private string[] keyCodes = new string[10] { "Numpad 0", "Numpad 1", "Numpad 2", "Numpad 3", "Numpad 4", "Numpad 5", "Numpad 6", "Numpad 7", "Numpad 8", "Numpad 9" };

	private string[] poseKeyCodes = new string[10] { "NoOwo", "Dance 1", "Dance 2", "Dance 3", "Dance 4", "Dance 5", "Dance 6", "Dance 7", "Dance 8", "Dance 9" };

	public int[] posesArray = new int[10];

	private string basefloatString;

	public Action<int, int> _Mirror_SyncVarHookDelegate_equippedItem;

	public Action<int, int> _Mirror_SyncVarHookDelegate_characterID;

	public Action<int, int> _Mirror_SyncVarHookDelegate_hatID;

	public Action<bool, bool> _Mirror_SyncVarHookDelegate_isCrouching;

	public int NetworkequippedItem
	{
		get
		{
			return equippedItem;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref equippedItem, 1uL, _Mirror_SyncVarHookDelegate_equippedItem);
		}
	}

	public int NetworkcharacterID
	{
		get
		{
			return characterID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref characterID, 2uL, _Mirror_SyncVarHookDelegate_characterID);
		}
	}

	public int NetworkhatID
	{
		get
		{
			return hatID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref hatID, 4uL, _Mirror_SyncVarHookDelegate_hatID);
		}
	}

	public bool NetworkisCrouching
	{
		get
		{
			return isCrouching;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref isCrouching, 8uL, _Mirror_SyncVarHookDelegate_isCrouching);
		}
	}

	private void Start()
	{
		if (base.isLocalPlayer)
		{
			MainPlayer = ReInput.players.GetPlayer(playerId);
		}
	}

	public override void OnStartClient()
	{
		OnChangeCharacter(-1, characterID);
		OnChangeHat(-1, hatID);
		OnCrouch(oldValue: false, isCrouching);
		if (base.isLocalPlayer)
		{
			StartCoroutine(LoadSkin());
		}
	}

	private IEnumerator LoadSkin()
	{
		yield return new WaitForSeconds(8f);
		string value = FsmVariables.GlobalVariables.GetFsmString("OptionsGlobalPath").Value;
		string filepath = Application.persistentDataPath + "/" + value;
		if (ES3.KeyExists("localizationhash3", filepath))
		{
			int[] array = ES3.Load<int[]>("localizationhash3", filepath);
			posesArray = array;
		}
		if (ES3.KeyExists("localizationhash1", filepath))
		{
			int newCharacter = ES3.Load<int>("localizationhash1", filepath);
			CmdChangeCharacter(newCharacter);
		}
		yield return new WaitForSeconds(1.5f);
		if (ES3.KeyExists("localizationhash2", filepath))
		{
			int newHat = ES3.Load<int>("localizationhash2", filepath);
			CmdChangeHat(newHat);
		}
	}

	public void SavePlayerSkins()
	{
		if (base.isLocalPlayer)
		{
			string value = FsmVariables.GlobalVariables.GetFsmString("OptionsGlobalPath").Value;
			string filePath = Application.persistentDataPath + "/" + value;
			ES3.Save("localizationhash1", characterID, filePath);
			ES3.Save("localizationhash2", hatID, filePath);
			ES3.Save("localizationhash3", posesArray, filePath);
		}
	}

	private void OnChangeCharacter(int oldID, int newID)
	{
		foreach (Transform item in base.transform)
		{
			if (item.name == "Character")
			{
				UnityEngine.Object.Destroy(base.transform.Find("Character").gameObject);
			}
		}
		newID = Mathf.Clamp(newID, 0, playerCharacter.Length - 1);
		GameObject gameObject = UnityEngine.Object.Instantiate(playerCharacter[newID], base.transform);
		gameObject.transform.localPosition = Vector3.zero;
		gameObject.name = "Character";
		if (base.isLocalPlayer)
		{
			gameObject.transform.Find("CharacterMesh").GetComponent<SkinnedMeshRenderer>().shadowCastingMode = ShadowCastingMode.ShadowsOnly;
		}
		if ((bool)hatOBJ)
		{
			UnityEngine.Object.Destroy(hatOBJ);
		}
	}

	private void OnChangeHat(int oldID, int newID)
	{
		if ((bool)hatOBJ)
		{
			UnityEngine.Object.Destroy(hatOBJ);
		}
	}

	public void ChangeCrouchValue(bool crouchValue)
	{
		if (base.isOwned)
		{
			CmdCrouch(crouchValue);
		}
	}

	[Command]
	private void CmdCrouch(bool crouchValue)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(crouchValue);
		SendCommandInternal("System.Void PlayerNetwork::CmdCrouch(System.Boolean)", -96825597, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	private void OnCrouch(bool oldValue, bool newValue)
	{
		if (base.isLocalPlayer)
		{
			return;
		}
		GameObject gameObject = null;
		foreach (Transform item in base.transform)
		{
			if (item.name == "Character")
			{
				gameObject = base.transform.Find("Character").gameObject;
				break;
			}
		}
		if (!(gameObject == null))
		{
			if (crouchCoroutineRunning)
			{
				StopCoroutine(coroutineVariable);
			}
			if (newValue)
			{
				coroutineVariable = StartCoroutine(CrouchLerpCoroutine(gameObject, set: true));
			}
			else
			{
				coroutineVariable = StartCoroutine(CrouchLerpCoroutine(gameObject, set: false));
			}
		}
	}

	private IEnumerator CrouchLerpCoroutine(GameObject characterOBJ, bool set)
	{
		crouchCoroutineRunning = true;
		float animInValue = (set ? 0f : 1f);
		float animOutValue = (set ? 1f : 0f);
		float crouchInValue = (set ? 1f : 0.49f);
		float crouchOutValue = (set ? 0.49f : 1f);
		float elapsedTime = 0f;
		float waitTime = 0.15f;
		Animator charAnimator = characterOBJ.GetComponent<Animator>();
		while (elapsedTime < waitTime)
		{
			float value = Mathf.Lerp(animInValue, animOutValue, elapsedTime / waitTime);
			float y = Mathf.Lerp(crouchInValue, crouchOutValue, elapsedTime / waitTime);
			if ((bool)charAnimator)
			{
				charAnimator.SetFloat("CrouchFactor", value);
			}
			equippedParentOBJ.transform.localPosition = new Vector3(0f, y, 0.4f);
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		if ((bool)charAnimator)
		{
			characterOBJ.GetComponent<Animator>().SetFloat("CrouchFactor", animOutValue);
		}
		equippedParentOBJ.transform.localPosition = new Vector3(0f, crouchOutValue, 0.4f);
		yield return null;
		crouchCoroutineRunning = false;
	}

	private void Update()
	{
		if (hatID > 0 && !hatOBJ)
		{
			GameObject gameObject = null;
			foreach (Transform item in base.transform)
			{
				if (item.name == "Character")
				{
					gameObject = base.transform.Find("Character").gameObject;
					break;
				}
			}
			if (gameObject == null)
			{
				return;
			}
			int value = hatID;
			value = Mathf.Clamp(value, 0, hatsArray.Length - 1);
			GameObject value2 = gameObject.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("HatSpot").Value;
			hatOBJ = UnityEngine.Object.Instantiate(hatsArray[value], value2.transform);
			hatOBJ.transform.localPosition = hatOBJ.GetComponent<HatInfo>().offset;
			hatOBJ.transform.localRotation = Quaternion.Euler(hatOBJ.GetComponent<HatInfo>().rotation);
			if (base.isLocalPlayer)
			{
				hatOBJ.GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.ShadowsOnly;
				if (hatOBJ.transform.childCount > 0)
				{
					hatOBJ.transform.GetChild(0).gameObject.SetActive(value: false);
				}
			}
		}
		if (!base.isLocalPlayer)
		{
			return;
		}
		PoseBehaviour();
		if (MainPlayer.GetButtonDown("Drop Item") && equippedItem > 0)
		{
			if (dropCooldown || !FirstPersonController.Instance.allowPlayerInput)
			{
				return;
			}
			Vector3 zero = Vector3.zero;
			if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
			{
				zero = hitInfo.point + hitInfo.normal.normalized * 0.5f;
				if ((hitInfo.transform.gameObject.tag == "Interactable" && !hitInfo.transform.GetComponent<BoxData>()) || (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo2, 4f, interactableMask) && hitInfo2.transform.gameObject.tag == "Interactable"))
				{
					return;
				}
			}
			else
			{
				zero = Camera.main.transform.position + Camera.main.transform.forward * 3.5f;
			}
			if (equippedItem > 0)
			{
				StartCoroutine(DropCooldown());
			}
			switch (equippedItem)
			{
			case 15:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(15, zero, Vector3.zero);
				break;
			case 14:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(14, zero, Vector3.zero);
				break;
			case 13:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(13, zero, Vector3.zero);
				break;
			case 12:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnOrderBoxFromPlayer(zero, base.transform.rotation.eulerAngles.y, orderNumberData, orderCustomerNameData, orderItemsInBoxData);
				break;
			case 11:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(11, zero, new Vector3(0f, base.transform.rotation.eulerAngles.y, 0f));
				break;
			case 10:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(10, zero, new Vector3(180f, base.transform.rotation.eulerAngles.y, 0f));
				break;
			case 9:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnTrayFromPlayer(zero, trayData, base.transform.rotation.eulerAngles.y);
				break;
			case 8:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(8, zero, new Vector3(15f, base.transform.rotation.eulerAngles.y, 0f));
				break;
			case 7:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(7, zero, new Vector3(0f, base.transform.rotation.eulerAngles.y, 0f));
				break;
			case 6:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(6, zero, new Vector3(180f, base.transform.rotation.eulerAngles.y, 0f));
				break;
			case 5:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(5, zero, new Vector3(270f, base.transform.rotation.eulerAngles.y, 0f));
				break;
			case 3:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(3, zero, new Vector3(270f, base.transform.rotation.eulerAngles.y, 0f));
				break;
			case 2:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<NetworkSpawner>().CmdSpawnProp(2, zero, new Vector3(0f, base.transform.rotation.eulerAngles.y, 90f));
				break;
			case 1:
				CmdChangeEquippedItem(0);
				GameData.Instance.GetComponent<ManagerBlackboard>().CmdSpawnBoxFromPlayer(zero, extraParameter1, extraParameter2, base.transform.rotation.eulerAngles.y);
				break;
			default:
				MonoBehaviour.print("Equipped item error, wrong case number");
				break;
			case 0:
			case 4:
				break;
			}
		}
		if (!gameCanvasProductOBJ && (bool)GameCanvas.Instance)
		{
			gameCanvasProductOBJ = GameCanvas.Instance.transform.Find("ProductShow").gameObject;
		}
		if ((bool)gameCanvasProductOBJ && Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo3, 4f, interactableMask))
		{
			if ((bool)hitInfo3.transform.GetComponent<InteractableContainer>())
			{
				int siblingIndex = hitInfo3.transform.GetSiblingIndex();
				int num = hitInfo3.transform.parent.transform.parent.GetComponent<Data_Container>().productInfoArray[siblingIndex * 2];
				if (num < 0)
				{
					oldCanvasProductID = -2;
					gameCanvasProductOBJ.SetActive(value: false);
				}
				if (num >= 0 && oldCanvasProductID != num)
				{
					gameCanvasProductOBJ.SetActive(value: true);
					gameCanvasProductOBJ.transform.Find("Container/ProductName").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("product" + num);
					gameCanvasProductOBJ.transform.Find("Container/ProductBrand").GetComponent<TextMeshProUGUI>().text = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>().productBrand;
					gameCanvasProductOBJ.transform.Find("Container/ProductImage").GetComponent<Image>().sprite = ProductListing.Instance.productSprites[num];
					int num2 = ProductListing.Instance.productGroups[ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>().productTier];
					gameCanvasProductOBJ.transform.Find("Container").GetComponent<Image>().color = ProductListing.Instance.groupsColors[num2];
					oldCanvasProductID = num;
				}
			}
			else
			{
				oldCanvasProductID = -4;
				gameCanvasProductOBJ.SetActive(value: false);
			}
		}
		else if ((bool)gameCanvasProductOBJ)
		{
			oldCanvasProductID = -5;
			gameCanvasProductOBJ.SetActive(value: false);
		}
		if (!instantiatedOBJ)
		{
			return;
		}
		switch (equippedItem)
		{
		case 7:
		{
			float x4 = Camera.main.transform.localEulerAngles.x;
			if (x4 > 90f)
			{
				instantiatedOBJ.transform.localPosition = new Vector3(-0.39f, -0.18f, -0.015f);
				break;
			}
			x4 = Mathf.Clamp(x4, 0f, 20f);
			float t3 = x4 / 20f;
			float y3 = Mathf.Lerp(-0.18f, -0.5f, t3);
			instantiatedOBJ.transform.localPosition = new Vector3(-0.39f, y3, -0.015f);
			break;
		}
		case 6:
		case 10:
		{
			float x3 = Camera.main.transform.localEulerAngles.x;
			if (x3 > 90f)
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0.1875f, 0.685f, -0.1185f);
				break;
			}
			x3 = Mathf.Clamp(x3, 0f, 20f);
			float t2 = x3 / 20f;
			float y2 = Mathf.Lerp(0.685f, 0.45f, t2);
			instantiatedOBJ.transform.localPosition = new Vector3(0.1875f, y2, -0.1185f);
			break;
		}
		case 2:
		{
			if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo4, 4f, interactableMask))
			{
				if (hitInfo4.transform.gameObject.name == "SubContainer")
				{
					int siblingIndex2 = hitInfo4.transform.GetSiblingIndex();
					Data_Container component = hitInfo4.transform.parent.transform.parent.GetComponent<Data_Container>();
					if (component.containerClass < 20)
					{
						int num3 = component.productInfoArray[siblingIndex2 * 2];
						if (num3 < 0)
						{
							oldProductID = -2;
							pricingCanvas.SetActive(value: false);
							basefloatString = "";
							break;
						}
						if (oldProductID != num3)
						{
							productNameTMP.text = LocalizationManager.instance.GetLocalizationString("product" + num3);
							productBrandTMP.text = ProductListing.Instance.productPrefabs[num3].GetComponent<Data_Product>().productBrand;
							productImage.sprite = ProductListing.Instance.productSprites[num3];
							float num4 = ProductListing.Instance.tierInflation[ProductListing.Instance.productPrefabs[num3].GetComponent<Data_Product>().productTier];
							float num5 = ProductListing.Instance.productPrefabs[num3].GetComponent<Data_Product>().basePricePerUnit * num4;
							num5 = Mathf.Round(num5 * 100f) / 100f;
							marketPriceTMP.text = "$" + num5;
							float num6 = ProductListing.Instance.productPlayerPricing[num3];
							num6 = Mathf.Round(num6 * 100f) / 100f;
							yourPriceTMP.text = "$" + num6;
							pPrice = num6;
							pricingCanvas.SetActive(value: true);
							oldProductID = num3;
							basefloatString = "";
						}
						PriceSetFromNumpad(num3);
						if (MainPlayer.GetButtonDown("Menu Previous"))
						{
							pPrice += (MainPlayer.GetButton("Build") ? 0.2f : 0.01f);
							yourPriceTMP.text = ProductListing.Instance.ConvertFloatToTextPrice(pPrice);
						}
						else if (MainPlayer.GetButtonDown("Menu Next"))
						{
							pPrice -= (MainPlayer.GetButton("Build") ? 0.2f : 0.01f);
							pPrice = Mathf.Clamp(pPrice, 0f, float.PositiveInfinity);
							yourPriceTMP.text = ProductListing.Instance.ConvertFloatToTextPrice(pPrice);
						}
						if (MainPlayer.GetButtonDown("Main Action") && ProductListing.Instance.productPlayerPricing[num3] != pPrice)
						{
							CmdPlayPricingSound();
							ProductListing.Instance.CmdUpdateProductPrice(num3, pPrice);
						}
						if (MainPlayer.GetButtonDown("Secondary Action") && component.productInfoArray[siblingIndex2 * 2 + 1] <= 0)
						{
							base.transform.Find("ResetProductSound").GetComponent<AudioSource>().Play();
							component.CmdContainerClear(siblingIndex2 * 2);
						}
					}
					else
					{
						oldProductID = -3;
						pricingCanvas.SetActive(value: false);
						basefloatString = "";
					}
				}
				else
				{
					oldProductID = -4;
					pricingCanvas.SetActive(value: false);
					basefloatString = "";
				}
			}
			else
			{
				oldProductID = -5;
				pricingCanvas.SetActive(value: false);
				basefloatString = "";
			}
			break;
		}
		case 1:
		{
			float x = Camera.main.transform.localEulerAngles.x;
			if (x > 90f)
			{
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 90f, 0f);
				instantiatedOBJ.transform.localPosition = new Vector3(0f, 0.1f, 0f);
			}
			else
			{
				x = Mathf.Clamp(x, 0f, 20f);
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 90f, x);
				float t = x / 20f;
				float y = Mathf.Lerp(0.1f, -0.3f, t);
				float x2 = Mathf.Lerp(0f, 0.55f, t);
				instantiatedOBJ.transform.localPosition = new Vector3(x2, y, 0f);
			}
			canvasTMP.text = "x" + extraParameter2;
			break;
		}
		default:
			MonoBehaviour.print("Equipped item error");
			break;
		case 0:
		case 3:
		case 4:
		case 5:
		case 8:
		case 9:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			break;
		}
	}

	private IEnumerator DropCooldown()
	{
		dropCooldown = true;
		yield return new WaitForSeconds(0.33f);
		dropCooldown = false;
	}

	private void PriceSetFromNumpad(int productID)
	{
		if (MainPlayer.GetButtonDown("Numpad Delete"))
		{
			if (basefloatString.Length != 0)
			{
				basefloatString = basefloatString.Substring(0, basefloatString.Length - 1);
				yourPriceTMP.text = "$" + basefloatString;
			}
		}
		else
		{
			if (basefloatString.Length >= 7)
			{
				return;
			}
			for (int i = 0; i < keyCodes.Length; i++)
			{
				if (!MainPlayer.GetButtonDown(keyCodes[i]))
				{
					continue;
				}
				if (basefloatString.Contains(","))
				{
					string[] array = basefloatString.Split(",");
					if (array.Length > 1 && array[1].Length >= 2)
					{
						return;
					}
				}
				basefloatString += i;
				yourPriceTMP.text = "$" + basefloatString;
				return;
			}
			float result;
			if (MainPlayer.GetButtonDown("Numpad Period"))
			{
				if (basefloatString.Length != 0 && !basefloatString.Contains(","))
				{
					basefloatString += ",";
					yourPriceTMP.text = "$" + basefloatString;
				}
			}
			else if (MainPlayer.GetButtonDown("Numpad Accept") && basefloatString.Length != 0 && !(basefloatString.Substring(basefloatString.Length - 1, 1) == ",") && float.TryParse(basefloatString, out result))
			{
				result = Mathf.Round(result * 100f) / 100f;
				if (ProductListing.Instance.productPlayerPricing[productID] != result)
				{
					CmdPlayPricingSound();
					pPrice = result;
					ProductListing.Instance.CmdUpdateProductPrice(productID, pPrice);
				}
			}
		}
	}

	private void PoseBehaviour()
	{
		for (int i = 1; i < poseKeyCodes.Length; i++)
		{
			if (!MainPlayer.GetButtonDown(poseKeyCodes[i]))
			{
				continue;
			}
			if (!FirstPersonController.Instance.allowPlayerInput)
			{
				break;
			}
			int num = posesArray[i];
			if (num == 0)
			{
				break;
			}
			if ((bool)Camera.main)
			{
				CustomCameraController component = Camera.main.GetComponent<CustomCameraController>();
				if (!component.inEmoteEvent)
				{
					component.ThirdPersonEmoteVisualize();
				}
			}
			CmdPlayPose(num);
		}
	}

	private void OnChangeEquipment(int oldEquippedItem, int newEquippedItem)
	{
		StartCoroutine(ChangeEquipment(newEquippedItem));
	}

	private IEnumerator ChangeEquipment(int newEquippedItem)
	{
		while (equippedParentOBJ.transform.childCount > 0)
		{
			UnityEngine.Object.Destroy(equippedParentOBJ.transform.GetChild(0).gameObject);
			yield return null;
		}
		GameObject original = equippedPrefabs[newEquippedItem];
		switch (newEquippedItem)
		{
		case 15:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localPosition = new Vector3(-0.148f, -0.268f, -0.078f);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.GetComponent<FireExtinguisher>().enabled = true;
			}
			break;
		case 14:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localPosition = new Vector3(0.384f, -0.457f, -0.378f);
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 90f, 0f);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.GetComponent<ToolboxBehaviour>().enabled = true;
			}
			break;
		case 13:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localPosition = new Vector3(0.314f, -0.916f, 0.23f);
			if (base.isLocalPlayer && (auxiliarData == 0 || auxiliarData == 1))
			{
				instantiatedOBJ.GetComponent<CageEventCreateDummyAnimal>().CreateDummyAnimal(auxiliarData);
			}
			break;
		case 12:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localPosition = Vector3.zero;
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 90f, 0f);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.transform.Find("Canvas/OrderNumber").GetComponent<TextMeshProUGUI>().text = "#" + orderNumberData;
				instantiatedOBJ.transform.Find("Canvas/CustomerName").GetComponent<TextMeshProUGUI>().text = orderCustomerNameData;
				instantiatedOBJ.GetComponent<OrderDummyBoxBehaviour>().enabled = true;
			}
			else
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0f, 0f, 0.1f);
				instantiatedOBJ.transform.Find("Canvas").gameObject.SetActive(value: false);
			}
			break;
		case 11:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localPosition = new Vector3(0f, 0.3f, 0.14f);
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 0f, 0f);
			break;
		case 10:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0.1875f, 0.685f, -0.1185f);
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(270f, 180f, 0.8f);
				instantiatedOBJ.GetComponent<SalesDevice>().enabled = true;
			}
			else
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0.075f, 0.41f, 0.204f);
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(270f, 0f, 180f);
			}
			break;
		case 9:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 0f, 0f);
			if (base.isLocalPlayer)
			{
				if (trayData != "")
				{
					instantiatedOBJ.GetComponent<OrderingTray>().assembledItemData = trayData;
				}
				instantiatedOBJ.GetComponent<OrderingTray>().isLocalPlayer = true;
				instantiatedOBJ.GetComponent<OrderingTray>().enabled = true;
				instantiatedOBJ.transform.localPosition = new Vector3(0f, 0f, 0f);
			}
			else
			{
				instantiatedOBJ.GetComponent<OrderingTray>().isLocalPlayer = false;
				instantiatedOBJ.GetComponent<OrderingTray>().enabled = true;
				instantiatedOBJ.transform.localPosition = new Vector3(0f, 0f, 0.15f);
			}
			break;
		case 8:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0.36f, -0.81f, -0.015f);
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 50f, 0f);
			}
			else
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0.16f, -0.17f, -1.575f);
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 92f, 87.5f);
			}
			break;
		case 7:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localPosition = new Vector3(-0.39f, -0.18f, -0.015f);
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(30f, 63f, -14f);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.GetComponent<DemolitionHammer>().enabled = true;
			}
			break;
		case 6:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0.1875f, 0.685f, -0.1185f);
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(270f, 180f, 0.8f);
				instantiatedOBJ.GetComponent<OrderingDevice>().enabled = true;
			}
			else
			{
				instantiatedOBJ.transform.Find("Ordering_Stylus").gameObject.SetActive(value: false);
				instantiatedOBJ.transform.localPosition = new Vector3(0.075f, 0.41f, 0.204f);
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(270f, 0f, 180f);
			}
			break;
		case 5:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(290f, 180f, 0f);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0f, 0.3f, -0.3f);
				if (GameCanvas.Instance.isCool)
				{
					instantiatedOBJ.GetComponent<Builder_Paintables>().enabled = true;
				}
			}
			else
			{
				instantiatedOBJ.transform.localPosition = new Vector3(-0.05f, 0.42f, 0.015f);
			}
			break;
		case 4:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(290f, 180f, 0f);
			instantiatedOBJ.transform.localPosition = new Vector3(0f, 0.165f, -0.066f);
			break;
		case 3:
		{
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localPosition = new Vector3(0.42f, -0.92f, 0.15f);
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(270f, 0f, 0f);
			int broomSkin = GetComponent<PlayerSyncCharacter>().broomSkin;
			if (broomSkin > 0 && (bool)AchievementsManager.Instance && broomSkin < AchievementsManager.Instance.unlockablesPrefabsArray.Length)
			{
				GameObject gameObject = UnityEngine.Object.Instantiate(AchievementsManager.Instance.unlockablesPrefabsArray[broomSkin], instantiatedOBJ.transform);
				gameObject.transform.localPosition = Vector3.zero;
				if (base.isLocalPlayer)
				{
					gameObject.transform.localRotation = Quaternion.Euler(new Vector3(0f, 0f, 180f));
				}
				else
				{
					gameObject.transform.localRotation = Quaternion.Euler(Vector3.zero);
				}
				gameObject.transform.localScale = new Vector3(1.3f, 1.3f, 1.3f);
				instantiatedOBJ.GetComponent<MeshRenderer>().enabled = false;
			}
			break;
		}
		case 2:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			if (base.isLocalPlayer)
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0.12f, 0.5f, -0.24f);
				instantiatedOBJ.transform.localRotation = Quaternion.Euler(-18f, 0f, 0f);
				pricingCanvas = instantiatedOBJ.transform.Find("Canvas").gameObject;
				productImage = instantiatedOBJ.transform.Find("Canvas/Container/ProductImage").GetComponent<Image>();
				productNameTMP = instantiatedOBJ.transform.Find("Canvas/Container/ProductName").GetComponent<TextMeshProUGUI>();
				marketPriceTMP = instantiatedOBJ.transform.Find("Canvas/Container/MarketPrice").GetComponent<TextMeshProUGUI>();
				yourPriceTMP = instantiatedOBJ.transform.Find("Canvas/Container/YourPrice").GetComponent<TextMeshProUGUI>();
				productBrandTMP = instantiatedOBJ.transform.Find("Canvas/Container/BrandName").GetComponent<TextMeshProUGUI>();
			}
			else
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0.275f, 0f, -0.1f);
				instantiatedOBJ.transform.localRotation = Quaternion.identity;
			}
			break;
		case 1:
			instantiatedOBJ = UnityEngine.Object.Instantiate(original, equippedParentOBJ.transform);
			instantiatedOBJ.transform.localPosition = Vector3.zero;
			instantiatedOBJ.transform.localRotation = Quaternion.Euler(0f, 90f, 0f);
			if (base.isLocalPlayer && extraParameter1 >= 0)
			{
				UpdateBoxContents(extraParameter1);
				CmdSetBoxColorToEveryone(extraParameter1);
				if (GameData.Instance.GetComponent<UpgradesManager>().extraUpgrades[33])
				{
					if (!instantiatedPinpointOBJ)
					{
						instantiatedPinpointOBJ = UnityEngine.Object.Instantiate(pinpointPrefabOBJ);
					}
					instantiatedPinpointOBJ.GetComponent<PinpointShelf>().currentProductID = extraParameter1;
				}
			}
			else
			{
				instantiatedOBJ.transform.localPosition = new Vector3(0f, 0f, 0.1f);
				instantiatedOBJ.transform.Find("Canvas").gameObject.SetActive(value: false);
			}
			break;
		case 0:
			extraParameter1 = -1;
			extraParameter2 = -1;
			trayData = "";
			break;
		default:
			MonoBehaviour.print("Equipped item error");
			break;
		}
	}

	public void UpdateBoxContents(int productIndex)
	{
		Sprite sprite = ProductListing.Instance.productSprites[productIndex];
		instantiatedOBJ.transform.Find("Canvas/Image").GetComponent<Image>().sprite = sprite;
		canvasTMP = instantiatedOBJ.transform.Find("Canvas/Quantity").GetComponent<TextMeshProUGUI>();
		canvasTMP.text = "x" + extraParameter2;
		instantiatedOBJ.transform.Find("Canvas/ProductName").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("product" + productIndex);
		instantiatedOBJ.transform.Find("Canvas/BrandName").GetComponent<TextMeshProUGUI>().text = ProductListing.Instance.productPrefabs[productIndex].GetComponent<Data_Product>().productBrand;
		int productContainerClass = ProductListing.Instance.productPrefabs[productIndex].GetComponent<Data_Product>().productContainerClass;
		if (productContainerClass < GameData.Instance.GetComponent<ManagerBlackboard>().containerTypeSprites.Length)
		{
			instantiatedOBJ.transform.Find("Canvas/ContainerType").GetComponent<Image>().sprite = GameData.Instance.GetComponent<ManagerBlackboard>().containerTypeSprites[productContainerClass];
		}
	}

	[Command]
	private void CmdSetBoxColorToEveryone(int productID)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		SendCommandInternal("System.Void PlayerNetwork::CmdSetBoxColorToEveryone(System.Int32)", 669426771, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcSetBoxColorToEveryone(int productID)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		SendRPCInternal("System.Void PlayerNetwork::RpcSetBoxColorToEveryone(System.Int32)", 194907278, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command]
	public void CmdUpdateTrayToEveryone(string assembledData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(assembledData);
		SendCommandInternal("System.Void PlayerNetwork::CmdUpdateTrayToEveryone(System.String)", -738502439, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateTrayToEveryone(string assembledData)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(assembledData);
		SendRPCInternal("System.Void PlayerNetwork::RpcUpdateTrayToEveryone(System.String)", -1724074328, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator WaitForBox(int productID)
	{
		while (!instantiatedOBJ)
		{
			yield return null;
		}
		if ((bool)instantiatedOBJ.transform.Find("BoxMesh"))
		{
			instantiatedOBJ.transform.Find("BoxMesh").gameObject.SetActive(value: true);
			ProductListing.Instance.SetBoxColor(instantiatedOBJ, productID);
		}
		yield return null;
	}

	[Command]
	public void CmdChangeCharacter(int newCharacter)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(newCharacter);
		SendCommandInternal("System.Void PlayerNetwork::CmdChangeCharacter(System.Int32)", -2046995048, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[Command]
	public void CmdChangeHat(int newHat)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(newHat);
		SendCommandInternal("System.Void PlayerNetwork::CmdChangeHat(System.Int32)", -700731694, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[Command]
	public void CmdChangeEquippedItem(int selectedItem)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(selectedItem);
		SendCommandInternal("System.Void PlayerNetwork::CmdChangeEquippedItem(System.Int32)", 1644862315, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[Command]
	public void CmdPlayAnimation(int animationIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(animationIndex);
		SendCommandInternal("System.Void PlayerNetwork::CmdPlayAnimation(System.Int32)", -2042617229, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void RpcPlayAnimation(int animationIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(animationIndex);
		SendRPCInternal("System.Void PlayerNetwork::RpcPlayAnimation(System.Int32)", -792377770, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command]
	public void CmdSpawnExtinguisherParticle(bool activate)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(activate);
		SendCommandInternal("System.Void PlayerNetwork::CmdSpawnExtinguisherParticle(System.Boolean)", -1137487979, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void RpcSpawnExtinguisherParticle(bool activate)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(activate);
		SendRPCInternal("System.Void PlayerNetwork::RpcSpawnExtinguisherParticle(System.Boolean)", 1151907452, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void PushPlayer(Vector3 direction)
	{
		if (Vector3.Distance(FirstPersonController.Instance.gameObject.transform.position, base.gameObject.transform.position) < 3f)
		{
			CmdPushPlayer(direction);
		}
	}

	public void PushPlayerFromDebtCollector(Vector3 direction)
	{
		CmdPushPlayer(direction);
	}

	public void DebtCollectorAchievement()
	{
		CmdDebtCollectorAchievement();
	}

	[Command(requiresAuthority = false)]
	private void CmdDebtCollectorAchievement()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void PlayerNetwork::CmdDebtCollectorAchievement()", -685999605, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcDebtCollector()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void PlayerNetwork::RpcDebtCollector()", -454298481, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	private void CmdPushPlayer(Vector3 direction)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(direction);
		SendCommandInternal("System.Void PlayerNetwork::CmdPushPlayer(UnityEngine.Vector3)", -59686282, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcPushPlayer(Vector3 direction)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteVector3(direction);
		SendRPCInternal("System.Void PlayerNetwork::RpcPushPlayer(UnityEngine.Vector3)", 509548111, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcPlayPlayerAnimation(int animationIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(animationIndex);
		SendRPCInternal("System.Void PlayerNetwork::RpcPlayPlayerAnimation(System.Int32)", 1373518161, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator PushCoroutine(Vector3 direction)
	{
		GetComponent<FirstPersonController>().isBeingPushed = true;
		GetComponent<FirstPersonController>().pushDirection = direction;
		yield return new WaitForSeconds(1.5f);
		GetComponent<FirstPersonController>().pushDirection = Vector3.zero;
		GetComponent<FirstPersonController>().isBeingPushed = false;
	}

	[Command]
	public void CmdPlayPricingSound()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void PlayerNetwork::CmdPlayPricingSound()", -601007885, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcPlayPricingSound()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void PlayerNetwork::RpcPlayPricingSound()", -57655740, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command]
	public void CmdPlayPose(int poseIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(poseIndex);
		SendCommandInternal("System.Void PlayerNetwork::CmdPlayPose(System.Int32)", -1421798086, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcPlayPose(int poseIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(poseIndex);
		SendRPCInternal("System.Void PlayerNetwork::RpcPlayPose(System.Int32)", -1705214667, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public PlayerNetwork()
	{
		_Mirror_SyncVarHookDelegate_equippedItem = OnChangeEquipment;
		_Mirror_SyncVarHookDelegate_characterID = OnChangeCharacter;
		_Mirror_SyncVarHookDelegate_hatID = OnChangeHat;
		_Mirror_SyncVarHookDelegate_isCrouching = OnCrouch;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdCrouch__Boolean(bool crouchValue)
	{
		NetworkisCrouching = crouchValue;
	}

	protected static void InvokeUserCode_CmdCrouch__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdCrouch called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdCrouch__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_CmdSetBoxColorToEveryone__Int32(int productID)
	{
		RpcSetBoxColorToEveryone(productID);
	}

	protected static void InvokeUserCode_CmdSetBoxColorToEveryone__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetBoxColorToEveryone called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdSetBoxColorToEveryone__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcSetBoxColorToEveryone__Int32(int productID)
	{
		if ((bool)ProductListing.Instance)
		{
			StartCoroutine(WaitForBox(productID));
		}
	}

	protected static void InvokeUserCode_RpcSetBoxColorToEveryone__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSetBoxColorToEveryone called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcSetBoxColorToEveryone__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdUpdateTrayToEveryone__String(string assembledData)
	{
		RpcUpdateTrayToEveryone(assembledData);
	}

	protected static void InvokeUserCode_CmdUpdateTrayToEveryone__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUpdateTrayToEveryone called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdUpdateTrayToEveryone__String(reader.ReadString());
		}
	}

	protected void UserCode_RpcUpdateTrayToEveryone__String(string assembledData)
	{
		if ((bool)instantiatedOBJ && (bool)instantiatedOBJ.GetComponent<OrderingTray>())
		{
			instantiatedOBJ.GetComponent<OrderingTray>().UpdateTrayFromCommand(assembledData);
		}
	}

	protected static void InvokeUserCode_RpcUpdateTrayToEveryone__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateTrayToEveryone called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcUpdateTrayToEveryone__String(reader.ReadString());
		}
	}

	protected void UserCode_CmdChangeCharacter__Int32(int newCharacter)
	{
		NetworkcharacterID = newCharacter;
	}

	protected static void InvokeUserCode_CmdChangeCharacter__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeCharacter called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdChangeCharacter__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdChangeHat__Int32(int newHat)
	{
		NetworkhatID = newHat;
	}

	protected static void InvokeUserCode_CmdChangeHat__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeHat called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdChangeHat__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdChangeEquippedItem__Int32(int selectedItem)
	{
		NetworkequippedItem = selectedItem;
	}

	protected static void InvokeUserCode_CmdChangeEquippedItem__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeEquippedItem called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdChangeEquippedItem__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdPlayAnimation__Int32(int animationIndex)
	{
		RpcPlayAnimation(animationIndex);
		RpcPlayPlayerAnimation(1);
	}

	protected static void InvokeUserCode_CmdPlayAnimation__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdPlayAnimation called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdPlayAnimation__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcPlayAnimation__Int32(int animationIndex)
	{
		if ((equippedItem == 3 || equippedItem == 7 || equippedItem == 13) && (bool)instantiatedOBJ)
		{
			Animator component = instantiatedOBJ.GetComponent<Animator>();
			if (equippedItem == 7)
			{
				component = instantiatedOBJ.transform.Find("Mesh").GetComponent<Animator>();
				instantiatedOBJ.GetComponent<AudioSource>().Play();
			}
			component.SetFloat("AnimationFloat", animationIndex);
			component.Play("Animation");
			if (animationIndex == 0)
			{
				instantiatedOBJ.GetComponent<AudioSource>().Play();
			}
		}
	}

	protected static void InvokeUserCode_RpcPlayAnimation__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPlayAnimation called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcPlayAnimation__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdSpawnExtinguisherParticle__Boolean(bool activate)
	{
		RpcSpawnExtinguisherParticle(activate);
	}

	protected static void InvokeUserCode_CmdSpawnExtinguisherParticle__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSpawnExtinguisherParticle called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdSpawnExtinguisherParticle__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcSpawnExtinguisherParticle__Boolean(bool activate)
	{
		if ((bool)instantiatedOBJ && (bool)instantiatedOBJ.GetComponent<FireExtinguisher>())
		{
			if (activate)
			{
				instantiatedOBJ.GetComponent<FireExtinguisher>().extinguisherParticles.Play();
				instantiatedOBJ.GetComponent<AudioSource>().Play();
			}
			else
			{
				instantiatedOBJ.GetComponent<FireExtinguisher>().extinguisherParticles.Stop();
				instantiatedOBJ.GetComponent<AudioSource>().Stop();
			}
		}
	}

	protected static void InvokeUserCode_RpcSpawnExtinguisherParticle__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSpawnExtinguisherParticle called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcSpawnExtinguisherParticle__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_CmdDebtCollectorAchievement()
	{
		RpcDebtCollector();
	}

	protected static void InvokeUserCode_CmdDebtCollectorAchievement(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdDebtCollectorAchievement called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdDebtCollectorAchievement();
		}
	}

	protected void UserCode_RpcDebtCollector()
	{
		if (base.isLocalPlayer)
		{
			AchievementsManager.Instance.hasBeenHitbyADebtCollector = true;
		}
	}

	protected static void InvokeUserCode_RpcDebtCollector(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcDebtCollector called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcDebtCollector();
		}
	}

	protected void UserCode_CmdPushPlayer__Vector3(Vector3 direction)
	{
		RpcPushPlayer(direction);
	}

	protected static void InvokeUserCode_CmdPushPlayer__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdPushPlayer called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdPushPlayer__Vector3(reader.ReadVector3());
		}
	}

	protected void UserCode_RpcPushPlayer__Vector3(Vector3 direction)
	{
		if (base.isLocalPlayer && !GetComponent<FirstPersonController>().isBeingPushed)
		{
			StartCoroutine(PushCoroutine(direction));
			if (GetComponent<FirstPersonController>().IsCrouching)
			{
				base.transform.Find("Viewpoint_Pivot").GetComponent<Animator>().Play("ViewpointHitCrouch");
			}
			else
			{
				base.transform.Find("Viewpoint_Pivot").GetComponent<Animator>().Play("ViewpointHit");
			}
		}
		GameObject gameObject = null;
		foreach (Transform item in base.transform)
		{
			if (item.name == "Character")
			{
				gameObject = base.transform.Find("Character").gameObject;
				break;
			}
		}
		if ((bool)gameObject)
		{
			gameObject.GetComponent<Animator>().SetFloat("AnimationFloat", 0f);
			gameObject.GetComponent<Animator>().Play("Animation");
			base.transform.Find("HitSound").GetComponent<AudioSource>().Play();
		}
	}

	protected static void InvokeUserCode_RpcPushPlayer__Vector3(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPushPlayer called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcPushPlayer__Vector3(reader.ReadVector3());
		}
	}

	protected void UserCode_RpcPlayPlayerAnimation__Int32(int animationIndex)
	{
		GameObject gameObject = null;
		foreach (Transform item in base.transform)
		{
			if (item.name == "Character")
			{
				gameObject = base.transform.Find("Character").gameObject;
				break;
			}
		}
		if ((bool)gameObject)
		{
			gameObject.GetComponent<Animator>().SetFloat("AnimationFloat", animationIndex);
			gameObject.GetComponent<Animator>().Play("Animation");
		}
	}

	protected static void InvokeUserCode_RpcPlayPlayerAnimation__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPlayPlayerAnimation called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcPlayPlayerAnimation__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdPlayPricingSound()
	{
		RpcPlayPricingSound();
	}

	protected static void InvokeUserCode_CmdPlayPricingSound(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdPlayPricingSound called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdPlayPricingSound();
		}
	}

	protected void UserCode_RpcPlayPricingSound()
	{
		AudioClip clip = pricingSoundsArray[UnityEngine.Random.Range(0, pricingSoundsArray.Length - 1)];
		AudioSource component = base.transform.Find("PricingSound").GetComponent<AudioSource>();
		component.clip = clip;
		component.Play();
	}

	protected static void InvokeUserCode_RpcPlayPricingSound(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPlayPricingSound called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcPlayPricingSound();
		}
	}

	protected void UserCode_CmdPlayPose__Int32(int poseIndex)
	{
		RpcPlayPose(poseIndex);
	}

	protected static void InvokeUserCode_CmdPlayPose__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdPlayPose called on client.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_CmdPlayPose__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcPlayPose__Int32(int poseIndex)
	{
		GameObject gameObject = null;
		foreach (Transform item in base.transform)
		{
			if (item.name == "Character")
			{
				gameObject = base.transform.Find("Character").gameObject;
				break;
			}
		}
		if ((bool)gameObject)
		{
			gameObject.GetComponent<Animator>().SetFloat("PoseFloat", poseIndex);
			gameObject.GetComponent<Animator>().Play("Pose");
		}
	}

	protected static void InvokeUserCode_RpcPlayPose__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPlayPose called on server.");
		}
		else
		{
			((PlayerNetwork)obj).UserCode_RpcPlayPose__Int32(reader.ReadInt());
		}
	}

	static PlayerNetwork()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdCrouch(System.Boolean)", InvokeUserCode_CmdCrouch__Boolean, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdSetBoxColorToEveryone(System.Int32)", InvokeUserCode_CmdSetBoxColorToEveryone__Int32, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdUpdateTrayToEveryone(System.String)", InvokeUserCode_CmdUpdateTrayToEveryone__String, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdChangeCharacter(System.Int32)", InvokeUserCode_CmdChangeCharacter__Int32, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdChangeHat(System.Int32)", InvokeUserCode_CmdChangeHat__Int32, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdChangeEquippedItem(System.Int32)", InvokeUserCode_CmdChangeEquippedItem__Int32, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdPlayAnimation(System.Int32)", InvokeUserCode_CmdPlayAnimation__Int32, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdSpawnExtinguisherParticle(System.Boolean)", InvokeUserCode_CmdSpawnExtinguisherParticle__Boolean, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdDebtCollectorAchievement()", InvokeUserCode_CmdDebtCollectorAchievement, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdPushPlayer(UnityEngine.Vector3)", InvokeUserCode_CmdPushPlayer__Vector3, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdPlayPricingSound()", InvokeUserCode_CmdPlayPricingSound, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerNetwork), "System.Void PlayerNetwork::CmdPlayPose(System.Int32)", InvokeUserCode_CmdPlayPose__Int32, requiresAuthority: true);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcSetBoxColorToEveryone(System.Int32)", InvokeUserCode_RpcSetBoxColorToEveryone__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcUpdateTrayToEveryone(System.String)", InvokeUserCode_RpcUpdateTrayToEveryone__String);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcPlayAnimation(System.Int32)", InvokeUserCode_RpcPlayAnimation__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcSpawnExtinguisherParticle(System.Boolean)", InvokeUserCode_RpcSpawnExtinguisherParticle__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcDebtCollector()", InvokeUserCode_RpcDebtCollector);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcPushPlayer(UnityEngine.Vector3)", InvokeUserCode_RpcPushPlayer__Vector3);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcPlayPlayerAnimation(System.Int32)", InvokeUserCode_RpcPlayPlayerAnimation__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcPlayPricingSound()", InvokeUserCode_RpcPlayPricingSound);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerNetwork), "System.Void PlayerNetwork::RpcPlayPose(System.Int32)", InvokeUserCode_RpcPlayPose__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(equippedItem);
			writer.WriteInt(characterID);
			writer.WriteInt(hatID);
			writer.WriteBool(isCrouching);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(equippedItem);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(characterID);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteInt(hatID);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteBool(isCrouching);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref equippedItem, _Mirror_SyncVarHookDelegate_equippedItem, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref characterID, _Mirror_SyncVarHookDelegate_characterID, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref hatID, _Mirror_SyncVarHookDelegate_hatID, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref isCrouching, _Mirror_SyncVarHookDelegate_isCrouching, reader.ReadBool());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref equippedItem, _Mirror_SyncVarHookDelegate_equippedItem, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref characterID, _Mirror_SyncVarHookDelegate_characterID, reader.ReadInt());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref hatID, _Mirror_SyncVarHookDelegate_hatID, reader.ReadInt());
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref isCrouching, _Mirror_SyncVarHookDelegate_isCrouching, reader.ReadBool());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayerObjectController
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using HutongGames.PlayMaker;
using Mirror;
using Mirror.RemoteCalls;
using Steamworks;
using UnityEngine;

public class PlayerObjectController : NetworkBehaviour
{
	[SyncVar]
	public int ConnectionID;

	[SyncVar]
	public int PlayerIdNumber;

	[SyncVar]
	public ulong PlayerSteamID;

	[SyncVar(hook = "PlayerNameUpdate")]
	public string PlayerName;

	public string PlayerSteamIDString;

	private CustomNetworkManager manager;

	private GameObject masterOBJ;

	private GameObject playmakerDataManager;

	private PlayMakerFSM dataPlayerFSM;

	private FsmArray fsmArray;

	internal static readonly Dictionary<NetworkConnectionToClient, string> connNames;

	public GameObject chatContainerOBJ;

	private PlayMakerFSM chatFSM;

	public Action<string, string> _Mirror_SyncVarHookDelegate_PlayerName;

	private CustomNetworkManager Manager
	{
		get
		{
			if (manager != null)
			{
				return manager;
			}
			return manager = NetworkManager.singleton as CustomNetworkManager;
		}
	}

	public int NetworkConnectionID
	{
		get
		{
			return ConnectionID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref ConnectionID, 1uL, null);
		}
	}

	public int NetworkPlayerIdNumber
	{
		get
		{
			return PlayerIdNumber;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref PlayerIdNumber, 2uL, null);
		}
	}

	public ulong NetworkPlayerSteamID
	{
		get
		{
			return PlayerSteamID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref PlayerSteamID, 4uL, null);
		}
	}

	public string NetworkPlayerName
	{
		get
		{
			return PlayerName;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref PlayerName, 8uL, _Mirror_SyncVarHookDelegate_PlayerName);
		}
	}

	public void SendChatMsg(string message)
	{
		CmdSendMessage(message);
	}

	[Command(requiresAuthority = false)]
	private void CmdSendMessage(string message, NetworkConnectionToClient sender = null)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(message);
		SendCommandInternal("System.Void PlayerObjectController::CmdSendMessage(System.String,Mirror.NetworkConnectionToClient)", 1630221023, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcReceiveChatMsg(string playerName, string message)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(playerName);
		writer.WriteString(message);
		SendRPCInternal("System.Void PlayerObjectController::RpcReceiveChatMsg(System.String,System.String)", -446234640, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public override void OnStartAuthority()
	{
		CmdSetPlayerName(SteamFriends.GetPersonaName().ToString());
		base.gameObject.name = "LocalGamePlayer";
		LobbyController.Instance.FindLocalPlayer();
		LobbyController.Instance.UpdateLobbyName();
	}

	public override void OnStartClient()
	{
		Manager.GamePlayers.Add(this);
		LobbyController.Instance.UpdateLobbyName();
		LobbyController.Instance.UpdatePlayerList();
	}

	public override void OnStopClient()
	{
		Manager.GamePlayers.Remove(this);
		LobbyController.Instance.UpdatePlayerList();
	}

	[Command]
	private void CmdSetPlayerName(string PlayerName)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteString(PlayerName);
		SendCommandInternal("System.Void PlayerObjectController::CmdSetPlayerName(System.String)", 1583141151, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	public void PlayerNameUpdate(string OldValue, string NewValue)
	{
		if (base.isServer)
		{
			NetworkPlayerName = NewValue;
		}
		if (base.isClient)
		{
			LobbyController.Instance.UpdatePlayerList();
		}
	}

	public PlayerObjectController()
	{
		_Mirror_SyncVarHookDelegate_PlayerName = PlayerNameUpdate;
	}

	static PlayerObjectController()
	{
		connNames = new Dictionary<NetworkConnectionToClient, string>();
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerObjectController), "System.Void PlayerObjectController::CmdSendMessage(System.String,Mirror.NetworkConnectionToClient)", InvokeUserCode_CmdSendMessage__String__NetworkConnectionToClient, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(PlayerObjectController), "System.Void PlayerObjectController::CmdSetPlayerName(System.String)", InvokeUserCode_CmdSetPlayerName__String, requiresAuthority: true);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerObjectController), "System.Void PlayerObjectController::RpcReceiveChatMsg(System.String,System.String)", InvokeUserCode_RpcReceiveChatMsg__String__String);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdSendMessage__String__NetworkConnectionToClient(string message, NetworkConnectionToClient sender)
	{
		if (!connNames.ContainsKey(sender))
		{
			connNames.Add(sender, sender.identity.GetComponent<PlayerObjectController>().PlayerName);
		}
		if (!string.IsNullOrWhiteSpace(message))
		{
			RpcReceiveChatMsg(connNames[sender], message.Trim());
		}
	}

	protected static void InvokeUserCode_CmdSendMessage__String__NetworkConnectionToClient(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSendMessage called on client.");
		}
		else
		{
			((PlayerObjectController)obj).UserCode_CmdSendMessage__String__NetworkConnectionToClient(reader.ReadString(), senderConnection);
		}
	}

	protected void UserCode_RpcReceiveChatMsg__String__String(string playerName, string message)
	{
		if (!message.Contains("</color>") && !message.Contains("</size>") && !message.Contains("</material>") && !message.Contains("</b>") && !message.Contains("</i>"))
		{
			string value = ((playerName == PlayerName) ? ("<color=red>" + playerName + ":</color> " + message) : ("<color=blue>" + playerName + ":</color> " + message));
			chatFSM = LobbyController.Instance.ChatContainerOBJ.GetComponent<PlayMakerFSM>();
			chatFSM.FsmVariables.GetFsmString("Message").Value = value;
			chatFSM.SendEvent("Send_Data");
		}
	}

	protected static void InvokeUserCode_RpcReceiveChatMsg__String__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcReceiveChatMsg called on server.");
		}
		else
		{
			((PlayerObjectController)obj).UserCode_RpcReceiveChatMsg__String__String(reader.ReadString(), reader.ReadString());
		}
	}

	protected void UserCode_CmdSetPlayerName__String(string PlayerName)
	{
		PlayerNameUpdate(this.PlayerName, PlayerName);
	}

	protected static void InvokeUserCode_CmdSetPlayerName__String(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetPlayerName called on client.");
		}
		else
		{
			((PlayerObjectController)obj).UserCode_CmdSetPlayerName__String(reader.ReadString());
		}
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(ConnectionID);
			writer.WriteInt(PlayerIdNumber);
			writer.WriteULong(PlayerSteamID);
			writer.WriteString(PlayerName);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(ConnectionID);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(PlayerIdNumber);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteULong(PlayerSteamID);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteString(PlayerName);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref ConnectionID, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref PlayerIdNumber, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref PlayerSteamID, null, reader.ReadULong());
			GeneratedSyncVarDeserialize(ref PlayerName, _Mirror_SyncVarHookDelegate_PlayerName, reader.ReadString());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref ConnectionID, null, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref PlayerIdNumber, null, reader.ReadInt());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref PlayerSteamID, null, reader.ReadULong());
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref PlayerName, _Mirror_SyncVarHookDelegate_PlayerName, reader.ReadString());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayerPermissions
using System.Collections;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class PlayerPermissions : NetworkBehaviour
{
	public bool updateSymbols;

	private bool onCooldown;

	private bool hasGP = true;

	private bool hasMP = true;

	private bool hasCP = true;

	private bool hasRP = true;

	private bool hasSP = true;

	private bool hasTP = true;

	public bool RequestGP()
	{
		return hasGP;
	}

	public bool RequestMP()
	{
		return hasMP;
	}

	public bool RequestCP()
	{
		return hasCP;
	}

	public bool RequestRP()
	{
		return hasRP;
	}

	public bool RequestSP()
	{
		return hasSP;
	}

	public bool RequestTP()
	{
		return hasTP;
	}

	public void RemoveAllP()
	{
		if (base.isServer)
		{
			updateSymbols = true;
			RpcRemoveAllP();
		}
	}

	[ClientRpc]
	private void RpcRemoveAllP()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void PlayerPermissions::RpcRemoveAllP()", -1595371024, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void PPlayer()
	{
		if (base.isServer)
		{
			hasGP = !hasGP;
			RpcPPlayer(hasGP);
		}
	}

	[ClientRpc]
	private void RpcPPlayer(bool set)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(set);
		SendRPCInternal("System.Void PlayerPermissions::RpcPPlayer(System.Boolean)", -1309257383, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void MPPlayer()
	{
		if (base.isServer)
		{
			hasMP = !hasMP;
			RpcNPPlayer(hasMP);
		}
	}

	[ClientRpc]
	private void RpcNPPlayer(bool set)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(set);
		SendRPCInternal("System.Void PlayerPermissions::RpcNPPlayer(System.Boolean)", 227394751, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void CPPlayer()
	{
		if (base.isServer)
		{
			hasCP = !hasCP;
			RpcCPPlayer(hasCP);
		}
	}

	[ClientRpc]
	private void RpcCPPlayer(bool set)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(set);
		SendRPCInternal("System.Void PlayerPermissions::RpcCPPlayer(System.Boolean)", 185888378, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void RPlayer()
	{
		if (base.isServer)
		{
			hasRP = !hasRP;
			RpcRPPlayer(hasRP);
		}
	}

	[ClientRpc]
	private void RpcRPPlayer(bool set)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(set);
		SendRPCInternal("System.Void PlayerPermissions::RpcRPPlayer(System.Boolean)", -279299005, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void SPlayer()
	{
		if (base.isServer)
		{
			hasSP = !hasSP;
			RpcSPlayer(hasSP);
		}
	}

	[ClientRpc]
	private void RpcSPlayer(bool set)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(set);
		SendRPCInternal("System.Void PlayerPermissions::RpcSPlayer(System.Boolean)", 391083692, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void TPlayer()
	{
		if (base.isServer)
		{
			hasTP = !hasTP;
			RpcTPlayer(hasTP);
		}
	}

	[ClientRpc]
	private void RpcTPlayer(bool set)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(set);
		SendRPCInternal("System.Void PlayerPermissions::RpcTPlayer(System.Boolean)", 1614543717, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void JPlayer(int times)
	{
		if (!onCooldown && base.isServer)
		{
			RpcJPlayer(times);
			StartCoroutine(JCooldown());
		}
	}

	[ClientRpc]
	private void RpcJPlayer(int times)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(times);
		SendRPCInternal("System.Void PlayerPermissions::RpcJPlayer(System.Int32)", 368754251, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator JCooldown()
	{
		onCooldown = true;
		yield return new WaitForSeconds(10f);
		onCooldown = false;
	}

	public void KPlayer()
	{
		if (GetComponent<PlayerObjectController>().ConnectionID != 0 && base.isServer)
		{
			GetComponent<NetworkIdentity>().connectionToClient.Disconnect();
		}
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_RpcRemoveAllP()
	{
		hasGP = false;
		hasMP = false;
		hasCP = false;
		hasRP = false;
		hasSP = false;
	}

	protected static void InvokeUserCode_RpcRemoveAllP(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRemoveAllP called on server.");
		}
		else
		{
			((PlayerPermissions)obj).UserCode_RpcRemoveAllP();
		}
	}

	protected void UserCode_RpcPPlayer__Boolean(bool set)
	{
		hasGP = set;
	}

	protected static void InvokeUserCode_RpcPPlayer__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPPlayer called on server.");
		}
		else
		{
			((PlayerPermissions)obj).UserCode_RpcPPlayer__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcNPPlayer__Boolean(bool set)
	{
		hasMP = set;
	}

	protected static void InvokeUserCode_RpcNPPlayer__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcNPPlayer called on server.");
		}
		else
		{
			((PlayerPermissions)obj).UserCode_RpcNPPlayer__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcCPPlayer__Boolean(bool set)
	{
		hasCP = set;
	}

	protected static void InvokeUserCode_RpcCPPlayer__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcCPPlayer called on server.");
		}
		else
		{
			((PlayerPermissions)obj).UserCode_RpcCPPlayer__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcRPPlayer__Boolean(bool set)
	{
		hasRP = set;
	}

	protected static void InvokeUserCode_RpcRPPlayer__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRPPlayer called on server.");
		}
		else
		{
			((PlayerPermissions)obj).UserCode_RpcRPPlayer__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcSPlayer__Boolean(bool set)
	{
		hasSP = set;
	}

	protected static void InvokeUserCode_RpcSPlayer__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSPlayer called on server.");
		}
		else
		{
			((PlayerPermissions)obj).UserCode_RpcSPlayer__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcTPlayer__Boolean(bool set)
	{
		hasTP = set;
	}

	protected static void InvokeUserCode_RpcTPlayer__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcTPlayer called on server.");
		}
		else
		{
			((PlayerPermissions)obj).UserCode_RpcTPlayer__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcJPlayer__Int32(int times)
	{
		if (!base.isLocalPlayer || !GameCanvas.Instance)
		{
			return;
		}
		times = Mathf.Clamp(times, 10, 1000);
		PlayMakerFSM component = GameCanvas.Instance.jReference.GetComponent<PlayMakerFSM>();
		component.FsmVariables.GetFsmInt("Times").Value = times;
		component.SendEvent("Send_Data");
		if ((bool)Camera.main)
		{
			CustomCameraController component2 = Camera.main.GetComponent<CustomCameraController>();
			if (component2.isInCameraEvent)
			{
				component2.RestoreCamera();
			}
		}
		GetComponent<FirstPersonTransform>().coroutineActivator(new Vector3(34f, 0.25f, 10f), 0f);
	}

	protected static void InvokeUserCode_RpcJPlayer__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcJPlayer called on server.");
		}
		else
		{
			((PlayerPermissions)obj).UserCode_RpcJPlayer__Int32(reader.ReadInt());
		}
	}

	static PlayerPermissions()
	{
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerPermissions), "System.Void PlayerPermissions::RpcRemoveAllP()", InvokeUserCode_RpcRemoveAllP);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerPermissions), "System.Void PlayerPermissions::RpcPPlayer(System.Boolean)", InvokeUserCode_RpcPPlayer__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerPermissions), "System.Void PlayerPermissions::RpcNPPlayer(System.Boolean)", InvokeUserCode_RpcNPPlayer__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerPermissions), "System.Void PlayerPermissions::RpcCPPlayer(System.Boolean)", InvokeUserCode_RpcCPPlayer__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerPermissions), "System.Void PlayerPermissions::RpcRPPlayer(System.Boolean)", InvokeUserCode_RpcRPPlayer__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerPermissions), "System.Void PlayerPermissions::RpcSPlayer(System.Boolean)", InvokeUserCode_RpcSPlayer__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerPermissions), "System.Void PlayerPermissions::RpcTPlayer(System.Boolean)", InvokeUserCode_RpcTPlayer__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(PlayerPermissions), "System.Void PlayerPermissions::RpcJPlayer(System.Int32)", InvokeUserCode_RpcJPlayer__Int32);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayerSyncCharacter
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using UnityEngine;
using UnityEngine.Animations.Rigging;

public class PlayerSyncCharacter : NetworkBehaviour
{
	[SyncVar]
	public float headAngle;

	[SyncVar]
	public bool inVehicle;

	[SyncVar]
	public int syncedProductID;

	[SyncVar]
	public int syncedNumberOfProducts;

	[SyncVar]
	public int broomSkin;

	public byte characterNumber;

	public GameObject characterOBJ;

	private Animator animator;

	public GameObject headOBJ;

	private PlayerNetwork pNetwork;

	private TwoBoneIKConstraint rightHandConstraint;

	private TwoBoneIKConstraint leftHandConstraint;

	private Transform rightHandOBJ;

	private Transform rightHandDestinationOBJ;

	private Transform leftHandOBJ;

	private Transform leftHandDestinationOBJ;

	public float playerVelocity;

	public float NetworkheadAngle
	{
		get
		{
			return headAngle;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref headAngle, 1uL, null);
		}
	}

	public bool NetworkinVehicle
	{
		get
		{
			return inVehicle;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref inVehicle, 2uL, null);
		}
	}

	public int NetworksyncedProductID
	{
		get
		{
			return syncedProductID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref syncedProductID, 4uL, null);
		}
	}

	public int NetworksyncedNumberOfProducts
	{
		get
		{
			return syncedNumberOfProducts;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref syncedNumberOfProducts, 8uL, null);
		}
	}

	public int NetworkbroomSkin
	{
		get
		{
			return broomSkin;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref broomSkin, 16uL, null);
		}
	}

	private void Start()
	{
		pNetwork = GetComponent<PlayerNetwork>();
		StartCoroutine(CalculateVelocity());
	}

	private IEnumerator CalculateVelocity()
	{
		while (Application.isPlaying)
		{
			Vector3 prevPos = base.transform.position;
			yield return new WaitForEndOfFrame();
			playerVelocity = (prevPos - base.transform.position).magnitude / Time.deltaTime;
			playerVelocity = Mathf.Round(playerVelocity * 10f) / 10f;
			if ((bool)animator)
			{
				if (inVehicle)
				{
					animator.SetFloat("MoveFactor", 0f);
				}
				else
				{
					animator.SetFloat("MoveFactor", playerVelocity);
				}
			}
		}
	}

	private void LateUpdate()
	{
		if (!characterOBJ)
		{
			foreach (Transform item in base.transform)
			{
				if (item.name == "Character")
				{
					characterOBJ = base.transform.Find("Character").gameObject;
					break;
				}
			}
			if ((bool)characterOBJ)
			{
				animator = characterOBJ.GetComponent<Animator>();
				rightHandConstraint = characterOBJ.transform.Find("Rig/RigHandIK").GetComponent<TwoBoneIKConstraint>();
				leftHandConstraint = characterOBJ.transform.Find("Rig/LeftHandIK").GetComponent<TwoBoneIKConstraint>();
				rightHandOBJ = characterOBJ.transform.Find("IKOBJs/RightHandTarget");
				leftHandOBJ = characterOBJ.transform.Find("IKOBJs/LeftHandTarget");
			}
			return;
		}
		if (!headOBJ)
		{
			headOBJ = characterOBJ.transform.Find("Bip01/Bip01 Pelvis/Bip01 Spine/Bip01 Spine1/Bip01 Spine2/Bip01 Neck/Bip01 Head").gameObject;
			return;
		}
		if (base.isLocalPlayer)
		{
			NetworksyncedProductID = pNetwork.extraParameter1;
			NetworksyncedNumberOfProducts = pNetwork.extraParameter2;
			float num = Camera.main.transform.localEulerAngles.x;
			if (num > 180f)
			{
				num -= 360f;
			}
			num *= -1f;
			num = Mathf.Clamp(num, -45f, 45f);
			NetworkheadAngle = Mathf.Round(num * 100f) / 100f;
		}
		else
		{
			headOBJ.transform.localRotation = Quaternion.Euler(0f, 0f, headAngle);
		}
		int equippedItem = pNetwork.equippedItem;
		if (equippedItem > 0)
		{
			switch (equippedItem)
			{
			case 2:
			case 3:
			case 5:
			case 8:
			case 13:
			case 14:
				if (!rightHandDestinationOBJ && (bool)pNetwork.instantiatedOBJ && (bool)pNetwork.instantiatedOBJ.transform.Find("RightHandIK"))
				{
					rightHandDestinationOBJ = pNetwork.instantiatedOBJ.transform.Find("RightHandIK");
					rightHandConstraint.weight = 1f;
				}
				rightHandOBJ.position = rightHandDestinationOBJ.position;
				rightHandOBJ.rotation = rightHandDestinationOBJ.rotation;
				break;
			case 1:
			case 4:
			case 6:
			case 7:
			case 9:
			case 10:
			case 11:
			case 12:
			case 15:
				if (!rightHandDestinationOBJ && (bool)pNetwork.instantiatedOBJ && (bool)pNetwork.instantiatedOBJ.transform.Find("RightHandIK"))
				{
					rightHandDestinationOBJ = pNetwork.instantiatedOBJ.transform.Find("RightHandIK");
					rightHandConstraint.weight = 1f;
				}
				if (!leftHandDestinationOBJ && (bool)pNetwork.instantiatedOBJ && (bool)pNetwork.instantiatedOBJ.transform.Find("LeftHandIK"))
				{
					leftHandDestinationOBJ = pNetwork.instantiatedOBJ.transform.Find("LeftHandIK");
					leftHandConstraint.weight = 1f;
				}
				if ((bool)rightHandOBJ)
				{
					rightHandOBJ.position = rightHandDestinationOBJ.position;
					rightHandOBJ.rotation = rightHandDestinationOBJ.rotation;
				}
				if ((bool)leftHandOBJ)
				{
					leftHandOBJ.position = leftHandDestinationOBJ.position;
					leftHandOBJ.rotation = leftHandDestinationOBJ.rotation;
				}
				break;
			}
		}
		else
		{
			if (rightHandConstraint.weight == 1f)
			{
				rightHandConstraint.weight = 0f;
			}
			if (leftHandConstraint.weight == 1f)
			{
				leftHandConstraint.weight = 0f;
			}
		}
	}

	public override bool Weaved()
	{
		return true;
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteFloat(headAngle);
			writer.WriteBool(inVehicle);
			writer.WriteInt(syncedProductID);
			writer.WriteInt(syncedNumberOfProducts);
			writer.WriteInt(broomSkin);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteFloat(headAngle);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteBool(inVehicle);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteInt(syncedProductID);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteInt(syncedNumberOfProducts);
		}
		if ((syncVarDirtyBits & 0x10L) != 0L)
		{
			writer.WriteInt(broomSkin);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref headAngle, null, reader.ReadFloat());
			GeneratedSyncVarDeserialize(ref inVehicle, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref syncedProductID, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref syncedNumberOfProducts, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref broomSkin, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref headAngle, null, reader.ReadFloat());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref inVehicle, null, reader.ReadBool());
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref syncedProductID, null, reader.ReadInt());
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref syncedNumberOfProducts, null, reader.ReadInt());
		}
		if ((num & 0x10L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref broomSkin, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayMakerActionsUtils
public class PlayMakerActionsUtils
{
	public enum EveryFrameUpdateSelector
	{
		OnUpdate,
		OnLateUpdate,
		OnFixedUpdate
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayMakerArrayListProxy
using System.Collections;
using System.Linq;
using UnityEngine;

public class PlayMakerArrayListProxy : PlayMakerCollectionProxy
{
	public ArrayList _arrayList;

	private ArrayList _snapShot;

	public ArrayList arrayList => _arrayList;

	public void Awake()
	{
		_arrayList = new ArrayList();
		PreFillArrayList();
		TakeSnapShot();
	}

	public bool isCollectionDefined()
	{
		return arrayList != null;
	}

	public void TakeSnapShot()
	{
		_snapShot = new ArrayList();
		_snapShot.AddRange(_arrayList);
	}

	public void RevertToSnapShot()
	{
		_arrayList = new ArrayList();
		_arrayList.AddRange(_snapShot);
	}

	public void Add(object value, string type, bool silent = false)
	{
		arrayList.Add(value);
		if (!silent)
		{
			dispatchEvent(addEvent, value, type);
		}
	}

	public int AddRange(ICollection collection, string type)
	{
		arrayList.AddRange(collection);
		return arrayList.Count;
	}

	public void InspectorEdit(int index)
	{
		dispatchEvent(setEvent, index, "int");
	}

	public void Set(int index, object value, string type)
	{
		arrayList[index] = value;
		dispatchEvent(setEvent, index, "int");
	}

	public bool Remove(object value, string type, bool silent = false)
	{
		if (arrayList.Contains(value))
		{
			arrayList.Remove(value);
			if (!silent)
			{
				dispatchEvent(removeEvent, value, type);
			}
			return true;
		}
		return false;
	}

	[ContextMenu("Copy ArrayList Content")]
	private void CopyContentToPrefill()
	{
		preFillCount = arrayList.Count;
		switch (preFillType)
		{
		case VariableEnum.Bool:
			preFillBoolList = arrayList.OfType<bool>().ToList();
			break;
		case VariableEnum.Color:
			preFillColorList = arrayList.OfType<Color>().ToList();
			break;
		case VariableEnum.Float:
			preFillFloatList = arrayList.OfType<float>().ToList();
			break;
		case VariableEnum.GameObject:
			preFillGameObjectList = arrayList.OfType<GameObject>().ToList();
			break;
		case VariableEnum.Int:
			preFillIntList = arrayList.OfType<int>().ToList();
			break;
		case VariableEnum.Material:
			preFillMaterialList = arrayList.OfType<Material>().ToList();
			break;
		case VariableEnum.Quaternion:
			preFillQuaternionList = arrayList.OfType<Quaternion>().ToList();
			break;
		case VariableEnum.Rect:
			preFillRectList = arrayList.OfType<Rect>().ToList();
			break;
		case VariableEnum.String:
			preFillStringList = arrayList.OfType<string>().ToList();
			break;
		case VariableEnum.Texture:
			preFillTextureList = arrayList.OfType<Texture2D>().ToList();
			break;
		case VariableEnum.Vector2:
			preFillVector2List = arrayList.OfType<Vector2>().ToList();
			break;
		case VariableEnum.Vector3:
			preFillVector3List = arrayList.OfType<Vector3>().ToList();
			break;
		case VariableEnum.AudioClip:
			preFillAudioClipList = arrayList.OfType<AudioClip>().ToList();
			break;
		case VariableEnum.Byte:
			preFillByteList = arrayList.OfType<byte>().ToList();
			break;
		case VariableEnum.Sprite:
			preFillSpriteList = arrayList.OfType<Sprite>().ToList();
			break;
		}
	}

	private void PreFillArrayList()
	{
		switch (preFillType)
		{
		case VariableEnum.Bool:
			arrayList.InsertRange(0, preFillBoolList);
			break;
		case VariableEnum.Color:
			arrayList.InsertRange(0, preFillColorList);
			break;
		case VariableEnum.Float:
			arrayList.InsertRange(0, preFillFloatList);
			break;
		case VariableEnum.GameObject:
			arrayList.InsertRange(0, preFillGameObjectList);
			break;
		case VariableEnum.Int:
			arrayList.InsertRange(0, preFillIntList);
			break;
		case VariableEnum.Material:
			arrayList.InsertRange(0, preFillMaterialList);
			break;
		case VariableEnum.Quaternion:
			arrayList.InsertRange(0, preFillQuaternionList);
			break;
		case VariableEnum.Rect:
			arrayList.InsertRange(0, preFillRectList);
			break;
		case VariableEnum.String:
			arrayList.InsertRange(0, preFillStringList);
			break;
		case VariableEnum.Texture:
			arrayList.InsertRange(0, preFillTextureList);
			break;
		case VariableEnum.Vector2:
			arrayList.InsertRange(0, preFillVector2List);
			break;
		case VariableEnum.Vector3:
			arrayList.InsertRange(0, preFillVector3List);
			break;
		case VariableEnum.AudioClip:
			arrayList.InsertRange(0, preFillAudioClipList);
			break;
		case VariableEnum.Byte:
			arrayList.InsertRange(0, preFillByteList);
			break;
		case VariableEnum.Sprite:
			arrayList.InsertRange(0, preFillSpriteList);
			break;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayMakerCollectionProxy
using System.Collections.Generic;
using HutongGames.PlayMaker;
using UnityEngine;

public abstract class PlayMakerCollectionProxy : MonoBehaviour
{
	public enum VariableEnum
	{
		GameObject,
		Int,
		Float,
		String,
		Bool,
		Vector3,
		Rect,
		Quaternion,
		Color,
		Material,
		Texture,
		Vector2,
		AudioClip,
		Byte,
		Sprite
	}

	public bool showEvents;

	public bool showContent;

	public bool TextureElementSmall;

	public bool condensedView;

	public bool liveUpdate;

	public string referenceName = "";

	public bool enablePlayMakerEvents;

	public string addEvent;

	public string setEvent;

	public string removeEvent;

	public bool localOnly;

	public int contentPreviewStartIndex;

	public int contentPreviewMaxRows = 10;

	public VariableEnum preFillType;

	public int preFillObjectTypeIndex;

	public int preFillCount;

	public List<string> preFillKeyList = new List<string>();

	public List<bool> preFillBoolList = new List<bool>();

	public List<Color> preFillColorList = new List<Color>();

	public List<float> preFillFloatList = new List<float>();

	public List<GameObject> preFillGameObjectList = new List<GameObject>();

	public List<int> preFillIntList = new List<int>();

	public List<Material> preFillMaterialList = new List<Material>();

	public List<Object> preFillObjectList = new List<Object>();

	public List<Quaternion> preFillQuaternionList = new List<Quaternion>();

	public List<Rect> preFillRectList = new List<Rect>();

	public List<string> preFillStringList = new List<string>();

	public List<Texture2D> preFillTextureList = new List<Texture2D>();

	public List<Vector2> preFillVector2List = new List<Vector2>();

	public List<Vector3> preFillVector3List = new List<Vector3>();

	public List<AudioClip> preFillAudioClipList = new List<AudioClip>();

	public List<byte> preFillByteList = new List<byte>();

	public List<Sprite> preFillSpriteList = new List<Sprite>();

	internal string getFsmVariableType(VariableType _type)
	{
		return _type.ToString();
	}

	internal void dispatchEvent(string anEvent, object value, string type)
	{
		if (!enablePlayMakerEvents)
		{
			return;
		}
		switch (type)
		{
		case "bool":
			Fsm.EventData.BoolData = (bool)value;
			break;
		case "color":
			Fsm.EventData.ColorData = (Color)value;
			break;
		case "float":
			Fsm.EventData.FloatData = (float)value;
			break;
		case "gameObject":
			Fsm.EventData.GameObjectData = (GameObject)value;
			break;
		case "int":
			Fsm.EventData.IntData = (int)value;
			break;
		case "material":
			Fsm.EventData.MaterialData = (Material)value;
			break;
		case "object":
			Fsm.EventData.ObjectData = (Object)value;
			break;
		case "quaternion":
			Fsm.EventData.QuaternionData = (Quaternion)value;
			break;
		case "rect":
			Fsm.EventData.RectData = (Rect)value;
			break;
		case "string":
			Fsm.EventData.StringData = (string)value;
			break;
		case "texture":
			Fsm.EventData.TextureData = (Texture)value;
			break;
		case "vector2":
			Fsm.EventData.Vector3Data = (Vector3)value;
			break;
		case "vector3":
			Fsm.EventData.Vector3Data = (Vector3)value;
			break;
		}
		FsmEventTarget fsmEventTarget = new FsmEventTarget();
		if (localOnly)
		{
			PlayMakerUtils.SendEventToTarget(null, FsmEventTarget.Self, anEvent, null);
			return;
		}
		fsmEventTarget.target = FsmEventTarget.EventTarget.BroadcastAll;
		List<Fsm> list = new List<Fsm>(Fsm.FsmList);
		if (list.Count > 0)
		{
			list[0].Event(fsmEventTarget, anEvent);
		}
	}

	public void cleanPrefilledLists()
	{
		if (preFillKeyList.Count > preFillCount)
		{
			preFillKeyList.RemoveRange(preFillCount, preFillKeyList.Count - preFillCount);
		}
		if (preFillBoolList.Count > preFillCount)
		{
			preFillBoolList.RemoveRange(preFillCount, preFillBoolList.Count - preFillCount);
		}
		if (preFillColorList.Count > preFillCount)
		{
			preFillColorList.RemoveRange(preFillCount, preFillColorList.Count - preFillCount);
		}
		if (preFillFloatList.Count > preFillCount)
		{
			preFillFloatList.RemoveRange(preFillCount, preFillFloatList.Count - preFillCount);
		}
		if (preFillIntList.Count > preFillCount)
		{
			preFillIntList.RemoveRange(preFillCount, preFillIntList.Count - preFillCount);
		}
		if (preFillMaterialList.Count > preFillCount)
		{
			preFillMaterialList.RemoveRange(preFillCount, preFillMaterialList.Count - preFillCount);
		}
		if (preFillGameObjectList.Count > preFillCount)
		{
			preFillGameObjectList.RemoveRange(preFillCount, preFillGameObjectList.Count - preFillCount);
		}
		if (preFillObjectList.Count > preFillCount)
		{
			preFillObjectList.RemoveRange(preFillCount, preFillObjectList.Count - preFillCount);
		}
		if (preFillQuaternionList.Count > preFillCount)
		{
			preFillQuaternionList.RemoveRange(preFillCount, preFillQuaternionList.Count - preFillCount);
		}
		if (preFillRectList.Count > preFillCount)
		{
			preFillRectList.RemoveRange(preFillCount, preFillRectList.Count - preFillCount);
		}
		if (preFillStringList.Count > preFillCount)
		{
			preFillStringList.RemoveRange(preFillCount, preFillStringList.Count - preFillCount);
		}
		if (preFillTextureList.Count > preFillCount)
		{
			preFillTextureList.RemoveRange(preFillCount, preFillTextureList.Count - preFillCount);
		}
		if (preFillVector2List.Count > preFillCount)
		{
			preFillVector2List.RemoveRange(preFillCount, preFillVector2List.Count - preFillCount);
		}
		if (preFillVector3List.Count > preFillCount)
		{
			preFillVector3List.RemoveRange(preFillCount, preFillVector3List.Count - preFillCount);
		}
		if (preFillAudioClipList.Count > preFillCount)
		{
			preFillAudioClipList.RemoveRange(preFillCount, preFillAudioClipList.Count - preFillCount);
		}
		if (preFillByteList.Count > preFillCount)
		{
			preFillByteList.RemoveRange(preFillCount, preFillByteList.Count - preFillCount);
		}
		if (preFillSpriteList.Count > preFillCount)
		{
			preFillSpriteList.RemoveRange(preFillCount, preFillSpriteList.Count - preFillCount);
		}
	}

	public static VariableEnum GetObjectVariableType(object value)
	{
		if (value is Vector3)
		{
			return VariableEnum.Vector3;
		}
		if (value is Rect)
		{
			return VariableEnum.Rect;
		}
		if (value is Quaternion)
		{
			return VariableEnum.Quaternion;
		}
		if (value is Material)
		{
			return VariableEnum.Material;
		}
		if (value is Texture)
		{
			return VariableEnum.Texture;
		}
		if (value is Vector2)
		{
			return VariableEnum.Vector2;
		}
		if (value is Sprite)
		{
			return VariableEnum.Sprite;
		}
		if (value is AudioClip)
		{
			return VariableEnum.AudioClip;
		}
		if (value is bool)
		{
			return VariableEnum.Bool;
		}
		if (value is byte)
		{
			return VariableEnum.Byte;
		}
		if (value is Color)
		{
			return VariableEnum.Color;
		}
		if (value is GameObject)
		{
			return VariableEnum.GameObject;
		}
		if (value is float)
		{
			return VariableEnum.Float;
		}
		if (value is int)
		{
			return VariableEnum.Int;
		}
		if (value is string)
		{
			return VariableEnum.String;
		}
		return VariableEnum.GameObject;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayMakerHashTableProxy
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class PlayMakerHashTableProxy : PlayMakerCollectionProxy
{
	public Hashtable _hashTable;

	private Hashtable _snapShot;

	public Hashtable hashTable => _hashTable;

	public void Awake()
	{
		_hashTable = new Hashtable();
		PreFillHashTable();
		TakeSnapShot();
	}

	public bool isCollectionDefined()
	{
		return hashTable != null;
	}

	public void TakeSnapShot()
	{
		_snapShot = new Hashtable();
		foreach (object key in _hashTable.Keys)
		{
			_snapShot[key] = _hashTable[key];
		}
	}

	public void RevertToSnapShot()
	{
		_hashTable = new Hashtable();
		foreach (object key in _snapShot.Keys)
		{
			_hashTable[key] = _snapShot[key];
		}
	}

	public void InspectorEdit(int index)
	{
		dispatchEvent(setEvent, index, "int");
	}

	[ContextMenu("Copy HashTable Content")]
	private void CopyContentToPrefill()
	{
		preFillCount = hashTable.Count;
		preFillKeyList = hashTable.Keys.OfType<string>().ToList();
		switch (preFillType)
		{
		case VariableEnum.Bool:
			preFillBoolList = new List<bool>(new bool[preFillCount]);
			break;
		case VariableEnum.Color:
			preFillColorList = new List<Color>(new Color[preFillCount]);
			break;
		case VariableEnum.Float:
			preFillFloatList = new List<float>(new float[preFillCount]);
			break;
		case VariableEnum.GameObject:
			preFillGameObjectList = new List<GameObject>(new GameObject[preFillCount]);
			break;
		case VariableEnum.Int:
			preFillIntList = new List<int>(new int[preFillCount]);
			break;
		case VariableEnum.Material:
			preFillMaterialList = new List<Material>(preFillCount);
			break;
		case VariableEnum.Quaternion:
			preFillQuaternionList = new List<Quaternion>(preFillCount);
			break;
		case VariableEnum.Rect:
			preFillRectList = new List<Rect>(preFillCount);
			break;
		case VariableEnum.String:
			preFillStringList = new List<string>(new string[preFillCount]);
			break;
		case VariableEnum.Texture:
			preFillTextureList = new List<Texture2D>(preFillCount);
			break;
		case VariableEnum.Vector2:
			preFillVector2List = new List<Vector2>(preFillCount);
			break;
		case VariableEnum.Vector3:
			preFillVector3List = new List<Vector3>(new Vector3[preFillCount]);
			break;
		case VariableEnum.AudioClip:
			preFillAudioClipList = new List<AudioClip>(preFillCount);
			break;
		case VariableEnum.Byte:
			preFillByteList = new List<byte>(preFillCount);
			break;
		case VariableEnum.Sprite:
			preFillSpriteList = new List<Sprite>(preFillCount);
			break;
		}
		for (int i = 0; i < preFillKeyList.Count; i++)
		{
			switch (preFillType)
			{
			case VariableEnum.Bool:
				preFillBoolList[i] = Convert.ToBoolean(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.Color:
				preFillColorList[i] = PlayMakerUtils.ConvertToColor(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.Float:
				preFillFloatList[i] = Convert.ToSingle(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.GameObject:
				preFillGameObjectList[i] = hashTable[preFillKeyList[i]] as GameObject;
				break;
			case VariableEnum.Int:
				preFillIntList[i] = Convert.ToInt32(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.Material:
				preFillMaterialList[i] = hashTable[preFillKeyList[i]] as Material;
				break;
			case VariableEnum.Quaternion:
				preFillQuaternionList[i] = PlayMakerUtils.ConvertToQuaternion(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.Rect:
				preFillRectList[i] = PlayMakerUtils.ConvertToRect(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.String:
				preFillStringList[i] = Convert.ToString(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.Texture:
				preFillTextureList[i] = hashTable[preFillKeyList[i]] as Texture2D;
				break;
			case VariableEnum.Vector2:
				preFillVector2List[i] = (Vector2)hashTable[preFillKeyList[i]];
				break;
			case VariableEnum.Vector3:
				preFillVector3List[i] = PlayMakerUtils.ConvertToVector3(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.AudioClip:
				preFillAudioClipList[i] = hashTable[preFillKeyList[i]] as AudioClip;
				break;
			case VariableEnum.Byte:
				preFillByteList[i] = Convert.ToByte(hashTable[preFillKeyList[i]]);
				break;
			case VariableEnum.Sprite:
				preFillSpriteList[i] = hashTable[preFillKeyList[i]] as Sprite;
				break;
			}
		}
	}

	private void PreFillHashTable()
	{
		for (int i = 0; i < preFillKeyList.Count; i++)
		{
			switch (preFillType)
			{
			case VariableEnum.Bool:
				hashTable[preFillKeyList[i]] = preFillBoolList[i];
				break;
			case VariableEnum.Color:
				hashTable[preFillKeyList[i]] = preFillColorList[i];
				break;
			case VariableEnum.Float:
				hashTable[preFillKeyList[i]] = preFillFloatList[i];
				break;
			case VariableEnum.GameObject:
				hashTable[preFillKeyList[i]] = preFillGameObjectList[i];
				break;
			case VariableEnum.Int:
				hashTable[preFillKeyList[i]] = preFillIntList[i];
				break;
			case VariableEnum.Material:
				hashTable[preFillKeyList[i]] = preFillMaterialList[i];
				break;
			case VariableEnum.Quaternion:
				hashTable[preFillKeyList[i]] = preFillQuaternionList[i];
				break;
			case VariableEnum.Rect:
				hashTable[preFillKeyList[i]] = preFillRectList[i];
				break;
			case VariableEnum.String:
				hashTable[preFillKeyList[i]] = preFillStringList[i];
				break;
			case VariableEnum.Texture:
				hashTable[preFillKeyList[i]] = preFillTextureList[i];
				break;
			case VariableEnum.Vector2:
				hashTable[preFillKeyList[i]] = preFillVector2List[i];
				break;
			case VariableEnum.Vector3:
				hashTable[preFillKeyList[i]] = preFillVector3List[i];
				break;
			case VariableEnum.AudioClip:
				hashTable[preFillKeyList[i]] = preFillAudioClipList[i];
				break;
			case VariableEnum.Byte:
				hashTable[preFillKeyList[i]] = preFillByteList[i];
				break;
			case VariableEnum.Sprite:
				hashTable[preFillKeyList[i]] = preFillSpriteList[i];
				break;
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayMakerUtils
using System;
using System.Text.RegularExpressions;
using HutongGames.PlayMaker;
using UnityEngine;

public class PlayMakerUtils
{
	public static PlayMakerFSM FsmEventSender;

	public static Quaternion ConvertToQuaternion(object value, Quaternion defaultValue = default(Quaternion))
	{
		if (value is Quaternion)
		{
			return (Quaternion)value;
		}
		return defaultValue;
	}

	public static Rect ConvertToRect(object value, Rect defaultValue = default(Rect))
	{
		if (value is Rect)
		{
			return (Rect)value;
		}
		return defaultValue;
	}

	public static Color ConvertToColor(object value, Color defaultValue = default(Color))
	{
		if (value is Color)
		{
			return (Color)value;
		}
		return defaultValue;
	}

	public static Vector3 ConvertToVector3(object value, Vector3 defaultValue = default(Vector3))
	{
		if (value is Vector3)
		{
			return (Vector3)value;
		}
		return defaultValue;
	}

	public static Vector2 ConvertToVector2(object value, Vector2 defaultValue = default(Vector2))
	{
		if (value is Vector2)
		{
			return (Vector2)value;
		}
		return defaultValue;
	}

	public static Vector4 ConvertToVector2(object value, Vector4 defaultValue = default(Vector4))
	{
		if (value is Vector4)
		{
			return (Vector4)value;
		}
		return defaultValue;
	}

	public static PlayMakerFSM GetFsmEventSender()
	{
		if (FsmEventSender == null)
		{
			FsmEventSender = new GameObject("PlayMaker Send Event Proxy").AddComponent<PlayMakerFSM>();
			FsmEventSender.FsmName = "Send Event Proxy";
			FsmEventSender.FsmDescription = "This Fsm was created at runtime, because a script or component is willing to send a PlayMaker event";
		}
		return FsmEventSender;
	}

	public static void SendEventToTarget(PlayMakerFSM fromFsm, FsmEventTarget target, string fsmEvent, FsmEventData eventData)
	{
		if (fromFsm == null)
		{
			fromFsm = GetFsmEventSender();
		}
		if (eventData != null)
		{
			Fsm.EventData = eventData;
		}
		if (!(fromFsm == null))
		{
			fromFsm.Fsm.Event(target, fsmEvent);
		}
	}

	public static void SendEventToGameObject(PlayMakerFSM fromFsm, GameObject target, string fsmEvent, bool includeChildren)
	{
		SendEventToGameObject(fromFsm, target, fsmEvent, includeChildren, null);
	}

	public static void SendEventToGameObject(PlayMakerFSM fromFsm, GameObject target, string fsmEvent)
	{
		SendEventToGameObject(fromFsm, target, fsmEvent, includeChildren: false, null);
	}

	public static void SendEventToGameObject(PlayMakerFSM fromFsm, GameObject target, string fsmEvent, FsmEventData eventData)
	{
		SendEventToGameObject(fromFsm, target, fsmEvent, includeChildren: false, eventData);
	}

	public static void SendEventToGameObject(PlayMakerFSM fromFsm, GameObject target, string fsmEvent, bool includeChildren, FsmEventData eventData)
	{
		if (fromFsm == null)
		{
			fromFsm = GetFsmEventSender();
		}
		if (eventData != null)
		{
			Fsm.EventData = eventData;
		}
		if (!(fromFsm == null))
		{
			FsmEventTarget fsmEventTarget = new FsmEventTarget();
			fsmEventTarget.excludeSelf = false;
			fsmEventTarget.sendToChildren = includeChildren;
			fsmEventTarget.target = FsmEventTarget.EventTarget.GameObject;
			FsmOwnerDefault fsmOwnerDefault = new FsmOwnerDefault();
			fsmOwnerDefault.OwnerOption = OwnerDefaultOption.SpecifyGameObject;
			fsmOwnerDefault.GameObject = new FsmGameObject();
			fsmOwnerDefault.GameObject.Value = target;
			fsmEventTarget.gameObject = fsmOwnerDefault;
			fromFsm.Fsm.Event(fsmEventTarget, fsmEvent);
		}
	}

	public static void SendEventToGameObjectFsmByName(PlayMakerFSM fromFsm, GameObject target, string fsmName, string fsmEvent, FsmEventData eventData)
	{
		FsmEventTarget fsmEventTarget = new FsmEventTarget();
		fsmEventTarget.target = FsmEventTarget.EventTarget.GameObjectFSM;
		fsmEventTarget.gameObject = new FsmOwnerDefault();
		fsmEventTarget.gameObject.OwnerOption = OwnerDefaultOption.SpecifyGameObject;
		fsmEventTarget.gameObject.GameObject = target;
		fsmEventTarget.fsmName = fsmName;
		SendEventToTarget(fromFsm, fsmEventTarget, fsmEvent, eventData);
	}

	public static bool DoesTargetImplementsEvent(FsmEventTarget target, string eventName)
	{
		if (target.target == FsmEventTarget.EventTarget.BroadcastAll)
		{
			return FsmEvent.IsEventGlobal(eventName);
		}
		if (target.target == FsmEventTarget.EventTarget.FSMComponent)
		{
			return DoesFsmImplementsEvent(target.fsmComponent, eventName);
		}
		if (target.target == FsmEventTarget.EventTarget.GameObject)
		{
			return DoesGameObjectImplementsEvent(target.gameObject.GameObject.Value, eventName);
		}
		if (target.target == FsmEventTarget.EventTarget.GameObjectFSM)
		{
			return DoesGameObjectImplementsEvent(target.gameObject.GameObject.Value, target.fsmName.Value, eventName);
		}
		if (target.target == FsmEventTarget.EventTarget.Self)
		{
			Debug.LogError("Self target not supported yet");
		}
		if (target.target == FsmEventTarget.EventTarget.SubFSMs)
		{
			Debug.LogError("subFsms target not supported yet");
		}
		if (target.target == FsmEventTarget.EventTarget.HostFSM)
		{
			Debug.LogError("HostFSM target not supported yet");
		}
		return false;
	}

	public static bool DoesGameObjectImplementsEvent(GameObject go, string fsmEvent, bool includeChildren = false)
	{
		if (go == null || string.IsNullOrEmpty(fsmEvent))
		{
			return false;
		}
		if (includeChildren)
		{
			PlayMakerFSM[] componentsInChildren = go.GetComponentsInChildren<PlayMakerFSM>();
			for (int i = 0; i < componentsInChildren.Length; i++)
			{
				if (DoesFsmImplementsEvent(componentsInChildren[i], fsmEvent))
				{
					return true;
				}
			}
		}
		else
		{
			PlayMakerFSM[] componentsInChildren = go.GetComponents<PlayMakerFSM>();
			for (int i = 0; i < componentsInChildren.Length; i++)
			{
				if (DoesFsmImplementsEvent(componentsInChildren[i], fsmEvent))
				{
					return true;
				}
			}
		}
		return false;
	}

	public static bool DoesGameObjectImplementsEvent(GameObject go, string fsmName, string fsmEvent)
	{
		if (go == null || string.IsNullOrEmpty(fsmEvent))
		{
			return false;
		}
		bool flag = !string.IsNullOrEmpty(fsmName);
		PlayMakerFSM[] components = go.GetComponents<PlayMakerFSM>();
		foreach (PlayMakerFSM playMakerFSM in components)
		{
			if (flag && object.Equals(playMakerFSM, fsmName) && DoesFsmImplementsEvent(playMakerFSM, fsmEvent))
			{
				return true;
			}
		}
		return false;
	}

	public static bool DoesFsmImplementsEvent(PlayMakerFSM fsm, string fsmEvent)
	{
		if (fsm == null || string.IsNullOrEmpty(fsmEvent))
		{
			return false;
		}
		FsmTransition[] fsmGlobalTransitions = fsm.FsmGlobalTransitions;
		for (int i = 0; i < fsmGlobalTransitions.Length; i++)
		{
			if (fsmGlobalTransitions[i].EventName.Equals(fsmEvent))
			{
				return true;
			}
		}
		FsmState[] fsmStates = fsm.FsmStates;
		for (int i = 0; i < fsmStates.Length; i++)
		{
			fsmGlobalTransitions = fsmStates[i].Transitions;
			for (int j = 0; j < fsmGlobalTransitions.Length; j++)
			{
				if (fsmGlobalTransitions[j].EventName.Equals(fsmEvent))
				{
					return true;
				}
			}
		}
		return false;
	}

	public static bool CreateIfNeededGlobalEvent(string globalEventName)
	{
		bool result = false;
		if (FsmEvent.GetFsmEvent(globalEventName) == null)
		{
			Debug.Log("Adding event to FsmEvent:" + globalEventName);
			FsmEvent.AddFsmEvent(new FsmEvent(globalEventName)
			{
				IsGlobal = true
			});
		}
		if (!FsmEvent.IsEventGlobal(globalEventName))
		{
			if (!FsmEvent.globalEvents.Contains(globalEventName))
			{
				Debug.Log("adding global event to  FsmEvent.globalEvents:" + globalEventName);
				FsmEvent.globalEvents.Add(globalEventName);
			}
			else
			{
				Debug.Log("event already defined in FsmEvent.globalEvents:" + globalEventName);
			}
			result = true;
		}
		else
		{
			Debug.Log("event already global:" + globalEventName);
		}
		return result;
	}

	public static Fsm GetFsmOnGameObject(GameObject go, string fsmName)
	{
		if (go == null || string.IsNullOrEmpty(fsmName))
		{
			return null;
		}
		PlayMakerFSM[] components = go.GetComponents<PlayMakerFSM>();
		foreach (PlayMakerFSM playMakerFSM in components)
		{
			if (string.Equals(playMakerFSM.FsmName, fsmName))
			{
				return playMakerFSM.Fsm;
			}
		}
		return null;
	}

	public static PlayMakerFSM FindFsmOnGameObject(GameObject go, string fsmName)
	{
		if (go == null || string.IsNullOrEmpty(fsmName))
		{
			return null;
		}
		PlayMakerFSM[] components = go.GetComponents<PlayMakerFSM>();
		foreach (PlayMakerFSM playMakerFSM in components)
		{
			if (string.Equals(playMakerFSM.FsmName, fsmName))
			{
				return playMakerFSM;
			}
		}
		return null;
	}

	public static string LogFullPathToAction(FsmStateAction action)
	{
		return GetGameObjectPath(action.Fsm.GameObject) + ":Fsm(" + action.Fsm.Name + "):State(" + action.State.Name + "):Action(" + action.GetType().Name + ")";
	}

	public static string GetGameObjectPath(GameObject obj)
	{
		string text = "/" + obj.name;
		while (obj.transform.parent != null)
		{
			obj = obj.transform.parent.gameObject;
			text = "/" + obj.name + text;
		}
		return text;
	}

	public static void RefreshValueFromFsmVar(Fsm fromFsm, FsmVar fsmVar)
	{
		if (fromFsm != null && fsmVar != null && fsmVar.useVariable)
		{
			switch (fsmVar.Type)
			{
			case VariableType.Int:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmInt(fsmVar.variableName));
				break;
			case VariableType.Float:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmFloat(fsmVar.variableName));
				break;
			case VariableType.Bool:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmBool(fsmVar.variableName));
				break;
			case VariableType.Color:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmColor(fsmVar.variableName));
				break;
			case VariableType.Quaternion:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmQuaternion(fsmVar.variableName));
				break;
			case VariableType.Rect:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmRect(fsmVar.variableName));
				break;
			case VariableType.Vector2:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmVector2(fsmVar.variableName));
				break;
			case VariableType.Vector3:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmVector3(fsmVar.variableName));
				break;
			case VariableType.Texture:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmVector3(fsmVar.variableName));
				break;
			case VariableType.Material:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmMaterial(fsmVar.variableName));
				break;
			case VariableType.String:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmString(fsmVar.variableName));
				break;
			case VariableType.GameObject:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmGameObject(fsmVar.variableName));
				break;
			case VariableType.Enum:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmEnum(fsmVar.variableName));
				break;
			case VariableType.Array:
				fsmVar.GetValueFrom(fromFsm.Variables.GetFsmArray(fsmVar.variableName));
				break;
			case VariableType.Object:
				break;
			}
		}
	}

	public static object GetValueFromFsmVar(Fsm fromFsm, FsmVar fsmVar)
	{
		if (fromFsm == null)
		{
			return null;
		}
		if (fsmVar == null)
		{
			return null;
		}
		if (fsmVar.useVariable)
		{
			string variableName = fsmVar.variableName;
			switch (fsmVar.Type)
			{
			case VariableType.Int:
				return fromFsm.Variables.GetFsmInt(variableName).Value;
			case VariableType.Float:
				return fromFsm.Variables.GetFsmFloat(variableName).Value;
			case VariableType.Bool:
				return fromFsm.Variables.GetFsmBool(variableName).Value;
			case VariableType.Color:
				return fromFsm.Variables.GetFsmColor(variableName).Value;
			case VariableType.Quaternion:
				return fromFsm.Variables.GetFsmQuaternion(variableName).Value;
			case VariableType.Rect:
				return fromFsm.Variables.GetFsmRect(variableName).Value;
			case VariableType.Vector2:
				return fromFsm.Variables.GetFsmVector2(variableName).Value;
			case VariableType.Vector3:
				return fromFsm.Variables.GetFsmVector3(variableName).Value;
			case VariableType.Texture:
				return fromFsm.Variables.GetFsmTexture(variableName).Value;
			case VariableType.Material:
				return fromFsm.Variables.GetFsmMaterial(variableName).Value;
			case VariableType.String:
				return fromFsm.Variables.GetFsmString(variableName).Value;
			case VariableType.GameObject:
				return fromFsm.Variables.GetFsmGameObject(variableName).Value;
			case VariableType.Object:
				return fromFsm.Variables.GetFsmObject(variableName).Value;
			case VariableType.Enum:
				return fromFsm.Variables.GetFsmEnum(variableName).Value;
			case VariableType.Array:
				return fromFsm.Variables.GetFsmArray(variableName).Values;
			}
		}
		else
		{
			switch (fsmVar.Type)
			{
			case VariableType.Int:
				return fsmVar.intValue;
			case VariableType.Float:
				return fsmVar.floatValue;
			case VariableType.Bool:
				return fsmVar.boolValue;
			case VariableType.Color:
				return fsmVar.colorValue;
			case VariableType.Quaternion:
				return fsmVar.quaternionValue;
			case VariableType.Rect:
				return fsmVar.rectValue;
			case VariableType.Vector2:
				return fsmVar.vector2Value;
			case VariableType.Vector3:
				return fsmVar.vector3Value;
			case VariableType.Texture:
				return fsmVar.textureValue;
			case VariableType.Material:
				return fsmVar.materialValue;
			case VariableType.String:
				return fsmVar.stringValue;
			case VariableType.GameObject:
				return fsmVar.gameObjectValue;
			case VariableType.Object:
				return fsmVar.objectReference;
			case VariableType.Enum:
				return fsmVar.EnumValue;
			case VariableType.Array:
				return fsmVar.arrayValue;
			}
		}
		return null;
	}

	public static bool ApplyValueToFsmVar(Fsm fromFsm, FsmVar fsmVar, object[] value)
	{
		if (fromFsm == null)
		{
			return false;
		}
		if (fsmVar == null)
		{
			return false;
		}
		if (value == null || value.Length == 0)
		{
			if (fsmVar.Type == VariableType.Array)
			{
				fromFsm.Variables.GetFsmArray(fsmVar.variableName).Reset();
			}
			return true;
		}
		if (fsmVar.Type != VariableType.Array)
		{
			Debug.LogError("The fsmVar value <" + fsmVar.Type.ToString() + "> doesn't match the value <FsmArray> on state" + fromFsm.ActiveStateName + " on fsm:" + fromFsm.Name + " on GameObject:" + fromFsm.GameObjectName);
			return false;
		}
		fromFsm.Variables.GetFsmArray(fsmVar.variableName).Values = value;
		return true;
	}

	public static bool ApplyValueToFsmVar(Fsm fromFsm, FsmVar fsmVar, object value)
	{
		if (fromFsm == null)
		{
			return false;
		}
		if (fsmVar == null)
		{
			return false;
		}
		if (value == null)
		{
			if (fsmVar.Type == VariableType.Bool)
			{
				fromFsm.Variables.GetFsmBool(fsmVar.variableName).Value = false;
			}
			else if (fsmVar.Type == VariableType.Color)
			{
				fromFsm.Variables.GetFsmColor(fsmVar.variableName).Value = Color.black;
			}
			else if (fsmVar.Type == VariableType.Int)
			{
				fromFsm.Variables.GetFsmInt(fsmVar.variableName).Value = 0;
			}
			else if (fsmVar.Type == VariableType.Float)
			{
				fromFsm.Variables.GetFsmFloat(fsmVar.variableName).Value = 0f;
			}
			else if (fsmVar.Type == VariableType.GameObject)
			{
				fromFsm.Variables.GetFsmGameObject(fsmVar.variableName).Value = null;
			}
			else if (fsmVar.Type == VariableType.Material)
			{
				fromFsm.Variables.GetFsmMaterial(fsmVar.variableName).Value = null;
			}
			else if (fsmVar.Type == VariableType.Object)
			{
				fromFsm.Variables.GetFsmObject(fsmVar.variableName).Value = null;
			}
			else if (fsmVar.Type == VariableType.Quaternion)
			{
				fromFsm.Variables.GetFsmQuaternion(fsmVar.variableName).Value = Quaternion.identity;
			}
			else if (fsmVar.Type == VariableType.Rect)
			{
				fromFsm.Variables.GetFsmRect(fsmVar.variableName).Value = new Rect(0f, 0f, 0f, 0f);
			}
			else if (fsmVar.Type == VariableType.String)
			{
				fromFsm.Variables.GetFsmString(fsmVar.variableName).Value = "";
			}
			else if (fsmVar.Type == VariableType.String)
			{
				fromFsm.Variables.GetFsmTexture(fsmVar.variableName).Value = null;
			}
			else if (fsmVar.Type == VariableType.Vector2)
			{
				fromFsm.Variables.GetFsmVector2(fsmVar.variableName).Value = Vector2.zero;
			}
			else if (fsmVar.Type == VariableType.Vector3)
			{
				fromFsm.Variables.GetFsmVector3(fsmVar.variableName).Value = Vector3.zero;
			}
			else if (fsmVar.Type == VariableType.Enum)
			{
				fromFsm.Variables.GetFsmEnum(fsmVar.variableName).ResetValue();
			}
			else if (fsmVar.Type == VariableType.Array)
			{
				fromFsm.Variables.GetFsmArray(fsmVar.variableName).Reset();
			}
			return true;
		}
		Type type = value.GetType();
		Type type2 = null;
		switch (fsmVar.Type)
		{
		case VariableType.Int:
			type2 = typeof(int);
			break;
		case VariableType.Float:
			type2 = typeof(float);
			break;
		case VariableType.Bool:
			type2 = typeof(bool);
			break;
		case VariableType.Color:
			type2 = typeof(Color);
			break;
		case VariableType.GameObject:
			type2 = typeof(GameObject);
			break;
		case VariableType.Quaternion:
			type2 = typeof(Quaternion);
			break;
		case VariableType.Rect:
			type2 = typeof(Rect);
			break;
		case VariableType.String:
			type2 = typeof(string);
			break;
		case VariableType.Texture:
			type2 = typeof(Texture2D);
			break;
		case VariableType.Vector2:
			type2 = typeof(Vector2);
			break;
		case VariableType.Vector3:
			type2 = typeof(Vector3);
			break;
		case VariableType.Object:
			type2 = typeof(UnityEngine.Object);
			break;
		case VariableType.Material:
			type2 = typeof(Material);
			break;
		case VariableType.Enum:
			type2 = typeof(Enum);
			break;
		case VariableType.Array:
			type2 = typeof(Array);
			break;
		}
		bool flag = true;
		if (!type2.Equals(type))
		{
			flag = false;
			if (type2.Equals(typeof(UnityEngine.Object)))
			{
				flag = true;
			}
			if (type2.Equals(typeof(Enum)))
			{
				flag = true;
			}
			if (!flag)
			{
				if (type.Equals(typeof(double)))
				{
					flag = true;
				}
				if (type.Equals(typeof(long)))
				{
					flag = true;
				}
				if (type.Equals(typeof(byte)))
				{
					flag = true;
				}
			}
		}
		if (!flag)
		{
			Debug.LogError("The fsmVar value <" + type2?.ToString() + "> doesn't match the value <" + type?.ToString() + "> on state" + fromFsm.ActiveStateName + " on fsm:" + fromFsm.Name + " on GameObject:" + fromFsm.GameObjectName);
			return false;
		}
		if (type == typeof(bool))
		{
			fromFsm.Variables.GetFsmBool(fsmVar.variableName).Value = (bool)value;
		}
		else if (type == typeof(Color))
		{
			fromFsm.Variables.GetFsmColor(fsmVar.variableName).Value = (Color)value;
		}
		else if (type == typeof(int))
		{
			fromFsm.Variables.GetFsmInt(fsmVar.variableName).Value = Convert.ToInt32(value);
		}
		else if (type == typeof(byte))
		{
			fromFsm.Variables.GetFsmInt(fsmVar.variableName).Value = Convert.ToInt32(value);
		}
		else if (type == typeof(long))
		{
			if (fsmVar.Type == VariableType.Int)
			{
				fromFsm.Variables.GetFsmInt(fsmVar.variableName).Value = Convert.ToInt32(value);
			}
			else if (fsmVar.Type == VariableType.Float)
			{
				fromFsm.Variables.GetFsmFloat(fsmVar.variableName).Value = Convert.ToSingle(value);
			}
		}
		else if (type == typeof(float))
		{
			fromFsm.Variables.GetFsmFloat(fsmVar.variableName).Value = (float)value;
		}
		else if (type == typeof(double))
		{
			fromFsm.Variables.GetFsmFloat(fsmVar.variableName).Value = Convert.ToSingle(value);
		}
		else if (type == typeof(GameObject))
		{
			fromFsm.Variables.GetFsmGameObject(fsmVar.variableName).Value = (GameObject)value;
		}
		else if (type == typeof(Material))
		{
			fromFsm.Variables.GetFsmMaterial(fsmVar.variableName).Value = (Material)value;
		}
		else if (type == typeof(UnityEngine.Object) || type2 == typeof(UnityEngine.Object))
		{
			fromFsm.Variables.GetFsmObject(fsmVar.variableName).Value = (UnityEngine.Object)value;
		}
		else if (type == typeof(Quaternion))
		{
			fromFsm.Variables.GetFsmQuaternion(fsmVar.variableName).Value = (Quaternion)value;
		}
		else if (type == typeof(Rect))
		{
			fromFsm.Variables.GetFsmRect(fsmVar.variableName).Value = (Rect)value;
		}
		else if (type == typeof(string))
		{
			fromFsm.Variables.GetFsmString(fsmVar.variableName).Value = (string)value;
		}
		else if (type == typeof(Texture2D))
		{
			fromFsm.Variables.GetFsmTexture(fsmVar.variableName).Value = (Texture2D)value;
		}
		else if (type == typeof(Vector2))
		{
			fromFsm.Variables.GetFsmVector2(fsmVar.variableName).Value = (Vector2)value;
		}
		else if (type == typeof(Vector3))
		{
			fromFsm.Variables.GetFsmVector3(fsmVar.variableName).Value = (Vector3)value;
		}
		else if (value is Enum)
		{
			fromFsm.Variables.GetFsmEnum(fsmVar.variableName).Value = (Enum)value;
		}
		else
		{
			Debug.LogWarning("?!?!" + type);
		}
		return true;
	}

	public static float GetFloatFromObject(object _obj, VariableType targetType, bool fastProcessingIfPossible)
	{
		switch (targetType)
		{
		case VariableType.Float:
		case VariableType.Int:
			return Convert.ToSingle(_obj);
		case VariableType.Vector2:
		{
			Vector2 vector = (Vector2)_obj;
			if (vector != Vector2.zero)
			{
				if (!fastProcessingIfPossible)
				{
					return vector.magnitude;
				}
				return vector.sqrMagnitude;
			}
			break;
		}
		}
		if (targetType == VariableType.Vector3)
		{
			Vector3 vector2 = (Vector3)_obj;
			if (vector2 != Vector3.zero)
			{
				if (!fastProcessingIfPossible)
				{
					return vector2.magnitude;
				}
				return vector2.sqrMagnitude;
			}
		}
		if (targetType == VariableType.GameObject)
		{
			GameObject gameObject = (GameObject)_obj;
			if (gameObject != null)
			{
				MeshRenderer component = gameObject.GetComponent<MeshRenderer>();
				if (component != null)
				{
					return component.bounds.size.x * component.bounds.size.y * component.bounds.size.z;
				}
			}
		}
		switch (targetType)
		{
		case VariableType.Rect:
		{
			Rect rect = (Rect)_obj;
			return rect.width * rect.height;
		}
		case VariableType.String:
		{
			string text = (string)_obj;
			if (text != null)
			{
				return float.Parse(text);
			}
			break;
		}
		}
		return 0f;
	}

	public static string ParseFsmVarToString(Fsm fsm, FsmVar fsmVar)
	{
		if (fsmVar == null)
		{
			return "";
		}
		object valueFromFsmVar = GetValueFromFsmVar(fsm, fsmVar);
		if (valueFromFsmVar == null)
		{
			return "";
		}
		if (fsmVar.Type == VariableType.String)
		{
			return (string)valueFromFsmVar;
		}
		if (fsmVar.Type == VariableType.Bool)
		{
			if (!(bool)valueFromFsmVar)
			{
				return "0";
			}
			return "1";
		}
		if (fsmVar.Type == VariableType.Float)
		{
			return float.Parse(valueFromFsmVar.ToString()).ToString();
		}
		if (fsmVar.Type == VariableType.Int)
		{
			return int.Parse(valueFromFsmVar.ToString()).ToString();
		}
		if (fsmVar.Type == VariableType.Vector2)
		{
			Vector2 vector = (Vector2)valueFromFsmVar;
			return vector.x + "," + vector.y;
		}
		if (fsmVar.Type == VariableType.Vector3)
		{
			Vector3 vector2 = (Vector3)valueFromFsmVar;
			return vector2.x + "," + vector2.y + "," + vector2.z;
		}
		if (fsmVar.Type == VariableType.Quaternion)
		{
			Quaternion quaternion = (Quaternion)valueFromFsmVar;
			return quaternion.x + "," + quaternion.y + "," + quaternion.z + "," + quaternion.w;
		}
		if (fsmVar.Type == VariableType.Rect)
		{
			Rect rect = (Rect)valueFromFsmVar;
			return rect.x + "," + rect.y + "," + rect.width + "," + rect.height;
		}
		if (fsmVar.Type == VariableType.Color)
		{
			Color color = (Color)valueFromFsmVar;
			return color.r + "," + color.g + "," + color.b + "," + color.a;
		}
		if (fsmVar.Type == VariableType.GameObject)
		{
			return ((GameObject)valueFromFsmVar).name;
		}
		if (fsmVar.Type == VariableType.Material)
		{
			return ((Material)valueFromFsmVar).name;
		}
		if (fsmVar.Type == VariableType.Texture)
		{
			return ((Texture2D)valueFromFsmVar).name;
		}
		Debug.LogWarning("ParseValueToString type not supported " + valueFromFsmVar.GetType());
		return "<" + fsmVar.Type.ToString() + "> not supported";
	}

	public static string ParseValueToString(object item, bool useBytes)
	{
		return "";
	}

	public static string ParseValueToString(object item)
	{
		if (item == null)
		{
			return "";
		}
		if (item.GetType() == typeof(string))
		{
			return "string(" + item.ToString() + ")";
		}
		if (item.GetType() == typeof(bool))
		{
			return "bool(" + (((bool)item) ? 1 : 0) + ")";
		}
		if (item.GetType() == typeof(float))
		{
			return "float(" + float.Parse(item.ToString()) + ")";
		}
		if (item.GetType() == typeof(int))
		{
			return "int(" + int.Parse(item.ToString()) + ")";
		}
		if (item.GetType() == typeof(Vector2))
		{
			Vector2 vector = (Vector2)item;
			return "vector2(" + vector.x + "," + vector.y + ")";
		}
		if (item.GetType() == typeof(Vector3))
		{
			Vector3 vector2 = (Vector3)item;
			return "vector3(" + vector2.x + "," + vector2.y + "," + vector2.z + ")";
		}
		if (item.GetType() == typeof(Vector4))
		{
			Vector4 vector3 = (Vector4)item;
			return "vector4(" + vector3.x + "," + vector3.y + "," + vector3.z + "," + vector3.w + ")";
		}
		if (item.GetType() == typeof(Quaternion))
		{
			Quaternion quaternion = (Quaternion)item;
			return "quaternion(" + quaternion.x + "," + quaternion.y + "," + quaternion.z + "," + quaternion.w + ")";
		}
		if (item.GetType() == typeof(Rect))
		{
			Rect rect = (Rect)item;
			return "rect(" + rect.x + "," + rect.y + "," + rect.width + "," + rect.height + ")";
		}
		if (item.GetType() == typeof(Color))
		{
			Color color = (Color)item;
			return "color(" + color.r + "," + color.g + "," + color.b + "," + color.a + ")";
		}
		if (item.GetType() == typeof(Texture2D))
		{
			byte[] inArray = ((Texture2D)item).EncodeToPNG();
			return "texture(" + Convert.ToBase64String(inArray) + ")";
		}
		if (item.GetType() == typeof(GameObject))
		{
			GameObject gameObject = (GameObject)item;
			return "gameObject(" + gameObject.name + ")";
		}
		Debug.LogWarning("ParseValueToString type not supported " + item.GetType());
		return "<" + item.GetType()?.ToString() + "> not supported";
	}

	public static object ParseValueFromString(string source, bool useBytes)
	{
		return null;
	}

	public static object ParseValueFromString(string source, VariableType type)
	{
		Type typeFromHandle = typeof(string);
		switch (type)
		{
		case VariableType.Bool:
			typeFromHandle = typeof(bool);
			break;
		case VariableType.Color:
			typeFromHandle = typeof(Color);
			break;
		case VariableType.Float:
			typeFromHandle = typeof(float);
			break;
		case VariableType.GameObject:
			typeFromHandle = typeof(GameObject);
			break;
		case VariableType.Int:
			typeFromHandle = typeof(int);
			break;
		case VariableType.Quaternion:
			typeFromHandle = typeof(Quaternion);
			break;
		case VariableType.Rect:
			typeFromHandle = typeof(Rect);
			break;
		case VariableType.Vector2:
			typeFromHandle = typeof(Vector2);
			break;
		case VariableType.Vector3:
			typeFromHandle = typeof(Vector3);
			break;
		case VariableType.Unknown:
			return ParseValueFromString(source);
		}
		return ParseValueFromString(source, typeFromHandle);
	}

	public static object ParseValueFromString(string source, Type type)
	{
		if (source == null)
		{
			return null;
		}
		if (type == typeof(string))
		{
			return source;
		}
		if (type == typeof(bool))
		{
			if (string.Equals(source, "true", StringComparison.OrdinalIgnoreCase))
			{
				return true;
			}
			if (string.Equals(source, "false", StringComparison.OrdinalIgnoreCase))
			{
				return false;
			}
			return (int.Parse(source) != 0) ? true : false;
		}
		if (type == typeof(int))
		{
			return int.Parse(source);
		}
		if (type == typeof(float))
		{
			return float.Parse(source);
		}
		if (type == typeof(Vector2))
		{
			string text = "vector2\\([x],[y]\\)";
			string text2 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text = text.Replace("[x]", "(?<x>" + text2 + ")");
			text = text.Replace("[y]", "(?<y>" + text2 + ")");
			text = "^\\s*" + text;
			Match match = new Regex(text).Match(source);
			if (match.Groups["x"].Value != "" && match.Groups["y"].Value != "")
			{
				return new Vector2(float.Parse(match.Groups["x"].Value), float.Parse(match.Groups["y"].Value));
			}
			return Vector2.zero;
		}
		if (type == typeof(Vector3))
		{
			string text3 = "vector3\\([x],[y],[z]\\)";
			string text4 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text3 = text3.Replace("[x]", "(?<x>" + text4 + ")");
			text3 = text3.Replace("[y]", "(?<y>" + text4 + ")");
			text3 = text3.Replace("[z]", "(?<z>" + text4 + ")");
			text3 = "^\\s*" + text3;
			Match match2 = new Regex(text3).Match(source);
			if (match2.Groups["x"].Value != "" && match2.Groups["y"].Value != "" && match2.Groups["z"].Value != "")
			{
				return new Vector3(float.Parse(match2.Groups["x"].Value), float.Parse(match2.Groups["y"].Value), float.Parse(match2.Groups["z"].Value));
			}
			return Vector3.zero;
		}
		if (type == typeof(Vector4))
		{
			string text5 = "vector4\\([x],[y],[z],[w]\\)";
			string text6 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text5 = text5.Replace("[x]", "(?<x>" + text6 + ")");
			text5 = text5.Replace("[y]", "(?<y>" + text6 + ")");
			text5 = text5.Replace("[z]", "(?<z>" + text6 + ")");
			text5 = text5.Replace("[w]", "(?<w>" + text6 + ")");
			text5 = "^\\s*" + text5;
			Match match3 = new Regex(text5).Match(source);
			if (match3.Groups["x"].Value != "" && match3.Groups["y"].Value != "" && match3.Groups["z"].Value != "" && match3.Groups["z"].Value != "")
			{
				return new Vector4(float.Parse(match3.Groups["x"].Value), float.Parse(match3.Groups["y"].Value), float.Parse(match3.Groups["z"].Value), float.Parse(match3.Groups["w"].Value));
			}
			return Vector4.zero;
		}
		if (type == typeof(Rect))
		{
			string text7 = "rect\\([x],[y],[w],[h]\\)";
			string text8 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text7 = text7.Replace("[x]", "(?<x>" + text8 + ")");
			text7 = text7.Replace("[y]", "(?<y>" + text8 + ")");
			text7 = text7.Replace("[w]", "(?<w>" + text8 + ")");
			text7 = text7.Replace("[h]", "(?<h>" + text8 + ")");
			text7 = "^\\s*" + text7;
			Match match4 = new Regex(text7).Match(source);
			if (match4.Groups["x"].Value != "" && match4.Groups["y"].Value != "" && match4.Groups["w"].Value != "" && match4.Groups["h"].Value != "")
			{
				return new Rect(float.Parse(match4.Groups["x"].Value), float.Parse(match4.Groups["y"].Value), float.Parse(match4.Groups["w"].Value), float.Parse(match4.Groups["h"].Value));
			}
			return new Rect(0f, 0f, 0f, 0f);
		}
		if (type == typeof(Quaternion))
		{
			string text9 = "quaternion\\([x],[y],[z],[w]\\)";
			string text10 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text9 = text9.Replace("[x]", "(?<x>" + text10 + ")");
			text9 = text9.Replace("[y]", "(?<y>" + text10 + ")");
			text9 = text9.Replace("[z]", "(?<z>" + text10 + ")");
			text9 = text9.Replace("[w]", "(?<w>" + text10 + ")");
			text9 = "^\\s*" + text9;
			Match match5 = new Regex(text9).Match(source);
			if (match5.Groups["x"].Value != "" && match5.Groups["y"].Value != "" && match5.Groups["z"].Value != "" && match5.Groups["z"].Value != "")
			{
				return new Quaternion(float.Parse(match5.Groups["x"].Value), float.Parse(match5.Groups["y"].Value), float.Parse(match5.Groups["z"].Value), float.Parse(match5.Groups["w"].Value));
			}
			return Quaternion.identity;
		}
		if (type == typeof(Color))
		{
			string text11 = "color\\([r],[g],[b],[a]\\)";
			string text12 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text11 = text11.Replace("[r]", "(?<r>" + text12 + ")");
			text11 = text11.Replace("[g]", "(?<g>" + text12 + ")");
			text11 = text11.Replace("[b]", "(?<b>" + text12 + ")");
			text11 = text11.Replace("[a]", "(?<a>" + text12 + ")");
			text11 = "^\\s*" + text11;
			Match match6 = new Regex(text11).Match(source);
			if (match6.Groups["r"].Value != "" && match6.Groups["g"].Value != "" && match6.Groups["b"].Value != "" && match6.Groups["a"].Value != "")
			{
				return new Color(float.Parse(match6.Groups["r"].Value), float.Parse(match6.Groups["g"].Value), float.Parse(match6.Groups["b"].Value), float.Parse(match6.Groups["a"].Value));
			}
			return Color.black;
		}
		if (type == typeof(GameObject))
		{
			source = source.Substring(11, source.Length - 12);
			return GameObject.Find(source);
		}
		Debug.LogWarning("ParseValueFromString failed for " + source);
		return null;
	}

	public static object ParseValueFromString(string source)
	{
		if (source == null)
		{
			return null;
		}
		if (source.StartsWith("string("))
		{
			source = source.Substring(7, source.Length - 8);
			return source;
		}
		if (source.StartsWith("bool("))
		{
			source = source.Substring(5, source.Length - 6);
			return int.Parse(source) == 1;
		}
		if (source.StartsWith("int("))
		{
			source = source.Substring(4, source.Length - 5);
			return int.Parse(source);
		}
		if (source.StartsWith("float("))
		{
			source = source.Substring(6, source.Length - 7);
			return float.Parse(source);
		}
		if (source.StartsWith("vector2("))
		{
			string text = "vector2\\([x],[y]\\)";
			string text2 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text = text.Replace("[x]", "(?<x>" + text2 + ")");
			text = text.Replace("[y]", "(?<y>" + text2 + ")");
			text = "^\\s*" + text;
			Match match = new Regex(text).Match(source);
			if (match.Groups["x"].Value != "" && match.Groups["y"].Value != "")
			{
				return new Vector2(float.Parse(match.Groups["x"].Value), float.Parse(match.Groups["y"].Value));
			}
			return Vector2.zero;
		}
		if (source.StartsWith("vector3("))
		{
			string text3 = "vector3\\([x],[y],[z]\\)";
			string text4 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text3 = text3.Replace("[x]", "(?<x>" + text4 + ")");
			text3 = text3.Replace("[y]", "(?<y>" + text4 + ")");
			text3 = text3.Replace("[z]", "(?<z>" + text4 + ")");
			text3 = "^\\s*" + text3;
			Match match2 = new Regex(text3).Match(source);
			if (match2.Groups["x"].Value != "" && match2.Groups["y"].Value != "" && match2.Groups["z"].Value != "")
			{
				return new Vector3(float.Parse(match2.Groups["x"].Value), float.Parse(match2.Groups["y"].Value), float.Parse(match2.Groups["z"].Value));
			}
			return Vector3.zero;
		}
		if (source.StartsWith("vector4("))
		{
			string text5 = "vector4\\([x],[y],[z],[w]\\)";
			string text6 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text5 = text5.Replace("[x]", "(?<x>" + text6 + ")");
			text5 = text5.Replace("[y]", "(?<y>" + text6 + ")");
			text5 = text5.Replace("[z]", "(?<z>" + text6 + ")");
			text5 = text5.Replace("[w]", "(?<w>" + text6 + ")");
			text5 = "^\\s*" + text5;
			Match match3 = new Regex(text5).Match(source);
			if (match3.Groups["x"].Value != "" && match3.Groups["y"].Value != "" && match3.Groups["z"].Value != "" && match3.Groups["z"].Value != "")
			{
				return new Vector4(float.Parse(match3.Groups["x"].Value), float.Parse(match3.Groups["y"].Value), float.Parse(match3.Groups["z"].Value), float.Parse(match3.Groups["w"].Value));
			}
			return Vector4.zero;
		}
		if (source.StartsWith("rect("))
		{
			string text7 = "rect\\([x],[y],[w],[h]\\)";
			string text8 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text7 = text7.Replace("[x]", "(?<x>" + text8 + ")");
			text7 = text7.Replace("[y]", "(?<y>" + text8 + ")");
			text7 = text7.Replace("[w]", "(?<w>" + text8 + ")");
			text7 = text7.Replace("[h]", "(?<h>" + text8 + ")");
			text7 = "^\\s*" + text7;
			Match match4 = new Regex(text7).Match(source);
			if (match4.Groups["x"].Value != "" && match4.Groups["y"].Value != "" && match4.Groups["w"].Value != "" && match4.Groups["h"].Value != "")
			{
				return new Rect(float.Parse(match4.Groups["x"].Value), float.Parse(match4.Groups["y"].Value), float.Parse(match4.Groups["w"].Value), float.Parse(match4.Groups["h"].Value));
			}
			return new Rect(0f, 0f, 0f, 0f);
		}
		if (source.StartsWith("quaternion("))
		{
			string text9 = "quaternion\\([x],[y],[z],[w]\\)";
			string text10 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text9 = text9.Replace("[x]", "(?<x>" + text10 + ")");
			text9 = text9.Replace("[y]", "(?<y>" + text10 + ")");
			text9 = text9.Replace("[z]", "(?<z>" + text10 + ")");
			text9 = text9.Replace("[w]", "(?<w>" + text10 + ")");
			text9 = "^\\s*" + text9;
			Match match5 = new Regex(text9).Match(source);
			if (match5.Groups["x"].Value != "" && match5.Groups["y"].Value != "" && match5.Groups["z"].Value != "" && match5.Groups["z"].Value != "")
			{
				return new Quaternion(float.Parse(match5.Groups["x"].Value), float.Parse(match5.Groups["y"].Value), float.Parse(match5.Groups["z"].Value), float.Parse(match5.Groups["w"].Value));
			}
			return Quaternion.identity;
		}
		if (source.StartsWith("color("))
		{
			string text11 = "color\\([r],[g],[b],[a]\\)";
			string text12 = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?";
			text11 = text11.Replace("[r]", "(?<r>" + text12 + ")");
			text11 = text11.Replace("[g]", "(?<g>" + text12 + ")");
			text11 = text11.Replace("[b]", "(?<b>" + text12 + ")");
			text11 = text11.Replace("[a]", "(?<a>" + text12 + ")");
			text11 = "^\\s*" + text11;
			Match match6 = new Regex(text11).Match(source);
			if (match6.Groups["r"].Value != "" && match6.Groups["g"].Value != "" && match6.Groups["b"].Value != "" && match6.Groups["a"].Value != "")
			{
				return new Color(float.Parse(match6.Groups["r"].Value), float.Parse(match6.Groups["g"].Value), float.Parse(match6.Groups["b"].Value), float.Parse(match6.Groups["a"].Value));
			}
			return Color.black;
		}
		if (source.StartsWith("texture("))
		{
			source = source.Substring(8, source.Length - 9);
			byte[] data = Convert.FromBase64String(source);
			Texture2D texture2D = new Texture2D(16, 16);
			texture2D.LoadImage(data);
			return texture2D;
		}
		if (source.StartsWith("gameObject("))
		{
			source = source.Substring(11, source.Length - 12);
			return GameObject.Find(source);
		}
		Debug.LogWarning("ParseValueFromString failed for " + source);
		return null;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayMakerUtils_Extensions
using System;
using System.Collections;
using HutongGames.PlayMaker;
using UnityEngine;

public static class PlayMakerUtils_Extensions
{
	public static int IndexOf(ArrayList target, object value)
	{
		return IndexOf(target, value, 0, target.Count);
	}

	public static int IndexOf(ArrayList target, object value, int startIndex)
	{
		if (startIndex > target.Count)
		{
			throw new ArgumentOutOfRangeException("startIndex", "ArgumentOutOfRange_Index");
		}
		return IndexOf(target, value, startIndex, target.Count - startIndex);
	}

	public static int IndexOf(ArrayList target, object value, int startIndex, int count)
	{
		if (startIndex < 0 || startIndex >= target.Count)
		{
			throw new ArgumentOutOfRangeException("startIndex", "ArgumentOutOfRange_Index");
		}
		if (count < 0 || startIndex > target.Count - count)
		{
			throw new ArgumentOutOfRangeException("count", "ArgumentOutOfRange_Count");
		}
		if (target.Count == 0)
		{
			return -1;
		}
		int num = startIndex + count;
		if (value == null)
		{
			for (int i = startIndex; i < num; i++)
			{
				if (target[i] == null)
				{
					return i;
				}
			}
			return -1;
		}
		for (int j = startIndex; j < num; j++)
		{
			if (target[j] != null && target[j].Equals(value))
			{
				return j;
			}
		}
		return -1;
	}

	public static int LastIndexOf(ArrayList target, object value)
	{
		return LastIndexOf(target, value, target.Count - 1, target.Count);
	}

	public static int LastIndexOf(ArrayList target, object value, int startIndex)
	{
		return LastIndexOf(target, value, startIndex, startIndex + 1);
	}

	public static int LastIndexOf(ArrayList target, object value, int startIndex, int count)
	{
		if (target.Count == 0)
		{
			return -1;
		}
		if (startIndex < 0 || startIndex >= target.Count)
		{
			throw new ArgumentOutOfRangeException("startIndex", "ArgumentOutOfRange_Index");
		}
		if (count < 0 || startIndex > target.Count - count)
		{
			throw new ArgumentOutOfRangeException("count", "ArgumentOutOfRange_Count");
		}
		int num = startIndex + count - 1;
		if (value == null)
		{
			for (int num2 = num; num2 >= startIndex; num2--)
			{
				if (target[num2] == null)
				{
					return num2;
				}
			}
			return -1;
		}
		for (int num3 = num; num3 >= startIndex; num3--)
		{
			if (target[num3] != null && target[num3].Equals(value))
			{
				return num3;
			}
		}
		return -1;
	}

	public static string GetPath(this Transform current)
	{
		if (current.parent == null)
		{
			return "/" + current.name;
		}
		return current.parent.GetPath() + "/" + current.name;
	}

	public static string GetPath(this Component component)
	{
		return component.transform.GetPath();
	}

	public static string GetActionPath(this FsmStateAction action)
	{
		return action.Fsm.GameObject.transform.GetPath() + "/" + action.Fsm.Name + ":" + action.State.Name + ":" + action.Name;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PlayMakerUtilsDotNetExtensions
using HutongGames.PlayMaker;

public static class PlayMakerUtilsDotNetExtensions
{
	public static bool Contains(this VariableType[] target, VariableType vType)
	{
		if (target == null)
		{
			return false;
		}
		for (int i = 0; i < target.Length; i++)
		{
			if (target[i] == vType)
			{
				return true;
			}
		}
		return false;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PopulationSystemManager
using UnityEngine;

public class PopulationSystemManager : MonoBehaviour
{
	[SerializeField]
	private GameObject planePrefab;

	[SerializeField]
	private GameObject circlePrefab;

	public GameObject pointPrefab;

	[HideInInspector]
	public bool isConcert;

	[HideInInspector]
	public bool isStreet;

	[HideInInspector]
	public Vector3 mousePos;

	public void Concert(Vector3 pos)
	{
		isConcert = false;
		GameObject obj = new GameObject();
		obj.transform.position = pos;
		obj.name = "Audience";
		obj.AddComponent<StandingPeopleConcert>();
		StandingPeopleConcert component = obj.GetComponent<StandingPeopleConcert>();
		component.planePrefab = planePrefab;
		component.circlePrefab = circlePrefab;
		component.SpawnRectangleSurface();
	}

	public void Street(Vector3 pos)
	{
		isStreet = false;
		GameObject obj = new GameObject();
		obj.transform.position = pos;
		obj.name = "Talking people";
		obj.AddComponent<StandingPeopleStreet>();
		StandingPeopleStreet component = obj.GetComponent<StandingPeopleStreet>();
		component.planePrefab = planePrefab;
		component.circlePrefab = circlePrefab;
		component.SpawnRectangleSurface();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PricingMachine
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class PricingMachine : MonoBehaviour
{
	public GameObject canvasOBJ;

	public GameObject UIproductsContainer;

	public GameObject UIPricingPrefabOBJ;

	public GameObject setAllPricesButtonOBJ;

	public GameObject noLightingCanvasOBJ;

	[Space(10f)]
	public Image pricingImage;

	public TextMeshProUGUI pricingMarketPrice;

	public TextMeshProUGUI pricingYourPrice;

	public TextMeshProUGUI pricingCurrentPrice;

	public TextMeshProUGUI pricingProductName;

	public TextMeshProUGUI pricingBrandName;

	public TextMeshProUGUI percentageText;

	[Space(10f)]
	public bool roundPricesDown;

	private int currentPercentageValue = 100;

	private TextMeshProUGUI currentTMPToUpdate;

	private int currentProductID;

	private string basefloatString;

	private ProductListing pListing;

	private bool generating;

	private Player MainPlayer;

	private string[] keyCodes = new string[10] { "Numpad 0", "Numpad 1", "Numpad 2", "Numpad 3", "Numpad 4", "Numpad 5", "Numpad 6", "Numpad 7", "Numpad 8", "Numpad 9" };

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
	}

	private void OnEnable()
	{
		if (GameData.Instance.GetComponent<UpgradesManager>().softwareUpgradePerk)
		{
			canvasOBJ.transform.Find("Version").GetComponent<TextMeshProUGUI>().text = "SuperMart V2.01";
			setAllPricesButtonOBJ.SetActive(value: true);
		}
		if (GameData.Instance.GetComponent<DebtManager>().consequencesValues[1])
		{
			noLightingCanvasOBJ.SetActive(value: true);
		}
		else
		{
			noLightingCanvasOBJ.SetActive(value: false);
		}
		currentProductID = -1;
		pricingImage.sprite = null;
		pricingMarketPrice.text = "$0,00";
		pricingYourPrice.text = "$0,00";
		pricingCurrentPrice.text = "$0,00";
		pricingProductName.text = "";
		pricingBrandName.text = "";
		basefloatString = "";
		if (!pListing)
		{
			pListing = ProductListing.Instance;
		}
		GenerateUIPrefabs();
		canvasOBJ.SetActive(value: true);
	}

	private void OnDisable()
	{
		if (generating)
		{
			StopAllCoroutines();
			generating = false;
		}
		canvasOBJ.SetActive(value: false);
		noLightingCanvasOBJ.SetActive(value: false);
	}

	private void Update()
	{
		if (!generating && currentProductID != -1)
		{
			NumpadSetPricing();
		}
	}

	private void GenerateUIPrefabs()
	{
		if (UIproductsContainer.transform.childCount > 0)
		{
			int childCount = UIproductsContainer.transform.childCount;
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(UIproductsContainer.transform.GetChild(childCount - 1 - i).gameObject);
			}
		}
		if (!generating)
		{
			StartCoroutine(Generation());
		}
	}

	private IEnumerator Generation()
	{
		generating = true;
		int index = 0;
		int index2 = 0;
		List<string> productTiers = pListing.tiers.ToList();
		List<int> productGroups = pListing.productGroups.ToList();
		List<bool> unlockedGroups = pListing.unlockedProductTiers.ToList();
		productTiers = productTiers.OrderBy((string d) => productGroups[index++]).ToList();
		unlockedGroups = unlockedGroups.OrderBy((bool d) => productGroups[index2++]).ToList();
		for (int i = 0; i < unlockedGroups.Count; i++)
		{
			if (unlockedGroups[i])
			{
				string[] array = productTiers[i].Split(char.Parse("-"));
				int num = int.Parse(array[0]);
				int num2 = int.Parse(array[1]);
				for (int j = num; j < num2 + 1; j++)
				{
					GameObject obj = Object.Instantiate(UIPricingPrefabOBJ, UIproductsContainer.transform);
					obj.transform.Find("ProductName").GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString("product" + j);
					obj.transform.Find("BrandName").GetComponent<TextMeshProUGUI>().text = pListing.productPrefabs[j].GetComponent<Data_Product>().productBrand;
					obj.transform.Find("ProductBCK/ProductImage").GetComponent<Image>().sprite = pListing.productSprites[j];
					float num3 = pListing.tierInflation[pListing.productPrefabs[j].GetComponent<Data_Product>().productTier];
					float price = pListing.productPrefabs[j].GetComponent<Data_Product>().basePricePerUnit * num3;
					obj.transform.Find("MarketPriceBCK/MarketPrice").GetComponent<TextMeshProUGUI>().text = pListing.ConvertFloatToTextPrice(price);
					float price2 = pListing.productPlayerPricing[j];
					obj.transform.Find("YourPriceBCK/YourPrice").GetComponent<TextMeshProUGUI>().text = pListing.ConvertFloatToTextPrice(price2);
					obj.transform.Find("SelectionButton").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("ProductID").Value = j;
					int productTier = pListing.productPrefabs[j].GetComponent<Data_Product>().productTier;
					int num4 = pListing.productGroups[productTier];
					obj.GetComponent<Image>().color = pListing.groupsColors[num4];
				}
				yield return null;
			}
		}
		yield return null;
		generating = false;
	}

	public void ShowPriceInfo(int productID, GameObject buttonOBJ)
	{
		currentProductID = productID;
		currentTMPToUpdate = buttonOBJ.transform.Find("YourPriceBCK/YourPrice").GetComponent<TextMeshProUGUI>();
		pricingImage.sprite = pListing.productSprites[productID];
		float num = pListing.tierInflation[pListing.productPrefabs[productID].GetComponent<Data_Product>().productTier];
		float price = pListing.productPrefabs[productID].GetComponent<Data_Product>().basePricePerUnit * num;
		pricingMarketPrice.text = pListing.ConvertFloatToTextPrice(price);
		float price2 = pListing.productPlayerPricing[productID];
		pricingYourPrice.text = pListing.ConvertFloatToTextPrice(price2);
		pricingCurrentPrice.text = "$0,00";
		pricingProductName.text = LocalizationManager.instance.GetLocalizationString("product" + productID);
		pricingBrandName.text = pListing.productPrefabs[productID].GetComponent<Data_Product>().productBrand;
		basefloatString = "";
	}

	private void NumpadSetPricing()
	{
		if (MainPlayer.GetButtonDown("Numpad Delete"))
		{
			NumberDelete();
			return;
		}
		for (int i = 0; i < keyCodes.Length; i++)
		{
			if (MainPlayer.GetButtonDown(keyCodes[i]))
			{
				NumberPricing(i);
				return;
			}
		}
		if (MainPlayer.GetButtonDown("Numpad Period"))
		{
			NumberPeriod();
		}
		else if (MainPlayer.GetButtonDown("Numpad Accept"))
		{
			NumberAccept();
		}
	}

	public void NumberPricing(int intNumber)
	{
		if (basefloatString.Length >= 7)
		{
			return;
		}
		if (basefloatString.Contains(","))
		{
			string[] array = basefloatString.Split(",");
			if (array.Length > 1 && array[1].Length >= 2)
			{
				return;
			}
		}
		basefloatString += intNumber;
		pricingCurrentPrice.text = "$" + basefloatString;
	}

	public void NumberDelete()
	{
		if (basefloatString.Length != 0)
		{
			basefloatString = basefloatString.Substring(0, basefloatString.Length - 1);
			pricingCurrentPrice.text = "$" + basefloatString;
		}
	}

	public void NumberPeriod()
	{
		if (basefloatString.Length < 7 && basefloatString.Length != 0 && !basefloatString.Contains(","))
		{
			basefloatString += ",";
			pricingCurrentPrice.text = "$" + basefloatString;
		}
	}

	public void NumberAccept()
	{
		if (currentProductID == -1)
		{
			return;
		}
		float result;
		if (basefloatString.Length == 0 || basefloatString.Substring(basefloatString.Length - 1, 1) == ",")
		{
			if (basefloatString.Length == 0)
			{
				AcceptPercentage();
			}
		}
		else if (float.TryParse(basefloatString, out result))
		{
			result = Mathf.Round(result * 100f) / 100f;
			if (pListing.productPlayerPricing[currentProductID] != result)
			{
				currentTMPToUpdate.text = pListing.ConvertFloatToTextPrice(result);
				pricingYourPrice.text = pListing.ConvertFloatToTextPrice(result);
				FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdPlayPricingSound();
				pListing.CmdUpdateProductPrice(currentProductID, result);
			}
		}
	}

	public void SetPercentageValue(bool isAdding, int quantity)
	{
		if (!isAdding)
		{
			quantity *= -1;
		}
		currentPercentageValue += quantity;
		currentPercentageValue = Mathf.Clamp(currentPercentageValue, 10, 500);
		percentageText.text = currentPercentageValue + "%";
	}

	public void AcceptPercentage()
	{
		if (currentProductID != -1)
		{
			float num = pListing.tierInflation[pListing.productPrefabs[currentProductID].GetComponent<Data_Product>().productTier];
			float num2 = pListing.productPrefabs[currentProductID].GetComponent<Data_Product>().basePricePerUnit * num * ((float)currentPercentageValue / 100f);
			num2 = ((!roundPricesDown) ? (Mathf.Floor(num2 * 100f) / 100f) : (Mathf.Floor(num2 * 10f) / 10f));
			if (pListing.productPlayerPricing[currentProductID] != num2)
			{
				currentTMPToUpdate.text = pListing.ConvertFloatToTextPrice(num2);
				pricingYourPrice.text = pListing.ConvertFloatToTextPrice(num2);
				FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdPlayPricingSound();
				pListing.CmdUpdateProductPrice(currentProductID, num2);
			}
		}
	}

	public void SetAllPercentages()
	{
		GetComponent<PricingMachineAutomatic>().SetAutomaticPricing(pListing, currentPercentageValue, roundPricesDown);
		Camera.main.GetComponent<CustomCameraController>().RestoreCamera();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// PricingMachineAutomatic
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PricingMachineAutomatic : MonoBehaviour
{
	public GameObject settingAllPricesOBJ;

	public GameObject cameraTriggerOBJ;

	public Image productImage;

	public void SetAutomaticPricing(ProductListing pListing, int percentageValue, bool roundPricesDown)
	{
		StartCoroutine(SetPricingRoutine(pListing, percentageValue, roundPricesDown));
	}

	private IEnumerator SetPricingRoutine(ProductListing pListing, int percentageValue, bool roundPricesDown)
	{
		if (pListing.availableProducts.Count > 0)
		{
			settingAllPricesOBJ.SetActive(value: true);
			cameraTriggerOBJ.SetActive(value: false);
			List<int> availablePList = pListing.availableProducts;
			WaitForSeconds waitTime = new WaitForSeconds(0.25f);
			for (int i = 0; i < availablePList.Count; i++)
			{
				int num = availablePList[i];
				float num2 = pListing.tierInflation[pListing.productPrefabs[num].GetComponent<Data_Product>().productTier];
				float num3 = pListing.productPrefabs[num].GetComponent<Data_Product>().basePricePerUnit * num2 * ((float)percentageValue / 100f);
				num3 = ((!roundPricesDown) ? (Mathf.Floor(num3 * 100f) / 100f) : (Mathf.Floor(num3 * 10f) / 10f));
				if (pListing.productPlayerPricing[num] != num3)
				{
					pListing.CmdUpdateProductPrice(num, num3);
				}
				productImage.sprite = pListing.productSprites[num];
				yield return waitTime;
			}
			settingAllPricesOBJ.SetActive(value: false);
			cameraTriggerOBJ.SetActive(value: true);
		}
		yield return null;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ProductAnimation
using System.Collections;
using UnityEngine;

public class ProductAnimation : MonoBehaviour
{
	public AnimationCurve parabolaCurve;

	public AnimationCurve scaleCurve;

	public void ExecuteAnimation(int ProductID, Vector3 destination)
	{
		StartCoroutine(CreateProductObject(ProductID));
		StartCoroutine(MoveProductToDestination(destination));
	}

	private IEnumerator CreateProductObject(int productID)
	{
		yield return new WaitUntil(() => ProductListing.Instance);
		Object.Instantiate(ProductListing.Instance.productPrefabs[productID], base.transform).transform.localPosition = Vector3.zero;
	}

	private IEnumerator MoveProductToDestination(Vector3 destination)
	{
		float timePassed = 0f;
		float duration = 0.5f;
		Vector3 currentPosition = base.transform.position;
		while (timePassed < duration)
		{
			timePassed += Time.deltaTime;
			float num = timePassed / duration;
			float num2 = scaleCurve.Evaluate(num);
			float y = parabolaCurve.Evaluate(num) * 0.5f;
			base.transform.position = Vector3.Lerp(currentPosition, destination, num) + new Vector3(0f, y, 0f);
			base.transform.localScale = new Vector3(num2, num2, num2);
			yield return null;
		}
		Object.Destroy(base.gameObject);
		yield return null;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ProductCheckoutSpawn
using System.Collections;
using System.Runtime.InteropServices;
using HighlightPlus;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class ProductCheckoutSpawn : NetworkBehaviour
{
	[SyncVar]
	public int productID;

	[SyncVar]
	public GameObject checkoutOBJ;

	[SyncVar]
	public GameObject NPCOBJ;

	[SyncVar]
	public float productCarryingPrice;

	public int internalDataContainerListIndex;

	public bool isFinished;

	protected uint ___checkoutOBJNetId;

	protected uint ___NPCOBJNetId;

	public int NetworkproductID
	{
		get
		{
			return productID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productID, 1uL, null);
		}
	}

	public GameObject NetworkcheckoutOBJ
	{
		get
		{
			return GetSyncVarGameObject(___checkoutOBJNetId, ref checkoutOBJ);
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter_GameObject(value, ref checkoutOBJ, 2uL, null, ref ___checkoutOBJNetId);
		}
	}

	public GameObject NetworkNPCOBJ
	{
		get
		{
			return GetSyncVarGameObject(___NPCOBJNetId, ref NPCOBJ);
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter_GameObject(value, ref NPCOBJ, 4uL, null, ref ___NPCOBJNetId);
		}
	}

	public float NetworkproductCarryingPrice
	{
		get
		{
			return productCarryingPrice;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productCarryingPrice, 8uL, null);
		}
	}

	public override void OnStartClient()
	{
		StartCoroutine(CreateProductObject());
	}

	private IEnumerator CreateProductObject()
	{
		yield return new WaitUntil(() => ProductListing.Instance);
		GameObject gameObject = Object.Instantiate(ProductListing.Instance.productPrefabs[productID], base.transform);
		gameObject.transform.localPosition = Vector3.zero;
		Data_Product component = gameObject.GetComponent<Data_Product>();
		BoxCollider component2 = GetComponent<BoxCollider>();
		component2.center = gameObject.GetComponent<BoxCollider>().center;
		if (component.hasTrueCollider)
		{
			component2.size = component.trueCollider;
		}
		else
		{
			component2.size = gameObject.GetComponent<BoxCollider>().size;
		}
		GetComponent<HighlightEffect>().enabled = true;
		isFinished = true;
		yield return null;
	}

	[Command(requiresAuthority = false)]
	public void CmdAddProductValueToCheckout()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void ProductCheckoutSpawn::CmdAddProductValueToCheckout()", 908204039, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void AddProductFromNPCEmployee()
	{
		AddProductShared();
	}

	private void AddProductShared()
	{
		AchievementsManager.Instance.CmdAddAchievementPoint(4, 1);
		if (internalDataContainerListIndex < NetworkcheckoutOBJ.GetComponent<Data_Container>().internalProductListForEmployees.Count)
		{
			NetworkcheckoutOBJ.GetComponent<Data_Container>().internalProductListForEmployees[internalDataContainerListIndex] = null;
			NetworkcheckoutOBJ.GetComponent<Data_Container>().AddItemToCheckout(productCarryingPrice, NetworkNPCOBJ);
		}
		CheckoutProductAnimation();
		NetworkServer.Destroy(base.gameObject);
	}

	public void CheckoutProductAnimation()
	{
		if ((bool)NetworkcheckoutOBJ && (bool)NetworkcheckoutOBJ.transform.Find("Bags"))
		{
			Transform transform = NetworkcheckoutOBJ.transform.Find("Bags");
			int index = 0;
			for (int i = 0; i < transform.childCount && transform.transform.GetChild(i).gameObject.activeSelf; i++)
			{
				index = i;
			}
			Vector3 destination = transform.transform.GetChild(index).transform.position + new Vector3(0f, 0.3f, 0f);
			GameData.Instance.GetComponent<NetworkSpawner>().RpcProductAnimation(productID, base.transform.position, destination);
		}
	}

	public void EndDayDestroy()
	{
		NetworkServer.Destroy(base.gameObject);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdAddProductValueToCheckout()
	{
		AddProductShared();
	}

	protected static void InvokeUserCode_CmdAddProductValueToCheckout(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddProductValueToCheckout called on client.");
		}
		else
		{
			((ProductCheckoutSpawn)obj).UserCode_CmdAddProductValueToCheckout();
		}
	}

	static ProductCheckoutSpawn()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(ProductCheckoutSpawn), "System.Void ProductCheckoutSpawn::CmdAddProductValueToCheckout()", InvokeUserCode_CmdAddProductValueToCheckout, requiresAuthority: false);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(productID);
			writer.WriteGameObject(NetworkcheckoutOBJ);
			writer.WriteGameObject(NetworkNPCOBJ);
			writer.WriteFloat(productCarryingPrice);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(productID);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteGameObject(NetworkcheckoutOBJ);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			writer.WriteGameObject(NetworkNPCOBJ);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteFloat(productCarryingPrice);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref productID, null, reader.ReadInt());
			GeneratedSyncVarDeserialize_GameObject(ref checkoutOBJ, null, reader, ref ___checkoutOBJNetId);
			GeneratedSyncVarDeserialize_GameObject(ref NPCOBJ, null, reader, ref ___NPCOBJNetId);
			GeneratedSyncVarDeserialize(ref productCarryingPrice, null, reader.ReadFloat());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productID, null, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize_GameObject(ref checkoutOBJ, null, reader, ref ___checkoutOBJNetId);
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize_GameObject(ref NPCOBJ, null, reader, ref ___NPCOBJNetId);
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productCarryingPrice, null, reader.ReadFloat());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ProductListing
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Text;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;

public class ProductListing : NetworkBehaviour
{
	public static ProductListing Instance;

	public GameObject skillTreeOBJ;

	public GameObject[] productPrefabs;

	public Sprite[] productSprites;

	[Space(10f)]
	[SyncVar]
	public float[] productPlayerPricing;

	[SyncVar]
	public float[] tierInflation;

	[SyncVar]
	public bool[] unlockedProductTiers;

	[Space(10f)]
	[SyncVar]
	public string assembledSalesList;

	public GameObject saleSignPrefabOBJ;

	public int allowedSimultaneousSales = 1;

	[Space(10f)]
	public string[] tiers;

	public List<int> availableProducts = new List<int>();

	public int[] productGroups;

	public Color[] groupsColors;

	public List<int> productsIDOnSale = new List<int>();

	public List<int> productsSaleDiscount = new List<int>();

	private List<GameObject> salesSignsList = new List<GameObject>();

	public float[] NetworkproductPlayerPricing
	{
		get
		{
			return productPlayerPricing;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productPlayerPricing, 1uL, null);
		}
	}

	public float[] NetworktierInflation
	{
		get
		{
			return tierInflation;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref tierInflation, 2uL, null);
		}
	}

	public bool[] NetworkunlockedProductTiers
	{
		get
		{
			return unlockedProductTiers;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref unlockedProductTiers, 4uL, null);
		}
	}

	public string NetworkassembledSalesList
	{
		get
		{
			return assembledSalesList;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref assembledSalesList, 8uL, null);
		}
	}

	private void Awake()
	{
		if (Instance == null)
		{
			Instance = this;
		}
	}

	public override void OnStartClient()
	{
		updateSkillState();
		updateProductList();
		StartCoroutine(DelayUpdateShelveActivation());
		GetComponent<ManagerBlackboard>().UpdateUnlockedFranchises();
	}

	[Command(requiresAuthority = false)]
	public void CmdUpdateProductPrice(int productID, float newPrice)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteFloat(newPrice);
		SendCommandInternal("System.Void ProductListing::CmdUpdateProductPrice(System.Int32,System.Single)", -2105090285, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUpdateProductPricer(int productID, float newPrice)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteFloat(newPrice);
		SendRPCInternal("System.Void ProductListing::RpcUpdateProductPricer(System.Int32,System.Single)", -25779752, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdUnlockProductTier(int tierIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(tierIndex);
		SendCommandInternal("System.Void ProductListing::CmdUnlockProductTier(System.Int32)", -1210391744, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcUnlockProductTier(int tierIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(tierIndex);
		SendRPCInternal("System.Void ProductListing::RpcUnlockProductTier(System.Int32)", -142498995, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	public void updateSkillState()
	{
		for (int i = 0; i < unlockedProductTiers.Length; i++)
		{
			GameObject gameObject = skillTreeOBJ.transform.GetChild(i).gameObject;
			if (unlockedProductTiers[i])
			{
				gameObject.GetComponent<CanvasGroup>().alpha = 1f;
				gameObject.tag = "Untagged";
				gameObject.transform.Find("Highlight2").gameObject.SetActive(value: true);
				continue;
			}
			int[] previousSkillRequirements = gameObject.GetComponent<InteractableData>().previousSkillRequirements;
			bool flag = true;
			if (previousSkillRequirements.Length == 0)
			{
				continue;
			}
			int[] array = previousSkillRequirements;
			foreach (int num in array)
			{
				if (!unlockedProductTiers[num])
				{
					flag = false;
				}
			}
			if (flag)
			{
				gameObject.transform.Find("Highlight2").gameObject.SetActive(value: true);
			}
		}
	}

	public void updateProductList()
	{
		availableProducts.Clear();
		for (int i = 0; i < unlockedProductTiers.Length; i++)
		{
			if (unlockedProductTiers[i])
			{
				string[] array = tiers[i].Split(char.Parse("-"));
				int num = int.Parse(array[0]);
				int num2 = int.Parse(array[1]);
				for (int j = num; j < num2 + 1; j++)
				{
					availableProducts.Add(j);
				}
			}
		}
	}

	private IEnumerator DelayUpdateShelveActivation()
	{
		yield return new WaitForSeconds(5f);
		updateShelvesPrices();
		if (!base.isServer)
		{
			yield return new WaitForSeconds(1f);
			InitDisassembleSyncvar();
		}
	}

	public void updateShelvesPrices()
	{
		Transform child = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(0);
		if (child.childCount == 0)
		{
			return;
		}
		foreach (Transform item in child)
		{
			int[] productInfoArray = item.GetComponent<Data_Container>().productInfoArray;
			int num = productInfoArray.Length / 2;
			for (int i = 0; i < num; i++)
			{
				int num2 = productInfoArray[i * 2];
				TextMeshPro component = item.Find("Labels").GetChild(i).GetChild(0)
					.GetComponent<TextMeshPro>();
				if (num2 < 0)
				{
					component.text = "";
				}
				else
				{
					component.text = ConvertFloatToTextPrice(productPlayerPricing[num2]).ToString();
				}
			}
		}
	}

	public void SetBoxColor(GameObject boxOBJ, int productID)
	{
		if (productID >= 0 && productID < productPrefabs.Length)
		{
			int productTier = productPrefabs[productID].GetComponent<Data_Product>().productTier;
			int num = productGroups[productTier];
			Color color = groupsColors[num];
			boxOBJ.transform.Find("BoxMesh").GetComponent<SkinnedMeshRenderer>().material.color = color;
		}
	}

	public string ConvertFloatToTextPrice(float price)
	{
		price = Mathf.Round(price * 100f) / 100f;
		string text = price.ToString();
		string currencyDecimalSeparator = CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalSeparator;
		if (currencyDecimalSeparator != "," && text.Contains(currencyDecimalSeparator))
		{
			string[] array = text.Split(char.Parse(currencyDecimalSeparator));
			text = array[0] + "," + array[1];
		}
		string[] array2 = text.Split(char.Parse(","));
		if (array2.Length > 1)
		{
			string text2 = array2[1];
			if (text2.Length == 1)
			{
				return "$" + array2[0] + "," + text2 + "0";
			}
			return "$" + text;
		}
		return "$" + array2[0] + ",00";
	}

	public void SetProductOnSale(int productID, int whichDiscount)
	{
		if (productsIDOnSale.Count < allowedSimultaneousSales && !productsIDOnSale.Contains(productID))
		{
			CmdSetProductOnSale(productID, whichDiscount);
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdSetProductOnSale(int productID, int whichDiscount)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteInt(whichDiscount);
		SendCommandInternal("System.Void ProductListing::CmdSetProductOnSale(System.Int32,System.Int32)", -1496206817, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void AssembleSalesSyncvar()
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < productsIDOnSale.Count; i++)
		{
			stringBuilder.Append(productsIDOnSale[i] + "/" + productsSaleDiscount[i]);
			if (i < productsIDOnSale.Count - 1)
			{
				stringBuilder.Append("|");
			}
		}
		NetworkassembledSalesList = stringBuilder.ToString();
	}

	private void InitDisassembleSyncvar()
	{
		if (assembledSalesList != "")
		{
			string[] array = assembledSalesList.Split("|");
			for (int i = 0; i < array.Length; i++)
			{
				string[] array2 = array[i].Split("/");
				productsIDOnSale.Add(int.Parse(array2[0]));
				productsSaleDiscount.Add(int.Parse(array2[1]));
			}
		}
		UpdateShelvesSaleSigns();
	}

	[ClientRpc]
	private void RpcSetProductOnSale(int productID, int whichDiscount)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(productID);
		writer.WriteInt(whichDiscount);
		SendRPCInternal("System.Void ProductListing::RpcSetProductOnSale(System.Int32,System.Int32)", -888996698, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void UpdateShelvesSaleSigns()
	{
		Transform child = GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(0);
		if (child.childCount == 0)
		{
			return;
		}
		foreach (Transform item in child)
		{
			int[] productInfoArray = item.GetComponent<Data_Container>().productInfoArray;
			int num = productInfoArray.Length / 2;
			for (int i = 0; i < num; i++)
			{
				Transform child2 = item.Find("Labels").GetChild(i);
				if (productsIDOnSale.Contains(productInfoArray[i * 2]))
				{
					if (child2.childCount <= 1)
					{
						GameObject gameObject = Object.Instantiate(saleSignPrefabOBJ, child2);
						gameObject.transform.SetAsLastSibling();
						gameObject.transform.localPosition = new Vector3(-0.02f, 0f, 0f);
						gameObject.transform.localRotation = Quaternion.Euler(new Vector3(0f, 90f, 90f));
						gameObject.transform.localScale = Vector3.one * 4f;
						salesSignsList.Add(gameObject);
					}
				}
				else if (child2.childCount > 1)
				{
					Object.Destroy(child2.GetChild(1).gameObject);
				}
			}
		}
	}

	public void DailySaleReset()
	{
		productsIDOnSale.Clear();
		productsSaleDiscount.Clear();
		NetworkassembledSalesList = "";
		if (salesSignsList.Count <= 0)
		{
			return;
		}
		foreach (GameObject salesSigns in salesSignsList)
		{
			if ((bool)salesSigns)
			{
				Object.Destroy(salesSigns);
			}
		}
		salesSignsList.Clear();
	}

	public void ServerClearSalesSyncvar()
	{
		NetworkassembledSalesList = "";
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdUpdateProductPrice__Int32__Single(int productID, float newPrice)
	{
		productPlayerPricing[productID] = newPrice;
		RpcUpdateProductPricer(productID, newPrice);
	}

	protected static void InvokeUserCode_CmdUpdateProductPrice__Int32__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUpdateProductPrice called on client.");
		}
		else
		{
			((ProductListing)obj).UserCode_CmdUpdateProductPrice__Int32__Single(reader.ReadInt(), reader.ReadFloat());
		}
	}

	protected void UserCode_RpcUpdateProductPricer__Int32__Single(int productID, float newPrice)
	{
		productPlayerPricing[productID] = newPrice;
		updateShelvesPrices();
	}

	protected static void InvokeUserCode_RpcUpdateProductPricer__Int32__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUpdateProductPricer called on server.");
		}
		else
		{
			((ProductListing)obj).UserCode_RpcUpdateProductPricer__Int32__Single(reader.ReadInt(), reader.ReadFloat());
		}
	}

	protected void UserCode_CmdUnlockProductTier__Int32(int tierIndex)
	{
		unlockedProductTiers[tierIndex] = false;
		RpcUnlockProductTier(tierIndex);
	}

	protected static void InvokeUserCode_CmdUnlockProductTier__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdUnlockProductTier called on client.");
		}
		else
		{
			((ProductListing)obj).UserCode_CmdUnlockProductTier__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcUnlockProductTier__Int32(int tierIndex)
	{
		unlockedProductTiers[tierIndex] = false;
	}

	protected static void InvokeUserCode_RpcUnlockProductTier__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcUnlockProductTier called on server.");
		}
		else
		{
			((ProductListing)obj).UserCode_RpcUnlockProductTier__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdSetProductOnSale__Int32__Int32(int productID, int whichDiscount)
	{
		if (productsIDOnSale.Count < allowedSimultaneousSales && !productsIDOnSale.Contains(productID))
		{
			whichDiscount = Mathf.Clamp(whichDiscount, 5, 45);
			productsIDOnSale.Add(productID);
			productsSaleDiscount.Add(whichDiscount);
			AssembleSalesSyncvar();
			RpcSetProductOnSale(productID, whichDiscount);
		}
	}

	protected static void InvokeUserCode_CmdSetProductOnSale__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdSetProductOnSale called on client.");
		}
		else
		{
			((ProductListing)obj).UserCode_CmdSetProductOnSale__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcSetProductOnSale__Int32__Int32(int productID, int whichDiscount)
	{
		if (!base.isServer)
		{
			productsIDOnSale.Add(productID);
			productsSaleDiscount.Add(whichDiscount);
		}
		AchievementsManager.Instance.AddLocalAchievementPoint(14);
		UpdateShelvesSaleSigns();
		GameCanvas.Instance.CreateCompoundWarning("slemssage1", LocalizationManager.instance.GetLocalizationString("product" + productID));
	}

	protected static void InvokeUserCode_RpcSetProductOnSale__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcSetProductOnSale called on server.");
		}
		else
		{
			((ProductListing)obj).UserCode_RpcSetProductOnSale__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	static ProductListing()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(ProductListing), "System.Void ProductListing::CmdUpdateProductPrice(System.Int32,System.Single)", InvokeUserCode_CmdUpdateProductPrice__Int32__Single, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(ProductListing), "System.Void ProductListing::CmdUnlockProductTier(System.Int32)", InvokeUserCode_CmdUnlockProductTier__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(ProductListing), "System.Void ProductListing::CmdSetProductOnSale(System.Int32,System.Int32)", InvokeUserCode_CmdSetProductOnSale__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(ProductListing), "System.Void ProductListing::RpcUpdateProductPricer(System.Int32,System.Single)", InvokeUserCode_RpcUpdateProductPricer__Int32__Single);
		RemoteProcedureCalls.RegisterRpc(typeof(ProductListing), "System.Void ProductListing::RpcUnlockProductTier(System.Int32)", InvokeUserCode_RpcUnlockProductTier__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(ProductListing), "System.Void ProductListing::RpcSetProductOnSale(System.Int32,System.Int32)", InvokeUserCode_RpcSetProductOnSale__Int32__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.Single[](writer, productPlayerPricing);
			GeneratedNetworkCode._Write_System.Single[](writer, tierInflation);
			GeneratedNetworkCode._Write_System.Boolean[](writer, unlockedProductTiers);
			writer.WriteString(assembledSalesList);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Single[](writer, productPlayerPricing);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Single[](writer, tierInflation);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Boolean[](writer, unlockedProductTiers);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			writer.WriteString(assembledSalesList);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref productPlayerPricing, null, GeneratedNetworkCode._Read_System.Single[](reader));
			GeneratedSyncVarDeserialize(ref tierInflation, null, GeneratedNetworkCode._Read_System.Single[](reader));
			GeneratedSyncVarDeserialize(ref unlockedProductTiers, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
			GeneratedSyncVarDeserialize(ref assembledSalesList, null, reader.ReadString());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productPlayerPricing, null, GeneratedNetworkCode._Read_System.Single[](reader));
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref tierInflation, null, GeneratedNetworkCode._Read_System.Single[](reader));
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref unlockedProductTiers, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref assembledSalesList, null, reader.ReadString());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ProximityActivate
using UnityEngine;

public class ProximityActivate : MonoBehaviour
{
	public Transform distanceActivator;

	public Transform lookAtActivator;

	public float distance;

	public Transform activator;

	public bool activeState;

	public CanvasGroup target;

	public bool lookAtCamera = true;

	public bool enableInfoPanel;

	public GameObject infoIcon;

	private float alpha;

	public CanvasGroup infoPanel;

	private Quaternion originRotation;

	private Quaternion targetRotation;

	private void Start()
	{
		originRotation = base.transform.rotation;
		alpha = (activeState ? 1 : (-1));
		if (activator == null)
		{
			activator = Camera.main.transform;
		}
		infoIcon.SetActive(infoPanel != null);
	}

	private bool IsTargetNear()
	{
		if ((distanceActivator.position - activator.position).sqrMagnitude < distance * distance)
		{
			if (lookAtActivator != null)
			{
				Vector3 vector = lookAtActivator.position - activator.position;
				if (Vector3.Dot(activator.forward, vector.normalized) > 0.95f)
				{
					return true;
				}
			}
			Vector3 vector2 = target.transform.position - activator.position;
			if (Vector3.Dot(activator.forward, vector2.normalized) > 0.95f)
			{
				return true;
			}
		}
		return false;
	}

	private void Update()
	{
		if (!activeState)
		{
			if (IsTargetNear())
			{
				alpha = 1f;
				activeState = true;
			}
		}
		else if (!IsTargetNear())
		{
			alpha = -1f;
			activeState = false;
			enableInfoPanel = false;
		}
		target.alpha = Mathf.Clamp01(target.alpha + alpha * Time.deltaTime);
		if (infoPanel != null)
		{
			if (Input.GetKeyDown(KeyCode.Space))
			{
				enableInfoPanel = !enableInfoPanel;
			}
			infoPanel.alpha = Mathf.Lerp(infoPanel.alpha, Mathf.Clamp01(enableInfoPanel ? alpha : 0f), Time.deltaTime * 10f);
		}
		if (lookAtCamera)
		{
			if (activeState)
			{
				targetRotation = Quaternion.LookRotation(activator.position - base.transform.position);
			}
			else
			{
				targetRotation = originRotation;
			}
			base.transform.rotation = Quaternion.Slerp(base.transform.rotation, targetRotation, Time.deltaTime);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// RampAsset
using UnityEngine;

[CreateAssetMenu]
public class RampAsset : ScriptableObject
{
	public Gradient gradient = new Gradient();

	public int size = 16;

	public bool up;

	public bool overwriteExisting = true;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// RandomEnableAnimator
using System.Collections;
using UnityEngine;

public class RandomEnableAnimator : MonoBehaviour
{
	private Animator am;

	private void Start()
	{
		am = GetComponent<Animator>();
		if ((bool)am)
		{
			am.enabled = false;
			float num = Random.Range(1f, 3.5f);
			StartCoroutine("Show", num);
		}
	}

	private IEnumerator Show(float f)
	{
		yield return new WaitForSeconds(f);
		am.enabled = true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// rawimagetest
using UnityEngine;
using Wing.uPainter;

public class rawimagetest : MonoBehaviour
{
	public PaintRawImage painter;

	private Drawer _drawer;

	private RawImagePaintCanvas _canvas;

	private void Start()
	{
		_canvas = painter.GetComponent<RawImagePaintCanvas>();
		_drawer = painter.Drawer;
		debug();
	}

	private void Update()
	{
	}

	private void debug()
	{
		_drawer.Catch(_canvas);
		_drawer.Begin();
		_drawer.TouchMove(new Vector3(200f, 200f, 0f), Vector3.zero);
		_drawer.TouchMove(new Vector3(300f, 300f, 0f), Vector3.zero);
		_drawer.TouchMove(new Vector3(500f, 500f, 0f), Vector3.zero);
		_drawer.TouchMove(new Vector3(400f, 300f, 0f), Vector3.zero);
		_drawer.TouchMove(new Vector3(200f, 400f, 0f), Vector3.zero);
		_drawer.TouchMove(new Vector3(100f, 100f, 0f), Vector3.zero);
		_drawer.TouchMove(new Vector3(100f, 100f, 0f), Vector3.zero);
		_drawer.End();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// RawImageWithRawTexture
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Wing.uPainter;

public class RawImageWithRawTexture : MonoBehaviour
{
	public Button btnChangeImage;

	public List<Texture2D> textures;

	public PaintRawImage rawImage;

	private int index;

	private void Start()
	{
		btnChangeImage.onClick.AddListener(delegate
		{
			index = (index + 1) % textures.Count;
			rawImage.texture = textures[index];
			rawImage.PaintCanvas.Initial();
		});
	}

	private void Update()
	{
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Readme
using System;
using UnityEngine;

public class Readme : ScriptableObject
{
	[Serializable]
	public class Section
	{
		public string heading;

		public string text;

		public string linkText;

		public string url;
	}

	public Texture2D icon;

	public string title;

	public Section[] sections;

	public bool loadedLayout;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Recoder
using System.Collections.Generic;
using UnityEngine;
using Wing.uPainter;

public class Recoder : MonoBehaviour
{
	private class Position
	{
		public int action;

		public float time;

		public Vector2? uv;
	}

	public PaintRawImage painter;

	private List<Position> points = new List<Position>();

	private bool _playing;

	private float _timer;

	private float _playTimer;

	private int _playIndex;

	private void Start()
	{
		painter.Drawer.AddPointEvent += Drawer_AddPointEvent;
		painter.Drawer.StartEvent += Drawer_StartEvent;
		painter.Drawer.EndEvent += Drawer_EndEvent;
	}

	private void Drawer_EndEvent(Drawer obj)
	{
		if (!_playing)
		{
			points.Add(new Position
			{
				action = 2
			});
		}
	}

	private void Drawer_StartEvent(Drawer obj)
	{
		if (!_playing)
		{
			points.Add(new Position
			{
				action = 0
			});
		}
	}

	private void Drawer_AddPointEvent(Drawer sender, Vector3 mousePos, Vector3 worldPos, Vector2? uv = null)
	{
		if (!_playing)
		{
			float time = 0f;
			if (_timer > 0f)
			{
				time = Time.realtimeSinceStartup - _timer;
			}
			_timer = Time.realtimeSinceStartup;
			points.Add(new Position
			{
				action = 1,
				time = time,
				uv = uv
			});
		}
	}

	public void Recode()
	{
		_playing = false;
		_timer = 0f;
		points.Clear();
		painter.EnablePaint = true;
		painter.PaintCanvas.Layers[0].Clear(store: false);
	}

	public void Play()
	{
		_playing = true;
		_timer = 0f;
		_playIndex = 0;
		painter.EnablePaint = false;
		painter.PaintCanvas.Layers[0].Clear(store: false);
	}

	private void Update()
	{
		if (_playing && points.Count > _playIndex)
		{
			Position position = points[_playIndex];
			_playTimer += Time.deltaTime;
			if (position.action == 0)
			{
				painter.Drawer.Catch(painter.PaintCanvas);
				painter.Drawer.Begin();
				_playIndex++;
			}
			else if (position.action == 2)
			{
				painter.Drawer.End();
				_playIndex++;
			}
			else if (_playTimer >= position.time)
			{
				painter.Drawer.TouchMove(Vector3.zero, Vector3.zero, position.uv);
				_playIndex++;
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// RedoTool
using Wing.uPainter;

public class RedoTool : BaseTool
{
	public override bool Enable => NormalSingleton<PainterOperation>.Instance.CanRedo;

	public override void OnClick()
	{
		base.OnClick();
		NormalSingleton<PainterOperation>.Instance.Redo();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ReferenceLight
using System.Collections;
using Mirror;
using UnityEngine;

public class ReferenceLight : NetworkBehaviour
{
	public Light lightComponent;

	public MeshRenderer lightMrenderer;

	public Material lightMaterial;

	public int materialIndex;

	public override void OnStartClient()
	{
		if (!base.isServer)
		{
			StartCoroutine(DelayedParenting());
		}
		else
		{
			base.enabled = false;
		}
	}

	private IEnumerator DelayedParenting()
	{
		yield return new WaitForSeconds(5f);
		while (!GameData.Instance)
		{
			yield return null;
		}
		base.gameObject.transform.SetParent(GameData.Instance.GetComponent<NetworkSpawner>().levelPropsOBJ.transform.GetChild(7));
		yield return null;
		base.enabled = false;
	}

	public override bool Weaved()
	{
		return true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// References_StatisticsProduct
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class References_StatisticsProduct : MonoBehaviour
{
	public TextMeshProUGUI productNameField;

	public Image productIMG;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ReflectionProbesManager
using System.Collections;
using UnityEngine;

public class ReflectionProbesManager : MonoBehaviour
{
	public ReflectionProbe[] probesArray;

	private void Start()
	{
		StartCoroutine(ProbesManagerCoroutine());
	}

	private IEnumerator ProbesManagerCoroutine()
	{
		yield return new WaitForSeconds(8f);
		while (true)
		{
			ReflectionProbe[] array = probesArray;
			for (int i = 0; i < array.Length; i++)
			{
				array[i].RenderProbe();
				yield return new WaitForSeconds(0.15f);
			}
			yield return new WaitForSeconds(20f);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Rotateobject
using UnityEngine;

public class Rotateobject : MonoBehaviour
{
	public float speed;

	private void Start()
	{
		base.transform.Rotate(new Vector3(0f, Random.Range(0f, 360f), 0f));
	}

	private void Update()
	{
		base.transform.Rotate(new Vector3(0f, speed * Time.deltaTime, 0f));
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// RotateSeeker
using UnityEngine;

public class RotateSeeker : MonoBehaviour
{
	public float Speed = 20f;

	private Transform trans;

	private void Start()
	{
		trans = GetComponent<Transform>();
	}

	private void Update()
	{
		trans.Rotate(0f, Time.deltaTime * Speed, 0f, Space.World);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SalesDevice
using Rewired;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class SalesDevice : MonoBehaviour
{
	public LayerMask raycastMask;

	public TextMeshProUGUI clockField;

	public GameObject salesItemPrefabOBJ;

	public GameObject salesItemsParentOBJ;

	[Space(10f)]
	public GameObject canvasOBJ;

	[Space(10f)]
	public Image productImage;

	public TextMeshProUGUI productNameField;

	public TextMeshProUGUI brandNameField;

	public TextMeshProUGUI discountField;

	public TextMeshProUGUI currentSalesField;

	public TextMeshProUGUI maximumSalesField;

	public TextMeshProUGUI playerPricePerUnitField;

	public TextMeshProUGUI playerPriceOnSaleField;

	private int currentDiscount;

	private int currentProductID = -1;

	private int oldProductID = -1;

	private int oldSalesCount;

	private bool updatingProduct;

	private ProductListing pListingComponent;

	private Player MainPlayer;

	private TextMeshProUGUI gameCanvasClockField;

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
	}

	private void OnEnable()
	{
		pListingComponent = ProductListing.Instance;
		gameCanvasClockField = GameCanvas.Instance.transform.Find("GameData/Time").GetComponent<TextMeshProUGUI>();
		currentDiscount = 5;
		discountField.text = "";
		maximumSalesField.text = pListingComponent.allowedSimultaneousSales.ToString();
		currentSalesField.text = pListingComponent.productsIDOnSale.Count.ToString();
		canvasOBJ.SetActive(value: true);
	}

	private void Update()
	{
		clockField.text = gameCanvasClockField.text;
		if (oldSalesCount != pListingComponent.productsIDOnSale.Count)
		{
			oldSalesCount = pListingComponent.productsIDOnSale.Count;
			UpdateSalesContainer();
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, raycastMask))
		{
			if ((bool)hitInfo.transform.GetComponent<InteractableContainer>())
			{
				if (!hitInfo.transform.GetComponent<InteractableContainer>().isStorageShelf)
				{
					int siblingIndex = hitInfo.transform.GetSiblingIndex();
					int num = hitInfo.transform.parent.transform.parent.GetComponent<Data_Container>().productInfoArray[siblingIndex * 2];
					if (num < 0)
					{
						oldProductID = -2;
						ClearAllData();
					}
					if (num >= 0 && oldProductID != num)
					{
						currentProductID = num;
						SetCurrentProductData(num);
						oldProductID = num;
					}
				}
				else
				{
					oldProductID = -3;
					ClearAllData();
				}
			}
			else
			{
				oldProductID = -4;
				ClearAllData();
			}
		}
		else
		{
			oldProductID = -5;
			ClearAllData();
		}
		if (!updatingProduct)
		{
			return;
		}
		if (MainPlayer.GetButtonDown("Main Action"))
		{
			currentDiscount += 5;
			currentDiscount = Mathf.Clamp(currentDiscount, 5, 45);
			discountField.text = "-" + currentDiscount + "%";
			UpdateDiscountedPrice(currentProductID);
		}
		if (MainPlayer.GetButtonDown("Secondary Action"))
		{
			currentDiscount -= 5;
			currentDiscount = Mathf.Clamp(currentDiscount, 5, 45);
			discountField.text = "-" + currentDiscount + "%";
			UpdateDiscountedPrice(currentProductID);
		}
		if (MainPlayer.GetButtonDown("Build") && currentProductID >= 0)
		{
			if (pListingComponent.productsIDOnSale.Count >= pListingComponent.allowedSimultaneousSales)
			{
				GameCanvas.Instance.CreateCanvasNotification("slemssage0");
			}
			else
			{
				pListingComponent.SetProductOnSale(currentProductID, currentDiscount);
			}
		}
	}

	private void SetCurrentProductData(int productID)
	{
		updatingProduct = true;
		GameObject obj = pListingComponent.productPrefabs[productID];
		float num = pListingComponent.productPlayerPricing[productID];
		num = Mathf.Round(num * 100f) / 100f;
		productImage.sprite = pListingComponent.productSprites[productID];
		string key = "product" + productID;
		string localizationString = LocalizationManager.instance.GetLocalizationString(key);
		productNameField.text = localizationString;
		string productBrand = obj.GetComponent<Data_Product>().productBrand;
		brandNameField.text = productBrand;
		playerPricePerUnitField.text = "$" + num;
		discountField.text = "-" + currentDiscount + "%";
		UpdateDiscountedPrice(productID);
	}

	private void UpdateDiscountedPrice(int productID)
	{
		float num = Mathf.Round(pListingComponent.productPlayerPricing[productID] * 100f) / 100f * (float)(100 - currentDiscount) / 100f;
		num = Mathf.Round(num * 100f) / 100f;
		playerPriceOnSaleField.text = "$" + num;
	}

	private void ClearAllData()
	{
		if (updatingProduct)
		{
			productImage.sprite = null;
			productNameField.text = "";
			brandNameField.text = "";
			playerPricePerUnitField.text = "$0.00";
			playerPriceOnSaleField.text = "$0.00";
			discountField.text = "";
			currentProductID = -1;
			updatingProduct = false;
		}
	}

	private void UpdateSalesContainer()
	{
		maximumSalesField.text = pListingComponent.allowedSimultaneousSales.ToString();
		currentSalesField.text = pListingComponent.productsIDOnSale.Count.ToString();
		int childCount = salesItemsParentOBJ.transform.childCount;
		if (childCount > 0)
		{
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(salesItemsParentOBJ.transform.GetChild(salesItemsParentOBJ.transform.childCount - 1 - i).gameObject);
			}
		}
		for (int j = 0; j < pListingComponent.productsIDOnSale.Count; j++)
		{
			int num = pListingComponent.productsIDOnSale[j];
			int num2 = pListingComponent.productsSaleDiscount[j];
			GameObject obj = Object.Instantiate(salesItemPrefabOBJ, salesItemsParentOBJ.transform);
			obj.transform.SetAsFirstSibling();
			obj.GetComponent<OrderingListReferences>().productID = num;
			obj.GetComponent<OrderingListReferences>().priceField.text = "-" + num2 + "%";
			obj.GetComponent<OrderingListReferences>().productImage.sprite = pListingComponent.productSprites[num];
			string key = "product" + num;
			string localizationString = LocalizationManager.instance.GetLocalizationString(key);
			obj.GetComponent<OrderingListReferences>().productNameField.text = localizationString;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Samples
using UnityEngine;
using UnityEngine.SceneManagement;

public class Samples : MonoBehaviour
{
	private static bool done;

	private GUIStyle fontStyle = new GUIStyle();

	private void Awake()
	{
		if (!done)
		{
			Object.DontDestroyOnLoad(base.transform.gameObject);
			done = true;
		}
		fontStyle.normal.background = null;
		fontStyle.normal.textColor = new Color(1f, 1f, 1f);
		fontStyle.fontSize = 40;
		fontStyle.alignment = TextAnchor.MiddleCenter;
	}

	public void OpenScene(string name)
	{
		SceneManager.LoadScene(name);
	}

	private void OnGUI()
	{
		if (SceneManager.GetActiveScene().name != "Samples")
		{
			GUI.Box(new Rect(Screen.width - 200, Screen.height - 100, 180f, 90f), "");
			if (GUI.Button(new Rect(Screen.width - 200, Screen.height - 100, 180f, 90f), "Home", fontStyle))
			{
				OpenScene("Samples");
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SaveBehaviour
using HutongGames.PlayMaker;
using UnityEngine;

public class SaveBehaviour : MonoBehaviour
{
	public bool initialLoadDone;

	public GameObject gameDataOBJ;

	public GameObject NPCManager;

	public void SavePersistentValues()
	{
		string value = FsmVariables.GlobalVariables.GetFsmString("CurrentFilename").Value;
		string text = Application.persistentDataPath + "/" + value;
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		ES3.CacheFile(text, settings);
		ES3Settings settings2 = new ES3Settings(text, ES3.Location.Cache);
		GameData component = gameDataOBJ.GetComponent<GameData>();
		ES3.Save("Difficulty", component.difficulty, settings2);
		ES3.Save("Day", component.gameDay, settings2);
		ES3.Save("FranchiseExperience", component.gameFranchiseExperience, settings2);
		ES3.Save("FranchisePoints", component.gameFranchisePoints, settings2);
		ES3.Save("Funds", component.gameFunds, settings2);
		NetworkSpawner component2 = gameDataOBJ.GetComponent<NetworkSpawner>();
		UpgradesManager component3 = gameDataOBJ.GetComponent<UpgradesManager>();
		ProductListing component4 = gameDataOBJ.GetComponent<ProductListing>();
		PaintablesManager component5 = gameDataOBJ.GetComponent<PaintablesManager>();
		ES3.Save("SupermarketName", component2.SuperMarketName, settings2);
		ES3.Save("SupermarketColor", component2.SuperMarketColor, settings2);
		ES3.Save("SpaceBought", component3.spaceBought, settings2);
		ES3.Save("StorageBought", component3.storageBought, settings2);
		ES3.Save("AddonsBought", component3.addonsBought, settings2);
		ES3.Save("ExtraUpgrades", component3.extraUpgrades, settings2);
		ES3.Save("ProductPlayerPricing", component4.productPlayerPricing, settings2);
		ES3.Save("TierInflation", component4.tierInflation, settings2);
		ES3.Save("UnlockedProductTiers", component4.unlockedProductTiers, settings2);
		ES3.Save("PaintableValues", component5.paintablesValuesArray, settings2);
		ES3.StoreCachedFile(text, settings);
	}

	public void LoadPersistentValues()
	{
		string value = FsmVariables.GlobalVariables.GetFsmString("CurrentFilename").Value;
		string text = Application.persistentDataPath + "/" + value;
		ES3Settings settings = new ES3Settings(ES3.EncryptionType.AES, "g#asojrtg@omos)^yq");
		ES3.CacheFile(text, settings);
		ES3Settings settings2 = new ES3Settings(text, ES3.Location.Cache);
		GameData component = gameDataOBJ.GetComponent<GameData>();
		component.difficulty = ES3.Load<int>("Difficulty", settings2);
		if (ES3.KeyExists("Day", settings2))
		{
			component.NetworkgameDay = ES3.Load<int>("Day", settings2);
			component.NetworkgameFranchiseExperience = ES3.Load<int>("FranchiseExperience", settings2);
			component.NetworkgameFranchisePoints = ES3.Load<int>("FranchisePoints", settings2);
			component.NetworkgameFunds = ES3.Load<float>("Funds", settings2);
			NetworkSpawner component2 = gameDataOBJ.GetComponent<NetworkSpawner>();
			UpgradesManager component3 = gameDataOBJ.GetComponent<UpgradesManager>();
			ProductListing component4 = gameDataOBJ.GetComponent<ProductListing>();
			PaintablesManager component5 = gameDataOBJ.GetComponent<PaintablesManager>();
			component2.NetworkSuperMarketName = ES3.Load<string>("SupermarketName", settings2);
			component2.NetworkSuperMarketColor = ES3.Load<Color>("SupermarketColor", settings2);
			component3.spaceBought = ES3.Load<int>("SpaceBought", settings2);
			component3.storageBought = ES3.Load<int>("StorageBought", settings2);
			bool[] array = ES3.Load<bool[]>("AddonsBought", settings2);
			for (int i = 0; i < array.Length; i++)
			{
				component3.addonsBought[i] = array[i];
			}
			bool[] array2 = ES3.Load<bool[]>("ExtraUpgrades", settings2);
			for (int j = 0; j < array2.Length; j++)
			{
				component3.extraUpgrades[j] = array2[j];
			}
			float[] array3 = ES3.Load<float[]>("ProductPlayerPricing", settings2);
			for (int k = 0; k < array3.Length; k++)
			{
				component4.productPlayerPricing[k] = array3[k];
			}
			float[] array4 = ES3.Load<float[]>("TierInflation", settings2);
			for (int l = 0; l < array4.Length; l++)
			{
				component4.tierInflation[l] = array4[l];
			}
			bool[] array5 = ES3.Load<bool[]>("UnlockedProductTiers", settings2);
			for (int m = 0; m < array5.Length; m++)
			{
				component4.unlockedProductTiers[m] = array5[m];
			}
			if (ES3.KeyExists("PaintableValues", settings2))
			{
				string[] array6 = ES3.Load<string[]>("PaintableValues", settings2);
				for (int n = 0; n < array6.Length; n++)
				{
					component5.paintablesValuesArray[n] = array6[n];
				}
			}
		}
		initialLoadDone = true;
	}

	public void LoadUpgradesValues(bool[] addonsArray, bool[] upgradesArray)
	{
		UpgradesManager component = gameDataOBJ.GetComponent<UpgradesManager>();
		for (int i = 0; i < addonsArray.Length; i++)
		{
			component.addonsBought[i] = addonsArray[i];
		}
		for (int j = 0; j < upgradesArray.Length; j++)
		{
			component.extraUpgrades[j] = upgradesArray[j];
		}
	}

	public void LoadProductValues(float[] pPlayerPricingArray, float[] tInflationArray, bool[] uProductTiersArray)
	{
		ProductListing component = gameDataOBJ.GetComponent<ProductListing>();
		for (int i = 0; i < pPlayerPricingArray.Length; i++)
		{
			component.productPlayerPricing[i] = pPlayerPricingArray[i];
		}
		for (int j = 0; j < tInflationArray.Length; j++)
		{
			component.tierInflation[j] = tInflationArray[j];
		}
		for (int k = 0; k < uProductTiersArray.Length; k++)
		{
			component.unlockedProductTiers[k] = uProductTiersArray[k];
		}
	}

	public void LoadPaintableValues(string[] paintableValues)
	{
		PaintablesManager component = gameDataOBJ.GetComponent<PaintablesManager>();
		for (int i = 0; i < paintableValues.Length; i++)
		{
			component.paintablesValuesArray[i] = paintableValues[i];
		}
	}

	public void LoadEmployeesDataValues(string[] hiredEmployeesDataValues)
	{
		NPC_Manager component = NPCManager.GetComponent<NPC_Manager>();
		for (int i = 0; i < hiredEmployeesDataValues.Length; i++)
		{
			component.hiredEmployeesData[i] = hiredEmployeesDataValues[i];
		}
	}

	public void LoadNewSystemUpgradeValues(bool[] storeUpgradesArray, bool[] storageUpgradesArray)
	{
		UpgradesManager component = gameDataOBJ.GetComponent<UpgradesManager>();
		for (int i = 0; i < storeUpgradesArray.Length; i++)
		{
			component.storeSpaceUpgrades[i] = storeUpgradesArray[i];
		}
		for (int j = 0; j < storageUpgradesArray.Length; j++)
		{
			component.storageSpaceUpgrades[j] = storageUpgradesArray[j];
		}
	}

	public void LoadDemolishableValues(string[] demolishableValues)
	{
		DemolishableManager component = gameDataOBJ.GetComponent<DemolishableManager>();
		for (int i = 0; i < demolishableValues.Length; i++)
		{
			component.demolishableValues[i] = demolishableValues[i];
		}
	}

	public void LoadInvoicesValues(string[] invoiceValues)
	{
		DebtManager component = gameDataOBJ.GetComponent<DebtManager>();
		for (int i = 0; i < invoiceValues.Length; i++)
		{
			component.currentInvoicesData[i] = invoiceValues[i];
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SaveTool
using Wing.uPainter;

public class SaveTool : BaseTool
{
	public override void OnClick()
	{
		base.OnClick();
		string text = "";
		text = UtilsHelper.GetResourcePath() + "upainter.png";
		if (!string.IsNullOrEmpty(text))
		{
			Settings.Instance.Canvas.Layers[0].Save(text, 1024, 512, EPictureType.PNG);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SceneViewCamera
using UnityEngine;

[RequireComponent(typeof(Camera))]
public class SceneViewCamera : MonoBehaviour
{
	[SerializeField]
	[Range(0.1f, 100f)]
	private float wheelSpeed = 1f;

	[SerializeField]
	[Range(0.1f, 100f)]
	private float moveSpeed = 0.3f;

	[SerializeField]
	[Range(0.1f, 1f)]
	private float rotateSpeed = 0.3f;

	private Vector3 preMousePos;

	private void Update()
	{
		MouseUpdate();
	}

	private void MouseUpdate()
	{
		float axis = Input.GetAxis("Mouse ScrollWheel");
		if (axis != 0f)
		{
			MouseWheel(axis);
		}
		if (Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1) || Input.GetMouseButtonDown(2))
		{
			preMousePos = Input.mousePosition;
		}
		MouseDrag(Input.mousePosition);
	}

	private void MouseWheel(float delta)
	{
		base.transform.position += base.transform.forward * delta * wheelSpeed;
	}

	private void MouseDrag(Vector3 mousePos)
	{
		Vector3 vector = mousePos - preMousePos;
		if (!(vector.magnitude < 1E-05f))
		{
			if (Input.GetMouseButton(2))
			{
				base.transform.Translate(-vector * Time.deltaTime * moveSpeed);
			}
			else if (Input.GetMouseButton(1))
			{
				CameraRotate(new Vector2(0f - vector.y, vector.x) * rotateSpeed);
			}
			preMousePos = mousePos;
		}
	}

	public void CameraRotate(Vector2 angle)
	{
		base.transform.RotateAround(base.transform.position, base.transform.right, angle.x);
		base.transform.RotateAround(base.transform.position, Vector3.up, angle.y);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ScratchCard
using UnityEngine;
using UnityEngine.UI;
using Wing.uPainter;

public class ScratchCard : MonoBehaviour
{
	public PaintRawImage painter;

	public Text text;

	private Texture2D _texture;

	private void Awake()
	{
		_texture = new Texture2D(100, 100, TextureFormat.ARGB32, mipChain: false);
	}

	private void Update()
	{
		if (!painter.Drawer.CurrentCanvas.Drawing)
		{
			return;
		}
		RenderTexture activeTexture = painter.Drawer.CurrentCanvas.Layers[0].GetActiveTexture();
		RenderTexture temporary = RenderTexture.GetTemporary(100, 100);
		Graphics.Blit(activeTexture, temporary);
		TextureTool.CopyToTexture2D(temporary, _texture);
		RenderTexture.ReleaseTemporary(temporary);
		int num = _texture.width * _texture.height;
		float num2 = 0f;
		for (int i = 0; i < _texture.width; i++)
		{
			for (int j = 0; j < _texture.height; j++)
			{
				Color pixel = _texture.GetPixel(i, j);
				if (pixel.r == 1f && pixel.g == 1f && pixel.b == 1f)
				{
					num2 += 1f;
					text.text = $"{num2 / (float)num * 100f:F2}%";
				}
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Seasonal_Alien
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;
using UnityEngine.AI;

public class Seasonal_Alien : NetworkBehaviour
{
	[SyncVar]
	public int alienID;

	[SyncVar]
	public int hits;

	public GameObject stolenProductPrefab;

	public GameObject[] alienCharactersOBJs;

	public GameObject[] tokenRewardOBJs;

	public AudioClip[] alienSoundsArray;

	public AudioClip alienSingsongAudio;

	public AudioSource alienAudioSource;

	public int state;

	private GameObject alienCharacterOBJ;

	private Animator alienAnimator;

	private NPC_Speed speedComponent;

	private NavMeshAgent agent;

	private int currentContainerIndex;

	private GameObject shelvesOBJ;

	private GameObject storageOBJ;

	private int productsToDrop;

	private List<int> containersIndexes = new List<int>();

	private List<int> productsIDsInContainer = new List<int>();

	private int[] randomGiftsArray = new int[8] { 304, 305, 4, 213, 211, 210, 209, 85 };

	private bool beingHit;

	public int NetworkalienID
	{
		get
		{
			return alienID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref alienID, 1uL, null);
		}
	}

	public int Networkhits
	{
		get
		{
			return hits;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref hits, 2uL, null);
		}
	}

	public override void OnStartClient()
	{
		speedComponent = GetComponent<NPC_Speed>();
		agent = GetComponent<NavMeshAgent>();
		shelvesOBJ = NPC_Manager.Instance.shelvesOBJ;
		storageOBJ = NPC_Manager.Instance.storageOBJ;
		StartCoroutine(AlienPlayRandomAudio());
		SpawnCharacter();
	}

	private void SpawnCharacter()
	{
		NetworkalienID = Mathf.Clamp(alienID, 0, alienCharactersOBJs.Length);
		alienCharacterOBJ = Object.Instantiate(alienCharactersOBJs[alienID], base.transform);
		alienCharacterOBJ.transform.localPosition = Vector3.zero;
		alienCharacterOBJ.transform.localRotation = Quaternion.identity;
		alienAnimator = alienCharacterOBJ.GetComponent<Animator>();
		alienAnimator.SetFloat("AnimationFactor", alienID);
	}

	private void Update()
	{
		alienAnimator.SetFloat("SpeedFactor", speedComponent.velocity / 4f);
		if (!base.isServer)
		{
			return;
		}
		if (GameData.Instance.timeOfDay < 8.05f)
		{
			StopAllCoroutines();
			NetworkServer.Destroy(base.gameObject);
		}
		if (shelvesOBJ.transform.childCount == 0 || state == -1 || agent.pathPending || !(agent.remainingDistance <= agent.stoppingDistance) || (agent.hasPath && agent.velocity.sqrMagnitude != 0f))
		{
			return;
		}
		switch (state)
		{
		case 0:
		{
			float value = Random.value;
			if (value > 0.75f)
			{
				int index = Random.Range(0, shelvesOBJ.transform.childCount);
				agent.destination = shelvesOBJ.transform.GetChild(index).transform.Find("Standspot").transform.position;
				state = 2;
				break;
			}
			if (value > 0.5f)
			{
				if (storageOBJ.transform.childCount != 0)
				{
					int index2 = Random.Range(0, storageOBJ.transform.childCount);
					agent.destination = storageOBJ.transform.GetChild(index2).transform.Find("Standspot").transform.position;
					state = 2;
				}
				break;
			}
			if (value > 0.15f)
			{
				Vector3 destination = new Vector3(Random.Range(-20f, 20f), 0f, 15f + Random.Range(-5f, 5f));
				agent.destination = destination;
				state = 2;
				break;
			}
			currentContainerIndex = GetContainerWithProducts();
			if (currentContainerIndex > -1)
			{
				productsToDrop = Random.Range(2, 3);
				agent.destination = shelvesOBJ.transform.GetChild(currentContainerIndex).transform.Find("Standspot").transform.position;
				state = 1;
			}
			else
			{
				StartCoroutine(WaitState(1.5f, 0));
			}
			break;
		}
		case 1:
		{
			int num = ContainerStillHasProducts(currentContainerIndex);
			if (num > -1)
			{
				if (productsToDrop <= 0)
				{
					StartCoroutine(WaitState(Random.Range(1f, 2f), 0));
					break;
				}
				productsToDrop--;
				shelvesOBJ.transform.GetChild(currentContainerIndex).GetComponent<Data_Container>().NPCGetsItemFromRow(num);
				GameObject obj = Object.Instantiate(stolenProductPrefab);
				obj.transform.position = base.transform.position + new Vector3(Random.Range(-0.25f, 0.25f), 0f, Random.Range(-0.25f, 0.25f));
				obj.GetComponent<StolenProductSpawn>().NetworkproductID = num;
				Data_Product component = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>();
				int productTier = component.productTier;
				float num2 = component.basePricePerUnit * ProductListing.Instance.tierInflation[productTier];
				obj.GetComponent<StolenProductSpawn>().NetworkproductCarryingPrice = num2 * 1.5f;
				NetworkServer.Spawn(obj);
				StartCoroutine(WaitState(0.5f, 1));
			}
			else
			{
				StartCoroutine(WaitState(1.5f, 0));
			}
			break;
		}
		case 2:
			StartCoroutine(WaitState(Random.Range(0.4f, 1f), 0));
			break;
		default:
			Debug.Log("Alien case error");
			break;
		case 3:
			break;
		}
	}

	private IEnumerator AlienPlayRandomAudio()
	{
		while (true)
		{
			yield return new WaitForSeconds(Random.Range(5f, 12f));
			alienAudioSource.clip = alienSoundsArray[Random.Range(0, alienSoundsArray.Length)];
			alienAudioSource.Play();
			yield return null;
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdHitFromPlayer()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void Seasonal_Alien::CmdHitFromPlayer()", -444163093, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void HitsCheck()
	{
		Networkhits = hits - 1;
		agent.speed += 1.2f;
		GameObject obj = Object.Instantiate(stolenProductPrefab);
		obj.transform.position = base.transform.position + new Vector3(Random.Range(-0.25f, 0.25f), 1.5f, Random.Range(-0.25f, 0.25f));
		int networkproductID = randomGiftsArray[Random.Range(0, randomGiftsArray.Length)];
		obj.GetComponent<StolenProductSpawn>().NetworkproductID = networkproductID;
		obj.GetComponent<StolenProductSpawn>().NetworkproductCarryingPrice = 10f;
		obj.transform.localScale = new Vector3(5f, 5f, 5f);
		NetworkServer.Spawn(obj);
		if (hits <= 0)
		{
			state = 3;
			agent.speed = 0f;
			GameObject obj2 = Object.Instantiate(tokenRewardOBJs[alienID]);
			obj2.transform.position = base.transform.position + new Vector3(0f, 1.5f, 0f);
			NetworkServer.Spawn(obj2);
			StartCoroutine(TimedDestroy());
			RpcDestroyPoof();
		}
	}

	private IEnumerator TimedDestroy()
	{
		yield return new WaitForSeconds(2f);
		StopAllCoroutines();
		NetworkServer.Destroy(base.gameObject);
	}

	[ClientRpc]
	private void RpcDestroyPoof()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void Seasonal_Alien::RpcDestroyPoof()", 261525536, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcHitFromPlayer()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendRPCInternal("System.Void Seasonal_Alien::RpcHitFromPlayer()", -1462555418, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator ScaleDown()
	{
		float elapsedTime = 0f;
		float waitTime = 1f;
		while (elapsedTime < waitTime)
		{
			float t = Mathf.Lerp(0f, 1f, elapsedTime / waitTime);
			float num = Mathf.Lerp(1f, 0f, t);
			base.transform.localScale = new Vector3(num, num, num);
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		yield return null;
	}

	private IEnumerator WaitState(float waitTime, int targetState)
	{
		state = -1;
		yield return new WaitForSeconds(waitTime);
		state = targetState;
	}

	private int GetContainerWithProducts()
	{
		if (shelvesOBJ.transform.childCount == 0)
		{
			return -1;
		}
		containersIndexes.Clear();
		for (int i = 0; i < shelvesOBJ.transform.childCount; i++)
		{
			if (containersIndexes.Count >= 35)
			{
				break;
			}
			int[] productInfoArray = shelvesOBJ.transform.GetChild(i).GetComponent<Data_Container>().productInfoArray;
			int num = productInfoArray.Length / 2;
			for (int j = 0; j < num; j++)
			{
				if (productInfoArray[j * 2] >= 0 && productInfoArray[j * 2 + 1] > 0)
				{
					containersIndexes.Add(i);
				}
			}
		}
		if (containersIndexes.Count > 0)
		{
			int index = Random.Range(0, containersIndexes.Count - 1);
			return containersIndexes[index];
		}
		return -1;
	}

	private int ContainerStillHasProducts(int containerIndex)
	{
		if (containerIndex >= shelvesOBJ.transform.childCount)
		{
			return -1;
		}
		productsIDsInContainer.Clear();
		int[] productInfoArray = shelvesOBJ.transform.GetChild(containerIndex).GetComponent<Data_Container>().productInfoArray;
		int num = productInfoArray.Length / 2;
		for (int i = 0; i < num; i++)
		{
			int num2 = productInfoArray[i * 2];
			if (num2 >= 0 && productInfoArray[i * 2 + 1] > 0)
			{
				productsIDsInContainer.Add(num2);
			}
		}
		if (productsIDsInContainer.Count > 0)
		{
			int index = Random.Range(0, productsIDsInContainer.Count - 1);
			return productsIDsInContainer[index];
		}
		return -1;
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdHitFromPlayer()
	{
		RpcHitFromPlayer();
		HitsCheck();
	}

	protected static void InvokeUserCode_CmdHitFromPlayer(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdHitFromPlayer called on client.");
		}
		else
		{
			((Seasonal_Alien)obj).UserCode_CmdHitFromPlayer();
		}
	}

	protected void UserCode_RpcDestroyPoof()
	{
		base.transform.Find("AlienRespawn").gameObject.SetActive(value: true);
		alienAudioSource.transform.gameObject.SetActive(value: false);
		StartCoroutine(ScaleDown());
	}

	protected static void InvokeUserCode_RpcDestroyPoof(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcDestroyPoof called on server.");
		}
		else
		{
			((Seasonal_Alien)obj).UserCode_RpcDestroyPoof();
		}
	}

	protected void UserCode_RpcHitFromPlayer()
	{
		base.transform.Find("HitSound").GetComponent<AudioSource>().Play();
		if (Random.value > 0.6f)
		{
			alienAudioSource.clip = alienSingsongAudio;
		}
		else
		{
			alienAudioSource.clip = alienSoundsArray[Random.Range(0, alienSoundsArray.Length)];
		}
		alienAudioSource.Play();
		GetComponent<PlayMakerFSM>().enabled = true;
	}

	protected static void InvokeUserCode_RpcHitFromPlayer(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcHitFromPlayer called on server.");
		}
		else
		{
			((Seasonal_Alien)obj).UserCode_RpcHitFromPlayer();
		}
	}

	static Seasonal_Alien()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(Seasonal_Alien), "System.Void Seasonal_Alien::CmdHitFromPlayer()", InvokeUserCode_CmdHitFromPlayer, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(Seasonal_Alien), "System.Void Seasonal_Alien::RpcDestroyPoof()", InvokeUserCode_RpcDestroyPoof);
		RemoteProcedureCalls.RegisterRpc(typeof(Seasonal_Alien), "System.Void Seasonal_Alien::RpcHitFromPlayer()", InvokeUserCode_RpcHitFromPlayer);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(alienID);
			writer.WriteInt(hits);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(alienID);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteInt(hits);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref alienID, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref hits, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref alienID, null, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref hits, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Seasonal_UFO
using Mirror;
using UnityEngine;

public class Seasonal_UFO : NetworkBehaviour
{
	public GameObject UFOPatrolpoints;

	private int currentPatrolIndex;

	private Transform currentPatrolPoint;

	public override void OnStartServer()
	{
		currentPatrolPoint = base.transform.GetChild(0);
	}

	private void Update()
	{
		if (!base.isServer)
		{
			return;
		}
		if (GameData.Instance.timeOfDay < 8.05f)
		{
			StopAllCoroutines();
			NetworkServer.Destroy(base.gameObject);
		}
		float maxDistanceDelta = 2f * Time.deltaTime;
		base.transform.position = Vector3.MoveTowards(base.transform.position, currentPatrolPoint.position, maxDistanceDelta);
		if (Vector3.Distance(base.transform.position, currentPatrolPoint.position) < 0.01f)
		{
			currentPatrolIndex++;
			if (currentPatrolIndex >= UFOPatrolpoints.transform.childCount)
			{
				currentPatrolIndex = 0;
			}
			currentPatrolPoint = UFOPatrolpoints.transform.GetChild(currentPatrolIndex);
		}
	}

	public override bool Weaved()
	{
		return true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SeasonalAlienEvent
using UnityEngine;

public class SeasonalAlienEvent : MonoBehaviour
{
	public GameObject mainAlienPrefabOBJ;

	public GameObject ufoPrefabOBJ;

	public GameData gameDataComponent;

	public PlayMakerFSM musicFSM;

	public Light nightLight;

	public Color alienColor;

	public NetworkSpawner nSpawner;

	public GameObject alienSpawnpoint;

	public GameObject UFOSpawnpoint;

	public GameObject UFOPatrolpoints;

	private int currentState;

	private bool coroutineRunning;

	private float checkThreshold = 3f;

	private float checkCounter;
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SeasonalBehaviour
using System.Collections;
using UnityEngine;

public class SeasonalBehaviour : MonoBehaviour
{
	public GameData gameDataComponent;

	public PlayMakerFSM musicFSM;

	public Light nightLight;

	public Color halloweenColor;

	public Transform[] treesOBJs;

	public float[] treesScale;

	public NetworkSpawner nSpawner;

	public GameObject ghostsSpawnpoint;

	public LayerMask lMask;

	[Space(10f)]
	public GameObject ghostPrefabOBJ;

	private int currentState;

	private bool coroutineRunning;

	private void Update()
	{
		if (gameDataComponent.isSupermarketOpen && gameDataComponent.timeOfDay > 18.75f && currentState == 0)
		{
			musicFSM.SendEvent("Send_Data");
			nightLight.color = halloweenColor;
			nightLight.intensity = 3f;
			if (!coroutineRunning)
			{
				StartCoroutine(InterpolateHalloweenTrees());
			}
			if (!CheckSphereCast())
			{
				nSpawner.HalloweenGhostSpawn();
			}
			currentState = 1;
		}
		if (!gameDataComponent.isSupermarketOpen && gameDataComponent.timeOfDay < 8.05f && currentState == 1)
		{
			musicFSM.SendEvent("Send_Data_2");
			nightLight.color = Color.white;
			nightLight.intensity = 1f;
			HideTrees();
			currentState = 0;
		}
	}

	private bool CheckSphereCast()
	{
		Physics.SphereCast(new Vector3(32f, 2f, -2.5f), 0.25f, Vector3.down, out var hitInfo, 4f, lMask);
		if ((bool)hitInfo.transform)
		{
			if ((bool)hitInfo.transform.gameObject.GetComponent<BuildableInfo>())
			{
				int decorationID = hitInfo.transform.gameObject.GetComponent<BuildableInfo>().decorationID;
				if (decorationID >= 11 && decorationID <= 16)
				{
					return true;
				}
			}
			return false;
		}
		return false;
	}

	private IEnumerator InterpolateHalloweenTrees()
	{
		coroutineRunning = true;
		Transform[] array = treesOBJs;
		foreach (Transform obj in array)
		{
			obj.localScale = Vector3.zero;
			obj.gameObject.SetActive(value: true);
		}
		float elapsedTime = 0f;
		float waitTime = 8f;
		while (elapsedTime < waitTime)
		{
			float t = Mathf.Lerp(0f, 1f, elapsedTime / waitTime);
			for (int j = 0; j < treesScale.Length; j++)
			{
				float b = treesScale[j];
				Transform obj2 = treesOBJs[j];
				float num = Mathf.Lerp(0f, b, t);
				obj2.localScale = new Vector3(num, num, num);
			}
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		yield return null;
		coroutineRunning = false;
	}

	private void HideTrees()
	{
		Transform[] array = treesOBJs;
		for (int i = 0; i < array.Length; i++)
		{
			array[i].gameObject.SetActive(value: false);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SeasonalCageEvent
using Mirror;
using UnityEngine;

public class SeasonalCageEvent : NetworkBehaviour
{
	public GameObject goosePrefabOBJ;

	public GameObject camelPrefabOBJ;

	public GameData gameDataComponent;

	public NetworkSpawner nSpawner;

	public GameObject animalsParentOBJ;

	private int currentState;

	private float checkThreshold = 3f;

	private float checkCounter;

	private float nextSpawnThreshold = 9f;

	private void Update()
	{
		if (!base.isServer)
		{
			return;
		}
		checkCounter += Time.deltaTime;
		if (checkCounter < checkThreshold)
		{
			return;
		}
		checkCounter = 0f;
		if (!CheckIfACageExists())
		{
			return;
		}
		if (gameDataComponent.timeOfDay > 22f)
		{
			if (nextSpawnThreshold > 10f)
			{
				nextSpawnThreshold = 9f;
			}
		}
		else if (gameDataComponent.timeOfDay > nextSpawnThreshold)
		{
			nextSpawnThreshold += Random.Range(1f, 1.7f) - Mathf.Clamp((float)(NetworkServer.connections.Count - 1) * 0.2f, 0.2f, 0.8f);
			SpawnAnimal();
		}
	}

	private void SpawnAnimal()
	{
		Transform transform = NPC_Manager.Instance.transform.Find("NPC_Spawnpoints");
		Transform child = transform.transform.GetChild(Random.Range(0, transform.childCount));
		GameObject original = ((!(Random.value < 0.14f)) ? goosePrefabOBJ : camelPrefabOBJ);
		GameObject obj = Object.Instantiate(original, child.position, Quaternion.identity);
		obj.transform.parent = animalsParentOBJ.transform;
		NetworkServer.Spawn(obj);
	}

	private bool CheckIfACageExists()
	{
		foreach (Transform item in nSpawner.levelPropsOBJ.transform.GetChild(7))
		{
			if (item.GetComponent<BuildableInfo>().decorationID == 190)
			{
				return true;
			}
		}
		return false;
	}

	public override bool Weaved()
	{
		return true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SeasonalCageEventAnimal
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;
using UnityEngine.AI;

public class SeasonalCageEventAnimal : NetworkBehaviour
{
	[SyncVar]
	public int hits = 10;

	[Space(10f)]
	public AudioClip[] painClipsArray;

	public int whichAnimalIndex;

	public TextMeshProUGUI numberField;

	public GameObject worldCanvasOBJ;

	public GameObject animalMeshOBJ;

	public int state;

	private GameObject shelvesOBJ;

	private GameObject storageOBJ;

	private Animator animator;

	private NPC_Speed speedComponent;

	private NavMeshAgent agent;

	private float hitCooldownTime = 1f;

	private float nextSoundTime = 0.5f;

	private float soundCounter;

	private AudioSource soundAudioSource;

	private bool onCooldown;

	private bool initialRunning;

	private bool destroying;

	public int Networkhits
	{
		get
		{
			return hits;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref hits, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		animator = GetComponent<Animator>();
		speedComponent = GetComponent<NPC_Speed>();
		soundAudioSource = base.transform.Find("SoundAudio").GetComponent<AudioSource>();
	}

	public override void OnStartServer()
	{
		shelvesOBJ = NPC_Manager.Instance.shelvesOBJ;
		storageOBJ = NPC_Manager.Instance.storageOBJ;
		agent = GetComponent<NavMeshAgent>();
		agent.enabled = true;
	}

	private void Update()
	{
		float velocity = speedComponent.velocity;
		animator.SetFloat("Speed", velocity);
		soundCounter += Time.deltaTime;
		if (soundCounter > nextSoundTime)
		{
			soundCounter = 0f;
			nextSoundTime = Random.Range(2f, 3f);
			PlayRandomAudio();
		}
		if (!base.isServer)
		{
			return;
		}
		if (GameData.Instance.timeOfDay < 8.05f)
		{
			StopAllCoroutines();
			NetworkServer.Destroy(base.gameObject);
		}
		else
		{
			if (shelvesOBJ.transform.childCount == 0 || storageOBJ.transform.childCount == 0 || state == -1 || agent.pathPending || !(agent.remainingDistance <= agent.stoppingDistance) || (agent.hasPath && agent.velocity.sqrMagnitude != 0f))
			{
				return;
			}
			if (state != 0)
			{
				_ = 1;
				return;
			}
			if (hits < 2 && Random.value < 0.5f)
			{
				Transform child = storageOBJ.transform.GetChild(Random.Range(0, storageOBJ.transform.childCount));
				agent.destination = child.transform.Find("Standspot").position;
			}
			else
			{
				Transform child2 = shelvesOBJ.transform.GetChild(Random.Range(0, shelvesOBJ.transform.childCount));
				agent.destination = child2.transform.Find("Standspot").position;
			}
			StartCoroutine(WaitState(Random.Range(0.5f, 1.5f), 0));
		}
	}

	private IEnumerator WaitState(float waitTime, int targetState)
	{
		state = -1;
		yield return new WaitForSeconds(waitTime);
		state = targetState;
	}

	private IEnumerator HitCooldown()
	{
		onCooldown = true;
		yield return new WaitForSeconds(hitCooldownTime);
		onCooldown = false;
	}

	[Command(requiresAuthority = false)]
	public void CmdHitFromPlayer(GameObject playerOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(playerOBJ);
		SendCommandInternal("System.Void SeasonalCageEventAnimal::CmdHitFromPlayer(UnityEngine.GameObject)", -1514840563, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	private void HitsCheck(GameObject playerOBJ)
	{
		Networkhits = hits - 1;
		if (hits <= 0)
		{
			agent.speed = 0f;
			RpcLastHit(playerOBJ);
			StartCoroutine(DelayedDestruction());
			return;
		}
		RpcPainAnimationPlay(hits);
		if (whichAnimalIndex == 0)
		{
			agent.speed += 0.5f + 0.02f * (float)NetworkServer.connections.Count;
			agent.angularSpeed += 12f;
			agent.acceleration += 5f;
		}
		else
		{
			agent.speed += 0.3f + 0.02f * (float)NetworkServer.connections.Count;
			agent.angularSpeed += 10f;
			agent.acceleration += 4f;
		}
		if (!initialRunning)
		{
			agent.speed += 2.5f;
			initialRunning = true;
		}
	}

	[ClientRpc]
	private void RpcLastHit(GameObject playerOBJ)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteGameObject(playerOBJ);
		SendRPCInternal("System.Void SeasonalCageEventAnimal::RpcLastHit(UnityEngine.GameObject)", -2065058279, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcPainAnimationPlay(int hitsNumber)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(hitsNumber);
		SendRPCInternal("System.Void SeasonalCageEventAnimal::RpcPainAnimationPlay(System.Int32)", -719729629, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void PlayRandomAudio()
	{
		soundAudioSource.clip = painClipsArray[Random.Range(0, painClipsArray.Length - 1)];
		soundAudioSource.Play();
	}

	private IEnumerator DelayedDestruction()
	{
		destroying = true;
		yield return new WaitForSeconds(3f);
		NetworkServer.Destroy(base.gameObject);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdHitFromPlayer__GameObject(GameObject playerOBJ)
	{
		if (!onCooldown && !destroying)
		{
			StartCoroutine(HitCooldown());
			HitsCheck(playerOBJ);
		}
	}

	protected static void InvokeUserCode_CmdHitFromPlayer__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdHitFromPlayer called on client.");
		}
		else
		{
			((SeasonalCageEventAnimal)obj).UserCode_CmdHitFromPlayer__GameObject(reader.ReadGameObject());
		}
	}

	protected void UserCode_RpcLastHit__GameObject(GameObject playerOBJ)
	{
		if (playerOBJ.name == "LocalGamePlayer" && playerOBJ.GetComponent<PlayerNetwork>().equippedItem == 13)
		{
			playerOBJ.GetComponent<PlayerNetwork>().instantiatedOBJ.GetComponent<CageEventCreateDummyAnimal>().CreateDummyAnimal(whichAnimalIndex);
			playerOBJ.GetComponent<PlayerNetwork>().auxiliarData = whichAnimalIndex;
		}
		worldCanvasOBJ.SetActive(value: false);
		animalMeshOBJ.SetActive(value: false);
		soundAudioSource.gameObject.SetActive(value: false);
	}

	protected static void InvokeUserCode_RpcLastHit__GameObject(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcLastHit called on server.");
		}
		else
		{
			((SeasonalCageEventAnimal)obj).UserCode_RpcLastHit__GameObject(reader.ReadGameObject());
		}
	}

	protected void UserCode_RpcPainAnimationPlay__Int32(int hitsNumber)
	{
		if (!worldCanvasOBJ.activeSelf)
		{
			worldCanvasOBJ.SetActive(value: true);
		}
		numberField.text = hitsNumber.ToString();
		GetComponent<PlayMakerFSM>().enabled = true;
		PlayRandomAudio();
	}

	protected static void InvokeUserCode_RpcPainAnimationPlay__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcPainAnimationPlay called on server.");
		}
		else
		{
			((SeasonalCageEventAnimal)obj).UserCode_RpcPainAnimationPlay__Int32(reader.ReadInt());
		}
	}

	static SeasonalCageEventAnimal()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(SeasonalCageEventAnimal), "System.Void SeasonalCageEventAnimal::CmdHitFromPlayer(UnityEngine.GameObject)", InvokeUserCode_CmdHitFromPlayer__GameObject, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(SeasonalCageEventAnimal), "System.Void SeasonalCageEventAnimal::RpcLastHit(UnityEngine.GameObject)", InvokeUserCode_RpcLastHit__GameObject);
		RemoteProcedureCalls.RegisterRpc(typeof(SeasonalCageEventAnimal), "System.Void SeasonalCageEventAnimal::RpcPainAnimationPlay(System.Int32)", InvokeUserCode_RpcPainAnimationPlay__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(hits);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(hits);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref hits, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref hits, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SeasonalChristmas
using UnityEngine;

public class SeasonalChristmas : MonoBehaviour
{
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ServerAuthorityExamplePlayerController
using Mirror;
using Mirror.RemoteCalls;
using Smooth;
using UnityEngine;

public class ServerAuthorityExamplePlayerController : NetworkBehaviour
{
	private Rigidbody rb;

	public float transformMovementSpeed = 30f;

	public float rigidbodyMovementForce = 500f;

	private SmoothSyncMirror smoothSync;

	private void Awake()
	{
		rb = GetComponent<Rigidbody>();
		smoothSync = GetComponent<SmoothSyncMirror>();
	}

	public override void OnStartServer()
	{
		rb.isKinematic = false;
		base.OnStartServer();
	}

	private void Update()
	{
		if (base.isOwned)
		{
			if (Input.GetKeyUp(KeyCode.DownArrow))
			{
				CmdMove(KeyCode.DownArrow);
			}
			if (Input.GetKeyUp(KeyCode.UpArrow))
			{
				CmdMove(KeyCode.UpArrow);
			}
			if (Input.GetKeyUp(KeyCode.LeftArrow))
			{
				CmdMove(KeyCode.LeftArrow);
			}
			if (Input.GetKeyUp(KeyCode.RightArrow))
			{
				CmdMove(KeyCode.RightArrow);
			}
			if (Input.GetKeyUp(KeyCode.T))
			{
				CmdTeleport();
			}
		}
	}

	[Command]
	private void CmdTeleport()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void ServerAuthorityExamplePlayerController::CmdTeleport()", 55251365, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	[Command]
	private void CmdMove(KeyCode keyCode)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		GeneratedNetworkCode._Write_UnityEngine.KeyCode(writer, keyCode);
		SendCommandInternal("System.Void ServerAuthorityExamplePlayerController::CmdMove(UnityEngine.KeyCode)", -953675450, writer, 0);
		NetworkWriterPool.Return(writer);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdTeleport()
	{
		smoothSync.teleportAnyObjectFromServer(base.transform.position + Vector3.right * 5f, base.transform.rotation, base.transform.localScale);
	}

	protected static void InvokeUserCode_CmdTeleport(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdTeleport called on client.");
		}
		else
		{
			((ServerAuthorityExamplePlayerController)obj).UserCode_CmdTeleport();
		}
	}

	protected void UserCode_CmdMove__KeyCode(KeyCode keyCode)
	{
		switch (keyCode)
		{
		case KeyCode.DownArrow:
			rb.AddForce(new Vector3(0f, -1.5f, -1f) * rigidbodyMovementForce);
			break;
		case KeyCode.UpArrow:
			rb.AddForce(new Vector3(0f, 1.5f, 1f) * rigidbodyMovementForce);
			break;
		case KeyCode.LeftArrow:
			rb.AddForce(new Vector3(-1f, 0f, 0f) * rigidbodyMovementForce);
			break;
		case KeyCode.RightArrow:
			rb.AddForce(new Vector3(1f, 0f, 0f) * rigidbodyMovementForce);
			break;
		}
	}

	protected static void InvokeUserCode_CmdMove__KeyCode(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdMove called on client.");
		}
		else
		{
			((ServerAuthorityExamplePlayerController)obj).UserCode_CmdMove__KeyCode(GeneratedNetworkCode._Read_UnityEngine.KeyCode(reader));
		}
	}

	static ServerAuthorityExamplePlayerController()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(ServerAuthorityExamplePlayerController), "System.Void ServerAuthorityExamplePlayerController::CmdTeleport()", InvokeUserCode_CmdTeleport, requiresAuthority: true);
		RemoteProcedureCalls.RegisterCommand(typeof(ServerAuthorityExamplePlayerController), "System.Void ServerAuthorityExamplePlayerController::CmdMove(UnityEngine.KeyCode)", InvokeUserCode_CmdMove__KeyCode, requiresAuthority: true);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SetCultureDecimal
using System.Globalization;
using System.Threading;
using UnityEngine;

public class SetCultureDecimal : MonoBehaviour
{
	public string debug1;

	public string debug2;

	private void Start()
	{
		string text = Thread.CurrentThread.CurrentCulture.Name;
		CultureInfo cultureInfo = new CultureInfo(text);
		if (cultureInfo.NumberFormat.NumberDecimalSeparator != ",")
		{
			cultureInfo.NumberFormat.NumberDecimalSeparator = ",";
			Thread.CurrentThread.CurrentCulture = cultureInfo;
		}
		debug1 = text;
		debug2 = Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SetLocalizationString
using TMPro;
using UnityEngine;

public class SetLocalizationString : MonoBehaviour
{
	public string localizationKey;

	private void Start()
	{
		GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString(localizationKey);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Settings
using UnityEngine;
using UnityEngine.UI;
using Wing.uPainter;

public class Settings : MonoBehaviour
{
	public static Settings Instance;

	public Texture2D MaskTexture;

	public RawImage BrushTexture;

	public TextureBrush UseClipTextureBrush;

	public Slider SizeSlider;

	public Slider SoftnessSlider;

	public Slider AlphaSlider;

	public Toggle ShowPreview;

	public Toggle EnableBlur;

	public Toggle SelfOverlay;

	public Toggle SimulatePressure;

	public Toggle EnableMask;

	public Toggle InvertMask;

	public BlurBrushPost BlurPost;

	public PaintCanvas Canvas;

	private BlurBrushPost _blurPost;

	private BaseBrush _lastBrush;

	private bool _firstSeal = true;

	private void Start()
	{
		Instance = this;
		_blurPost = Object.Instantiate(BlurPost);
		SimulatePressure.isOn = Canvas.Drawer.SimulatePressure;
		ShowPreview.isOn = Canvas.Drawer.ShowPreview;
	}

	private void Update()
	{
		if (!Canvas || !Canvas.Brush)
		{
			return;
		}
		Canvas.Drawer.SimulatePressure = SimulatePressure.isOn;
		Canvas.Drawer.ShowPreview = ShowPreview.isOn;
		if (EnableMask.isOn)
		{
			Canvas.MaskTexture = MaskTexture;
		}
		else
		{
			Canvas.MaskTexture = null;
		}
		Canvas.InvertMask = InvertMask.isOn;
		BaseBrush brush = Canvas.Brush;
		if (_lastBrush != brush)
		{
			BrushTexture.gameObject.SetActive(value: false);
			AlphaSlider.value = brush.BrushColor.a;
			SizeSlider.value = brush.Size;
			SelfOverlay.isOn = brush.SelfOverlay;
			ColorSelector.SetColor(brush.BrushColor);
			if (Canvas.Brush is ScratchBrush)
			{
				ScratchBrush scratchBrush = Canvas.Brush as ScratchBrush;
				SoftnessSlider.value = scratchBrush.Softness;
			}
			else if (Canvas.Brush is DropperBrush)
			{
				(Canvas.Brush as DropperBrush).SetDropColorEventHandler(delegate(Color color)
				{
					ColorSelector.SetColor(color);
				});
			}
			else if (Canvas.Brush is SealBrush)
			{
				if (_firstSeal)
				{
					_firstSeal = false;
					ShowPreview.isOn = true;
				}
				BrushTexture.gameObject.SetActive(value: true);
				SealBrush db = Canvas.Brush as SealBrush;
				db.SetClipTextureEventHandler(delegate(RenderTexture texture)
				{
					BrushTexture.texture = texture;
					if (UseClipTextureBrush != null && !db.InPreview)
					{
						if (UseClipTextureBrush.BrushTexture != null)
						{
							Object.DestroyImmediate(UseClipTextureBrush.BrushTexture);
						}
						UseClipTextureBrush.BrushTexture = texture;
						Canvas.EndDraw();
						Canvas.Brush = UseClipTextureBrush;
					}
				});
			}
			if (Canvas.Brush == UseClipTextureBrush)
			{
				BrushTexture.gameObject.SetActive(value: true);
			}
			_lastBrush = Canvas.Brush;
		}
		else
		{
			Color color2 = ColorSelector.GetColor();
			color2.a = AlphaSlider.value;
			Canvas.Brush.BrushColor = color2;
			Canvas.Brush.Size = SizeSlider.value;
			Canvas.Brush.SelfOverlay = SelfOverlay.isOn;
			if (Canvas.Brush is ScratchBrush)
			{
				(Canvas.Brush as ScratchBrush).Softness = SoftnessSlider.value;
			}
			if (!EnableBlur.isOn && Canvas.Brush.WithPostProcess)
			{
				Canvas.Brush.PostEffects = new BaseBrushPost[0];
			}
			if (EnableBlur.isOn && !Canvas.Brush.WithPostProcess)
			{
				_blurPost.BlurWidth = SizeSlider.value / 5f;
				BaseBrush brush2 = Canvas.Brush;
				BaseBrushPost[] postEffects = new BlurBrushPost[1] { _blurPost };
				brush2.PostEffects = postEffects;
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SetUIStatistics
using TMPro;
using UnityEngine;

public class SetUIStatistics : MonoBehaviour
{
	public int bufferIndex;

	public TextMeshProUGUI descriptionField;

	public TextMeshProUGUI amountField;

	private void OnEnable()
	{
		int siblingIndex = base.transform.GetSiblingIndex();
		descriptionField.text = LocalizationManager.instance.GetLocalizationString("stats" + siblingIndex);
		amountField.text = AchievementsManager.Instance.bufferValues[bufferIndex].ToString();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SetVolume
using UnityEngine;
using UnityEngine.Audio;

public class SetVolume : MonoBehaviour
{
	public AudioMixer mixer;

	private float floatvalue;

	public void SetLevel(string mixerString, float sliderValue)
	{
		mixer.SetFloat(mixerString, Mathf.Log(sliderValue) * 20f);
	}

	public float GetLevel(string mixerString)
	{
		if (mixer.GetFloat("masterVol", out var value))
		{
			return value;
		}
		return 0f;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SetVsyncCount
using UnityEngine;

public class SetVsyncCount : MonoBehaviour
{
	public void SetVsync(int vsyncValue)
	{
		QualitySettings.vSyncCount = vsyncValue;
	}

	public void SetApplicationTargetFrameRate(int framerate)
	{
		if (framerate < -1 || framerate == 0)
		{
			framerate = -1;
		}
		Application.targetFrameRate = framerate;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ShfuffleExtension
using System;
using System.Collections.Generic;

public static class ShfuffleExtension
{
	private static readonly Random RandomGenerator = new Random();

	public static void Shuffle<T>(this IList<T> shuffleList)
	{
		int num = shuffleList.Count;
		while (num > 1)
		{
			num--;
			int index = RandomGenerator.Next(num + 1);
			T value = shuffleList[index];
			shuffleList[index] = shuffleList[num];
			shuffleList[num] = value;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SimpleCharacterMotor
using UnityEngine;

[RequireComponent(typeof(CharacterController))]
public class SimpleCharacterMotor : MonoBehaviour
{
	public CursorLockMode cursorLockMode = CursorLockMode.Locked;

	public bool cursorVisible;

	[Header("Movement")]
	public float walkSpeed = 2f;

	public float runSpeed = 4f;

	public float gravity = 9.8f;

	[Space]
	[Header("Look")]
	public Transform cameraPivot;

	public float lookSpeed = 45f;

	public bool invertY = true;

	[Space]
	[Header("Smoothing")]
	public float movementAcceleration = 1f;

	private CharacterController controller;

	private Vector3 movement;

	private Vector3 finalMovement;

	private float speed;

	private Quaternion targetRotation;

	private Quaternion targetPivotRotation;

	private void Awake()
	{
		controller = GetComponent<CharacterController>();
		Cursor.lockState = cursorLockMode;
		Cursor.visible = cursorVisible;
		targetRotation = (targetPivotRotation = Quaternion.identity);
	}

	private void Update()
	{
		UpdateTranslation();
		UpdateLookRotation();
	}

	private void UpdateLookRotation()
	{
		float axis = Input.GetAxis("Mouse Y");
		float axis2 = Input.GetAxis("Mouse X");
		axis *= (float)((!invertY) ? 1 : (-1));
		targetRotation = base.transform.localRotation * Quaternion.AngleAxis(axis2 * lookSpeed * Time.deltaTime, Vector3.up);
		targetPivotRotation = cameraPivot.localRotation * Quaternion.AngleAxis(axis * lookSpeed * Time.deltaTime, Vector3.right);
		base.transform.localRotation = targetRotation;
		cameraPivot.localRotation = targetPivotRotation;
	}

	private void UpdateTranslation()
	{
		if (controller.isGrounded)
		{
			float axis = Input.GetAxis("Horizontal");
			float axis2 = Input.GetAxis("Vertical");
			bool key = Input.GetKey(KeyCode.LeftShift);
			Vector3 vector = new Vector3(axis, 0f, axis2);
			speed = (key ? runSpeed : walkSpeed);
			movement = base.transform.TransformDirection(vector * speed);
		}
		else
		{
			movement.y -= gravity * Time.deltaTime;
		}
		finalMovement = Vector3.Lerp(finalMovement, movement, Time.deltaTime * movementAcceleration);
		controller.Move(finalMovement * Time.deltaTime);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SineCameraControllerBetterCrystals
using UnityEngine;

public class SineCameraControllerBetterCrystals : MonoBehaviour
{
	public Camera camera;

	public Transform basePivot;

	public Transform farPivot;

	public float scrollSpeed = 10f;

	public float rotationSpeed = 10f;

	public float rotationAmount = 2f;

	[Range(10f, 40f)]
	public float maximumAngle = 20f;

	private float closeFar = 0.5f;

	private float closeFarLerp = 0.5f;

	private Vector3 mouseAxisToVector;

	private float x;

	private float y;

	private Quaternion rotation;

	private bool rotationPossible;

	private void Start()
	{
		rotation = base.gameObject.transform.localRotation;
		mouseAxisToVector = new Vector3(0f, 0f, 0f);
	}

	private void Update()
	{
		if (Input.GetAxis("Mouse ScrollWheel") > 0f)
		{
			if (closeFar < 1f)
			{
				closeFar += 0.1f;
			}
			if (closeFar > 1f)
			{
				closeFar = 1f;
			}
		}
		else if (Input.GetAxis("Mouse ScrollWheel") < 0f)
		{
			if (closeFar > 0f)
			{
				closeFar -= 0.1f;
			}
			if (closeFar < 0f)
			{
				closeFar = 0f;
			}
		}
		closeFarLerp = Mathf.Lerp(closeFarLerp, closeFar, Time.deltaTime * scrollSpeed);
		camera.transform.position = Vector3.Lerp(farPivot.position, basePivot.position, closeFarLerp);
		if (Input.GetMouseButton(0))
		{
			rotationPossible = true;
		}
		else
		{
			rotationPossible = false;
		}
		if (rotationPossible)
		{
			rotation = base.gameObject.transform.localRotation;
			x = rotation.eulerAngles.x + Input.GetAxis("Mouse Y") * rotationAmount;
			if (x > maximumAngle && x < 180f)
			{
				x = maximumAngle;
			}
			if (x < 340f && x > 180f)
			{
				x = 340f;
			}
			y = rotation.eulerAngles.y + Input.GetAxis("Mouse X") * rotationAmount;
			mouseAxisToVector.Set(x, y, 0f);
			rotation.eulerAngles = mouseAxisToVector;
			base.gameObject.transform.localRotation = rotation;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SineUIControllerBetterCrystals
using System.Collections.Generic;
using UnityEngine;

public class SineUIControllerBetterCrystals : MonoBehaviour
{
	public Transform prefabHolder;

	public CanvasGroup canvasGroup;

	private Transform[] prefabs;

	private List<Transform> lt;

	private int activeNumber;

	private void Start()
	{
		lt = new List<Transform>();
		prefabs = prefabHolder.GetComponentsInChildren<Transform>(includeInactive: true);
		Transform[] array = prefabs;
		foreach (Transform transform in array)
		{
			if (transform.parent == prefabHolder)
			{
				lt.Add(transform);
			}
		}
		prefabs = lt.ToArray();
		EnableActive();
	}

	private void Update()
	{
		if (Input.GetKeyDown(KeyCode.H))
		{
			canvasGroup.alpha = 1f - canvasGroup.alpha;
		}
		if (Input.GetKeyDown(KeyCode.D) || Input.GetKeyDown(KeyCode.RightArrow))
		{
			ChangeEffect(bo: true);
		}
		if (Input.GetKeyDown(KeyCode.A) || Input.GetKeyDown(KeyCode.LeftArrow))
		{
			ChangeEffect(bo: false);
		}
	}

	public void EnableActive()
	{
		for (int i = 0; i < prefabs.Length; i++)
		{
			if (i == activeNumber)
			{
				prefabs[i].gameObject.SetActive(value: true);
			}
			else
			{
				prefabs[i].gameObject.SetActive(value: false);
			}
		}
	}

	public void ChangeEffect(bool bo)
	{
		if (bo)
		{
			activeNumber++;
			if (activeNumber == prefabs.Length)
			{
				activeNumber = 0;
			}
		}
		else
		{
			activeNumber--;
			if (activeNumber == -1)
			{
				activeNumber = prefabs.Length - 1;
			}
		}
		EnableActive();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SmoothSyncMirrorExamplePlayerController
using Mirror;
using Smooth;
using UnityEngine;

public class SmoothSyncMirrorExamplePlayerController : NetworkBehaviour
{
	private Rigidbody rb;

	private Rigidbody2D rb2D;

	private SmoothSyncMirror smoothSync;

	public float transformMovementSpeed = 30f;

	public float rigidbodyMovementForce = 500f;

	public GameObject childObjectToControl;

	private void Start()
	{
		rb = GetComponent<Rigidbody>();
		rb2D = GetComponent<Rigidbody2D>();
		smoothSync = GetComponent<SmoothSyncMirror>();
		if ((bool)smoothSync)
		{
			smoothSync.validateStateMethod = validateStateOfPlayer;
		}
	}

	private void Update()
	{
		if (Input.GetKeyDown(KeyCode.T))
		{
			if (base.isOwned)
			{
				base.transform.position = base.transform.position + Vector3.right * 18f;
				smoothSync.teleportOwnedObjectFromOwner();
			}
			else if (NetworkServer.active)
			{
				smoothSync.teleportAnyObjectFromServer(base.transform.position + Vector3.right * 18f, base.transform.rotation, base.transform.localScale);
			}
		}
		if (!base.isOwned && (!NetworkServer.active || base.netIdentity.connectionToClient != null))
		{
			return;
		}
		if (Input.GetKeyDown(KeyCode.F))
		{
			smoothSync.forceStateSendNextFixedUpdate();
		}
		Input.GetKeyDown(KeyCode.C);
		float num = transformMovementSpeed * Time.deltaTime;
		if (Input.GetKey(KeyCode.LeftShift) && Input.GetKey(KeyCode.Equals))
		{
			base.transform.localScale = base.transform.localScale + new Vector3(1f, 1f, 1f) * num * 0.2f;
		}
		if (Input.GetKey(KeyCode.LeftShift) && Input.GetKey(KeyCode.Minus))
		{
			base.transform.localScale = base.transform.localScale - new Vector3(1f, 1f, 1f) * num * 0.2f;
		}
		if ((bool)childObjectToControl)
		{
			if (Input.GetKey(KeyCode.RightShift) && Input.GetKey(KeyCode.Equals))
			{
				childObjectToControl.transform.localScale = childObjectToControl.transform.localScale + new Vector3(1f, 1f, 1f) * num * 0.2f;
			}
			if (Input.GetKey(KeyCode.RightShift) && Input.GetKey(KeyCode.Minus))
			{
				childObjectToControl.transform.localScale = childObjectToControl.transform.localScale - new Vector3(1f, 1f, 1f) * num * 0.2f;
			}
		}
		if ((bool)childObjectToControl)
		{
			if (Input.GetKey(KeyCode.S))
			{
				childObjectToControl.transform.position = childObjectToControl.transform.position + new Vector3(0f, -1.5f, -1f) * num;
			}
			if (Input.GetKey(KeyCode.W))
			{
				childObjectToControl.transform.position = childObjectToControl.transform.position + new Vector3(0f, 1.5f, 1f) * num;
			}
			if (Input.GetKey(KeyCode.A))
			{
				childObjectToControl.transform.position = childObjectToControl.transform.position + new Vector3(-1f, 0f, 0f) * num;
			}
			if (Input.GetKey(KeyCode.D))
			{
				childObjectToControl.transform.position = childObjectToControl.transform.position + new Vector3(1f, 0f, 0f) * num;
			}
		}
		if ((bool)rb)
		{
			if (Input.GetKeyDown(KeyCode.Alpha0))
			{
				rb.velocity = Vector3.zero;
				rb.angularVelocity = Vector3.zero;
			}
			if (Input.GetKeyDown(KeyCode.DownArrow))
			{
				rb.AddForce(new Vector3(0f, -1.5f, -1f) * rigidbodyMovementForce);
			}
			if (Input.GetKeyDown(KeyCode.UpArrow))
			{
				rb.AddForce(new Vector3(0f, 1.5f, 1f) * rigidbodyMovementForce);
			}
			if (Input.GetKeyDown(KeyCode.LeftArrow))
			{
				rb.AddForce(new Vector3(-1f, 0f, 0f) * rigidbodyMovementForce);
			}
			if (Input.GetKeyDown(KeyCode.RightArrow))
			{
				rb.AddForce(new Vector3(1f, 0f, 0f) * rigidbodyMovementForce);
			}
		}
		else if ((bool)rb2D)
		{
			if (Input.GetKeyDown(KeyCode.Alpha0))
			{
				rb2D.velocity = Vector3.zero;
				rb2D.angularVelocity = 0f;
			}
			if (Input.GetKeyDown(KeyCode.DownArrow))
			{
				rb2D.AddForce(new Vector3(0f, -1.5f, -1f) * rigidbodyMovementForce);
			}
			if (Input.GetKeyDown(KeyCode.UpArrow))
			{
				rb2D.AddForce(new Vector3(0f, 1.5f, 1f) * rigidbodyMovementForce);
			}
			if (Input.GetKeyDown(KeyCode.LeftArrow))
			{
				rb2D.AddForce(new Vector3(-1f, 0f, 0f) * rigidbodyMovementForce);
			}
			if (Input.GetKeyDown(KeyCode.RightArrow))
			{
				rb2D.AddForce(new Vector3(1f, 0f, 0f) * rigidbodyMovementForce);
			}
		}
		else
		{
			if (Input.GetKey(KeyCode.DownArrow))
			{
				base.transform.position = base.transform.position + new Vector3(0f, 0f, -1f) * num;
			}
			if (Input.GetKey(KeyCode.UpArrow))
			{
				base.transform.position = base.transform.position + new Vector3(0f, 0f, 1f) * num;
			}
			if (Input.GetKey(KeyCode.LeftArrow))
			{
				base.transform.position = base.transform.position + new Vector3(-1f, 0f, 0f) * num;
			}
			if (Input.GetKey(KeyCode.RightArrow))
			{
				base.transform.position = base.transform.position + new Vector3(1f, 0f, 0f) * num;
			}
		}
	}

	public static bool validateStateOfPlayer(StateMirror latestReceivedState, StateMirror latestValidatedState)
	{
		if (Vector3.Distance(latestReceivedState.position, latestValidatedState.position) > 9000f && latestReceivedState.ownerTimestamp - latestValidatedState.receivedOnServerTimestamp < 0.5f)
		{
			return false;
		}
		return true;
	}

	public override bool Weaved()
	{
		return true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SpaceAcquisitionBoard
using TMPro;
using UnityEngine;

public class SpaceAcquisitionBoard : MonoBehaviour
{
	public GameObject UIStoreRequirementsPrefabOBJ;

	public GameObject storeRequirementsParentOBJ;

	public GameObject storageRequirementsParentOBJ;

	[Space(10f)]
	public TextMeshProUGUI departmentNumberField;

	public TextMeshProUGUI departmentNameField;

	public TextMeshProUGUI costTextField;

	private int currentSelectedIndex = -1;

	private int[] currentRequiredStoreSpace;

	private int[] currentRequiredStorageSpace;

	[Space(10f)]
	public UpgradesManager uManagerComponent;

	public int[] departmentsCosts;

	public void SetUIDepartmentData(int index, int[] requiredStoreSpace, int[] requiredStorageSpace)
	{
		if (index >= departmentsCosts.Length)
		{
			return;
		}
		currentSelectedIndex = index;
		currentRequiredStoreSpace = requiredStoreSpace;
		currentRequiredStorageSpace = requiredStorageSpace;
		ClearGridParents();
		departmentNumberField.text = "#" + index;
		departmentNameField.text = LocalizationManager.instance.GetLocalizationString("deprtmnt" + index);
		costTextField.text = "$" + departmentsCosts[index];
		int[] array = requiredStoreSpace;
		for (int i = 0; i < array.Length; i++)
		{
			int num = array[i];
			GameObject gameObject = Object.Instantiate(UIStoreRequirementsPrefabOBJ, storeRequirementsParentOBJ.transform);
			if (num < 10)
			{
				gameObject.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = "0" + num;
			}
			else
			{
				gameObject.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = num.ToString();
			}
		}
		array = requiredStorageSpace;
		for (int i = 0; i < array.Length; i++)
		{
			int num2 = array[i];
			GameObject gameObject2 = Object.Instantiate(UIStoreRequirementsPrefabOBJ, storageRequirementsParentOBJ.transform);
			if (num2 < 10)
			{
				gameObject2.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = "0" + num2;
			}
			else
			{
				gameObject2.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = num2.ToString();
			}
		}
	}

	public void AcquireDepartment()
	{
		if (currentSelectedIndex < 0 || currentSelectedIndex >= departmentsCosts.Length || currentSelectedIndex >= uManagerComponent.addonsBought.Length || uManagerComponent.addonsBought[currentSelectedIndex])
		{
			return;
		}
		if (GameData.Instance.gameFunds < (float)departmentsCosts[currentSelectedIndex])
		{
			GameCanvas.Instance.CreateCanvasNotification("message6");
			return;
		}
		if (currentRequiredStoreSpace.Length != 0)
		{
			for (int i = 0; i < currentRequiredStoreSpace.Length; i++)
			{
				int num = currentRequiredStoreSpace[i];
				if (num < uManagerComponent.storeSpaceUpgrades.Length && !uManagerComponent.storeSpaceUpgrades[num])
				{
					GameCanvas.Instance.CreateCanvasNotification("messagei5a");
					return;
				}
			}
		}
		if (currentRequiredStorageSpace.Length != 0)
		{
			for (int j = 0; j < currentRequiredStorageSpace.Length; j++)
			{
				int num2 = currentRequiredStorageSpace[j];
				if (num2 < uManagerComponent.storageSpaceUpgrades.Length && !uManagerComponent.storageSpaceUpgrades[num2])
				{
					GameCanvas.Instance.CreateCanvasNotification("messagei5b");
					return;
				}
			}
		}
		uManagerComponent.CmdAddAddon(currentSelectedIndex);
	}

	public void ClearValues()
	{
		departmentNameField.text = "";
		costTextField.text = "";
		ClearGridParents();
	}

	private void ClearGridParents()
	{
		int childCount = storeRequirementsParentOBJ.transform.childCount;
		if (childCount > 0)
		{
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(storeRequirementsParentOBJ.transform.GetChild(storeRequirementsParentOBJ.transform.childCount - 1 - i).gameObject);
			}
		}
		childCount = storageRequirementsParentOBJ.transform.childCount;
		if (childCount > 0)
		{
			for (int j = 0; j < childCount; j++)
			{
				Object.Destroy(storageRequirementsParentOBJ.transform.GetChild(storageRequirementsParentOBJ.transform.childCount - 1 - j).gameObject);
			}
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SpawnEffect
using UnityEngine;

public class SpawnEffect : MonoBehaviour
{
	public float spawnEffectTime = 2f;

	public float pause = 1f;

	public AnimationCurve fadeIn;

	private ParticleSystem ps;

	private float timer;

	private Renderer _renderer;

	private int shaderProperty;

	private void Start()
	{
		shaderProperty = Shader.PropertyToID("_cutoff");
		_renderer = GetComponent<Renderer>();
		ps = GetComponentInChildren<ParticleSystem>();
		ParticleSystem.MainModule main = ps.main;
		main.duration = spawnEffectTime;
		ps.Play();
	}

	private void Update()
	{
		if (timer < spawnEffectTime + pause)
		{
			timer += Time.deltaTime;
		}
		else
		{
			ps.Play();
			timer = 0f;
		}
		_renderer.material.SetFloat(shaderProperty, fadeIn.Evaluate(Mathf.InverseLerp(0f, spawnEffectTime, timer)));
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// sprite_demo
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Wing.uPainter;

public class sprite_demo : MonoBehaviour
{
	public Toggle toggle;

	public SpriteRenderer render;

	public SpritePaintCanvas canvas;

	public RawImage image;

	public List<Sprite> sprites;

	public Button changeSprite;

	private int index;

	private void Start()
	{
		canvas.EnablePaintToFullImage(enable: true);
		toggle.onValueChanged.AddListener(delegate(bool val)
		{
			canvas.EnablePaintToFullImage(val);
		});
		changeSprite.onClick.AddListener(delegate
		{
			index = (index + 1) % sprites.Count;
			render.sprite = sprites[index];
			canvas.ResetSprite();
		});
	}

	private void Update()
	{
		if (image.texture != canvas.PaintingTexture)
		{
			image.texture = canvas.PaintingTexture;
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// StandingPeopleConcert
using System;
using System.Collections.Generic;
using UnityEngine;

public class StandingPeopleConcert : MonoBehaviour
{
	public enum TestEnum
	{
		Rectangle,
		Circle
	}

	[HideInInspector]
	public GameObject planePrefab;

	[HideInInspector]
	public GameObject circlePrefab;

	[HideInInspector]
	public GameObject surface;

	[HideInInspector]
	public Vector2 planeSize = new Vector2(1f, 1f);

	[Tooltip("People prefabs / Префабы людей")]
	public GameObject[] peoplePrefabs = new GameObject[0];

	[HideInInspector]
	private List<Vector3> spawnPoints = new List<Vector3>();

	[HideInInspector]
	public GameObject target;

	[HideInInspector]
	public int peopleCount;

	[HideInInspector]
	public bool isCircle;

	[HideInInspector]
	public float circleDiametr = 1f;

	[HideInInspector]
	public bool showSurface = true;

	[Tooltip("Type of surface / Тип поверхности")]
	public TestEnum SurfaceType;

	[HideInInspector]
	public GameObject par;

	[HideInInspector]
	public bool looking;

	[HideInInspector]
	public float damping = 5f;

	[HideInInspector]
	public float highToSpawn;

	public void OnDrawGizmos()
	{
		if (!isCircle)
		{
			surface.transform.localScale = new Vector3(planeSize.x, 1f, planeSize.y);
		}
		else
		{
			surface.transform.localScale = new Vector3(circleDiametr, 1f, circleDiametr);
		}
	}

	public void SpawnRectangleSurface()
	{
		if (surface != null)
		{
			UnityEngine.Object.DestroyImmediate(surface);
		}
		GameObject gameObject = (surface = UnityEngine.Object.Instantiate(planePrefab, base.transform.position, Quaternion.identity));
		isCircle = false;
		gameObject.transform.eulerAngles = new Vector3(gameObject.transform.eulerAngles.x, gameObject.transform.eulerAngles.y, gameObject.transform.eulerAngles.z);
		gameObject.transform.position += new Vector3(0f, 0.01f, 0f);
		gameObject.transform.parent = base.transform;
		gameObject.name = "surface";
	}

	public void SpawnCircleSurface()
	{
		if (surface != null)
		{
			UnityEngine.Object.DestroyImmediate(surface);
		}
		GameObject gameObject = UnityEngine.Object.Instantiate(circlePrefab, base.transform.position, Quaternion.identity);
		isCircle = true;
		gameObject.transform.eulerAngles = new Vector3(gameObject.transform.eulerAngles.x, gameObject.transform.eulerAngles.y, gameObject.transform.eulerAngles.z);
		gameObject.transform.position += new Vector3(0f, 0.01f, 0f);
		gameObject.transform.parent = base.transform;
		gameObject.name = "surface";
		surface = gameObject;
	}

	public void RemoveButton()
	{
		if (par != null)
		{
			UnityEngine.Object.DestroyImmediate(par);
		}
	}

	public void PopulateButton()
	{
		RemoveButton();
		GameObject gameObject = (par = new GameObject());
		gameObject.transform.parent = base.gameObject.transform;
		gameObject.name = "people";
		spawnPoints.Clear();
		SpawnPeople(peopleCount);
	}

	private void SpawnPeople(int _peopleCount)
	{
		int[] randomPrefabIndexes = CommonUtils.GetRandomPrefabIndexes(_peopleCount, ref peoplePrefabs);
		for (int i = 0; i < _peopleCount; i++)
		{
			Vector3 vector = (isCircle ? RandomCirclePosition() : RandomRectanglePosition());
			if (!(vector != Vector3.zero))
			{
				continue;
			}
			GameObject gameObject = peoplePrefabs[randomPrefabIndexes[i]];
			GameObject gameObject2 = null;
			if (!Physics.Raycast(vector + Vector3.up * highToSpawn, Vector3.down, out var hitInfo, float.PositiveInfinity))
			{
				continue;
			}
			gameObject2 = UnityEngine.Object.Instantiate(gameObject, new Vector3(vector.x, hitInfo.point.y, vector.z), Quaternion.Euler(gameObject.transform.rotation.x, base.transform.eulerAngles.y, gameObject.transform.rotation.z));
			PeopleController peopleController = gameObject2.AddComponent<PeopleController>();
			spawnPoints.Add(gameObject2.transform.position);
			if (target != null)
			{
				peopleController.SetTarget(target.transform.position);
				if (looking)
				{
					peopleController.target = target.transform;
					peopleController.damping = damping;
				}
			}
			peopleController.animNames = new string[4] { "idle1", "idle2", "cheer", "claphands" };
			gameObject2.transform.parent = par.transform;
		}
	}

	private Vector3 RandomRectanglePosition()
	{
		Vector3 vector = new Vector3(0f, 0f, 0f);
		for (int i = 0; i < 10; i++)
		{
			vector.x = surface.transform.position.x - GetRealPlaneSize().x / 2f + UnityEngine.Random.Range(0f, GetRealPlaneSize().x - 0.6f);
			vector.z = surface.transform.position.z - GetRealPlaneSize().y / 2f + UnityEngine.Random.Range(0f, GetRealPlaneSize().y - 0.6f);
			vector.y = surface.transform.position.y;
			if (IsRandomPositionFree(vector))
			{
				return vector;
			}
		}
		return Vector3.zero;
	}

	private Vector3 RandomCirclePosition()
	{
		Vector3 position = surface.transform.position;
		float num = GetRealPlaneSize().x / 2f;
		Vector3 vector = default(Vector3);
		for (int i = 0; i < 10; i++)
		{
			float num2 = UnityEngine.Random.value * num;
			float num3 = UnityEngine.Random.value * 360f;
			vector.x = position.x + num2 * Mathf.Sin(num3 * (MathF.PI / 180f));
			vector.y = position.y;
			vector.z = position.z + num2 * Mathf.Cos(num3 * (MathF.PI / 180f));
			if (IsRandomPositionFree(vector))
			{
				return vector;
			}
		}
		return Vector3.zero;
	}

	private bool IsRandomPositionFree(Vector3 pos)
	{
		for (int i = 0; i < spawnPoints.Count; i++)
		{
			if (spawnPoints[i].x - 0.6f < pos.x && spawnPoints[i].x + 1f > pos.x && spawnPoints[i].z - 0.5f < pos.z && spawnPoints[i].z + 0.6f > pos.z)
			{
				return false;
			}
		}
		return true;
	}

	private Vector2 GetRealPlaneSize()
	{
		Vector3 size = surface.GetComponent<MeshRenderer>().bounds.size;
		return new Vector2(size.x, size.z);
	}

	private Vector2 GetRealPeopleModelSize()
	{
		Vector3 size = peoplePrefabs[1].GetComponent<MeshRenderer>().bounds.size;
		return new Vector2(size.x, size.z);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// StandingPeopleStreet
using System;
using System.Collections.Generic;
using UnityEngine;

public class StandingPeopleStreet : MonoBehaviour
{
	public enum TestEnum
	{
		Rectangle,
		Circle
	}

	[HideInInspector]
	public GameObject planePrefab;

	[HideInInspector]
	public GameObject circlePrefab;

	[HideInInspector]
	public GameObject surface;

	[HideInInspector]
	public Vector2 planeSize = new Vector2(1f, 1f);

	[Tooltip("People prefabs / Префабы людей")]
	public GameObject[] peoplePrefabs = new GameObject[0];

	[HideInInspector]
	public List<Vector3> spawnPoints = new List<Vector3>();

	[HideInInspector]
	public int peopleCount;

	[HideInInspector]
	public bool isCircle;

	[HideInInspector]
	public float circleDiametr = 1f;

	[HideInInspector]
	public bool showSurface = true;

	[Tooltip("Type of surface / Тип поверхности")]
	public TestEnum SurfaceType;

	[HideInInspector]
	public GameObject par;

	[HideInInspector]
	public float highToSpawn;

	public void OnDrawGizmos()
	{
		if (!isCircle)
		{
			surface.transform.localScale = new Vector3(planeSize.x, 1f, planeSize.y);
		}
		else
		{
			surface.transform.localScale = new Vector3(circleDiametr, 1f, circleDiametr);
		}
	}

	public void SpawnRectangleSurface()
	{
		if (surface != null)
		{
			UnityEngine.Object.DestroyImmediate(surface);
		}
		GameObject gameObject = (surface = UnityEngine.Object.Instantiate(planePrefab, base.transform.position, Quaternion.identity));
		isCircle = false;
		gameObject.transform.eulerAngles = new Vector3(gameObject.transform.eulerAngles.x, gameObject.transform.eulerAngles.y, gameObject.transform.eulerAngles.z);
		gameObject.transform.position += new Vector3(0f, 0.01f, 0f);
		gameObject.transform.parent = base.transform;
		gameObject.name = "surface";
	}

	public void SpawnCircleSurface()
	{
		if (surface != null)
		{
			UnityEngine.Object.DestroyImmediate(surface);
		}
		GameObject gameObject = UnityEngine.Object.Instantiate(circlePrefab, base.transform.position, Quaternion.identity);
		isCircle = true;
		gameObject.transform.eulerAngles = new Vector3(gameObject.transform.eulerAngles.x, gameObject.transform.eulerAngles.y, gameObject.transform.eulerAngles.z);
		gameObject.transform.position += new Vector3(0f, 0.01f, 0f);
		gameObject.transform.parent = base.transform;
		gameObject.name = "surface";
		surface = gameObject;
	}

	public void RemoveButton()
	{
		if (par != null)
		{
			UnityEngine.Object.DestroyImmediate(par);
		}
		par = null;
	}

	public void PopulateButton()
	{
		RemoveButton();
		GameObject gameObject = (par = new GameObject());
		gameObject.transform.parent = base.gameObject.transform;
		gameObject.name = "people";
		spawnPoints.Clear();
		SpawnPeople(peopleCount);
	}

	private void SpawnPeople(int _peopleCount)
	{
		int num = UnityEngine.Random.Range(0, _peopleCount / 3) * 3;
		int num2 = UnityEngine.Random.Range(0, (_peopleCount - num) / 2) * 2;
		int num3 = _peopleCount - num - num2;
		int[] randomPrefabIndexes = CommonUtils.GetRandomPrefabIndexes(peopleCount, ref peoplePrefabs);
		int num4 = 0;
		for (int i = 0; i < num3; i++)
		{
			Vector3 vector = (isCircle ? RandomCirclePosition() : RandomRectanglePosition());
			if (vector != Vector3.zero)
			{
				GameObject gameObject = null;
				if (Physics.Raycast(vector + Vector3.up * highToSpawn, Vector3.down, out var hitInfo, float.PositiveInfinity))
				{
					gameObject = UnityEngine.Object.Instantiate(peoplePrefabs[randomPrefabIndexes[num4]], new Vector3(vector.x, hitInfo.point.y, vector.z), Quaternion.identity);
					num4++;
					gameObject.AddComponent<PeopleController>();
					spawnPoints.Add(gameObject.transform.position);
					gameObject.transform.localEulerAngles = new Vector3(gameObject.transform.rotation.x, UnityEngine.Random.Range(1, 359), gameObject.transform.rotation.z);
					gameObject.GetComponent<PeopleController>().animNames = new string[2] { "idle1", "idle2" };
					gameObject.transform.parent = par.transform;
				}
			}
		}
		for (int j = 0; j < num2 / 2; j++)
		{
			Vector3 vector2 = (isCircle ? RandomCirclePosition() : RandomRectanglePosition());
			if (!(vector2 != Vector3.zero))
			{
				continue;
			}
			Vector3 vector3 = Vector3.zero;
			Vector3 vector4 = Vector3.zero;
			for (int k = 0; k < 100; k++)
			{
				for (int l = 0; l < 10; l++)
				{
					vector3 = vector2 + new Vector3(UnityEngine.Random.Range(-0.5f, 0.5f), 0f, UnityEngine.Random.Range(-0.5f, 0.5f));
					if (IsRandomPositionFree(vector3, Vector3.zero, Vector3.zero))
					{
						break;
					}
					vector3 = Vector3.zero;
				}
				for (int m = 0; m < 10; m++)
				{
					vector4 = vector2 + new Vector3(UnityEngine.Random.Range(-0.5f, 0.5f), 0f, UnityEngine.Random.Range(-0.5f, 0.5f));
					if (IsRandomPositionFree(vector4, vector3, Vector3.zero))
					{
						break;
					}
					vector4 = Vector3.zero;
				}
				if (vector3 != Vector3.zero && vector4 != Vector3.zero)
				{
					spawnPoints.Add(vector3);
					spawnPoints.Add(vector4);
					break;
				}
				vector3 = Vector3.zero;
				vector4 = Vector3.zero;
			}
			if (!(vector3 != Vector3.zero) || !(vector4 != Vector3.zero))
			{
				continue;
			}
			int num5 = UnityEngine.Random.Range(0, peoplePrefabs.Length);
			GameObject gameObject2 = null;
			if (Physics.Raycast(vector3 + Vector3.up * highToSpawn, Vector3.down, out var hitInfo2, float.PositiveInfinity))
			{
				gameObject2 = UnityEngine.Object.Instantiate(peoplePrefabs[num5], new Vector3(vector3.x, hitInfo2.point.y, vector3.z), Quaternion.identity);
				num4++;
				gameObject2.AddComponent<PeopleController>();
				gameObject2.GetComponent<PeopleController>().animNames = new string[3] { "talk1", "talk2", "listen" };
				gameObject2.transform.parent = par.transform;
				num5 = UnityEngine.Random.Range(0, peoplePrefabs.Length);
				GameObject gameObject3 = null;
				if (Physics.Raycast(vector4 + Vector3.up * highToSpawn, Vector3.down, out var hitInfo3, float.PositiveInfinity))
				{
					gameObject3 = UnityEngine.Object.Instantiate(peoplePrefabs[num5], new Vector3(vector4.x, hitInfo3.point.y, vector4.z), Quaternion.identity);
					gameObject3.AddComponent<PeopleController>();
					gameObject3.GetComponent<PeopleController>().animNames = new string[3] { "talk1", "talk2", "listen" };
					gameObject3.transform.parent = par.transform;
					gameObject3.GetComponent<PeopleController>().SetTarget(gameObject2.transform.position);
					gameObject2.GetComponent<PeopleController>().SetTarget(gameObject3.transform.position);
				}
			}
		}
		for (int n = 0; n < num / 3; n++)
		{
			Vector3 vector5 = (isCircle ? RandomCirclePosition() : RandomRectanglePosition());
			if (!(vector5 != Vector3.zero))
			{
				continue;
			}
			int num6 = UnityEngine.Random.Range(0, peoplePrefabs.Length);
			Vector3 vector6 = Vector3.zero;
			Vector3 vector7 = Vector3.zero;
			Vector3 vector8 = Vector3.zero;
			for (int num7 = 0; num7 < 100; num7++)
			{
				for (int num8 = 0; num8 < 10; num8++)
				{
					vector6 = vector5 + new Vector3(UnityEngine.Random.Range(-0.5f, 0.5f), 0f, UnityEngine.Random.Range(-0.5f, 0.5f));
					if (IsRandomPositionFree(vector6, Vector3.zero, Vector3.zero))
					{
						break;
					}
					vector6 = Vector3.zero;
				}
				for (int num9 = 0; num9 < 10; num9++)
				{
					if (vector6 != Vector3.zero)
					{
						vector7 = vector5 + new Vector3(UnityEngine.Random.Range(-0.5f, 0.5f), 0f, UnityEngine.Random.Range(-0.5f, 0.5f));
						if (IsRandomPositionFree(vector7, vector6, Vector3.zero))
						{
							break;
						}
						vector7 = Vector3.zero;
					}
					else
					{
						vector7 = Vector3.zero;
					}
				}
				for (int num10 = 0; num10 < 10; num10++)
				{
					if (vector7 != Vector3.zero && vector6 != Vector3.zero)
					{
						vector8 = vector5 + new Vector3(UnityEngine.Random.Range(-0.5f, 0.5f), 0f, UnityEngine.Random.Range(-0.5f, 0.5f));
						if (IsRandomPositionFree(vector8, vector6, vector7))
						{
							break;
						}
						vector8 = Vector3.zero;
					}
					else
					{
						vector8 = Vector3.zero;
					}
				}
				if (vector6 != Vector3.zero && vector7 != Vector3.zero && vector8 != Vector3.zero)
				{
					spawnPoints.Add(vector6);
					spawnPoints.Add(vector7);
					spawnPoints.Add(vector8);
					break;
				}
				vector6 = Vector3.zero;
				vector7 = Vector3.zero;
				vector8 = Vector3.zero;
			}
			if (!(vector6 != Vector3.zero))
			{
				continue;
			}
			if (vector6 != Vector3.zero)
			{
				GameObject gameObject4 = null;
				if (!Physics.Raycast(vector6 + Vector3.up * highToSpawn, Vector3.down, out var hitInfo4, float.PositiveInfinity))
				{
					continue;
				}
				gameObject4 = UnityEngine.Object.Instantiate(peoplePrefabs[num6], new Vector3(vector6.x, hitInfo4.point.y, vector6.z), Quaternion.identity);
				num4++;
				gameObject4.AddComponent<PeopleController>();
				gameObject4.GetComponent<PeopleController>().SetTarget(vector5);
				gameObject4.GetComponent<PeopleController>().animNames = new string[3] { "talk1", "talk2", "listen" };
				gameObject4.transform.parent = par.transform;
			}
			num6 = UnityEngine.Random.Range(0, peoplePrefabs.Length);
			if (vector6 != Vector3.zero)
			{
				GameObject gameObject5 = null;
				if (!Physics.Raycast(vector7 + Vector3.up * highToSpawn, Vector3.down, out var hitInfo5, float.PositiveInfinity))
				{
					continue;
				}
				gameObject5 = UnityEngine.Object.Instantiate(peoplePrefabs[num6], new Vector3(vector7.x, hitInfo5.point.y, vector7.z), Quaternion.identity);
				num4++;
				gameObject5.AddComponent<PeopleController>();
				gameObject5.GetComponent<PeopleController>().SetTarget(vector5);
				gameObject5.GetComponent<PeopleController>().animNames = new string[3] { "talk1", "talk2", "listen" };
				gameObject5.transform.parent = par.transform;
			}
			num6 = UnityEngine.Random.Range(0, peoplePrefabs.Length);
			if (vector6 != Vector3.zero)
			{
				GameObject gameObject6 = null;
				if (Physics.Raycast(vector8 + Vector3.up * highToSpawn, Vector3.down, out var hitInfo6, float.PositiveInfinity))
				{
					gameObject6 = UnityEngine.Object.Instantiate(peoplePrefabs[num6], new Vector3(vector8.x, hitInfo6.point.y, vector8.z), Quaternion.identity);
					num4++;
					gameObject6.AddComponent<PeopleController>();
					gameObject6.GetComponent<PeopleController>().SetTarget(vector5);
					gameObject6.GetComponent<PeopleController>().animNames = new string[3] { "talk1", "talk2", "listen" };
					gameObject6.transform.parent = par.transform;
				}
			}
		}
	}

	private Vector3 RandomRectanglePosition()
	{
		Vector3 vector = new Vector3(0f, 0f, 0f);
		for (int i = 0; i < 10; i++)
		{
			vector.x = surface.transform.position.x - GetRealPlaneSize().x / 2f + 0.3f + UnityEngine.Random.Range(0f, GetRealPlaneSize().x - 0.6f);
			vector.z = surface.transform.position.z - GetRealPlaneSize().y / 2f + 0.3f + UnityEngine.Random.Range(0f, GetRealPlaneSize().y - 0.6f);
			vector.y = surface.transform.position.y;
			if (IsRandomPositionFree(vector, Vector3.zero, Vector3.zero))
			{
				return vector;
			}
		}
		return Vector3.zero;
	}

	private Vector3 RandomCirclePosition()
	{
		Vector3 position = surface.transform.position;
		float num = GetRealPlaneSize().x / 2f;
		Vector3 vector = default(Vector3);
		for (int i = 0; i < 10; i++)
		{
			float num2 = UnityEngine.Random.value * num;
			float num3 = UnityEngine.Random.value * 360f;
			vector.x = position.x + num2 * Mathf.Sin(num3 * (MathF.PI / 180f));
			vector.y = position.y;
			vector.z = position.z + num2 * Mathf.Cos(num3 * (MathF.PI / 180f));
			if (Vector3.Distance(vector, position) < GetRealPlaneSize().x / 2f - 0.3f && IsRandomPositionFree(vector, Vector3.zero, Vector3.zero))
			{
				return vector;
			}
		}
		return Vector3.zero;
	}

	private bool IsRandomPositionFree(Vector3 pos, Vector3 helpPoint1, Vector3 helpPoint2)
	{
		for (int i = 0; i < spawnPoints.Count; i++)
		{
			if (spawnPoints[i].x - 0.5f < pos.x && spawnPoints[i].x + 0.5f > pos.x && spawnPoints[i].z - 0.5f < pos.z && spawnPoints[i].z + 0.5f > pos.z)
			{
				return false;
			}
		}
		if (helpPoint1 != Vector3.zero)
		{
			if (helpPoint1.x - 0.6f < pos.x && helpPoint1.x + 0.6f > pos.x && helpPoint1.z - 0.6f < pos.z && helpPoint1.z + 0.6f > pos.z)
			{
				return false;
			}
			if (!isCircle)
			{
				if (!(helpPoint1.x + 0.3f > surface.transform.position.x - GetRealPlaneSize().x / 2f) && !(helpPoint1.x - 0.3f < surface.transform.position.x + GetRealPlaneSize().x / 2f) && !(helpPoint1.z + 0.3f > surface.transform.position.z - GetRealPlaneSize().y / 2f) && !(helpPoint1.z - 0.3f < surface.transform.position.z + GetRealPlaneSize().y / 2f))
				{
					return false;
				}
			}
			else if (Vector3.Distance(helpPoint1, surface.transform.position) >= GetRealPlaneSize().x / 2f - 0.3f)
			{
				return false;
			}
		}
		if (helpPoint2 != Vector3.zero)
		{
			if (helpPoint2.x - 0.6f < pos.x && helpPoint2.x + 0.6f > pos.x && helpPoint2.z - 0.6f < pos.z && helpPoint2.z + 0.6f > pos.z)
			{
				return false;
			}
			if (!isCircle)
			{
				if (!(helpPoint2.x + 0.3f > surface.transform.position.x - GetRealPlaneSize().x / 2f) && !(helpPoint2.x - 0.3f < surface.transform.position.x + GetRealPlaneSize().x / 2f) && !(helpPoint2.z + 0.3f > surface.transform.position.z - GetRealPlaneSize().y / 2f) && !(helpPoint2.z - 0.3f < surface.transform.position.z + GetRealPlaneSize().y / 2f))
				{
					return false;
				}
			}
			else if (Vector3.Distance(helpPoint2, surface.transform.position) >= GetRealPlaneSize().x / 2f - 0.3f)
			{
				return false;
			}
		}
		return true;
	}

	private Vector2 GetRealPlaneSize()
	{
		Vector3 size = surface.GetComponent<MeshRenderer>().bounds.size;
		return new Vector2(size.x, size.z);
	}

	private Vector2 GetRealPeopleModelSize()
	{
		Vector3 size = peoplePrefabs[1].GetComponent<MeshRenderer>().bounds.size;
		return new Vector2(size.x, size.z);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// StatisticsGenerateLists
using UnityEngine;

public class StatisticsGenerateLists : MonoBehaviour
{
	public GameObject UIStatisticsProductPrefab;

	public Transform tooExpensiveParent;

	public Transform notFoundParent;

	private int oldDay;

	private void Update()
	{
		if (oldDay == GameData.Instance.gameDay)
		{
			return;
		}
		int childCount = tooExpensiveParent.transform.childCount;
		if (tooExpensiveParent.transform.childCount > 0)
		{
			for (int i = 0; i < childCount; i++)
			{
				Object.Destroy(tooExpensiveParent.transform.GetChild(childCount - 1 - i).gameObject);
			}
		}
		int childCount2 = notFoundParent.transform.childCount;
		if (notFoundParent.transform.childCount > 0)
		{
			for (int j = 0; j < childCount2; j++)
			{
				Object.Destroy(notFoundParent.transform.GetChild(childCount2 - 1 - j).gameObject);
			}
		}
		foreach (int lastDayTooExpensive in GameData.Instance.lastDayTooExpensiveList)
		{
			GameObject obj = Object.Instantiate(UIStatisticsProductPrefab, tooExpensiveParent);
			obj.GetComponent<References_StatisticsProduct>().productNameField.text = LocalizationManager.instance.GetLocalizationString("product" + lastDayTooExpensive);
			obj.GetComponent<References_StatisticsProduct>().productIMG.sprite = ProductListing.Instance.productSprites[lastDayTooExpensive];
		}
		foreach (int lastDaysNotFound in GameData.Instance.lastDaysNotFoundList)
		{
			GameObject obj2 = Object.Instantiate(UIStatisticsProductPrefab, notFoundParent);
			obj2.GetComponent<References_StatisticsProduct>().productNameField.text = LocalizationManager.instance.GetLocalizationString("product" + lastDaysNotFound);
			obj2.GetComponent<References_StatisticsProduct>().productIMG.sprite = ProductListing.Instance.productSprites[lastDaysNotFound];
		}
		oldDay = GameData.Instance.gameDay;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SteamLobby
using System.Collections.Generic;
using Mirror;
using Steamworks;
using UnityEngine;

public class SteamLobby : MonoBehaviour
{
	public static SteamLobby Instance;

	public GameObject fsmCallbackOBJ;

	protected Callback<LobbyCreated_t> LobbyCreated;

	protected Callback<GameLobbyJoinRequested_t> JoinRequest;

	protected Callback<LobbyEnter_t> LobbyEntered;

	public List<CSteamID> lobbyIDs = new List<CSteamID>();

	public ulong CurrentLobbyID;

	public string CurrentLobbyIDStr;

	private const string HostAddressKey = "HostAddress";

	private CustomNetworkManager manager;

	public bool CanRestartGame;

	public bool isLobbyClosed;

	public Color[] PlayersColorsArray;

	private void Start()
	{
		if (SteamManager.Initialized)
		{
			if (Instance == null)
			{
				Instance = this;
			}
			manager = GetComponent<CustomNetworkManager>();
			LobbyCreated = Callback<LobbyCreated_t>.Create(OnLobbyCreated);
			JoinRequest = Callback<GameLobbyJoinRequested_t>.Create(OnJoinRequest);
			LobbyEntered = Callback<LobbyEnter_t>.Create(OnLobbyEntered);
		}
	}

	public void HostLobby(int gameMode)
	{
		switch (gameMode)
		{
		case 0:
			LocalHost();
			break;
		case 1:
			SteamMatchmaking.CreateLobby(ELobbyType.k_ELobbyTypeFriendsOnly, manager.maxConnections);
			break;
		case 2:
			SteamMatchmaking.CreateLobby(ELobbyType.k_ELobbyTypePublic, manager.maxConnections);
			break;
		default:
			LocalHost();
			break;
		}
	}

	private void LocalHost()
	{
		manager.networkAddress = "localhost";
		manager.StartHost();
		Debug.Log("Local host started from SteamLobby");
	}

	private void OnLobbyCreated(LobbyCreated_t callback)
	{
		if (callback.m_eResult == EResult.k_EResultOK)
		{
			Debug.Log("Lobby created successfully");
			if ((bool)fsmCallbackOBJ)
			{
				fsmCallbackOBJ.GetComponent<PlayMakerFSM>().SendEvent("Send_Data_3");
			}
			manager.StartHost();
			SteamMatchmaking.SetLobbyData(new CSteamID(callback.m_ulSteamIDLobby), "HostAddress", SteamUser.GetSteamID().ToString());
			SteamMatchmaking.SetLobbyData(new CSteamID(callback.m_ulSteamIDLobby), "name", SteamFriends.GetPersonaName().ToString() + "'s Supermarket");
			SteamMatchmaking.SetLobbyData(new CSteamID(callback.m_ulSteamIDLobby), "status", "true");
		}
	}

	private void OnJoinRequest(GameLobbyJoinRequested_t callback)
	{
		Debug.Log("Request to Join lobby");
		SteamMatchmaking.JoinLobby(callback.m_steamIDLobby);
	}

	private void OnLobbyEntered(LobbyEnter_t callback)
	{
		CurrentLobbyID = callback.m_ulSteamIDLobby;
		CurrentLobbyIDStr = CurrentLobbyID.ToString();
		if (!NetworkServer.active)
		{
			if ((bool)fsmCallbackOBJ)
			{
				fsmCallbackOBJ.GetComponent<PlayMakerFSM>().SendEvent("Send_Data_2");
			}
			manager.networkAddress = SteamMatchmaking.GetLobbyData(new CSteamID(callback.m_ulSteamIDLobby), "HostAddress");
			manager.StartClient();
		}
	}

	public void JoinLobby(CSteamID lobbyID)
	{
		SteamMatchmaking.JoinLobby(lobbyID);
	}

	public void LobbyJStr(string lobbyIDstr)
	{
		SteamMatchmaking.JoinLobby((CSteamID)ulong.Parse(lobbyIDstr));
	}

	public void LeaveGame()
	{
		LeaveLobby((CSteamID)CurrentLobbyID);
	}

	public void SetCurrentLobbyJoinable(bool set)
	{
		if (SteamMatchmaking.SetLobbyJoinable((CSteamID)CurrentLobbyID, set))
		{
			if (set)
			{
				NetworkServer.maxConnections = 16;
				Debug.Log("Joinable Changed succesfully to open");
				isLobbyClosed = false;
				SteamMatchmaking.SetLobbyData((CSteamID)CurrentLobbyID, "status", "true");
			}
			else
			{
				NetworkServer.maxConnections = NetworkServer.connections.Count;
				Debug.Log("Joinable Changed succesfully to close");
				isLobbyClosed = true;
				SteamMatchmaking.SetLobbyData((CSteamID)CurrentLobbyID, "status", "false");
			}
		}
		else
		{
			Debug.Log("Couldn't change joinable");
		}
	}

	public void ClosedLobbyListener()
	{
		if (isLobbyClosed)
		{
			NetworkServer.maxConnections = NetworkServer.connections.Count;
		}
	}

	private void LeaveLobby(CSteamID ThisCSteamID)
	{
		SteamMatchmaking.LeaveLobby(ThisCSteamID);
		if (NetworkClient.activeHost)
		{
			manager.StopHost();
			Debug.Log("Host stopped");
		}
		else
		{
			manager.StopClient();
			Debug.Log("Client stopped");
		}
		CanRestartGame = true;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SteamManager
using System;
using System.Text;
using AOT;
using Steamworks;
using UnityEngine;

[DisallowMultipleComponent]
public class SteamManager : MonoBehaviour
{
	protected static bool s_EverInitialized;

	protected static SteamManager s_instance;

	protected bool m_bInitialized;

	protected SteamAPIWarningMessageHook_t m_SteamAPIWarningMessageHook;

	protected static SteamManager Instance
	{
		get
		{
			if (s_instance == null)
			{
				return new GameObject("SteamManager").AddComponent<SteamManager>();
			}
			return s_instance;
		}
	}

	public static bool Initialized => Instance.m_bInitialized;

	[MonoPInvokeCallback(typeof(SteamAPIWarningMessageHook_t))]
	protected static void SteamAPIDebugTextHook(int nSeverity, StringBuilder pchDebugText)
	{
		Debug.LogWarning(pchDebugText);
	}

	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
	private static void InitOnPlayMode()
	{
		s_EverInitialized = false;
		s_instance = null;
	}

	protected virtual void Awake()
	{
		if (s_instance != null)
		{
			UnityEngine.Object.Destroy(base.gameObject);
			return;
		}
		s_instance = this;
		if (s_EverInitialized)
		{
			throw new Exception("Tried to Initialize the SteamAPI twice in one session!");
		}
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
		if (!Packsize.Test())
		{
			Debug.LogError("[Steamworks.NET] Packsize Test returned false, the wrong version of Steamworks.NET is being run in this platform.", this);
		}
		if (!DllCheck.Test())
		{
			Debug.LogError("[Steamworks.NET] DllCheck Test returned false, One or more of the Steamworks binaries seems to be the wrong version.", this);
		}
		try
		{
			if (SteamAPI.RestartAppIfNecessary(AppId_t.Invalid))
			{
				Debug.Log("[Steamworks.NET] Shutting down because RestartAppIfNecessary returned true. Steam will restart the application.");
				Application.Quit();
				return;
			}
		}
		catch (DllNotFoundException ex)
		{
			Debug.LogError("[Steamworks.NET] Could not load [lib]steam_api.dll/so/dylib. It's likely not in the correct location. Refer to the README for more details.\n" + ex, this);
			Application.Quit();
			return;
		}
		m_bInitialized = SteamAPI.Init();
		if (!m_bInitialized)
		{
			Debug.LogError("[Steamworks.NET] SteamAPI_Init() failed. Refer to Valve's documentation or the comment above this line for more information.", this);
		}
		else
		{
			s_EverInitialized = true;
		}
	}

	protected virtual void OnEnable()
	{
		if (s_instance == null)
		{
			s_instance = this;
		}
		if (m_bInitialized && m_SteamAPIWarningMessageHook == null)
		{
			m_SteamAPIWarningMessageHook = SteamAPIDebugTextHook;
			SteamClient.SetWarningMessageHook(m_SteamAPIWarningMessageHook);
		}
	}

	protected virtual void OnDestroy()
	{
		if (!(s_instance != this))
		{
			s_instance = null;
			if (m_bInitialized)
			{
				SteamAPI.Shutdown();
			}
		}
	}

	protected virtual void Update()
	{
		if (m_bInitialized)
		{
			SteamAPI.RunCallbacks();
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SteamOverlay
using Steamworks;
using UnityEngine;

public class SteamOverlay : MonoBehaviour
{
	protected Callback<GameOverlayActivated_t> m_GameOverlayActivated;

	private void OnEnable()
	{
		if (SteamManager.Initialized)
		{
			m_GameOverlayActivated = Callback<GameOverlayActivated_t>.Create(OnGameOverlayActivated);
		}
	}

	private void OnGameOverlayActivated(GameOverlayActivated_t pCallback)
	{
		if (pCallback.m_bActive != 0)
		{
			Debug.Log("Steam Overlay has been activated");
		}
		else
		{
			Debug.Log("Steam Overlay has been closed");
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// StolenProductSpawn
using System.Collections;
using System.Runtime.InteropServices;
using HighlightPlus;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class StolenProductSpawn : NetworkBehaviour
{
	[SyncVar]
	public int productID;

	[SyncVar]
	public float productCarryingPrice;

	public bool isFinished;

	public int NetworkproductID
	{
		get
		{
			return productID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productID, 1uL, null);
		}
	}

	public float NetworkproductCarryingPrice
	{
		get
		{
			return productCarryingPrice;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref productCarryingPrice, 2uL, null);
		}
	}

	public override void OnStartClient()
	{
		StartCoroutine(CreateProductObject());
	}

	private IEnumerator CreateProductObject()
	{
		yield return new WaitUntil(() => ProductListing.Instance);
		GameObject gameObject = Object.Instantiate(ProductListing.Instance.productPrefabs[productID], base.transform);
		gameObject.transform.localPosition = Vector3.zero;
		Data_Product component = gameObject.GetComponent<Data_Product>();
		BoxCollider component2 = GetComponent<BoxCollider>();
		component2.center = gameObject.GetComponent<BoxCollider>().center;
		if (component.hasTrueCollider)
		{
			component2.size = component.trueCollider;
		}
		else
		{
			component2.size = gameObject.GetComponent<BoxCollider>().size;
		}
		GetComponent<HighlightEffect>().enabled = true;
		Vector3 force = new Vector3(Random.Range(-1f, 1f), 1f, Random.Range(-1f, 1f));
		GetComponent<Rigidbody>().AddForce(force, ForceMode.Impulse);
		isFinished = true;
		yield return null;
	}

	[Command(requiresAuthority = false)]
	public void CmdRecoverStolenProduct()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void StolenProductSpawn::CmdRecoverStolenProduct()", 2099923190, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void RecoverStolenProductFromEmployee()
	{
		GameData.Instance.AlterFundsFromEmployee(productCarryingPrice);
		NetworkServer.Destroy(base.gameObject);
	}

	public IEnumerator TimedDestroy()
	{
		yield return new WaitForSeconds(20f);
		NetworkServer.Destroy(base.gameObject);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdRecoverStolenProduct()
	{
		GameData.Instance.CmdAlterFunds(productCarryingPrice);
		NetworkServer.Destroy(base.gameObject);
	}

	protected static void InvokeUserCode_CmdRecoverStolenProduct(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRecoverStolenProduct called on client.");
		}
		else
		{
			((StolenProductSpawn)obj).UserCode_CmdRecoverStolenProduct();
		}
	}

	static StolenProductSpawn()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(StolenProductSpawn), "System.Void StolenProductSpawn::CmdRecoverStolenProduct()", InvokeUserCode_CmdRecoverStolenProduct, requiresAuthority: false);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(productID);
			writer.WriteFloat(productCarryingPrice);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(productID);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteFloat(productCarryingPrice);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref productID, null, reader.ReadInt());
			GeneratedSyncVarDeserialize(ref productCarryingPrice, null, reader.ReadFloat());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productID, null, reader.ReadInt());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref productCarryingPrice, null, reader.ReadFloat());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SurveillanceCameras
using System.Collections;
using UnityEngine;

public class SurveillanceCameras : MonoBehaviour
{
	public float surveillanceFactor = 0.0125f;

	private void Start()
	{
		StartCoroutine(AddSecurityChance());
	}

	private IEnumerator AddSecurityChance()
	{
		yield return new WaitForSeconds(2f);
		while (!NPC_Manager.Instance)
		{
			yield return null;
		}
		NPC_Manager.Instance.surveillanceFactor += surveillanceFactor;
		while (!GameData.Instance)
		{
			yield return null;
		}
		GameData.Instance.GetComponent<NetworkSpawner>().AddCameraObject(base.gameObject);
	}

	private void OnDestroy()
	{
		if ((bool)NPC_Manager.Instance)
		{
			NPC_Manager.Instance.surveillanceFactor -= surveillanceFactor;
		}
		if ((bool)GameData.Instance)
		{
			GameData.Instance.GetComponent<NetworkSpawner>().RemoveCameraObjects();
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// SurveillanceDesk
using System.Collections.Generic;
using Rewired;
using TMPro;
using UnityEngine;

public class SurveillanceDesk : MonoBehaviour
{
	public GameObject cylinderPrefabOBJ;

	public AudioSource clickBeepAudioSource;

	public AudioSource surveillanceFinishAudioSource;

	public GameObject UIMapButtonPrefabOBJ;

	public GameObject tickPrefabOBJ;

	public LayerMask lMask;

	public GameObject noLightingCanvasOBJ;

	private NetworkSpawner nSpawner;

	private int currentCameraIndex;

	private GameObject currentCameraOBJ;

	private GameObject viewpointOBJ;

	private bool inASecurityCamera;

	private List<GameObject> camerasList;

	private List<GameObject> customersTickList = new List<GameObject>();

	private GameObject spawnedCylinderOBJ;

	private GameObject cylinderFillOBJ;

	private GameObject currentCustomerOBJ;

	private float currentFillScale;

	private float fillMaxAmountPerClick = 0.6f;

	private float fillMinAmountPerClick = 0.15f;

	private float unfillAmount = 0.1f;

	private Player MainPlayer;

	private GameObject UIPivotOBJ;

	private TextMeshProUGUI cameraReferenceTMP;

	private bool inputBool;

	public float baseXSpeed = 10f;

	public float baseYSpeed = 10f;

	public float yMinLimit = 10f;

	public float yMaxLimit = 80f;

	public float xMinLimit = -45f;

	public float xMaxLimit = 45f;

	private float x;

	private float y;

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
		spawnedCylinderOBJ = Object.Instantiate(cylinderPrefabOBJ);
		spawnedCylinderOBJ.transform.position = new Vector3(0f, -10f, 0f);
		cylinderFillOBJ = spawnedCylinderOBJ.transform.Find("SurCylinder_Fill").gameObject;
		cameraReferenceTMP = GameCanvas.Instance.transform.Find("SurveillanceContainer/CameraRef").GetComponent<TextMeshProUGUI>();
		UIPivotOBJ = GameCanvas.Instance.transform.Find("SurveillanceContainer/MapBCK/Pivot").gameObject;
	}

	private void OnEnable()
	{
		if (!nSpawner)
		{
			nSpawner = GameData.Instance.GetComponent<NetworkSpawner>();
		}
		inASecurityCamera = false;
		camerasList = nSpawner.camerasList;
		if (GameData.Instance.GetComponent<DebtManager>().consequencesValues[1])
		{
			noLightingCanvasOBJ.SetActive(value: true);
		}
		else
		{
			noLightingCanvasOBJ.SetActive(value: false);
		}
	}

	private void OnDisable()
	{
		if ((bool)GameCanvas.Instance)
		{
			GameCanvas.Instance.transform.Find("SurveillanceContainer").gameObject.SetActive(value: false);
		}
		if ((bool)spawnedCylinderOBJ)
		{
			spawnedCylinderOBJ.SetActive(value: false);
			cylinderFillOBJ.transform.localScale = new Vector3(1f, 0f, 1f);
		}
		ManageCustomerList(activate: false);
		noLightingCanvasOBJ.SetActive(value: false);
	}

	public void InitMethod()
	{
		if (camerasList.Count != 0)
		{
			if ((bool)spawnedCylinderOBJ)
			{
				spawnedCylinderOBJ.transform.position = new Vector3(0f, -10f, 0f);
				spawnedCylinderOBJ.SetActive(value: true);
			}
			if ((bool)GameCanvas.Instance)
			{
				GameCanvas.Instance.transform.Find("SurveillanceContainer").gameObject.SetActive(value: true);
				GameCanvas.Instance.transform.Find("SurveillanceContainer/Buttons/PreviousButton").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("SurveillanceOBJ").Value = base.gameObject;
				GameCanvas.Instance.transform.Find("SurveillanceContainer/Buttons/NextButton").GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("SurveillanceOBJ").Value = base.gameObject;
			}
			GetNextCamera(nextCamera: true);
			CreateMapButtons();
			inASecurityCamera = true;
			ManageCustomerList(activate: true);
			SetFillDependentOnDifficulty();
		}
	}

	private void SetFillDependentOnDifficulty()
	{
		float t = (float)GameData.Instance.difficulty / 10f;
		fillMaxAmountPerClick = Mathf.Lerp(1f, 0.6f, t);
		fillMinAmountPerClick = Mathf.Lerp(0.45f, 0.2f, t);
	}

	private void Update()
	{
		if (!nSpawner || !inASecurityCamera)
		{
			return;
		}
		if (MainPlayer.GetButtonDown("Build"))
		{
			if (!inputBool)
			{
				inputBool = true;
				GetNextCamera(nextCamera: true);
			}
		}
		else if (MainPlayer.GetButtonDown("Drop Item"))
		{
			if (!inputBool)
			{
				inputBool = true;
				GetNextCamera(nextCamera: false);
			}
		}
		else
		{
			inputBool = false;
		}
		if ((bool)viewpointOBJ)
		{
			x += MainPlayer.GetAxis("MoveH") * baseXSpeed * 6f * 0.02f;
			y -= MainPlayer.GetAxis("MoveV") * baseYSpeed * 6f * 0.02f;
			y = ClampAngle(y, yMinLimit, yMaxLimit);
			x = ClampAngle(x, xMinLimit, xMaxLimit);
			Quaternion localRotation = Quaternion.Euler(y, x, 0f);
			viewpointOBJ.transform.localRotation = localRotation;
		}
		if (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), out var hitInfo, 100f, lMask) && hitInfo.transform.gameObject.CompareTag("Interactable") && (bool)hitInfo.transform.parent && (bool)hitInfo.transform.parent.GetComponent<NPC_Info>() && MainPlayer.GetButton("Main Action"))
		{
			NPC_Info component = hitInfo.transform.parent.GetComponent<NPC_Info>();
			if (!hitInfo.transform.parent.Find("3DTick") && component.isCustomer)
			{
				if (component.surveillanceChecked)
				{
					GameCanvas.Instance.CreateCanvasNotification("surveillance1");
					if (!hitInfo.transform.parent.Find("3DTick"))
					{
						Create3DTickObject(hitInfo.transform.parent);
					}
				}
				else if ((bool)currentCustomerOBJ && hitInfo.transform.parent.gameObject == currentCustomerOBJ)
				{
					float num = Vector3.Distance(currentCustomerOBJ.transform.position, Camera.main.transform.position);
					float num2;
					if (num < 5f)
					{
						num2 = fillMaxAmountPerClick;
					}
					else
					{
						float t = 1f / (num - 4f);
						num2 = Mathf.Lerp(fillMinAmountPerClick, fillMaxAmountPerClick, t);
					}
					currentFillScale += num2 * Time.deltaTime * 3f;
					float pitch = 1f + num2 / 10f;
					clickBeepAudioSource.pitch = pitch;
					clickBeepAudioSource.Play();
				}
				else if (!MainPlayer.GetButtonPrev("Main Action") || !currentCustomerOBJ)
				{
					currentCustomerOBJ = hitInfo.transform.parent.gameObject;
					currentFillScale = 0f;
				}
			}
		}
		if ((bool)currentCustomerOBJ)
		{
			spawnedCylinderOBJ.transform.position = currentCustomerOBJ.transform.position;
			if (currentFillScale > 0.99f)
			{
				cylinderFillOBJ.transform.localScale = new Vector3(1f, 1f, 1f);
				currentCustomerOBJ.GetComponent<NPC_Info>().surveillanceChecked = true;
				currentCustomerOBJ.GetComponent<NPC_Info>().CmdSurveillanceSet();
				surveillanceFinishAudioSource.Play();
				Create3DTickObject(currentCustomerOBJ.transform);
				currentCustomerOBJ = null;
			}
			else
			{
				currentFillScale -= unfillAmount * Time.deltaTime;
				currentFillScale = Mathf.Clamp(currentFillScale, 0f, 1f);
				cylinderFillOBJ.transform.localScale = new Vector3(1f, currentFillScale, 1f);
			}
		}
		else
		{
			spawnedCylinderOBJ.transform.position = new Vector3(0f, -10f, 0f);
			cylinderFillOBJ.transform.localScale = new Vector3(1f, 0f, 1f);
		}
	}

	private void Create3DTickObject(Transform objectTransform)
	{
		GameObject gameObject = Object.Instantiate(tickPrefabOBJ, objectTransform);
		gameObject.transform.localPosition = new Vector3(0f, 2f, 0f);
		customersTickList.Add(gameObject);
		gameObject.transform.SetAsLastSibling();
		gameObject.name = "3DTick";
	}

	public void GetNextCamera(bool nextCamera)
	{
		if (!nSpawner)
		{
			return;
		}
		if (camerasList.Count != nSpawner.camerasList.Count)
		{
			camerasList = nSpawner.camerasList;
		}
		if (camerasList.Count == 0)
		{
			return;
		}
		if (nextCamera)
		{
			currentCameraIndex++;
			if (currentCameraIndex >= camerasList.Count)
			{
				currentCameraIndex = 0;
			}
		}
		else
		{
			currentCameraIndex--;
			if (currentCameraIndex < 0)
			{
				currentCameraIndex = camerasList.Count - 1;
			}
		}
		currentCameraOBJ = camerasList[currentCameraIndex];
		SharedBehaviour(currentCameraOBJ);
	}

	public void GetCameraFromMapButton(int cameraIndex)
	{
		currentCameraOBJ = camerasList[cameraIndex];
		SharedBehaviour(currentCameraOBJ);
	}

	private void SharedBehaviour(GameObject cameraOBJ)
	{
		if (currentCameraOBJ != null && (bool)Camera.main)
		{
			viewpointOBJ = currentCameraOBJ.transform.Find("Viewpoint").gameObject;
			Camera.main.GetComponent<CustomCameraController>().SurveillanceCameraEvent(viewpointOBJ);
			if ((bool)GameCanvas.Instance)
			{
				GameCanvas.Instance.transform.Find("SurveillanceContainer/Static").gameObject.SetActive(value: true);
			}
			Vector3 position = currentCameraOBJ.transform.position;
			cameraReferenceTMP.text = "CRef-" + (int)Mathf.Abs(position.x + 31f) + "-" + (int)Mathf.Abs(position.z);
		}
	}

	private void CreateMapButtons()
	{
		if (UIPivotOBJ.transform.childCount > 0)
		{
			foreach (Transform item in UIPivotOBJ.transform)
			{
				Object.Destroy(item.gameObject);
			}
		}
		float num = 4.86f;
		for (int i = 0; i < camerasList.Count; i++)
		{
			GameObject gameObject = camerasList[i];
			if (gameObject != null)
			{
				GameObject obj = Object.Instantiate(UIMapButtonPrefabOBJ, UIPivotOBJ.transform);
				Vector3 position = gameObject.transform.position;
				obj.GetComponent<RectTransform>().anchoredPosition = new Vector2(position.z * (0f - num), Mathf.Clamp(position.x * num, -500f, 175f));
				obj.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("CameraIndex").Value = i;
				obj.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("SurveillanceOBJ").Value = base.gameObject;
			}
		}
	}

	private void ManageCustomerList(bool activate)
	{
		if (customersTickList.Count <= 0)
		{
			return;
		}
		customersTickList.RemoveAll((GameObject x) => x == null);
		foreach (GameObject customersTick in customersTickList)
		{
			customersTick.SetActive(activate);
		}
	}

	private void OnDestroy()
	{
		if (inASecurityCamera)
		{
			ManageCustomerList(activate: false);
		}
	}

	private static float ClampAngle(float angle, float min, float max)
	{
		if (angle < -360f)
		{
			angle += 360f;
		}
		if (angle > 360f)
		{
			angle -= 360f;
		}
		return Mathf.Clamp(angle, min, max);
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Test
using UnityEngine;
using UnityEngine.UI;

public class Test : MonoBehaviour
{
	public GameObject target;

	public Material mat;

	public RawImage img;

	public RenderTexture texture;

	private MeshFilter mf;

	private void Awake()
	{
		texture = new RenderTexture(Screen.width, Screen.height, 24, RenderTextureFormat.ARGB32, RenderTextureReadWrite.Linear);
		img.texture = texture;
		mf = target.GetComponent<MeshFilter>();
	}

	[ContextMenu("Render")]
	public void Render()
	{
		Graphics.SetRenderTarget(texture);
		GL.Clear(clearDepth: true, clearColor: true, new Color(0f, 0f, 0f, 0f));
		GL.PushMatrix();
		mat.SetPass(0);
		Graphics.DrawMeshNow(mf.mesh, target.transform.localToWorldMatrix);
		GL.PopMatrix();
		Graphics.SetRenderTarget(null);
	}

	private void OnRenderObject()
	{
		Render();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// TheCoolRoom
using System.Collections;
using HutongGames.PlayMaker;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Video;

public class TheCoolRoom : MonoBehaviour
{
	public GameObject[] OBJsActivation;

	public GameObject skinCanvasOBJ;

	[Space(10f)]
	public GameObject[] charactersArray;

	public GameObject[] hatsArray;

	private bool objsActivated;

	private int currentCharacterIndex;

	private int currentHatIndex;

	public GameObject dummySpawnSpot;

	private GameObject dummyCharacterOBJ;

	private GameObject dummyHatOBJ;

	public GameObject DebugOBJ;

	private int currentPose;

	private bool isSaving;

	private bool allowVideo = true;

	[Space(10f)]
	public VideoClip[] videoclipArray;

	public RenderTexture TVRenderTexture;

	public Sprite buttonOn;

	public Sprite buttonOff;

	public GameObject[] buttonsArray;

	public GameObject browserCamera;

	public Material RTMaterial;

	public Button setLinkButton;

	public GameObject audioURLPrefab;

	public GameObject errorOBJ;

	[Space(10f)]
	public OtherPropsBehaviour otherPropsComponent;

	private GameObject currentAudioURLOBJ;

	private int videoMode;

	private int currentVideoIndex;

	private VideoPlayer videoPlayer;

	private bool isPlayingVideo;

	private Coroutine videoCoroutine;

	private bool auxBool;

	private void Start()
	{
		videoPlayer = GetComponent<VideoPlayer>();
		LoadValues();
		StartCoroutine(DelayedVideoActivation());
	}

	private void LoadValues()
	{
		string value = FsmVariables.GlobalVariables.GetFsmString("OptionsGlobalPath").Value;
		string filePath = Application.persistentDataPath + "/" + value;
		if (ES3.KeyExists("localizationhash3", filePath))
		{
			int[] array = ES3.Load<int[]>("localizationhash3", filePath);
			GameObject gameObject = base.transform.Find("Canvas_Skins/Container/Poses").gameObject;
			for (int i = 0; i < gameObject.transform.childCount; i++)
			{
				if (i != 0)
				{
					gameObject.transform.GetChild(i).GetComponent<TextMeshProUGUI>().text = array[i].ToString();
				}
			}
		}
		if (ES3.KeyExists("localizationhash1", filePath))
		{
			int num = ES3.Load<int>("localizationhash1", filePath);
			skinCanvasOBJ.transform.Find("Container/CharacterNumber").GetComponent<TextMeshProUGUI>().text = num.ToString();
		}
		if (ES3.KeyExists("localizationhash2", filePath))
		{
			int num2 = ES3.Load<int>("localizationhash2", filePath);
			skinCanvasOBJ.transform.Find("Container/HatNumber").GetComponent<TextMeshProUGUI>().text = num2.ToString();
		}
	}

	private void Update()
	{
		if ((bool)FirstPersonController.Instance)
		{
			float num = Vector3.Distance(FirstPersonController.Instance.transform.position, skinCanvasOBJ.transform.position);
			if (num < 3f && !objsActivated)
			{
				objsActivated = true;
				GameObject[] oBJsActivation = OBJsActivation;
				for (int i = 0; i < oBJsActivation.Length; i++)
				{
					oBJsActivation[i].SetActive(value: true);
				}
				currentCharacterIndex = FirstPersonController.Instance.GetComponent<PlayerNetwork>().characterID;
				currentHatIndex = FirstPersonController.Instance.GetComponent<PlayerNetwork>().hatID;
				SetCharacter(currentCharacterIndex);
				if ((bool)dummyCharacterOBJ)
				{
					dummyCharacterOBJ.GetComponent<Animator>().SetFloat("PoseFloat", 0f);
				}
			}
			else if (num > 3f && objsActivated)
			{
				objsActivated = false;
				GameObject[] oBJsActivation = OBJsActivation;
				for (int i = 0; i < oBJsActivation.Length; i++)
				{
					oBJsActivation[i].SetActive(value: false);
				}
			}
		}
		if (!allowVideo)
		{
			return;
		}
		switch (videoMode)
		{
		case 3:
			if (!browserCamera.activeSelf)
			{
				browserCamera.SetActive(value: true);
			}
			otherPropsComponent.WebsitesSyncControl();
			break;
		case 1:
			if (!isPlayingVideo)
			{
				if (videoPlayer.source != 0)
				{
					videoPlayer.source = VideoSource.VideoClip;
				}
				videoCoroutine = StartCoroutine(VideoPlayPlaceholder());
			}
			break;
		case 0:
		case 2:
			break;
		}
	}

	public void SetAutosync(bool swapBool)
	{
		otherPropsComponent.syncWebsites = swapBool;
	}

	public void AllowPlayersToSetURLs(bool swapBool)
	{
		otherPropsComponent.allowOtherPlayersToChangeURL = swapBool;
	}

	public void SetAllowedWebsites(bool swapBool, int index)
	{
		otherPropsComponent.syncWebsitesValue[index] = swapBool;
	}

	public void AttemptURLVideoPlay(string videoURL)
	{
		if (!(videoURL == ""))
		{
			if (isPlayingVideo)
			{
				StopCoroutine(videoCoroutine);
			}
			if (videoPlayer.source != VideoSource.Url)
			{
				videoPlayer.source = VideoSource.Url;
			}
			videoCoroutine = StartCoroutine(VideoPlayURL(videoURL));
		}
	}

	private IEnumerator VideoPlayURL(string videoURL)
	{
		isPlayingVideo = true;
		videoPlayer.isLooping = true;
		if (!currentAudioURLOBJ)
		{
			currentAudioURLOBJ = Object.Instantiate(audioURLPrefab);
		}
		videoPlayer.controlledAudioTrackCount = 1;
		videoPlayer.EnableAudioTrack(0, enabled: true);
		videoPlayer.SetTargetAudioSource(0, currentAudioURLOBJ.GetComponent<AudioSource>());
		videoPlayer.url = videoURL;
		videoPlayer.errorReceived += VideoPlayer_errorReceived;
		videoPlayer.Prepare();
		while (!videoPlayer.isPrepared)
		{
			yield return null;
		}
		videoPlayer.Play();
		currentAudioURLOBJ.GetComponent<AudioSource>().Play();
		yield return null;
	}

	private void VideoPlayer_errorReceived(VideoPlayer source, string message)
	{
		errorOBJ.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = message;
		errorOBJ.SetActive(value: true);
		videoPlayer.errorReceived -= VideoPlayer_errorReceived;
	}

	private IEnumerator VideoPlayPlaceholder()
	{
		isPlayingVideo = true;
		yield return null;
		if (currentVideoIndex >= videoclipArray.Length)
		{
			currentVideoIndex = 0;
		}
		videoPlayer.clip = videoclipArray[currentVideoIndex];
		videoPlayer.Play();
		float seconds = (float)videoPlayer.clip.length;
		yield return new WaitForSeconds(seconds);
		yield return null;
		currentVideoIndex++;
		isPlayingVideo = false;
	}

	private void TurnOffVideoPlayer()
	{
		videoPlayer.isLooping = false;
		if (videoPlayer.isPlaying)
		{
			videoPlayer.Stop();
		}
		if (videoPlayer.clip != null)
		{
			videoPlayer.clip = null;
		}
		if (isPlayingVideo)
		{
			isPlayingVideo = false;
			StopCoroutine(videoCoroutine);
		}
		browserCamera.SetActive(value: false);
		if ((bool)currentAudioURLOBJ)
		{
			Object.Destroy(currentAudioURLOBJ);
		}
		TVRenderTexture.Release();
	}

	private IEnumerator DelayedVideoActivation()
	{
		yield return new WaitForSeconds(11f);
		ChangeVideoMode(1);
	}

	public void ChangeVideoMode(int vMode)
	{
		if (!auxBool)
		{
			StartCoroutine(ChangeVideoCoroutine(vMode));
		}
	}

	private IEnumerator ChangeVideoCoroutine(int vMode)
	{
		auxBool = true;
		videoMode = -1;
		TurnOffVideoPlayer();
		yield return new WaitForSeconds(0.25f);
		UpdateButtonSprites(vMode);
		videoMode = vMode;
		auxBool = false;
	}

	public void AllowVideoOption(bool set)
	{
		if (!set)
		{
			VideoPlayPlaceholder();
		}
		allowVideo = set;
	}

	private void UpdateButtonSprites(int currentMode)
	{
		for (int i = 0; i < buttonsArray.Length; i++)
		{
			if (i == currentMode)
			{
				buttonsArray[i].GetComponent<Image>().sprite = buttonOn;
			}
			else
			{
				buttonsArray[i].GetComponent<Image>().sprite = buttonOff;
			}
			if (currentMode == 2)
			{
				setLinkButton.interactable = true;
			}
			else
			{
				setLinkButton.interactable = false;
			}
		}
	}

	public void CharacterIndexAdd(int add)
	{
		currentCharacterIndex += add;
		if (currentCharacterIndex < 0)
		{
			currentCharacterIndex = charactersArray.Length - 1;
		}
		else if (currentCharacterIndex >= charactersArray.Length)
		{
			currentCharacterIndex = 0;
		}
		SetCharacter(currentCharacterIndex);
		skinCanvasOBJ.transform.Find("Container/CharacterNumber").GetComponent<TextMeshProUGUI>().text = currentCharacterIndex.ToString();
	}

	public void HatIndexAdd(int add)
	{
		currentHatIndex += add;
		if (currentHatIndex < 0)
		{
			currentHatIndex = hatsArray.Length - 1;
		}
		else if (currentHatIndex >= hatsArray.Length)
		{
			currentHatIndex = 0;
		}
		SetHat(currentHatIndex);
		skinCanvasOBJ.transform.Find("Container/HatNumber").GetComponent<TextMeshProUGUI>().text = currentHatIndex.ToString();
	}

	public void SetCharacter(int characterIndex)
	{
		if ((bool)dummyCharacterOBJ)
		{
			Object.Destroy(dummyCharacterOBJ);
		}
		dummyCharacterOBJ = Object.Instantiate(charactersArray[characterIndex], dummySpawnSpot.transform);
		dummyCharacterOBJ.transform.localPosition = Vector3.zero;
		dummyCharacterOBJ.transform.rotation = Quaternion.Euler(new Vector3(0f, 180f, 0f));
		FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeCharacter(characterIndex);
		Animator component = dummyCharacterOBJ.GetComponent<Animator>();
		component.SetFloat("PoseFloat", currentPose);
		component.Play("Pose");
		SetHat(currentHatIndex);
		SaveTrigger();
	}

	public void SetHat(int hatIndex)
	{
		if ((bool)dummyHatOBJ)
		{
			Object.Destroy(dummyHatOBJ);
		}
		FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeHat(hatIndex);
		SaveTrigger();
		if (hatIndex != 0)
		{
			GameObject value = dummyCharacterOBJ.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("HatSpot").Value;
			dummyHatOBJ = Object.Instantiate(hatsArray[hatIndex], value.transform);
			dummyHatOBJ.transform.localPosition = dummyHatOBJ.GetComponent<HatInfo>().offset;
			dummyHatOBJ.transform.localRotation = Quaternion.Euler(dummyHatOBJ.GetComponent<HatInfo>().rotation);
		}
	}

	public void SetPose(int keyIndex, bool add)
	{
		if ((bool)FirstPersonController.Instance)
		{
			GameObject obj = base.transform.Find("Canvas_Skins/Container/Poses").gameObject;
			int num = 35;
			int num2 = 1;
			if (!add)
			{
				num2 = -1;
			}
			int num3 = FirstPersonController.Instance.GetComponent<PlayerNetwork>().posesArray[keyIndex];
			num3 += num2;
			if (num3 < 0)
			{
				num3 = num;
			}
			if (num3 > num)
			{
				num3 = 0;
			}
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().posesArray[keyIndex] = num3;
			obj.transform.GetChild(keyIndex).GetComponent<TextMeshProUGUI>().text = num3.ToString();
			if ((bool)dummyCharacterOBJ)
			{
				Animator component = dummyCharacterOBJ.GetComponent<Animator>();
				component.SetFloat("PoseFloat", num3);
				component.Play("Pose");
			}
			currentPose = num3;
			SaveTrigger();
		}
	}

	public void SaveTrigger()
	{
		if (!isSaving)
		{
			StartCoroutine(SaveCoroutine());
		}
	}

	private IEnumerator SaveCoroutine()
	{
		isSaving = true;
		yield return new WaitForSeconds(3f);
		FirstPersonController.Instance.GetComponent<PlayerNetwork>().SavePlayerSkins();
		isSaving = false;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// TimeAccelerationWatcher
using UnityEngine;

public class TimeAccelerationWatcher : MonoBehaviour
{
	private void Update()
	{
		if (GameData.Instance.timeOfDay < 8.05f || EmployeesDoingNothing())
		{
			RestoreTimeSettings();
		}
	}

	private bool EmployeesDoingNothing()
	{
		if (NPC_Manager.Instance.employeeParentOBJ.transform.childCount == 0)
		{
			return true;
		}
		Transform transform = NPC_Manager.Instance.restSpotOBJ.transform;
		foreach (Transform item in NPC_Manager.Instance.employeeParentOBJ.transform)
		{
			NPC_Info component = item.GetComponent<NPC_Info>();
			if ((component.taskPriority == 2 || component.taskPriority == 3) && Vector3.Distance(item.position, transform.position) > 6.5f)
			{
				return false;
			}
		}
		return true;
	}

	private void RestoreTimeSettings()
	{
		GetComponent<UpgradesManager>().NetworkacceleratedTime = false;
		GetComponent<UpgradesManager>().RpcTimeAcceleration(accelerateBool: false);
		base.enabled = false;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ToolboxBehaviour
using System.Collections;
using Rewired;
using UnityEngine;
using UnityEngine.UI;

public class ToolboxBehaviour : MonoBehaviour
{
	public LayerMask lMask;

	public GameObject wrenchPrefabOBJ;

	public Transform boxWrenchPosition;

	private GameObject instantiatedWrenchOBJ;

	private Animator wrenchAnimator;

	private bool animatorPlaying;

	private GameObject currentFixingOBJ;

	private GameObject fillingContainer;

	private Image fillingImage;

	private bool filling;

	private AudioSource fixSource;

	private Player MainPlayer;

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
		fillingContainer = GameCanvas.Instance.transform.Find("Crosshair/Fix").gameObject;
		fillingImage = fillingContainer.GetComponent<Image>();
		fixSource = GetComponent<AudioSource>();
	}

	private void Update()
	{
		if (!instantiatedWrenchOBJ)
		{
			instantiatedWrenchOBJ = Object.Instantiate(wrenchPrefabOBJ);
			wrenchAnimator = instantiatedWrenchOBJ.transform.Find("PivotAnimator").GetComponent<Animator>();
		}
		else if (filling && (bool)currentFixingOBJ)
		{
			if (!animatorPlaying)
			{
				animatorPlaying = true;
				wrenchAnimator.Play("ToolboxWrench_Fixing");
				wrenchAnimator.SetBool("Fixing", animatorPlaying);
			}
			instantiatedWrenchOBJ.transform.position = currentFixingOBJ.transform.TransformPoint(new Vector3(0f, 0f, 0.2f));
			instantiatedWrenchOBJ.transform.rotation = Quaternion.Euler(currentFixingOBJ.transform.rotation.eulerAngles + new Vector3(0f, 0f, 90f));
		}
		else
		{
			if (animatorPlaying)
			{
				animatorPlaying = false;
				wrenchAnimator.SetBool("Fixing", animatorPlaying);
			}
			instantiatedWrenchOBJ.transform.position = boxWrenchPosition.position;
			instantiatedWrenchOBJ.transform.rotation = boxWrenchPosition.rotation;
		}
		if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out var hitInfo, 4f, lMask))
		{
			bool button = MainPlayer.GetButton("Main Action");
			if (hitInfo.transform.childCount > 0 && hitInfo.transform.GetChild(0).CompareTag("Fixable"))
			{
				if (button && !filling)
				{
					StartCoroutine(FillingProgress(hitInfo.transform));
				}
				else if (!button && filling)
				{
					StopAllCoroutines();
					ClearValues();
				}
			}
			else if (filling && (!button || !hitInfo.transform.GetComponent<CapsuleCollider>()))
			{
				StopAllCoroutines();
				ClearValues();
			}
		}
		else if (filling)
		{
			StopAllCoroutines();
			ClearValues();
		}
	}

	private IEnumerator FillingProgress(Transform other)
	{
		filling = true;
		fillingImage.fillAmount = 0f;
		fillingContainer.SetActive(value: true);
		fixSource.Play();
		currentFixingOBJ = other.gameObject;
		float fillProgress = 0f;
		float fillingTime = 9f;
		while (fillProgress < fillingTime)
		{
			fillProgress += Time.deltaTime;
			fillingImage.fillAmount = fillProgress / fillingTime;
			yield return null;
		}
		fixSource.Stop();
		fillingContainer.SetActive(value: false);
		CallFix(other);
		yield return null;
		filling = false;
	}

	private void CallFix(Transform other)
	{
		int value = other.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmInt("ReferenceIndex").Value;
		GameObject value2 = other.GetComponent<PlayMakerFSM>().FsmVariables.GetFsmGameObject("ReferenceOBJ").Value;
		AchievementsManager.Instance.repairedADevice = true;
		switch (value)
		{
		case 0:
			value2.GetComponent<Data_Container>().CmdFixBreakingEvent();
			break;
		case 1:
			value2.GetComponent<CardboardBaler>().CmdFixBreakingEvent();
			break;
		case 2:
		case 3:
			value2.GetComponent<Data_Container>().CmdFixBreakingEvent();
			break;
		}
		other.gameObject.SetActive(value: false);
	}

	private void OnDestroy()
	{
		if (filling)
		{
			ClearValues();
		}
		if ((bool)instantiatedWrenchOBJ)
		{
			Object.Destroy(instantiatedWrenchOBJ);
		}
	}

	private void ClearValues()
	{
		filling = false;
		fillingContainer.SetActive(value: false);
		fixSource.Stop();
		StopAllCoroutines();
		currentFixingOBJ = null;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ToolsOrganizer
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using StarterAssets;
using UnityEngine;

public class ToolsOrganizer : NetworkBehaviour
{
	[SyncVar]
	public int itemsInOrganizer;

	[Space(10f)]
	public int thisItemID;

	public int maxAmountOfItems = 5;

	[Space(10f)]
	public GameObject positionsParentOBJ;

	public int NetworkitemsInOrganizer
	{
		get
		{
			return itemsInOrganizer;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref itemsInOrganizer, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		UpdateItemsInOrganizerVisually(itemsInOrganizer);
	}

	public void TakeOrRemoveItem()
	{
		if (!FirstPersonController.Instance)
		{
			return;
		}
		int equippedItem = FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem;
		int childCount = positionsParentOBJ.transform.childCount;
		if (equippedItem == 0)
		{
			if (itemsInOrganizer <= 0)
			{
				GameCanvas.Instance.CreateCanvasNotification("tlsognzer0");
				return;
			}
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeEquippedItem(thisItemID);
			CmdRequestItem(takingItem: true);
		}
		else if (equippedItem != thisItemID)
		{
			GameCanvas.Instance.CreateCanvasNotification("tlsognzer1");
		}
		else if (itemsInOrganizer >= childCount)
		{
			GameCanvas.Instance.CreateCanvasNotification("tlsognzer2");
		}
		else if (equippedItem == 9 && FirstPersonController.Instance.GetComponent<PlayerNetwork>().trayData != "")
		{
			GameCanvas.Instance.CreateCanvasNotification("tlsognzer3");
		}
		else
		{
			FirstPersonController.Instance.GetComponent<PlayerNetwork>().CmdChangeEquippedItem(0);
			CmdRequestItem(takingItem: false);
		}
	}

	[Command(requiresAuthority = false)]
	private void CmdRequestItem(bool takingItem)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(takingItem);
		SendCommandInternal("System.Void ToolsOrganizer::CmdRequestItem(System.Boolean)", 693509256, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcRequestItem(int amountOfItems)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(amountOfItems);
		SendRPCInternal("System.Void ToolsOrganizer::RpcRequestItem(System.Int32)", 592510157, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void UpdateItemsInOrganizerVisually(int amountOfItems)
	{
		for (int i = 0; i < maxAmountOfItems; i++)
		{
			GameObject gameObject = positionsParentOBJ.transform.GetChild(i).gameObject;
			if (i < amountOfItems)
			{
				if (!gameObject.activeSelf)
				{
					gameObject.SetActive(value: true);
				}
			}
			else if (gameObject.activeSelf)
			{
				gameObject.SetActive(value: false);
			}
		}
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdRequestItem__Boolean(bool takingItem)
	{
		int num = itemsInOrganizer;
		num = ((!takingItem) ? (num + 1) : (num - 1));
		num = (NetworkitemsInOrganizer = Mathf.Clamp(num, 0, maxAmountOfItems));
		RpcRequestItem(num);
	}

	protected static void InvokeUserCode_CmdRequestItem__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdRequestItem called on client.");
		}
		else
		{
			((ToolsOrganizer)obj).UserCode_CmdRequestItem__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcRequestItem__Int32(int amountOfItems)
	{
		UpdateItemsInOrganizerVisually(amountOfItems);
	}

	protected static void InvokeUserCode_RpcRequestItem__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcRequestItem called on server.");
		}
		else
		{
			((ToolsOrganizer)obj).UserCode_RpcRequestItem__Int32(reader.ReadInt());
		}
	}

	static ToolsOrganizer()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(ToolsOrganizer), "System.Void ToolsOrganizer::CmdRequestItem(System.Boolean)", InvokeUserCode_CmdRequestItem__Boolean, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(ToolsOrganizer), "System.Void ToolsOrganizer::RpcRequestItem(System.Int32)", InvokeUserCode_RpcRequestItem__Int32);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(itemsInOrganizer);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(itemsInOrganizer);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref itemsInOrganizer, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref itemsInOrganizer, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// TrashPlace
using UnityEngine;

public class TrashPlace : MonoBehaviour
{
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// TrashSpawn
using System.Collections;
using System.Runtime.InteropServices;
using HighlightPlus;
using Mirror;
using Mirror.RemoteCalls;
using UnityEngine;

public class TrashSpawn : NetworkBehaviour
{
	[SyncVar]
	public int trashID;

	public GameObject[] trashPrefabs;

	public bool cleanerIsAfterIt;

	public int NetworktrashID
	{
		get
		{
			return trashID;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref trashID, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		StartCoroutine(CreateTrash());
	}

	private IEnumerator CreateTrash()
	{
		if (trashID >= trashPrefabs.Length)
		{
			NetworktrashID = 0;
		}
		GameObject gameObject = Object.Instantiate(trashPrefabs[trashID], base.transform);
		gameObject.transform.localPosition = Vector3.zero;
		BoxCollider component = GetComponent<BoxCollider>();
		component.center = gameObject.GetComponent<BoxCollider>().center;
		component.size = gameObject.GetComponent<BoxCollider>().size * gameObject.transform.lossyScale.x;
		GetComponent<HighlightEffect>().enabled = true;
		yield return null;
	}

	[Command(requiresAuthority = false)]
	public void CmdClearTrash()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void TrashSpawn::CmdClearTrash()", -321223739, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	public void ClearTrashFromCleanerRobot()
	{
		NetworkServer.Destroy(base.gameObject);
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdClearTrash()
	{
		AchievementsManager.Instance.CmdAddAchievementPoint(5, 1);
		GameData.Instance.PlayBroomSound();
		NetworkServer.Destroy(base.gameObject);
	}

	protected static void InvokeUserCode_CmdClearTrash(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdClearTrash called on client.");
		}
		else
		{
			((TrashSpawn)obj).UserCode_CmdClearTrash();
		}
	}

	static TrashSpawn()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(TrashSpawn), "System.Void TrashSpawn::CmdClearTrash()", InvokeUserCode_CmdClearTrash, requiresAuthority: false);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteInt(trashID);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteInt(trashID);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref trashID, null, reader.ReadInt());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref trashID, null, reader.ReadInt());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// TrayData
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Mirror;
using UnityEngine;

public class TrayData : NetworkBehaviour
{
	[SyncVar]
	public string itemsData;

	public int binWidth = 85;

	public int binLength = 55;

	public int padding = 1;

	public GameObject positionPivotOBJ;

	private List<int> itemsInTray = new List<int>();

	public string NetworkitemsData
	{
		get
		{
			return itemsData;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref itemsData, 1uL, null);
		}
	}

	public override void OnStartClient()
	{
		CreateTrayItems();
	}

	private void CreateTrayItems()
	{
		if (itemsData == "")
		{
			return;
		}
		string[] array = itemsData.Split("|");
		foreach (string s in array)
		{
			itemsInTray.Add(int.Parse(s));
		}
		MaxRectsBinPack maxRectsBinPack = new MaxRectsBinPack(binWidth, binLength);
		maxRectsBinPack.allowRotations = false;
		for (int j = 0; j < itemsInTray.Count; j++)
		{
			int num = itemsInTray[j];
			Data_Product component = ProductListing.Instance.productPrefabs[num].GetComponent<Data_Product>();
			Vector3 vector = ((!component.hasTrueCollider) ? ProductListing.Instance.productPrefabs[num].GetComponent<BoxCollider>().size : component.trueCollider);
			maxRectsBinPack.Insert(Mathf.CeilToInt(vector.x * 100f + (float)padding), Mathf.CeilToInt(vector.z * 100f + (float)padding), MaxRectsBinPack.FreeRectChoiceHeuristic.RectBestShortSideFit);
		}
		List<Rect> usedRectangles = maxRectsBinPack.usedRectangles;
		for (int k = 0; k < usedRectangles.Count; k++)
		{
			Rect rect = usedRectangles[k];
			if (k < itemsInTray.Count)
			{
				int num2 = itemsInTray[k];
				GameObject gameObject = ProductListing.Instance.productPrefabs[num2];
				if ((bool)gameObject)
				{
					int num3 = Mathf.CeilToInt(rect.center.x);
					int num4 = Mathf.CeilToInt(rect.center.y);
					GameObject obj = Object.Instantiate(gameObject, positionPivotOBJ.transform);
					obj.transform.localPosition = new Vector3((float)num3 / 100f, 0f, (float)num4 / 100f);
					obj.transform.localRotation = Quaternion.Euler(new Vector3(0f, 180f, 0f));
				}
			}
		}
	}

	public override bool Weaved()
	{
		return true;
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteString(itemsData);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteString(itemsData);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref itemsData, null, reader.ReadString());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref itemsData, null, reader.ReadString());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// TutorialManager
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Rewired;
using StarterAssets;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class TutorialManager : NetworkBehaviour
{
	[SyncVar]
	public bool auxiliarBool;

	[SyncVar]
	public bool auxiliarBool2;

	public GameObject UITutorialPrefabOBJ;

	public GameObject tutorialParentOBJ;

	[Space(10f)]
	public GameObject shelvesOBJ;

	public GameObject checkoutOBJ;

	public GameObject storageOBJ;

	[Space(10f)]
	public GameObject builderOBJ;

	public GameObject UIProductsOBJ;

	public GameObject shoppingListOBJ;

	public GameObject boxOBJ;

	public GameObject tutorialSkipOBJ;

	public Image skipFillImage;

	private bool onHold;

	private int state;

	private GameObject createdUIOBJ;

	private Player MainPlayer;

	private bool pressingKey;

	public bool NetworkauxiliarBool
	{
		get
		{
			return auxiliarBool;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref auxiliarBool, 1uL, null);
		}
	}

	public bool NetworkauxiliarBool2
	{
		get
		{
			return auxiliarBool2;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref auxiliarBool2, 2uL, null);
		}
	}

	private void Start()
	{
		MainPlayer = ReInput.players.GetPlayer(0);
	}

	private void Update()
	{
		if (!GameData.Instance)
		{
			return;
		}
		int gameDay = GameData.Instance.gameDay;
		if (MainPlayer.GetButtonDown("Drop Item") && !pressingKey)
		{
			StartCoroutine(KeyPressQuitsTutorial());
		}
		if (onHold)
		{
			return;
		}
		if (GameData.Instance.isSupermarketOpen && state < 22 && (bool)createdUIOBJ)
		{
			QuitTutorial();
		}
		switch (gameDay)
		{
		case 1:
			switch (state)
			{
			case 0:
				StartCoroutine(TimeCoroutine(10f, 1, "tutorial0"));
				break;
			case 1:
				JustCreateItem("tutorial1");
				state = 2;
				break;
			case 2:
				if (builderOBJ.activeSelf)
				{
					state = 3;
				}
				break;
			case 3:
				JustCreateItem("tutorial2");
				state = 4;
				break;
			case 4:
				if ((shelvesOBJ.transform.childCount > 1 && checkoutOBJ.transform.childCount > 0 && storageOBJ.transform.childCount > 0) || auxiliarBool)
				{
					if (base.isServer)
					{
						NetworkauxiliarBool = true;
					}
					state = 5;
				}
				break;
			case 5:
				JustCreateItem("tutorial3");
				state = 6;
				break;
			case 6:
				if (ProductListing.Instance.unlockedProductTiers[0])
				{
					state = 7;
				}
				break;
			case 7:
				JustCreateItem("tutorial4");
				state = 8;
				break;
			case 8:
				if (UIProductsOBJ.activeSelf)
				{
					state = 9;
				}
				break;
			case 9:
				JustCreateItem("tutorial5");
				state = 10;
				break;
			case 10:
				if (shoppingListOBJ.transform.childCount > 0)
				{
					state = 11;
				}
				break;
			case 11:
				JustCreateItem("tutorial6");
				state = 12;
				break;
			case 12:
				if (boxOBJ.transform.childCount > 0 || auxiliarBool2)
				{
					if (base.isServer)
					{
						NetworkauxiliarBool2 = true;
					}
					state = 13;
				}
				break;
			case 13:
				JustCreateItem("tutorial7");
				state = 14;
				break;
			case 14:
				if ((bool)FirstPersonController.Instance && FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem == 1)
				{
					state = 15;
				}
				break;
			case 15:
				JustCreateItem("tutorial8");
				state = 16;
				break;
			case 16:
				if (CheckShelvesProduct())
				{
					state = 17;
				}
				break;
			case 17:
				JustCreateItem("tutorial9");
				state = 18;
				break;
			case 18:
				if ((bool)FirstPersonController.Instance && FirstPersonController.Instance.GetComponent<PlayerNetwork>().equippedItem == 2)
				{
					state = 19;
				}
				break;
			case 19:
				JustCreateItem("tutorial10");
				state = 20;
				break;
			case 20:
				if (HavePricesChanged())
				{
					state = 21;
				}
				break;
			case 21:
				JustCreateItem("tutorial11");
				state = 22;
				break;
			case 22:
				if (GameData.Instance.isSupermarketOpen)
				{
					StartCoroutine(LastTutorial(24));
					state = 23;
				}
				break;
			case 24:
				base.enabled = false;
				break;
			case 23:
			case 25:
				break;
			}
			break;
		case 2:
			QuitTutorial();
			break;
		default:
			QuitTutorial();
			break;
		}
	}

	private bool HavePricesChanged()
	{
		int num = 0;
		for (int i = 0; i < 50; i++)
		{
			float basePricePerUnit = ProductListing.Instance.productPrefabs[i].GetComponent<Data_Product>().basePricePerUnit;
			float num2 = ProductListing.Instance.productPlayerPricing[i];
			if (basePricePerUnit != num2)
			{
				num++;
			}
		}
		if (num >= 6)
		{
			return true;
		}
		return false;
	}

	private IEnumerator KeyPressQuitsTutorial()
	{
		pressingKey = true;
		float timeCounter = 0f;
		tutorialSkipOBJ.SetActive(value: true);
		skipFillImage.fillAmount = 0f;
		while (timeCounter < 5f)
		{
			if (!MainPlayer.GetButton("Drop Item"))
			{
				tutorialSkipOBJ.SetActive(value: false);
				pressingKey = false;
				yield break;
			}
			skipFillImage.fillAmount = Mathf.Lerp(0f, 1f, timeCounter / 5f);
			timeCounter += Time.deltaTime;
			yield return null;
		}
		QuitTutorial();
		tutorialSkipOBJ.SetActive(value: false);
		yield return null;
		pressingKey = false;
	}

	private void QuitTutorial()
	{
		if ((bool)createdUIOBJ)
		{
			Object.Destroy(createdUIOBJ);
		}
		if (tutorialSkipOBJ.activeSelf)
		{
			tutorialSkipOBJ.SetActive(value: false);
		}
		base.enabled = false;
	}

	private bool CheckShelvesProduct()
	{
		int num = 0;
		if (shelvesOBJ.transform.childCount > 0)
		{
			foreach (Transform item in shelvesOBJ.transform)
			{
				int[] productInfoArray = item.GetComponent<Data_Container>().productInfoArray;
				int num2 = productInfoArray.Length / 2;
				for (int i = 0; i < num2; i++)
				{
					if (productInfoArray[i * 2] >= 0)
					{
						num++;
					}
				}
			}
		}
		if (num >= 6)
		{
			return true;
		}
		return false;
	}

	private IEnumerator LastTutorial(int targetState)
	{
		yield return new WaitForSeconds(5f);
		CanvasGroup cGroup = createdUIOBJ.GetComponent<CanvasGroup>();
		float elapsedTime = 0f;
		float waitTime = 4f;
		while (elapsedTime < waitTime)
		{
			float alpha = Mathf.Lerp(1f, 0f, elapsedTime / waitTime);
			cGroup.alpha = alpha;
			elapsedTime += Time.deltaTime;
			yield return null;
		}
		Object.Destroy(createdUIOBJ);
		yield return null;
	}

	private IEnumerator TimeCoroutine(float waitTime, int targetState, string tutorialHash)
	{
		onHold = true;
		if ((bool)createdUIOBJ)
		{
			Object.Destroy(createdUIOBJ);
		}
		createdUIOBJ = Object.Instantiate(UITutorialPrefabOBJ, tutorialParentOBJ.transform);
		createdUIOBJ.GetComponent<RectTransform>().anchoredPosition = new Vector2(200f, 130f);
		createdUIOBJ.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString(tutorialHash);
		yield return new WaitForSeconds(waitTime);
		Object.Destroy(createdUIOBJ);
		yield return new WaitForSeconds(1f);
		state = targetState;
		yield return null;
		onHold = false;
	}

	private void JustCreateItem(string tutorialHash)
	{
		if ((bool)createdUIOBJ)
		{
			Object.Destroy(createdUIOBJ);
		}
		createdUIOBJ = Object.Instantiate(UITutorialPrefabOBJ, tutorialParentOBJ.transform);
		createdUIOBJ.GetComponent<RectTransform>().anchoredPosition = new Vector2(200f, 130f);
		createdUIOBJ.transform.GetChild(0).GetComponent<TextMeshProUGUI>().text = LocalizationManager.instance.GetLocalizationString(tutorialHash);
	}

	public override bool Weaved()
	{
		return true;
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			writer.WriteBool(auxiliarBool);
			writer.WriteBool(auxiliarBool2);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			writer.WriteBool(auxiliarBool);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			writer.WriteBool(auxiliarBool2);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref auxiliarBool, null, reader.ReadBool());
			GeneratedSyncVarDeserialize(ref auxiliarBool2, null, reader.ReadBool());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref auxiliarBool, null, reader.ReadBool());
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref auxiliarBool2, null, reader.ReadBool());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// UIInputField
using TMPro;
using UnityEngine;

public class UIInputField : MonoBehaviour
{
	public TextMeshProUGUI placeholderField;

	public TMP_InputField inputFieldComponent;

	private string employeeName;

	private void Start()
	{
		inputFieldComponent.onSubmit.AddListener(TextSubmitted);
		inputFieldComponent.onSelect.AddListener(SelectedTextInput);
	}

	public void SelectedTextInput(string input)
	{
		employeeName = placeholderField.text;
	}

	public void TextSubmitted(string input)
	{
		GetComponent<TMP_InputField>().text = "";
		if (input.Length > 0 && !input.Contains("|"))
		{
			employeeName = input;
			int siblingIndex = base.transform.parent.transform.GetSiblingIndex();
			placeholderField.text = employeeName;
			NPC_Manager.Instance.CmdChangeEmployeeName(siblingIndex, input);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// UndoTool
using Wing.uPainter;

public class UndoTool : BaseTool
{
	public override bool Enable => NormalSingleton<PainterOperation>.Instance.CanUndo;

	public override void OnClick()
	{
		base.OnClick();
		NormalSingleton<PainterOperation>.Instance.Undo();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// UnitySourceGeneratedAssemblyMonoScriptTypes_v1
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[132405]
		{
			0, 0, 0, 1, 0, 0, 0, 94, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 50, 68, 32, 70, 108, 97, 116, 32,
			87, 111, 114, 108, 100, 32, 77, 97, 112, 115,
			92, 50, 68, 32, 70, 108, 97, 116, 32, 87,
			111, 114, 108, 100, 32, 77, 97, 112, 32, 82,
			101, 115, 111, 117, 114, 99, 101, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 67, 105, 114,
			99, 108, 101, 83, 108, 105, 100, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 92,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 50, 68, 32, 70, 108, 97,
			116, 32, 87, 111, 114, 108, 100, 32, 77, 97,
			112, 115, 92, 50, 68, 32, 70, 108, 97, 116,
			32, 87, 111, 114, 108, 100, 32, 77, 97, 112,
			32, 82, 101, 115, 111, 117, 114, 99, 101, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			109, 97, 103, 101, 66, 111, 97, 114, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 102,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 50, 68, 32, 70, 108, 97,
			116, 32, 87, 111, 114, 108, 100, 32, 77, 97,
			112, 115, 92, 50, 68, 32, 70, 108, 97, 116,
			32, 87, 111, 114, 108, 100, 32, 77, 97, 112,
			32, 82, 101, 115, 111, 117, 114, 99, 101, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 82,
			97, 110, 100, 111, 109, 69, 110, 97, 98, 108,
			101, 65, 110, 105, 109, 97, 116, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 67, 105, 116, 105, 122, 101,
			110, 115, 32, 80, 82, 79, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 67, 97, 109, 101, 114,
			97, 92, 67, 97, 109, 77, 111, 117, 115, 101,
			79, 114, 98, 105, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 72, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			67, 105, 116, 105, 122, 101, 110, 115, 32, 80,
			82, 79, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 67, 97, 109, 101, 114, 97, 92, 77, 111,
			117, 115, 101, 76, 111, 111, 107, 65, 100, 118,
			97, 110, 99, 101, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 66, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			67, 105, 116, 105, 122, 101, 110, 115, 32, 80,
			82, 79, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 80, 97, 116, 104, 115, 92, 65, 117, 100,
			105, 101, 110, 99, 101, 80, 97, 116, 104, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 67, 105, 116, 105, 122, 101,
			110, 115, 32, 80, 82, 79, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 97, 116, 104, 115,
			92, 77, 111, 118, 101, 80, 97, 116, 104, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 61,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 67, 105, 116, 105, 122, 101,
			110, 115, 32, 80, 82, 79, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 97, 116, 104, 115,
			92, 78, 101, 119, 80, 97, 116, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 68, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 67, 105, 116, 105, 122, 101, 110,
			115, 32, 80, 82, 79, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 80, 97, 116, 104, 115, 92,
			80, 101, 111, 112, 108, 101, 87, 97, 108, 107,
			80, 97, 116, 104, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 62, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 67,
			105, 116, 105, 122, 101, 110, 115, 32, 80, 82,
			79, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			80, 97, 116, 104, 115, 92, 87, 97, 108, 107,
			80, 97, 116, 104, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 60, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 67,
			105, 116, 105, 122, 101, 110, 115, 32, 80, 82,
			79, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			82, 111, 116, 97, 116, 101, 111, 98, 106, 101,
			99, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 83, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 67, 105, 116,
			105, 122, 101, 110, 115, 32, 80, 82, 79, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 83, 116,
			114, 101, 101, 116, 32, 65, 110, 100, 32, 67,
			111, 110, 99, 101, 114, 116, 92, 80, 101, 111,
			112, 108, 101, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 90, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 67, 105,
			116, 105, 122, 101, 110, 115, 32, 80, 82, 79,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 83,
			116, 114, 101, 101, 116, 32, 65, 110, 100, 32,
			67, 111, 110, 99, 101, 114, 116, 92, 80, 111,
			112, 117, 108, 97, 116, 105, 111, 110, 83, 121,
			115, 116, 101, 109, 77, 97, 110, 97, 103, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 88, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 67, 105, 116, 105,
			122, 101, 110, 115, 32, 80, 82, 79, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 116, 114,
			101, 101, 116, 32, 65, 110, 100, 32, 67, 111,
			110, 99, 101, 114, 116, 92, 83, 116, 97, 110,
			100, 105, 110, 103, 80, 101, 111, 112, 108, 101,
			67, 111, 110, 99, 101, 114, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 87, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 67, 105, 116, 105, 122, 101, 110, 115,
			32, 80, 82, 79, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 83, 116, 114, 101, 101, 116, 32,
			65, 110, 100, 32, 67, 111, 110, 99, 101, 114,
			116, 92, 83, 116, 97, 110, 100, 105, 110, 103,
			80, 101, 111, 112, 108, 101, 83, 116, 114, 101,
			101, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 67, 105, 116,
			105, 122, 101, 110, 115, 32, 80, 82, 79, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 116,
			105, 108, 115, 92, 67, 111, 109, 109, 111, 110,
			85, 116, 105, 108, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 71, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			67, 105, 116, 105, 122, 101, 110, 115, 32, 80,
			82, 79, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 85, 116, 105, 108, 115, 92, 83, 104, 102,
			117, 102, 102, 108, 101, 69, 120, 116, 101, 110,
			115, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			2, 0, 0, 0, 55, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 67,
			105, 116, 121, 66, 85, 114, 98, 97, 110, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 66, 105,
			108, 108, 98, 111, 97, 114, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 54, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 67, 105, 116, 121, 66, 85, 114, 98,
			97, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 68, 97, 121, 78, 105, 103, 104, 116, 46,
			99, 115, 0, 0, 0, 2, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 67, 105, 116, 121, 66, 85,
			114, 98, 97, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 83, 105, 109, 112, 108, 101, 67,
			97, 109, 101, 114, 97, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 103, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			68, 105, 115, 115, 111, 110, 97, 110, 99, 101,
			92, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 115, 92, 77, 105, 114, 114, 111, 114,
			73, 103, 110, 111, 114, 97, 110, 99, 101, 92,
			68, 101, 109, 111, 92, 77, 105, 114, 114, 111,
			114, 73, 103, 110, 111, 114, 97, 110, 99, 101,
			80, 108, 97, 121, 101, 114, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 88, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 68, 105, 115, 115, 111, 110, 97, 110, 99,
			101, 92, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 115, 92, 77, 105, 114, 114, 111,
			114, 73, 103, 110, 111, 114, 97, 110, 99, 101,
			92, 77, 105, 114, 114, 111, 114, 73, 103, 110,
			111, 114, 97, 110, 99, 101, 67, 108, 105, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 4, 0,
			0, 0, 94, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 68, 105, 115,
			115, 111, 110, 97, 110, 99, 101, 92, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 115,
			92, 77, 105, 114, 114, 111, 114, 73, 103, 110,
			111, 114, 97, 110, 99, 101, 92, 77, 105, 114,
			114, 111, 114, 73, 103, 110, 111, 114, 97, 110,
			99, 101, 67, 111, 109, 109, 115, 78, 101, 116,
			119, 111, 114, 107, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 88, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 68,
			105, 115, 115, 111, 110, 97, 110, 99, 101, 92,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 115, 92, 77, 105, 114, 114, 111, 114, 73,
			103, 110, 111, 114, 97, 110, 99, 101, 92, 77,
			105, 114, 114, 111, 114, 73, 103, 110, 111, 114,
			97, 110, 99, 101, 80, 108, 97, 121, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			88, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 68, 105, 115, 115, 111,
			110, 97, 110, 99, 101, 92, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 115, 92, 77,
			105, 114, 114, 111, 114, 73, 103, 110, 111, 114,
			97, 110, 99, 101, 92, 77, 105, 114, 114, 111,
			114, 73, 103, 110, 111, 114, 97, 110, 99, 101,
			83, 101, 114, 118, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 78, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 68, 105, 115, 115, 111, 110, 97, 110, 99,
			101, 92, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 115, 92, 79, 102, 102, 108, 105,
			110, 101, 92, 79, 102, 102, 108, 105, 110, 101,
			67, 111, 109, 109, 115, 78, 101, 116, 119, 111,
			114, 107, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 78, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 69, 110, 118,
			105, 114, 111, 32, 51, 32, 45, 32, 83, 107,
			121, 32, 97, 110, 100, 32, 87, 101, 97, 116,
			104, 101, 114, 92, 83, 97, 109, 112, 108, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 69,
			118, 101, 110, 116, 84, 101, 115, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 77, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 69, 110, 118, 105, 114, 111, 32,
			51, 32, 45, 32, 83, 107, 121, 32, 97, 110,
			100, 32, 87, 101, 97, 116, 104, 101, 114, 92,
			83, 97, 109, 112, 108, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 85, 73, 83, 97, 109,
			112, 108, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 118, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 69, 110,
			118, 105, 114, 111, 32, 51, 32, 45, 32, 83,
			107, 121, 32, 97, 110, 100, 32, 87, 101, 97,
			116, 104, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 84, 104, 105, 114, 100, 80, 97,
			114, 116, 121, 83, 117, 112, 112, 111, 114, 116,
			92, 77, 105, 99, 114, 111, 115, 112, 108, 97,
			116, 92, 69, 110, 118, 105, 114, 111, 77, 105,
			99, 114, 111, 115, 112, 108, 97, 116, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 105,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 69, 110, 118, 105, 114, 111,
			32, 51, 32, 45, 32, 83, 107, 121, 32, 97,
			110, 100, 32, 87, 101, 97, 116, 104, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 84,
			104, 105, 114, 100, 80, 97, 114, 116, 121, 83,
			117, 112, 112, 111, 114, 116, 92, 77, 105, 114,
			114, 111, 114, 92, 69, 110, 118, 105, 114, 111,
			77, 105, 114, 114, 111, 114, 80, 108, 97, 121,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 105, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 69, 110, 118,
			105, 114, 111, 32, 51, 32, 45, 32, 83, 107,
			121, 32, 97, 110, 100, 32, 87, 101, 97, 116,
			104, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 84, 104, 105, 114, 100, 80, 97, 114,
			116, 121, 83, 117, 112, 112, 111, 114, 116, 92,
			77, 105, 114, 114, 111, 114, 92, 69, 110, 118,
			105, 114, 111, 77, 105, 114, 114, 111, 114, 83,
			101, 114, 118, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 110, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			69, 110, 118, 105, 114, 111, 32, 51, 32, 45,
			32, 83, 107, 121, 32, 97, 110, 100, 32, 87,
			101, 97, 116, 104, 101, 114, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 84, 104, 105, 114, 100,
			80, 97, 114, 116, 121, 83, 117, 112, 112, 111,
			114, 116, 92, 80, 104, 111, 116, 111, 110, 92,
			69, 110, 118, 105, 114, 111, 80, 104, 111, 116,
			111, 110, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 62, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 70, 117,
			108, 108, 79, 112, 97, 113, 117, 101, 86, 70,
			88, 92, 83, 99, 114, 105, 112, 116, 92, 86,
			70, 88, 95, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 63, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 80, 108, 117,
			115, 92, 68, 101, 109, 111, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 72, 105, 116, 70, 120,
			68, 101, 109, 111, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 73, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 80, 108,
			117, 115, 92, 68, 101, 109, 111, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 77, 97, 110, 117,
			97, 108, 83, 101, 108, 101, 99, 116, 105, 111,
			110, 68, 101, 109, 111, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 81, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			72, 105, 103, 104, 108, 105, 103, 104, 116, 80,
			108, 117, 115, 92, 68, 101, 109, 111, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 112, 104,
			101, 114, 101, 72, 105, 103, 104, 108, 105, 103,
			104, 116, 69, 118, 101, 110, 116, 69, 120, 97,
			109, 112, 108, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 82, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 80, 108,
			117, 115, 92, 68, 101, 109, 111, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 83, 112, 104, 101,
			114, 101, 83, 101, 108, 101, 99, 116, 105, 111,
			110, 69, 118, 101, 110, 116, 115, 69, 120, 97,
			109, 112, 108, 101, 46, 99, 115, 0, 0, 0,
			4, 0, 0, 0, 85, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 80, 108,
			117, 115, 92, 80, 105, 112, 101, 108, 105, 110,
			101, 115, 92, 85, 82, 80, 92, 72, 105, 103,
			104, 108, 105, 103, 104, 116, 80, 108, 117, 115,
			82, 101, 110, 100, 101, 114, 80, 97, 115, 115,
			70, 101, 97, 116, 117, 114, 101, 46, 99, 115,
			0, 0, 0, 5, 0, 0, 0, 72, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 80, 108, 117, 115, 92, 82, 117, 110, 116,
			105, 109, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 69, 102, 102, 101, 99, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 79, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 80, 108, 117, 115, 92, 82, 117, 110, 116,
			105, 109, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 69, 102, 102, 101, 99, 116, 65, 99, 116,
			105, 111, 110, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 87, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 80, 108,
			117, 115, 92, 82, 117, 110, 116, 105, 109, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 69, 102,
			102, 101, 99, 116, 79, 99, 99, 108, 117, 100,
			101, 114, 77, 97, 110, 97, 103, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 73,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 72, 105, 103, 104, 108, 105,
			103, 104, 116, 80, 108, 117, 115, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 72, 105, 103, 104, 108, 105,
			103, 104, 116, 77, 97, 110, 97, 103, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			73, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 72, 105, 103, 104, 108,
			105, 103, 104, 116, 80, 108, 117, 115, 92, 82,
			117, 110, 116, 105, 109, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 72, 105, 103, 104, 108,
			105, 103, 104, 116, 80, 114, 111, 102, 105, 108,
			101, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 84, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 72, 105, 103, 104,
			108, 105, 103, 104, 116, 80, 108, 117, 115, 92,
			82, 117, 110, 116, 105, 109, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 72, 105, 103, 104,
			108, 105, 103, 104, 116, 83, 101, 101, 84, 104,
			114, 111, 117, 103, 104, 79, 99, 99, 108, 117,
			100, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 73, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 80, 108, 117,
			115, 92, 82, 117, 110, 116, 105, 109, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 84, 114, 105,
			103, 103, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 67, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 80, 108,
			117, 115, 92, 82, 117, 110, 116, 105, 109, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			110, 112, 117, 116, 80, 114, 111, 120, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 61,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 72, 105, 103, 104, 108, 105,
			103, 104, 116, 80, 108, 117, 115, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 77, 105, 115, 99, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 71, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 72, 105, 103, 104, 108, 105, 103,
			104, 116, 80, 108, 117, 115, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 82, 101, 110, 100, 101, 114, 105,
			110, 103, 85, 116, 105, 108, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 69, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 80, 108, 117, 115, 92, 82, 117, 110, 116,
			105, 109, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 83, 104, 97, 100, 101, 114, 80, 97,
			114, 97, 109, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 64, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 80, 108,
			117, 115, 92, 82, 117, 110, 116, 105, 109, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 86,
			82, 67, 104, 101, 99, 107, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 88, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 73, 99, 111, 110, 71, 101, 110, 101, 114,
			97, 116, 111, 114, 92, 71, 101, 110, 101, 114,
			97, 116, 101, 73, 99, 111, 110, 115, 92, 69,
			120, 97, 109, 112, 108, 101, 115, 92, 65, 100,
			100, 105, 116, 105, 111, 110, 110, 97, 108, 81,
			117, 101, 117, 101, 80, 114, 111, 118, 105, 100,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 73, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 73, 99, 111,
			110, 71, 101, 110, 101, 114, 97, 116, 111, 114,
			92, 71, 101, 110, 101, 114, 97, 116, 101, 73,
			99, 111, 110, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 77, 97, 115, 107, 69, 102, 102,
			101, 99, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 76, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 73, 99,
			111, 110, 71, 101, 110, 101, 114, 97, 116, 111,
			114, 92, 71, 101, 110, 101, 114, 97, 116, 101,
			73, 99, 111, 110, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 81, 117, 101, 117, 101, 80,
			114, 111, 118, 105, 100, 101, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 72, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 73, 99, 111, 110, 71, 101, 110, 101,
			114, 97, 116, 111, 114, 92, 71, 108, 111, 98,
			97, 108, 92, 69, 120, 101, 99, 117, 116, 101,
			73, 110, 69, 100, 105, 116, 111, 114, 65, 116,
			116, 114, 105, 98, 117, 116, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 67, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 73, 99, 111, 110, 71, 101, 110, 101,
			114, 97, 116, 111, 114, 92, 71, 108, 111, 98,
			97, 108, 92, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 69, 120, 116, 101, 110, 115, 105,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 60, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 73, 99, 111,
			110, 71, 101, 110, 101, 114, 97, 116, 111, 114,
			92, 71, 108, 111, 98, 97, 108, 92, 74, 52,
			70, 66, 101, 104, 97, 118, 105, 111, 117, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 73, 99, 111, 110, 71,
			101, 110, 101, 114, 97, 116, 111, 114, 92, 71,
			108, 111, 98, 97, 108, 92, 83, 105, 110, 103,
			108, 101, 116, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			73, 99, 111, 110, 71, 101, 110, 101, 114, 97,
			116, 111, 114, 92, 71, 108, 111, 98, 97, 108,
			92, 83, 105, 110, 103, 108, 101, 116, 111, 110,
			80, 101, 114, 115, 105, 115, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 73, 99, 111, 110, 71, 101, 110, 101,
			114, 97, 116, 111, 114, 92, 71, 108, 111, 98,
			97, 108, 92, 84, 111, 111, 108, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 76, 105, 103, 104, 116, 115, 95,
			73, 69, 83, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 73, 69, 83, 67, 111, 110, 118, 101,
			114, 116, 101, 114, 46, 99, 115, 0, 0, 0,
			2, 0, 0, 0, 53, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 76,
			105, 103, 104, 116, 115, 95, 73, 69, 83, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 69,
			83, 68, 97, 116, 97, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			76, 105, 103, 104, 116, 115, 95, 73, 69, 83,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			69, 83, 84, 111, 67, 117, 98, 101, 109, 97,
			112, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 66, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 76, 105, 103, 104,
			116, 115, 95, 73, 69, 83, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 69, 83, 84, 111,
			83, 112, 111, 116, 108, 105, 103, 104, 116, 67,
			111, 111, 107, 105, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			76, 105, 103, 104, 116, 115, 95, 73, 69, 83,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			69, 83, 84, 111, 84, 101, 120, 116, 117, 114,
			101, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 53, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 76, 105, 103, 104,
			116, 115, 95, 73, 69, 83, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 77, 105, 110, 105, 69,
			88, 82, 46, 99, 115, 0, 0, 0, 2, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 76, 105, 103,
			104, 116, 115, 95, 73, 69, 83, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 80, 97, 114, 115,
			101, 73, 69, 83, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 64, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 76,
			105, 103, 104, 116, 115, 95, 73, 69, 83, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 82, 117,
			110, 116, 105, 109, 101, 73, 69, 83, 73, 109,
			112, 111, 114, 116, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 70, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 77, 111, 100, 101, 114, 110, 70, 111, 117,
			110, 116, 97, 105, 110, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 97, 114, 116, 105,
			99, 108, 101, 83, 99, 97, 108, 101, 65, 100,
			106, 117, 115, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 63, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 77,
			111, 100, 101, 114, 110, 83, 117, 112, 101, 114,
			109, 97, 114, 107, 101, 116, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 70, 114, 101, 101, 67,
			97, 109, 101, 114, 97, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 103, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			80, 97, 99, 107, 105, 110, 103, 65, 108, 103,
			111, 114, 105, 116, 104, 109, 92, 67, 114, 111,
			109, 117, 108, 101, 110, 116, 66, 105, 115, 103,
			101, 116, 116, 105, 46, 67, 111, 110, 116, 97,
			105, 110, 101, 114, 80, 97, 99, 107, 105, 110,
			103, 92, 65, 108, 103, 111, 114, 105, 116, 104,
			109, 115, 92, 65, 108, 103, 111, 114, 105, 116,
			104, 109, 66, 97, 115, 101, 46, 99, 115, 0,
			0, 0, 3, 0, 0, 0, 97, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 80, 97, 99, 107, 105, 110, 103, 65, 108,
			103, 111, 114, 105, 116, 104, 109, 92, 67, 114,
			111, 109, 117, 108, 101, 110, 116, 66, 105, 115,
			103, 101, 116, 116, 105, 46, 67, 111, 110, 116,
			97, 105, 110, 101, 114, 80, 97, 99, 107, 105,
			110, 103, 92, 65, 108, 103, 111, 114, 105, 116,
			104, 109, 115, 92, 69, 66, 95, 65, 70, 73,
			84, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 107, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 80, 97, 99, 107,
			105, 110, 103, 65, 108, 103, 111, 114, 105, 116,
			104, 109, 92, 67, 114, 111, 109, 117, 108, 101,
			110, 116, 66, 105, 115, 103, 101, 116, 116, 105,
			46, 67, 111, 110, 116, 97, 105, 110, 101, 114,
			80, 97, 99, 107, 105, 110, 103, 92, 65, 108,
			103, 111, 114, 105, 116, 104, 109, 115, 92, 73,
			80, 97, 99, 107, 105, 110, 103, 65, 108, 103,
			111, 114, 105, 116, 104, 109, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 110, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 80, 97, 99, 107, 105, 110, 103, 65, 108,
			103, 111, 114, 105, 116, 104, 109, 92, 67, 114,
			111, 109, 117, 108, 101, 110, 116, 66, 105, 115,
			103, 101, 116, 116, 105, 46, 67, 111, 110, 116,
			97, 105, 110, 101, 114, 80, 97, 99, 107, 105,
			110, 103, 92, 69, 110, 116, 105, 116, 105, 101,
			115, 92, 65, 108, 103, 111, 114, 105, 116, 104,
			109, 80, 97, 99, 107, 105, 110, 103, 82, 101,
			115, 117, 108, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 97, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 80,
			97, 99, 107, 105, 110, 103, 65, 108, 103, 111,
			114, 105, 116, 104, 109, 92, 67, 114, 111, 109,
			117, 108, 101, 110, 116, 66, 105, 115, 103, 101,
			116, 116, 105, 46, 67, 111, 110, 116, 97, 105,
			110, 101, 114, 80, 97, 99, 107, 105, 110, 103,
			92, 69, 110, 116, 105, 116, 105, 101, 115, 92,
			67, 111, 110, 116, 97, 105, 110, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 110,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 80, 97, 99, 107, 105, 110,
			103, 65, 108, 103, 111, 114, 105, 116, 104, 109,
			92, 67, 114, 111, 109, 117, 108, 101, 110, 116,
			66, 105, 115, 103, 101, 116, 116, 105, 46, 67,
			111, 110, 116, 97, 105, 110, 101, 114, 80, 97,
			99, 107, 105, 110, 103, 92, 69, 110, 116, 105,
			116, 105, 101, 115, 92, 67, 111, 110, 116, 97,
			105, 110, 101, 114, 80, 97, 99, 107, 105, 110,
			103, 82, 101, 115, 117, 108, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 104, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 80, 97, 99, 107, 105, 110, 103, 65,
			108, 103, 111, 114, 105, 116, 104, 109, 92, 67,
			114, 111, 109, 117, 108, 101, 110, 116, 66, 105,
			115, 103, 101, 116, 116, 105, 46, 67, 111, 110,
			116, 97, 105, 110, 101, 114, 80, 97, 99, 107,
			105, 110, 103, 92, 69, 110, 116, 105, 116, 105,
			101, 115, 92, 67, 111, 110, 116, 97, 105, 110,
			101, 114, 84, 101, 115, 116, 105, 110, 103, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 92,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 80, 97, 99, 107, 105, 110,
			103, 65, 108, 103, 111, 114, 105, 116, 104, 109,
			92, 67, 114, 111, 109, 117, 108, 101, 110, 116,
			66, 105, 115, 103, 101, 116, 116, 105, 46, 67,
			111, 110, 116, 97, 105, 110, 101, 114, 80, 97,
			99, 107, 105, 110, 103, 92, 69, 110, 116, 105,
			116, 105, 101, 115, 92, 73, 116, 101, 109, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 93,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 80, 97, 99, 107, 105, 110,
			103, 65, 108, 103, 111, 114, 105, 116, 104, 109,
			92, 67, 114, 111, 109, 117, 108, 101, 110, 116,
			66, 105, 115, 103, 101, 116, 116, 105, 46, 67,
			111, 110, 116, 97, 105, 110, 101, 114, 80, 97,
			99, 107, 105, 110, 103, 92, 80, 97, 99, 107,
			105, 110, 103, 83, 101, 114, 118, 105, 99, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			61, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 83, 101, 97, 115, 111,
			110, 97, 108, 95, 85, 70, 79, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 112, 117, 108, 115,
			105, 110, 103, 76, 105, 103, 104, 116, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 107,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 83, 105, 110, 101, 86, 70,
			88, 92, 66, 101, 116, 116, 101, 114, 67, 114,
			121, 115, 116, 97, 108, 115, 92, 65, 115, 115,
			101, 116, 82, 101, 115, 111, 117, 114, 99, 101,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 105, 110, 101, 67, 97, 109, 101, 114, 97,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			66, 101, 116, 116, 101, 114, 67, 114, 121, 115,
			116, 97, 108, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 103, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 83,
			105, 110, 101, 86, 70, 88, 92, 66, 101, 116,
			116, 101, 114, 67, 114, 121, 115, 116, 97, 108,
			115, 92, 65, 115, 115, 101, 116, 82, 101, 115,
			111, 117, 114, 99, 101, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 83, 105, 110, 101, 85,
			73, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 66, 101, 116, 116, 101, 114, 67, 114, 121,
			115, 116, 97, 108, 115, 46, 99, 115, 0, 0,
			0, 2, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			85, 73, 95, 77, 111, 100, 101, 114, 110, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 66, 117,
			116, 116, 111, 110, 92, 66, 117, 116, 116, 111,
			110, 77, 97, 110, 97, 103, 101, 114, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 60, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 73, 95, 77, 111, 100, 101,
			114, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 67, 104, 97, 114, 116, 115, 92, 80, 105,
			101, 67, 104, 97, 114, 116, 46, 99, 115, 0,
			0, 0, 3, 0, 0, 0, 76, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 85, 73, 95, 77, 111, 100, 101, 114, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 67,
			111, 110, 116, 101, 120, 116, 32, 77, 101, 110,
			117, 92, 67, 111, 110, 116, 101, 120, 116, 77,
			101, 110, 117, 67, 111, 110, 116, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 2, 0, 0, 0,
			82, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 67, 111, 110, 116, 101, 120, 116,
			32, 77, 101, 110, 117, 92, 67, 111, 110, 116,
			101, 120, 116, 77, 101, 110, 117, 67, 111, 110,
			116, 101, 110, 116, 77, 111, 98, 105, 108, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			76, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 67, 111, 110, 116, 101, 120, 116,
			32, 77, 101, 110, 117, 92, 67, 111, 110, 116,
			101, 120, 116, 77, 101, 110, 117, 77, 97, 110,
			97, 103, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 76, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 85,
			73, 95, 77, 111, 100, 101, 114, 110, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 67, 111, 110,
			116, 101, 120, 116, 32, 77, 101, 110, 117, 92,
			67, 111, 110, 116, 101, 120, 116, 77, 101, 110,
			117, 83, 117, 98, 77, 101, 110, 117, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 67, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 73, 95, 77, 111, 100, 101,
			114, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 67, 111, 114, 101, 92, 77, 85, 73, 80,
			73, 110, 116, 101, 114, 110, 97, 108, 84, 111,
			111, 108, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 65, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 68, 101, 109, 111,
			92, 68, 101, 109, 111, 69, 108, 101, 109, 101,
			110, 116, 83, 119, 97, 121, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 71, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 85, 73, 95, 77, 111, 100, 101, 114, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 68,
			101, 109, 111, 92, 68, 101, 109, 111, 69, 108,
			101, 109, 101, 110, 116, 83, 119, 97, 121, 80,
			97, 114, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			85, 73, 95, 77, 111, 100, 101, 114, 110, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 68, 101,
			109, 111, 92, 68, 101, 109, 111, 76, 105, 115,
			116, 83, 104, 97, 100, 111, 119, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 85, 73, 95, 77, 111, 100, 101, 114,
			110, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			68, 101, 109, 111, 92, 73, 110, 112, 117, 116,
			83, 121, 115, 116, 101, 109, 67, 104, 101, 99,
			107, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 59, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 68, 101, 109, 111,
			92, 76, 97, 117, 110, 99, 104, 85, 82, 76,
			46, 99, 115, 0, 0, 0, 4, 0, 0, 0,
			68, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 68, 114, 111, 112, 100, 111, 119,
			110, 92, 67, 117, 115, 116, 111, 109, 68, 114,
			111, 112, 100, 111, 119, 110, 46, 99, 115, 0,
			0, 0, 3, 0, 0, 0, 73, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 85, 73, 95, 77, 111, 100, 101, 114, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 68,
			114, 111, 112, 100, 111, 119, 110, 92, 68, 114,
			111, 112, 100, 111, 119, 110, 77, 117, 108, 116,
			105, 83, 101, 108, 101, 99, 116, 46, 99, 115,
			0, 0, 0, 4, 0, 0, 0, 83, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 85, 73, 95, 77, 111, 100, 101, 114,
			110, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			72, 111, 114, 105, 122, 111, 110, 116, 97, 108,
			32, 83, 101, 108, 101, 99, 116, 111, 114, 92,
			72, 111, 114, 105, 122, 111, 110, 116, 97, 108,
			83, 101, 108, 101, 99, 116, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 69, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 73, 95, 77, 111, 100, 101,
			114, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 73, 99, 111, 110, 92, 65, 110, 105, 109,
			97, 116, 101, 100, 73, 99, 111, 110, 72, 97,
			110, 100, 108, 101, 114, 46, 99, 115, 0, 0,
			0, 2, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			85, 73, 95, 77, 111, 100, 101, 114, 110, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 99,
			111, 110, 92, 73, 99, 111, 110, 76, 105, 98,
			114, 97, 114, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 85,
			73, 95, 77, 111, 100, 101, 114, 110, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 73, 99, 111,
			110, 92, 73, 99, 111, 110, 77, 97, 110, 97,
			103, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 73, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 73, 110, 112, 117,
			116, 32, 70, 105, 101, 108, 100, 92, 67, 117,
			115, 116, 111, 109, 73, 110, 112, 117, 116, 70,
			105, 101, 108, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 72, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 85,
			73, 95, 77, 111, 100, 101, 114, 110, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 76, 97, 121,
			111, 117, 116, 32, 71, 114, 111, 117, 112, 92,
			76, 97, 121, 111, 117, 116, 71, 114, 111, 117,
			112, 70, 105, 120, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 75, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 85,
			73, 95, 77, 111, 100, 101, 114, 110, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 76, 97, 121,
			111, 117, 116, 32, 71, 114, 111, 117, 112, 92,
			82, 97, 100, 105, 97, 108, 76, 97, 121, 111,
			117, 116, 71, 114, 111, 117, 112, 46, 99, 115,
			0, 0, 0, 3, 0, 0, 0, 62, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 85, 73, 95, 77, 111, 100, 101, 114,
			110, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			76, 105, 115, 116, 86, 105, 101, 119, 92, 76,
			105, 115, 116, 86, 105, 101, 119, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 85, 73, 95, 77, 111, 100, 101, 114,
			110, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			76, 105, 115, 116, 86, 105, 101, 119, 92, 76,
			105, 115, 116, 86, 105, 101, 119, 73, 116, 101,
			109, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 65, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 85, 73, 95, 77,
			111, 100, 101, 114, 110, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 76, 105, 115, 116, 86, 105,
			101, 119, 92, 76, 105, 115, 116, 86, 105, 101,
			119, 82, 111, 119, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 76, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 85,
			73, 95, 77, 111, 100, 101, 114, 110, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 77, 111, 100,
			97, 108, 32, 87, 105, 110, 100, 111, 119, 92,
			77, 111, 100, 97, 108, 87, 105, 110, 100, 111,
			119, 77, 97, 110, 97, 103, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 77, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 73, 95, 77, 111, 100, 101,
			114, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 78, 111, 116, 105, 102, 105, 99, 97, 116,
			105, 111, 110, 92, 78, 111, 116, 105, 102, 105,
			99, 97, 116, 105, 111, 110, 77, 97, 110, 97,
			103, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 78, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 78, 111, 116, 105,
			102, 105, 99, 97, 116, 105, 111, 110, 92, 78,
			111, 116, 105, 102, 105, 99, 97, 116, 105, 111,
			110, 83, 116, 97, 99, 107, 105, 110, 103, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 66,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 85, 73, 95, 77, 111, 100,
			101, 114, 110, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 80, 114, 111, 103, 114, 101, 115, 115,
			32, 66, 97, 114, 92, 80, 66, 70, 105, 108,
			108, 101, 100, 46, 99, 115, 0, 0, 0, 2,
			0, 0, 0, 69, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 80, 114, 111, 103,
			114, 101, 115, 115, 32, 66, 97, 114, 92, 80,
			114, 111, 103, 114, 101, 115, 115, 66, 97, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			61, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 82, 101, 110, 100, 101, 114, 105,
			110, 103, 92, 82, 105, 112, 112, 108, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 85, 73, 95, 77, 111, 100,
			101, 114, 110, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 82, 101, 110, 100, 101, 114, 105, 110,
			103, 92, 85, 73, 71, 114, 97, 100, 105, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 2, 0,
			0, 0, 64, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 85, 73, 95,
			77, 111, 100, 101, 114, 110, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 83, 108, 105, 100, 101,
			114, 92, 82, 97, 100, 105, 97, 108, 83, 108,
			105, 100, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 66, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 85,
			73, 95, 77, 111, 100, 101, 114, 110, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 108, 105,
			100, 101, 114, 92, 82, 97, 110, 103, 101, 77,
			97, 120, 83, 108, 105, 100, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 66, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 73, 95, 77, 111, 100, 101,
			114, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 83, 108, 105, 100, 101, 114, 92, 82, 97,
			110, 103, 101, 77, 105, 110, 83, 108, 105, 100,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 63, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 85, 73, 95,
			77, 111, 100, 101, 114, 110, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 83, 108, 105, 100, 101,
			114, 92, 82, 97, 110, 103, 101, 83, 108, 105,
			100, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 63, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 83, 108, 105, 100,
			101, 114, 92, 83, 108, 105, 100, 101, 114, 73,
			110, 112, 117, 116, 46, 99, 115, 0, 0, 0,
			2, 0, 0, 0, 65, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 85,
			73, 95, 77, 111, 100, 101, 114, 110, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 108, 105,
			100, 101, 114, 92, 83, 108, 105, 100, 101, 114,
			77, 97, 110, 97, 103, 101, 114, 46, 99, 115,
			0, 0, 0, 2, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 85, 73, 95, 77, 111, 100, 101, 114,
			110, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 119, 105, 116, 99, 104, 92, 83, 119, 105,
			116, 99, 104, 77, 97, 110, 97, 103, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			64, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 84, 111, 103, 103, 108, 101, 92,
			67, 117, 115, 116, 111, 109, 84, 111, 103, 103,
			108, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 85, 73, 95,
			77, 111, 100, 101, 114, 110, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 84, 111, 111, 108, 115,
			92, 69, 108, 101, 109, 101, 110, 116, 84, 97,
			98, 98, 105, 110, 103, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 67, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			85, 73, 95, 77, 111, 100, 101, 114, 110, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 84, 111,
			111, 108, 116, 105, 112, 92, 84, 111, 111, 108,
			116, 105, 112, 67, 111, 110, 116, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			67, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 84, 111, 111, 108, 116, 105, 112,
			92, 84, 111, 111, 108, 116, 105, 112, 77, 97,
			110, 97, 103, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			85, 73, 95, 77, 111, 100, 101, 114, 110, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 73,
			32, 77, 97, 110, 97, 103, 101, 114, 92, 85,
			73, 77, 97, 110, 97, 103, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 77, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 73, 95, 77, 111, 100, 101,
			114, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 85, 73, 32, 77, 97, 110, 97, 103, 101,
			114, 92, 85, 73, 77, 97, 110, 97, 103, 101,
			114, 65, 110, 105, 109, 97, 116, 101, 100, 73,
			99, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 85, 73, 32, 77,
			97, 110, 97, 103, 101, 114, 92, 85, 73, 77,
			97, 110, 97, 103, 101, 114, 66, 117, 116, 116,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 76, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 85, 73, 95,
			77, 111, 100, 101, 114, 110, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 85, 73, 32, 77, 97,
			110, 97, 103, 101, 114, 92, 85, 73, 77, 97,
			110, 97, 103, 101, 114, 67, 111, 110, 116, 101,
			120, 116, 77, 101, 110, 117, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 71, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 85, 73, 95, 77, 111, 100, 101, 114, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 85,
			73, 32, 77, 97, 110, 97, 103, 101, 114, 92,
			85, 73, 77, 97, 110, 97, 103, 101, 114, 67,
			117, 115, 116, 111, 109, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 73, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			85, 73, 95, 77, 111, 100, 101, 114, 110, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 73,
			32, 77, 97, 110, 97, 103, 101, 114, 92, 85,
			73, 77, 97, 110, 97, 103, 101, 114, 68, 114,
			111, 112, 100, 111, 119, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 77, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 85, 73, 95, 77, 111, 100, 101, 114, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 85,
			73, 32, 77, 97, 110, 97, 103, 101, 114, 92,
			85, 73, 77, 97, 110, 97, 103, 101, 114, 68,
			114, 111, 112, 100, 111, 119, 110, 73, 116, 101,
			109, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 74, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 85, 73, 95, 77,
			111, 100, 101, 114, 110, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 85, 73, 32, 77, 97, 110,
			97, 103, 101, 114, 92, 85, 73, 77, 97, 110,
			97, 103, 101, 114, 72, 83, 101, 108, 101, 99,
			116, 111, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 75, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 85, 73, 32, 77,
			97, 110, 97, 103, 101, 114, 92, 85, 73, 77,
			97, 110, 97, 103, 101, 114, 73, 110, 112, 117,
			116, 70, 105, 101, 108, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 76, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 85, 73, 95, 77, 111, 100, 101, 114, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 85,
			73, 32, 77, 97, 110, 97, 103, 101, 114, 92,
			85, 73, 77, 97, 110, 97, 103, 101, 114, 77,
			111, 100, 97, 108, 87, 105, 110, 100, 111, 119,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			77, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 85, 73, 32, 77, 97, 110, 97,
			103, 101, 114, 92, 85, 73, 77, 97, 110, 97,
			103, 101, 114, 78, 111, 116, 105, 102, 105, 99,
			97, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 73, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			85, 73, 95, 77, 111, 100, 101, 114, 110, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 73,
			32, 77, 97, 110, 97, 103, 101, 114, 92, 85,
			73, 77, 97, 110, 97, 103, 101, 114, 80, 105,
			101, 67, 104, 97, 114, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 76, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 85, 73, 95, 77, 111, 100, 101, 114, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 85,
			73, 32, 77, 97, 110, 97, 103, 101, 114, 92,
			85, 73, 77, 97, 110, 97, 103, 101, 114, 80,
			114, 111, 103, 114, 101, 115, 115, 66, 97, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			80, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 85, 73, 32, 77, 97, 110, 97,
			103, 101, 114, 92, 85, 73, 77, 97, 110, 97,
			103, 101, 114, 80, 114, 111, 103, 114, 101, 115,
			115, 66, 97, 114, 76, 111, 111, 112, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 74, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 73, 95, 77, 111, 100, 101,
			114, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 85, 73, 32, 77, 97, 110, 97, 103, 101,
			114, 92, 85, 73, 77, 97, 110, 97, 103, 101,
			114, 83, 99, 114, 111, 108, 108, 98, 97, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			71, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 85, 73, 95, 77, 111,
			100, 101, 114, 110, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 85, 73, 32, 77, 97, 110, 97,
			103, 101, 114, 92, 85, 73, 77, 97, 110, 97,
			103, 101, 114, 83, 108, 105, 100, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 71,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 85, 73, 95, 77, 111, 100,
			101, 114, 110, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 85, 73, 32, 77, 97, 110, 97, 103,
			101, 114, 92, 85, 73, 77, 97, 110, 97, 103,
			101, 114, 83, 119, 105, 116, 99, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 71, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 73, 95, 77, 111, 100, 101,
			114, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 85, 73, 32, 77, 97, 110, 97, 103, 101,
			114, 92, 85, 73, 77, 97, 110, 97, 103, 101,
			114, 84, 111, 103, 103, 108, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 72, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 85, 73, 95, 77, 111, 100, 101, 114,
			110, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			85, 73, 32, 77, 97, 110, 97, 103, 101, 114,
			92, 85, 73, 77, 97, 110, 97, 103, 101, 114,
			84, 111, 111, 108, 116, 105, 112, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 78, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 85, 73, 95, 77, 111, 100, 101, 114,
			110, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			85, 73, 32, 77, 97, 110, 97, 103, 101, 114,
			92, 85, 73, 77, 97, 110, 97, 103, 101, 114,
			87, 105, 110, 100, 111, 119, 77, 97, 110, 97,
			103, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 65, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 73,
			95, 77, 111, 100, 101, 114, 110, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 87, 105, 110, 100,
			111, 119, 92, 87, 105, 110, 100, 111, 119, 68,
			114, 97, 103, 103, 101, 114, 46, 99, 115, 0,
			0, 0, 3, 0, 0, 0, 65, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 85, 73, 95, 77, 111, 100, 101, 114, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 87,
			105, 110, 100, 111, 119, 92, 87, 105, 110, 100,
			111, 119, 77, 97, 110, 97, 103, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 71,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 85, 73, 95, 77, 111, 100,
			101, 114, 110, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 87, 105, 110, 100, 111, 119, 92, 87,
			105, 110, 100, 111, 119, 77, 97, 110, 97, 103,
			101, 114, 66, 117, 116, 116, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 97, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 85, 110, 105, 116, 121, 84, 101,
			99, 104, 92, 80, 97, 114, 116, 105, 99, 108,
			101, 80, 97, 99, 107, 92, 69, 102, 102, 101,
			99, 116, 69, 120, 97, 109, 112, 108, 101, 115,
			92, 77, 105, 115, 99, 32, 69, 102, 102, 101,
			99, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 83, 112, 97, 119, 110, 69, 102, 102,
			101, 99, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 80, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 85, 110,
			105, 116, 121, 84, 101, 99, 104, 92, 80, 97,
			114, 116, 105, 99, 108, 101, 80, 97, 99, 107,
			92, 83, 104, 97, 114, 101, 100, 92, 82, 97,
			109, 112, 115, 92, 82, 117, 110, 116, 105, 109,
			101, 92, 82, 97, 109, 112, 65, 115, 115, 101,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 80, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 85, 110, 105, 116,
			121, 84, 101, 99, 104, 92, 80, 97, 114, 116,
			105, 99, 108, 101, 80, 97, 99, 107, 92, 83,
			104, 97, 114, 101, 100, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 65, 100, 106, 117, 115, 116,
			84, 105, 109, 101, 83, 99, 97, 108, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 82,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 85, 110, 105, 116, 121, 84,
			101, 99, 104, 92, 80, 97, 114, 116, 105, 99,
			108, 101, 80, 97, 99, 107, 92, 83, 104, 97,
			114, 101, 100, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 80, 114, 111, 120, 105, 109, 105, 116,
			121, 65, 99, 116, 105, 118, 97, 116, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 85,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 85, 110, 105, 116, 121, 84,
			101, 99, 104, 92, 80, 97, 114, 116, 105, 99,
			108, 101, 80, 97, 99, 107, 92, 83, 104, 97,
			114, 101, 100, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 83, 105, 109, 112, 108, 101, 67, 104,
			97, 114, 97, 99, 116, 101, 114, 77, 111, 116,
			111, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 52, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 117, 80, 97,
			105, 110, 116, 101, 114, 92, 83, 97, 109, 112,
			108, 101, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 79, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 117, 80, 97,
			105, 110, 116, 101, 114, 92, 83, 97, 109, 112,
			108, 101, 115, 92, 80, 97, 105, 110, 116, 101,
			114, 92, 67, 111, 108, 111, 114, 83, 101, 108,
			101, 99, 116, 111, 114, 92, 67, 111, 108, 111,
			114, 83, 101, 108, 101, 99, 116, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 117, 80, 97, 105, 110, 116,
			101, 114, 92, 83, 97, 109, 112, 108, 101, 115,
			92, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 66, 97, 115,
			101, 84, 111, 111, 108, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 69, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			117, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			97, 109, 112, 108, 101, 115, 92, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 66, 114, 117, 115, 104, 73, 116,
			101, 109, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 69, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 117, 80, 97,
			105, 110, 116, 101, 114, 92, 83, 97, 109, 112,
			108, 101, 115, 92, 80, 97, 105, 110, 116, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 108, 101, 97, 114, 84, 111, 111, 108, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 117, 80, 97, 105, 110, 116,
			101, 114, 92, 83, 97, 109, 112, 108, 101, 115,
			92, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 82, 101, 100,
			111, 84, 111, 111, 108, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 68, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			117, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			97, 109, 112, 108, 101, 115, 92, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 83, 97, 118, 101, 84, 111, 111,
			108, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 68, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 117, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 97, 109, 112, 108,
			101, 115, 92, 80, 97, 105, 110, 116, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 83,
			101, 116, 116, 105, 110, 103, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 117, 80, 97, 105, 110, 116, 101, 114,
			92, 83, 97, 109, 112, 108, 101, 115, 92, 80,
			97, 105, 110, 116, 101, 114, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 85, 110, 100, 111, 84,
			111, 111, 108, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 62, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 117, 80,
			97, 105, 110, 116, 101, 114, 92, 83, 97, 109,
			112, 108, 101, 115, 92, 82, 97, 119, 73, 109,
			97, 103, 101, 92, 66, 101, 110, 99, 104, 109,
			97, 114, 107, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 75, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 117, 80,
			97, 105, 110, 116, 101, 114, 92, 83, 97, 109,
			112, 108, 101, 115, 92, 82, 97, 119, 73, 109,
			97, 103, 101, 92, 82, 97, 119, 73, 109, 97,
			103, 101, 87, 105, 116, 104, 82, 97, 119, 84,
			101, 120, 116, 117, 114, 101, 46, 99, 115, 0,
			0, 0, 2, 0, 0, 0, 60, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 97, 109, 112, 108, 101, 115, 92, 82, 97,
			119, 73, 109, 97, 103, 101, 92, 82, 101, 99,
			111, 100, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 64, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 117,
			80, 97, 105, 110, 116, 101, 114, 92, 83, 97,
			109, 112, 108, 101, 115, 92, 82, 97, 119, 73,
			109, 97, 103, 101, 92, 83, 99, 114, 97, 116,
			99, 104, 67, 97, 114, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 51, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 97, 109, 112, 108, 101, 115, 92, 83, 97,
			109, 112, 108, 101, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 67, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			117, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			97, 109, 112, 108, 101, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 83, 99, 101, 110, 101,
			86, 105, 101, 119, 67, 97, 109, 101, 114, 97,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			62, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 97, 109, 112, 108, 101,
			115, 92, 83, 112, 114, 105, 116, 101, 92, 115,
			112, 114, 105, 116, 101, 95, 100, 101, 109, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			63, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 97, 109, 112, 108, 101,
			115, 92, 84, 101, 115, 116, 92, 99, 104, 97,
			110, 103, 101, 95, 114, 97, 119, 95, 116, 101,
			120, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 117, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 97, 109, 112, 108,
			101, 115, 92, 84, 101, 115, 116, 92, 114, 97,
			119, 105, 109, 97, 103, 101, 116, 101, 115, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			53, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 97, 109, 112, 108, 101,
			115, 92, 84, 101, 115, 116, 92, 84, 101, 115,
			116, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 117, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 66, 114, 117, 115, 104, 101, 115,
			92, 66, 97, 115, 101, 66, 114, 117, 115, 104,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			66, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 66, 114, 117, 115, 104, 101, 115, 92,
			67, 111, 109, 112, 111, 115, 105, 116, 101, 66,
			114, 117, 115, 104, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 64, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 117,
			80, 97, 105, 110, 116, 101, 114, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 66, 114, 117, 115,
			104, 101, 115, 92, 68, 114, 111, 112, 112, 101,
			114, 66, 114, 117, 115, 104, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 61, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 66, 114,
			117, 115, 104, 101, 115, 92, 70, 105, 108, 108,
			66, 114, 117, 115, 104, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 63, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			117, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 66, 114, 117,
			115, 104, 101, 115, 92, 71, 114, 97, 112, 105,
			99, 66, 114, 117, 115, 104, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 61, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 66, 114,
			117, 115, 104, 101, 115, 92, 76, 105, 110, 101,
			66, 114, 117, 115, 104, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			117, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 66, 114, 117,
			115, 104, 101, 115, 92, 83, 99, 114, 97, 116,
			99, 104, 66, 114, 117, 115, 104, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 61, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 117, 80, 97, 105, 110, 116, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 66,
			114, 117, 115, 104, 101, 115, 92, 83, 101, 97,
			108, 66, 114, 117, 115, 104, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 62, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 66, 114,
			117, 115, 104, 101, 115, 92, 83, 111, 108, 105,
			100, 66, 114, 117, 115, 104, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 66, 114,
			117, 115, 104, 101, 115, 92, 84, 101, 120, 116,
			117, 114, 101, 66, 114, 117, 115, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 73, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 117, 80, 97, 105, 110, 116, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			66, 114, 117, 115, 104, 80, 111, 115, 116, 69,
			102, 102, 101, 99, 116, 92, 66, 97, 115, 101,
			66, 114, 117, 115, 104, 80, 111, 115, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 73,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 117, 80, 97, 105, 110, 116,
			101, 114, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 66, 114, 117, 115, 104, 80, 111, 115, 116,
			69, 102, 102, 101, 99, 116, 92, 66, 108, 117,
			114, 66, 114, 117, 115, 104, 80, 111, 115, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			76, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 66, 114, 117, 115, 104, 80, 111, 115,
			116, 69, 102, 102, 101, 99, 116, 92, 79, 117,
			116, 108, 105, 110, 101, 66, 114, 117, 115, 104,
			80, 111, 115, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 63, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 117,
			80, 97, 105, 110, 116, 101, 114, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 67, 97, 110, 118,
			97, 115, 92, 69, 100, 105, 116, 111, 114, 67,
			97, 110, 118, 97, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 67, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			117, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 67, 97, 110,
			118, 97, 115, 92, 77, 101, 115, 104, 76, 97,
			121, 101, 114, 83, 101, 116, 116, 105, 110, 103,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			66, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 67, 97, 110, 118, 97, 115, 92, 77,
			101, 115, 104, 80, 97, 105, 110, 116, 67, 97,
			110, 118, 97, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 70, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 117,
			80, 97, 105, 110, 116, 101, 114, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 67, 97, 110, 118,
			97, 115, 92, 82, 97, 119, 73, 109, 97, 103,
			101, 80, 97, 105, 110, 116, 67, 97, 110, 118,
			97, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 67, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 117, 80, 97,
			105, 110, 116, 101, 114, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 67, 97, 110, 118, 97, 115,
			92, 83, 99, 114, 101, 101, 110, 85, 86, 82,
			101, 110, 100, 101, 114, 101, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 117, 80, 97, 105, 110, 116, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 67,
			97, 110, 118, 97, 115, 92, 83, 112, 114, 105,
			116, 101, 80, 97, 105, 110, 116, 67, 97, 110,
			118, 97, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 55, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 117, 80,
			97, 105, 110, 116, 101, 114, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 67, 111, 114, 101, 92,
			68, 114, 97, 119, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 54, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 111,
			114, 101, 92, 69, 110, 117, 109, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 64, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 117, 80, 97, 105, 110, 116, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 111, 114, 101, 92, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 66, 114, 117, 115, 104,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			62, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 67, 111, 114, 101, 92, 76, 97, 121,
			101, 114, 83, 101, 116, 116, 105, 110, 103, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			60, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 67, 111, 114, 101, 92, 80, 97, 105,
			110, 116, 67, 97, 110, 118, 97, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 65, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 117, 80, 97, 105, 110, 116, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 111, 114, 101, 92, 80, 97, 105, 110, 116,
			67, 97, 110, 118, 97, 115, 76, 97, 121, 101,
			114, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 65, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 117, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 67, 111, 114, 101, 92, 80, 97,
			105, 110, 116, 101, 114, 79, 112, 101, 114, 97,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 117,
			80, 97, 105, 110, 116, 101, 114, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 68, 114, 97, 119,
			101, 114, 92, 77, 101, 115, 104, 68, 114, 97,
			119, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 64, 92, 65, 115, 115, 101, 116,
			115, 92, 69, 120, 116, 101, 114, 110, 97, 108,
			95, 65, 115, 115, 101, 116, 115, 92, 117, 80,
			97, 105, 110, 116, 101, 114, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 68, 114, 97, 119, 101,
			114, 92, 80, 97, 105, 110, 116, 82, 97, 119,
			73, 109, 97, 103, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 63, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			117, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 68, 114, 97,
			119, 101, 114, 92, 83, 112, 114, 105, 116, 101,
			68, 114, 97, 119, 101, 114, 46, 99, 115, 0,
			0, 0, 2, 0, 0, 0, 54, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 76, 105,
			98, 92, 66, 101, 122, 105, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 52, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 117, 80, 97, 105, 110, 116, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			76, 105, 98, 92, 77, 97, 116, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 60, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 117, 80, 97, 105, 110, 116, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			76, 105, 98, 92, 77, 101, 115, 104, 79, 112,
			101, 114, 97, 116, 111, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 67, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 77, 97,
			116, 101, 114, 105, 97, 108, 115, 92, 66, 108,
			101, 110, 100, 77, 97, 116, 101, 114, 105, 97,
			108, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 71, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 117, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 77, 97, 116, 101, 114, 105, 97,
			108, 115, 92, 67, 111, 112, 121, 66, 108, 101,
			110, 100, 77, 97, 116, 101, 114, 105, 97, 108,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			71, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 77, 97, 116, 101, 114, 105, 97, 108,
			115, 92, 77, 97, 115, 107, 66, 108, 101, 110,
			100, 77, 97, 116, 101, 114, 105, 97, 108, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 74,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 117, 80, 97, 105, 110, 116,
			101, 114, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 77, 97, 116, 101, 114, 105, 97, 108, 115,
			92, 79, 118, 101, 114, 108, 97, 121, 66, 108,
			101, 110, 100, 77, 97, 116, 101, 114, 105, 97,
			108, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 70, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 117, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 77, 97, 116, 101, 114, 105, 97,
			108, 115, 92, 82, 101, 110, 100, 101, 114, 85,
			86, 77, 97, 116, 101, 114, 105, 97, 108, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 69, 120,
			116, 101, 114, 110, 97, 108, 95, 65, 115, 115,
			101, 116, 115, 92, 117, 80, 97, 105, 110, 116,
			101, 114, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 84, 111, 111, 108, 115, 92, 71, 114, 97,
			98, 65, 114, 101, 97, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 59, 92, 65, 115, 115,
			101, 116, 115, 92, 69, 120, 116, 101, 114, 110,
			97, 108, 95, 65, 115, 115, 101, 116, 115, 92,
			117, 80, 97, 105, 110, 116, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 85, 116, 105,
			108, 115, 92, 67, 111, 114, 111, 117, 116, 105,
			110, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 66, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 117, 80, 97,
			105, 110, 116, 101, 114, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 85, 116, 105, 108, 115, 92,
			67, 111, 114, 111, 117, 116, 105, 110, 101, 80,
			114, 111, 118, 105, 100, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 62, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 116,
			105, 108, 115, 92, 73, 73, 110, 105, 116, 105,
			97, 108, 105, 122, 101, 114, 46, 99, 115, 0,
			0, 0, 2, 0, 0, 0, 62, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 116,
			105, 108, 115, 92, 73, 110, 112, 117, 116, 77,
			97, 110, 97, 103, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 58, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 116,
			105, 108, 115, 92, 75, 101, 121, 71, 114, 111,
			117, 112, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 64, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 117, 80, 97,
			105, 110, 116, 101, 114, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 85, 116, 105, 108, 115, 92,
			77, 111, 110, 111, 83, 105, 110, 103, 108, 101,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 66, 92, 65, 115, 115, 101,
			116, 115, 92, 69, 120, 116, 101, 114, 110, 97,
			108, 95, 65, 115, 115, 101, 116, 115, 92, 117,
			80, 97, 105, 110, 116, 101, 114, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 85, 116, 105, 108,
			115, 92, 78, 111, 114, 109, 97, 108, 83, 105,
			110, 103, 108, 101, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 71, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 117, 80, 97, 105, 110, 116, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			85, 116, 105, 108, 115, 92, 79, 112, 101, 114,
			97, 116, 105, 111, 110, 92, 66, 97, 115, 101,
			67, 111, 109, 109, 97, 110, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 67, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 117, 80, 97, 105, 110, 116, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 85,
			116, 105, 108, 115, 92, 79, 112, 101, 114, 97,
			116, 105, 111, 110, 92, 67, 111, 109, 109, 97,
			110, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 76, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 117, 80, 97,
			105, 110, 116, 101, 114, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 85, 116, 105, 108, 115, 92,
			79, 112, 101, 114, 97, 116, 105, 111, 110, 92,
			67, 111, 109, 112, 111, 115, 105, 116, 101, 67,
			111, 109, 109, 97, 110, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 68, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 117, 80, 97, 105, 110, 116, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 116,
			105, 108, 115, 92, 79, 112, 101, 114, 97, 116,
			105, 111, 110, 92, 73, 67, 111, 109, 109, 97,
			110, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 70, 92, 65, 115, 115, 101, 116, 115,
			92, 69, 120, 116, 101, 114, 110, 97, 108, 95,
			65, 115, 115, 101, 116, 115, 92, 117, 80, 97,
			105, 110, 116, 101, 114, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 85, 116, 105, 108, 115, 92,
			79, 112, 101, 114, 97, 116, 105, 111, 110, 92,
			73, 79, 112, 101, 114, 97, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			69, 92, 65, 115, 115, 101, 116, 115, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 95, 65, 115,
			115, 101, 116, 115, 92, 117, 80, 97, 105, 110,
			116, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 85, 116, 105, 108, 115, 92, 79, 112,
			101, 114, 97, 116, 105, 111, 110, 92, 79, 112,
			101, 114, 97, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 117, 80, 97, 105, 110, 116, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 85,
			116, 105, 108, 115, 92, 83, 99, 101, 110, 101,
			73, 110, 116, 101, 114, 97, 99, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 65, 115, 115, 101, 116, 115, 92,
			69, 120, 116, 101, 114, 110, 97, 108, 95, 65,
			115, 115, 101, 116, 115, 92, 117, 80, 97, 105,
			110, 116, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 85, 116, 105, 108, 115, 92, 83,
			105, 110, 103, 108, 101, 116, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 61, 92,
			65, 115, 115, 101, 116, 115, 92, 69, 120, 116,
			101, 114, 110, 97, 108, 95, 65, 115, 115, 101,
			116, 115, 92, 117, 80, 97, 105, 110, 116, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			85, 116, 105, 108, 115, 92, 84, 101, 120, 116,
			117, 114, 101, 84, 111, 111, 108, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 61, 92, 65,
			115, 115, 101, 116, 115, 92, 69, 120, 116, 101,
			114, 110, 97, 108, 95, 65, 115, 115, 101, 116,
			115, 92, 117, 80, 97, 105, 110, 116, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 85,
			116, 105, 108, 115, 92, 85, 116, 105, 108, 115,
			72, 101, 108, 112, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 76, 92, 65, 115,
			115, 101, 116, 115, 92, 69, 120, 116, 101, 114,
			110, 97, 108, 95, 65, 115, 115, 101, 116, 115,
			92, 86, 111, 108, 117, 109, 101, 116, 114, 105,
			99, 115, 92, 86, 111, 108, 117, 109, 101, 116,
			114, 105, 99, 115, 95, 68, 101, 109, 111, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 82, 111,
			116, 97, 116, 101, 83, 101, 101, 107, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			62, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 65, 100, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			67, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 65, 100, 100,
			82, 97, 110, 103, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 67, 108, 101, 97, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 74, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 67, 108, 101, 97, 114, 65,
			108, 108, 80, 114, 111, 120, 105, 101, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 92, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 67, 111, 110, 99,
			97, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 67, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 67,
			111, 110, 116, 97, 105, 110, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 67, 111, 112, 121, 84, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			64, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 67, 111, 117,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 69,
			120, 105, 115, 116, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 62, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 71, 101, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 66, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 71, 101, 116, 78, 101, 120, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 70,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 92, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 71, 101, 116, 80,
			114, 101, 118, 105, 111, 117, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 71, 101, 116, 82, 97, 110,
			100, 111, 109, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 82, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			71, 101, 116, 82, 97, 110, 100, 111, 109, 67,
			117, 114, 118, 101, 100, 87, 101, 105, 103, 104,
			116, 101, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 66, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			71, 101, 116, 84, 121, 112, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 73, 110, 100, 101, 120, 79,
			102, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 65, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 92, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 73, 110,
			115, 101, 114, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 68, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 65, 114, 114, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 92, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 73, 110, 116, 101, 114, 115, 101, 99, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			66, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 73, 115, 69,
			109, 112, 116, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 70, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 65, 114, 114, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 92, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 76, 97, 115, 116, 73, 110, 100, 101, 120,
			79, 102, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 63, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 77,
			111, 118, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 69, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			78, 97, 118, 105, 103, 97, 116, 101, 84, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			69, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 82, 97, 121,
			99, 97, 115, 116, 65, 108, 108, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 82, 101, 109, 111, 118, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			67, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 82, 101, 109,
			111, 118, 101, 65, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 70, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 82, 101, 109, 111, 118, 101, 82, 97,
			110, 103, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 70, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			82, 101, 115, 101, 116, 86, 97, 108, 117, 101,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 66, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 92, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 82, 101,
			118, 101, 114, 115, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 75, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 82, 101, 118, 101, 114, 116, 84, 111,
			83, 110, 97, 112, 83, 104, 111, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 92, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 83, 101, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 76, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 92, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 83, 101, 116, 69, 118,
			101, 110, 116, 67, 97, 108, 108, 98, 97, 99,
			107, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 66, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 83,
			104, 117, 102, 102, 108, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 63, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 92, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 83, 111, 114, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 83, 119, 97, 112, 73, 116,
			101, 109, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			84, 97, 107, 101, 83, 110, 97, 112, 83, 104,
			111, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 92,
			67, 114, 101, 97, 116, 101, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 66, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 92, 68, 101, 115, 116, 114, 111, 121,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 63,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 92, 70, 105, 110,
			100, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			65, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 72, 97,
			115, 104, 84, 97, 98, 108, 101, 92, 67, 114,
			101, 97, 116, 101, 72, 97, 115, 104, 84, 97,
			98, 108, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 66, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			92, 68, 101, 115, 116, 114, 111, 121, 72, 97,
			115, 104, 84, 97, 98, 108, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 62, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 72, 97, 115, 104, 84,
			97, 98, 108, 101, 92, 72, 97, 115, 104, 84,
			97, 98, 108, 101, 65, 100, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 72, 97, 115, 104, 84,
			97, 98, 108, 101, 92, 72, 97, 115, 104, 84,
			97, 98, 108, 101, 65, 100, 100, 77, 97, 110,
			121, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 64, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 92, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 67, 108,
			101, 97, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 65, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			92, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			67, 111, 110, 99, 97, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 67, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 72, 97, 115, 104, 84, 97,
			98, 108, 101, 92, 72, 97, 115, 104, 84, 97,
			98, 108, 101, 67, 111, 110, 116, 97, 105, 110,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 70, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 92, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 67, 111,
			110, 116, 97, 105, 110, 115, 75, 101, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 72,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 92, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 67, 111, 110, 116,
			97, 105, 110, 115, 86, 97, 108, 117, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 64,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 92, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 67, 111, 117, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 66, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 92, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 69, 100,
			105, 116, 75, 101, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 72, 97, 115, 104, 84, 97, 98,
			108, 101, 92, 72, 97, 115, 104, 84, 97, 98,
			108, 101, 69, 120, 105, 115, 116, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 71, 101, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 74, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 71, 101, 116, 75, 101,
			121, 70, 114, 111, 109, 86, 97, 108, 117, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			66, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 72, 97,
			115, 104, 84, 97, 98, 108, 101, 92, 72, 97,
			115, 104, 84, 97, 98, 108, 101, 71, 101, 116,
			77, 97, 110, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 66, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 65, 114, 114, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 72, 97, 115, 104, 84, 97, 98, 108,
			101, 92, 72, 97, 115, 104, 84, 97, 98, 108,
			101, 71, 101, 116, 78, 101, 120, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 68, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 71, 101, 116, 82, 97,
			110, 100, 111, 109, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 66, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 65, 114, 114, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 72, 97, 115, 104, 84, 97, 98, 108,
			101, 92, 72, 97, 115, 104, 84, 97, 98, 108,
			101, 71, 101, 116, 84, 121, 112, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 66, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 73, 115, 69, 109, 112,
			116, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 63, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			72, 97, 115, 104, 84, 97, 98, 108, 101, 92,
			72, 97, 115, 104, 84, 97, 98, 108, 101, 75,
			101, 121, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 65, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			92, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			82, 101, 109, 111, 118, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 75, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 72, 97, 115, 104, 84, 97,
			98, 108, 101, 92, 72, 97, 115, 104, 84, 97,
			98, 108, 101, 82, 101, 118, 101, 114, 116, 84,
			111, 83, 110, 97, 112, 83, 104, 111, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 92, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 83, 101, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 66,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 92, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 83, 101, 116, 77,
			97, 110, 121, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 77, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			92, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			83, 111, 114, 116, 75, 101, 121, 115, 102, 114,
			111, 109, 86, 97, 108, 117, 101, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 71, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 92, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 84, 97, 107, 101, 83,
			110, 97, 112, 83, 104, 111, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 72, 97, 115, 104, 84,
			97, 98, 108, 101, 92, 72, 97, 115, 104, 84,
			97, 98, 108, 101, 86, 97, 108, 117, 101, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			85, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 100, 100, 111, 110, 115, 92, 67, 117, 115,
			116, 111, 109, 92, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 65, 99, 116, 105, 118, 97,
			116, 101, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 84, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 100, 100, 111, 110, 115, 92,
			67, 117, 115, 116, 111, 109, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 67, 111, 110,
			116, 97, 105, 110, 115, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 86, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 100, 100, 111, 110,
			115, 92, 67, 117, 115, 116, 111, 109, 92, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 70,
			105, 110, 100, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 115, 66, 121, 84, 97, 103, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 89,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			100, 100, 111, 110, 115, 92, 67, 117, 115, 116,
			111, 109, 92, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 92, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 71, 101, 116, 65, 108, 108, 67,
			104, 105, 108, 100, 79, 102, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 89, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 100, 100, 111,
			110, 115, 92, 67, 117, 115, 116, 111, 109, 92,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			71, 101, 116, 67, 104, 105, 108, 100, 114, 101,
			110, 79, 102, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 86, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 100, 100, 111, 110, 115, 92,
			67, 117, 115, 116, 111, 109, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 71, 101, 116,
			67, 108, 111, 115, 101, 115, 116, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 93, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 100, 100,
			111, 110, 115, 92, 67, 117, 115, 116, 111, 109,
			92, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 92, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 71, 101, 116, 67, 108, 111, 115, 101, 115,
			116, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 73, 110, 83, 105, 103, 104, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 87, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 100,
			100, 111, 110, 115, 92, 67, 117, 115, 116, 111,
			109, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 71, 101, 116, 70, 97, 114, 116, 104,
			101, 115, 116, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 94, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 100, 100, 111, 110, 115, 92,
			67, 117, 115, 116, 111, 109, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 71, 101, 116,
			70, 97, 114, 116, 104, 101, 115, 116, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 73, 110,
			83, 105, 103, 104, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 95, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 100, 100, 111, 110,
			115, 92, 67, 117, 115, 116, 111, 109, 92, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 92,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 71,
			101, 116, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 77, 97, 120, 70, 115, 109, 70, 108,
			111, 97, 116, 73, 110, 100, 101, 120, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 88, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 100,
			100, 111, 110, 115, 92, 67, 117, 115, 116, 111,
			109, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 83, 101, 110, 100, 69, 118, 101, 110,
			116, 84, 111, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 94, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 65, 114, 114, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 100, 100, 111, 110, 115,
			92, 67, 117, 115, 116, 111, 109, 92, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 92, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 83, 101,
			110, 100, 83, 116, 114, 105, 110, 103, 69, 118,
			101, 110, 116, 84, 111, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 90, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 100, 100, 111,
			110, 115, 92, 67, 117, 115, 116, 111, 109, 92,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			92, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			83, 111, 114, 116, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 66, 121, 68, 105, 115, 116,
			97, 110, 99, 101, 46, 99, 115, 0, 0, 0,
			2, 0, 0, 0, 81, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 65, 114, 114, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 100, 100, 111, 110, 115,
			92, 67, 117, 115, 116, 111, 109, 92, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 92, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 83, 111,
			114, 116, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 81, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 100, 100, 111, 110, 115, 92,
			67, 117, 115, 116, 111, 109, 92, 83, 116, 97,
			116, 105, 115, 116, 105, 99, 115, 92, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 71, 101, 116,
			65, 118, 101, 114, 97, 103, 101, 86, 97, 108,
			117, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 77, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 100, 100, 111, 110, 115, 92, 67,
			117, 115, 116, 111, 109, 92, 83, 116, 97, 116,
			105, 115, 116, 105, 99, 115, 92, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 71, 101, 116, 77,
			97, 120, 86, 97, 108, 117, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 77, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 65, 114, 114, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 100, 100,
			111, 110, 115, 92, 67, 117, 115, 116, 111, 109,
			92, 83, 116, 97, 116, 105, 115, 116, 105, 99,
			115, 92, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 71, 101, 116, 77, 105, 110, 86, 97, 108,
			117, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 86, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 100, 100, 111, 110, 115, 92, 67,
			117, 115, 116, 111, 109, 92, 83, 116, 97, 116,
			105, 115, 116, 105, 99, 115, 92, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 71, 101, 116, 78,
			101, 97, 114, 101, 115, 116, 70, 108, 111, 97,
			116, 86, 97, 108, 117, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 76, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 100, 100, 111,
			110, 115, 92, 67, 117, 115, 116, 111, 109, 92,
			84, 97, 98, 108, 101, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 114, 114, 97, 121, 84,
			97, 98, 108, 101, 65, 100, 100, 82, 111, 119,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			78, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 100, 100, 111, 110, 115, 92, 67, 117, 115,
			116, 111, 109, 92, 84, 97, 98, 108, 101, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 84, 97, 98, 108, 101, 67, 111,
			110, 116, 97, 105, 110, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 77, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 100, 100, 111,
			110, 115, 92, 67, 117, 115, 116, 111, 109, 92,
			84, 97, 98, 108, 101, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 114, 114, 97, 121, 84,
			97, 98, 108, 101, 71, 101, 116, 73, 116, 101,
			109, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 87, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 100, 100, 111, 110, 115, 92, 67, 117,
			115, 116, 111, 109, 92, 84, 97, 98, 108, 101,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			114, 114, 97, 121, 84, 97, 98, 108, 101, 71,
			101, 116, 82, 111, 119, 84, 111, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 87, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 100, 100, 111,
			110, 115, 92, 67, 117, 115, 116, 111, 109, 92,
			84, 97, 98, 108, 101, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 114, 114, 97, 121, 84,
			97, 98, 108, 101, 71, 101, 116, 82, 111, 119,
			84, 111, 72, 97, 115, 104, 116, 97, 98, 108,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 81, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 100, 100, 111, 110, 115, 92, 67, 117,
			115, 116, 111, 109, 92, 84, 97, 98, 108, 101,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			114, 114, 97, 121, 84, 97, 98, 108, 101, 82,
			101, 109, 111, 118, 101, 82, 111, 119, 65, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			77, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 65,
			114, 114, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 100, 100, 111, 110, 115, 92, 67, 117, 115,
			116, 111, 109, 92, 84, 97, 98, 108, 101, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 84, 97, 98, 108, 101, 83, 101,
			116, 73, 116, 101, 109, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 66, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 65, 114, 114, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 100, 100, 111, 110,
			115, 92, 67, 117, 115, 116, 111, 109, 92, 84,
			97, 98, 108, 101, 92, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 84, 97, 98, 108, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 74,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			100, 100, 111, 110, 115, 92, 85, 110, 105, 116,
			121, 92, 77, 101, 115, 104, 92, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 71, 101, 116, 86,
			101, 114, 116, 101, 120, 67, 111, 108, 111, 114,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 77, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 100, 100, 111, 110, 115, 92, 85, 110,
			105, 116, 121, 92, 77, 101, 115, 104, 92, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 71, 101,
			116, 86, 101, 114, 116, 101, 120, 80, 111, 115,
			105, 116, 105, 111, 110, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 74, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 65, 114, 114, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 100, 100, 111,
			110, 115, 92, 85, 110, 105, 116, 121, 92, 77,
			101, 115, 104, 92, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 83, 101, 116, 86, 101, 114, 116,
			101, 120, 67, 111, 108, 111, 114, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 77, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 100,
			100, 111, 110, 115, 92, 85, 110, 105, 116, 121,
			92, 77, 101, 115, 104, 92, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 83, 101, 116, 86, 101,
			114, 116, 101, 120, 80, 111, 115, 105, 116, 105,
			111, 110, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 81, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 65, 114, 114, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 100, 100, 111, 110, 115, 92,
			85, 110, 105, 116, 121, 92, 83, 99, 114, 101,
			101, 110, 92, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 71, 101, 116, 83, 99, 114, 101, 101,
			110, 82, 101, 115, 111, 108, 117, 116, 105, 111,
			110, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 72, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 100, 100, 111, 110, 115, 92, 85,
			110, 105, 116, 121, 92, 83, 99, 114, 101, 101,
			110, 92, 71, 101, 116, 67, 117, 114, 114, 101,
			110, 116, 82, 101, 115, 111, 108, 117, 116, 105,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 71, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 65, 114, 114, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 100, 100, 111, 110, 115, 92, 85,
			110, 105, 116, 121, 92, 83, 99, 114, 101, 101,
			110, 92, 83, 99, 114, 101, 101, 110, 83, 101,
			116, 82, 101, 115, 111, 108, 117, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 70, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 100, 100, 111, 110, 115, 92, 85, 110,
			105, 116, 121, 92, 84, 101, 120, 116, 92, 83,
			112, 108, 105, 116, 84, 101, 120, 116, 84, 111,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 61,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 95,
			95, 105, 110, 116, 101, 114, 110, 97, 108, 95,
			95, 92, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 65, 99, 116, 105, 111, 110, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 63, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 95, 95,
			105, 110, 116, 101, 114, 110, 97, 108, 95, 95,
			92, 67, 111, 108, 108, 101, 99, 116, 105, 111,
			110, 115, 65, 99, 116, 105, 111, 110, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 61,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 65, 114,
			114, 97, 121, 77, 97, 107, 101, 114, 92, 95,
			95, 105, 110, 116, 101, 114, 110, 97, 108, 95,
			95, 92, 72, 97, 115, 104, 84, 97, 98, 108,
			101, 65, 99, 116, 105, 111, 110, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 68, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 65, 114, 114,
			97, 121, 77, 97, 107, 101, 114, 92, 95, 95,
			105, 110, 116, 101, 114, 110, 97, 108, 95, 95,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 80,
			114, 111, 120, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 69, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 65, 114, 114, 97, 121, 77, 97,
			107, 101, 114, 92, 95, 95, 105, 110, 116, 101,
			114, 110, 97, 108, 95, 95, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 67, 111, 108, 108,
			101, 99, 116, 105, 111, 110, 80, 114, 111, 120,
			121, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 68, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 95, 95, 105, 110, 116, 101, 114, 110, 97,
			108, 95, 95, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 72, 97, 115, 104, 84, 97, 98,
			108, 101, 80, 114, 111, 120, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 73, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 67, 117, 115, 116,
			111, 109, 32, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 110, 105, 109, 97, 116, 111, 114, 92,
			83, 101, 116, 82, 117, 110, 116, 105, 109, 101,
			65, 110, 105, 109, 97, 116, 111, 114, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 76, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 112, 112, 108, 105, 99, 97, 116,
			105, 111, 110, 92, 65, 112, 112, 108, 105, 99,
			97, 116, 105, 111, 110, 71, 101, 116, 83, 121,
			115, 116, 101, 109, 76, 97, 110, 103, 117, 97,
			103, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 117, 100, 105,
			111, 92, 65, 117, 100, 105, 111, 71, 101, 116,
			84, 105, 109, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 54, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 117,
			100, 105, 111, 92, 65, 117, 100, 105, 111, 83,
			101, 116, 84, 105, 109, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 60, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 117, 100, 105, 111, 92, 71, 101, 116, 65,
			117, 100, 105, 111, 67, 108, 105, 112, 76, 101,
			110, 103, 116, 104, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 64, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 67, 111,
			110, 118, 101, 114, 116, 92, 67, 111, 110, 118,
			101, 114, 116, 83, 116, 114, 105, 110, 103, 84,
			111, 70, 108, 111, 97, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 66, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			67, 111, 110, 118, 101, 114, 116, 92, 67, 111,
			110, 118, 101, 114, 116, 86, 101, 99, 116, 111,
			114, 51, 84, 111, 83, 116, 114, 105, 110, 103,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			63, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 92, 65, 99, 116, 105, 118,
			97, 116, 101, 67, 104, 105, 108, 100, 114, 101,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 62, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 92, 68, 101, 115, 116,
			114, 111, 121, 67, 104, 105, 108, 100, 114, 101,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 65, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 92, 71, 101, 116, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 83,
			112, 101, 101, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 56, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 92, 71,
			101, 116, 76, 97, 121, 101, 114, 50, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 60, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 92, 71, 101, 116, 80, 97, 114, 101,
			110, 116, 77, 111, 114, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 63, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			92, 71, 101, 116, 87, 111, 114, 108, 100, 68,
			105, 115, 116, 97, 110, 99, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 55, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 67, 117, 115, 116,
			111, 109, 32, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 92, 73, 115, 65, 99, 116, 105, 118, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			65, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 92, 80, 111, 115, 105, 116,
			105, 111, 110, 83, 109, 111, 111, 116, 104, 68,
			97, 109, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 76, 111, 103,
			105, 99, 92, 66, 111, 111, 108, 77, 117, 108,
			116, 105, 67, 111, 110, 100, 105, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 57, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 77, 97, 116, 104, 92,
			70, 108, 111, 97, 116, 65, 100, 100, 82, 101,
			97, 108, 116, 105, 109, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 56, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 97, 116, 104, 92, 70, 108, 111, 97, 116,
			83, 109, 111, 111, 116, 104, 68, 97, 109, 112,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			58, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 77, 97, 116, 104, 92, 82,
			111, 117, 110, 100, 70, 108, 111, 97, 116, 68,
			101, 99, 105, 109, 97, 108, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 51, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 92, 66, 111,
			120, 67, 97, 115, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 92, 82, 105, 103,
			105, 100, 98, 111, 100, 121, 77, 111, 118, 101,
			80, 111, 115, 105, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 92,
			83, 112, 104, 101, 114, 101, 67, 97, 115, 116,
			50, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 67, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 81, 117, 97, 108, 105,
			116, 121, 83, 101, 116, 116, 105, 110, 103, 115,
			92, 83, 101, 116, 81, 117, 97, 108, 105, 116,
			121, 76, 101, 118, 101, 108, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 59, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			82, 101, 115, 111, 117, 114, 99, 101, 115, 92,
			82, 101, 115, 111, 117, 114, 99, 101, 115, 76,
			111, 97, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 99, 114,
			101, 101, 110, 92, 67, 104, 101, 99, 107, 73,
			102, 70, 117, 108, 108, 83, 99, 114, 101, 101,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 99, 114, 101, 101,
			110, 92, 83, 101, 116, 67, 117, 114, 115, 111,
			114, 76, 111, 99, 107, 83, 116, 97, 116, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			59, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 99, 114, 101, 101, 110,
			92, 83, 101, 116, 67, 117, 114, 115, 111, 114,
			86, 105, 115, 105, 98, 108, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 70, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 67, 117, 115, 116,
			111, 109, 32, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 97, 116, 101, 77, 97, 99, 104,
			105, 110, 101, 92, 78, 101, 120, 116, 70, 114,
			97, 109, 101, 69, 118, 101, 110, 116, 65, 100,
			118, 97, 110, 99, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 74, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 67, 108, 105, 101, 110,
			116, 92, 83, 116, 101, 97, 109, 95, 65, 99,
			116, 105, 118, 97, 116, 101, 71, 97, 109, 101,
			79, 118, 101, 114, 108, 97, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 81, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 67, 117, 115, 116,
			111, 109, 32, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 101, 97, 109, 92, 67, 108, 105,
			101, 110, 116, 92, 83, 116, 101, 97, 109, 95,
			65, 99, 116, 105, 118, 97, 116, 101, 71, 97,
			109, 101, 79, 118, 101, 114, 108, 97, 121, 84,
			111, 83, 116, 111, 114, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 80, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 101, 97, 109, 92, 67, 108, 105, 101,
			110, 116, 92, 83, 116, 101, 97, 109, 95, 65,
			99, 116, 105, 118, 97, 116, 101, 71, 97, 109,
			101, 79, 118, 101, 114, 108, 97, 121, 84, 111,
			85, 115, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 83, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			101, 97, 109, 92, 67, 108, 105, 101, 110, 116,
			92, 83, 116, 101, 97, 109, 95, 65, 99, 116,
			105, 118, 97, 116, 101, 71, 97, 109, 101, 79,
			118, 101, 114, 108, 97, 121, 84, 111, 87, 101,
			98, 80, 97, 103, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 68, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 67, 108, 105, 101, 110,
			116, 92, 83, 116, 101, 97, 109, 95, 71, 101,
			116, 65, 112, 112, 66, 117, 105, 108, 100, 73,
			68, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 63, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 101, 97, 109,
			92, 67, 108, 105, 101, 110, 116, 92, 83, 116,
			101, 97, 109, 95, 71, 101, 116, 65, 112, 112,
			73, 68, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 66, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 101, 97,
			109, 92, 67, 108, 105, 101, 110, 116, 92, 83,
			116, 101, 97, 109, 95, 71, 101, 116, 65, 112,
			112, 79, 119, 110, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 80, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 101, 97, 109, 92, 67, 108, 105, 101,
			110, 116, 92, 83, 116, 101, 97, 109, 95, 71,
			101, 116, 65, 118, 97, 105, 108, 97, 98, 108,
			101, 71, 97, 109, 101, 76, 97, 110, 103, 117,
			97, 103, 101, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 66, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			101, 97, 109, 92, 67, 108, 105, 101, 110, 116,
			92, 83, 116, 101, 97, 109, 95, 71, 101, 116,
			66, 101, 116, 97, 73, 110, 102, 111, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 77, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 67, 108,
			105, 101, 110, 116, 92, 83, 116, 101, 97, 109,
			95, 71, 101, 116, 67, 117, 114, 114, 101, 110,
			116, 66, 97, 116, 116, 101, 114, 121, 80, 111,
			119, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 77, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 101,
			97, 109, 92, 67, 108, 105, 101, 110, 116, 92,
			83, 116, 101, 97, 109, 95, 71, 101, 116, 67,
			117, 114, 114, 101, 110, 116, 71, 97, 109, 101,
			76, 97, 110, 103, 117, 97, 103, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 82, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 67, 108,
			105, 101, 110, 116, 92, 83, 116, 101, 97, 109,
			95, 71, 101, 116, 69, 97, 114, 108, 105, 101,
			115, 116, 80, 117, 114, 99, 104, 97, 115, 101,
			85, 110, 105, 120, 84, 105, 109, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 76, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 67, 108,
			105, 101, 110, 116, 92, 83, 116, 101, 97, 109,
			95, 71, 101, 116, 73, 110, 115, 116, 97, 108,
			108, 101, 100, 65, 112, 112, 115, 67, 111, 117,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 67, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 101, 97,
			109, 92, 67, 108, 105, 101, 110, 116, 92, 83,
			116, 101, 97, 109, 95, 71, 101, 116, 73, 80,
			67, 111, 117, 110, 116, 114, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 67, 117, 115, 116,
			111, 109, 32, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 101, 97, 109, 92, 67, 108, 105,
			101, 110, 116, 92, 83, 116, 101, 97, 109, 95,
			71, 101, 116, 83, 116, 101, 97, 109, 73, 68,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			73, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 101, 97, 109, 92,
			67, 108, 105, 101, 110, 116, 92, 83, 116, 101,
			97, 109, 95, 71, 101, 116, 83, 116, 101, 97,
			109, 85, 73, 76, 97, 110, 103, 117, 97, 103,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 101, 97, 109,
			92, 67, 108, 105, 101, 110, 116, 92, 83, 116,
			101, 97, 109, 95, 73, 110, 105, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 69, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 67, 108,
			105, 101, 110, 116, 92, 83, 116, 101, 97, 109,
			95, 73, 115, 65, 112, 112, 73, 110, 115, 116,
			97, 108, 108, 101, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 66, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 67, 108, 105, 101, 110,
			116, 92, 83, 116, 101, 97, 109, 95, 73, 115,
			67, 121, 98, 101, 114, 99, 97, 102, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 67, 117,
			115, 116, 111, 109, 32, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 101, 97, 109, 92, 67,
			108, 105, 101, 110, 116, 92, 83, 116, 101, 97,
			109, 95, 73, 115, 73, 110, 105, 116, 105, 97,
			108, 105, 122, 101, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 67, 108, 105, 101, 110,
			116, 92, 83, 116, 101, 97, 109, 95, 73, 115,
			76, 111, 103, 103, 101, 100, 79, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 78, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 67, 108,
			105, 101, 110, 116, 92, 83, 116, 101, 97, 109,
			95, 73, 115, 83, 116, 101, 97, 109, 73, 110,
			66, 105, 103, 80, 105, 99, 116, 117, 114, 101,
			77, 111, 100, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 69, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			101, 97, 109, 92, 67, 108, 105, 101, 110, 116,
			92, 83, 116, 101, 97, 109, 95, 73, 115, 83,
			116, 101, 97, 109, 82, 117, 110, 110, 105, 110,
			103, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 73, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 101, 97, 109,
			92, 67, 108, 105, 101, 110, 116, 92, 83, 116,
			101, 97, 109, 95, 73, 115, 83, 116, 101, 97,
			109, 82, 117, 110, 110, 105, 110, 103, 73, 110,
			86, 82, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 67, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 101, 97,
			109, 92, 67, 108, 105, 101, 110, 116, 92, 83,
			116, 101, 97, 109, 95, 73, 115, 83, 117, 98,
			115, 99, 114, 105, 98, 101, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 70, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 67, 117, 115, 116,
			111, 109, 32, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 101, 97, 109, 92, 67, 108, 105,
			101, 110, 116, 92, 83, 116, 101, 97, 109, 95,
			73, 115, 83, 117, 98, 115, 99, 114, 105, 98,
			101, 100, 65, 112, 112, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 82, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 67, 108, 105, 101, 110,
			116, 92, 83, 116, 101, 97, 109, 95, 73, 115,
			83, 117, 98, 115, 99, 114, 105, 98, 101, 100,
			70, 114, 111, 109, 70, 114, 101, 101, 87, 101,
			101, 107, 101, 110, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 66, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 67, 108, 105, 101, 110,
			116, 92, 83, 116, 101, 97, 109, 95, 73, 115,
			86, 65, 67, 66, 97, 110, 110, 101, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 82,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 67, 117,
			115, 116, 111, 109, 32, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 101, 97, 109, 92, 67,
			108, 105, 101, 110, 116, 92, 83, 116, 101, 97,
			109, 95, 73, 115, 86, 82, 72, 101, 97, 100,
			115, 101, 116, 83, 116, 114, 101, 97, 109, 105,
			110, 103, 69, 110, 97, 98, 108, 101, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 71,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 67, 117,
			115, 116, 111, 109, 32, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 101, 97, 109, 92, 67,
			108, 105, 101, 110, 116, 92, 83, 116, 101, 97,
			109, 95, 76, 111, 119, 86, 105, 111, 108, 101,
			110, 99, 101, 67, 104, 101, 99, 107, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 68, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 67, 108,
			105, 101, 110, 116, 92, 83, 116, 101, 97, 109,
			95, 79, 118, 101, 114, 108, 97, 121, 65, 99,
			116, 105, 118, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 74, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			101, 97, 109, 92, 67, 108, 105, 101, 110, 116,
			92, 83, 116, 101, 97, 109, 95, 80, 101, 114,
			115, 111, 110, 97, 83, 116, 97, 116, 101, 67,
			104, 97, 110, 103, 101, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 81, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 101, 97, 109, 92, 67, 108, 105, 101,
			110, 116, 92, 83, 116, 101, 97, 109, 95, 83,
			101, 99, 111, 110, 100, 115, 83, 105, 110, 99,
			101, 67, 111, 109, 112, 117, 116, 101, 114, 65,
			99, 116, 105, 118, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 70, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 67, 108, 105, 101, 110,
			116, 92, 83, 116, 101, 97, 109, 95, 83, 116,
			101, 97, 109, 83, 101, 114, 118, 101, 114, 84,
			105, 109, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 72, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 101,
			97, 109, 92, 70, 114, 105, 101, 110, 100, 115,
			92, 83, 116, 101, 97, 109, 95, 71, 101, 116,
			80, 101, 114, 115, 111, 110, 97, 65, 118, 97,
			116, 97, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 70, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 101,
			97, 109, 92, 70, 114, 105, 101, 110, 100, 115,
			92, 83, 116, 101, 97, 109, 95, 71, 101, 116,
			80, 101, 114, 115, 111, 110, 97, 78, 97, 109,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 71, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 101, 97, 109,
			92, 70, 114, 105, 101, 110, 100, 115, 92, 83,
			116, 101, 97, 109, 95, 71, 101, 116, 80, 101,
			114, 115, 111, 110, 97, 83, 116, 97, 116, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			73, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 101, 97, 109, 92,
			70, 114, 105, 101, 110, 100, 115, 92, 83, 116,
			101, 97, 109, 95, 71, 101, 116, 80, 108, 97,
			121, 101, 114, 78, 105, 99, 107, 110, 97, 109,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 75, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 101, 97, 109,
			92, 70, 114, 105, 101, 110, 100, 115, 92, 83,
			116, 101, 97, 109, 95, 71, 101, 116, 85, 115,
			101, 114, 82, 101, 115, 116, 114, 105, 99, 116,
			105, 111, 110, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 70, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			101, 97, 109, 92, 70, 114, 105, 101, 110, 100,
			115, 92, 83, 116, 101, 97, 109, 95, 83, 101,
			116, 80, 101, 114, 115, 111, 110, 97, 78, 97,
			109, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 63, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 101, 97,
			109, 92, 85, 115, 101, 114, 92, 83, 116, 101,
			97, 109, 95, 65, 112, 112, 66, 108, 111, 99,
			107, 101, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 67, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 101,
			97, 109, 92, 85, 115, 101, 114, 92, 83, 116,
			101, 97, 109, 95, 70, 101, 97, 116, 117, 114,
			101, 66, 108, 111, 99, 107, 101, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 65, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 85, 115,
			101, 114, 92, 83, 116, 101, 97, 109, 95, 80,
			97, 114, 101, 110, 116, 97, 108, 76, 111, 99,
			107, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 74, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 101, 97, 109,
			92, 85, 115, 101, 114, 83, 116, 97, 116, 115,
			92, 83, 116, 101, 97, 109, 95, 67, 108, 101,
			97, 114, 65, 99, 104, 105, 101, 118, 101, 109,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 75, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 101,
			97, 109, 92, 85, 115, 101, 114, 83, 116, 97,
			116, 115, 92, 83, 116, 101, 97, 109, 95, 67,
			114, 101, 97, 116, 101, 76, 101, 97, 100, 101,
			114, 98, 111, 97, 114, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 76, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 101, 97, 109, 92, 85, 115, 101, 114,
			83, 116, 97, 116, 115, 92, 83, 116, 101, 97,
			109, 95, 71, 101, 116, 65, 99, 104, 105, 101,
			118, 101, 109, 101, 110, 116, 73, 99, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			76, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 101, 97, 109, 92,
			85, 115, 101, 114, 83, 116, 97, 116, 115, 92,
			83, 116, 101, 97, 109, 95, 71, 101, 116, 65,
			99, 104, 105, 101, 118, 101, 109, 101, 110, 116,
			73, 110, 102, 111, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 70, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			101, 97, 109, 92, 85, 115, 101, 114, 83, 116,
			97, 116, 115, 92, 83, 116, 101, 97, 109, 95,
			71, 101, 116, 83, 116, 97, 116, 70, 108, 111,
			97, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 68, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 101, 97,
			109, 92, 85, 115, 101, 114, 83, 116, 97, 116,
			115, 92, 83, 116, 101, 97, 109, 95, 71, 101,
			116, 83, 116, 97, 116, 73, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 80, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 85, 115,
			101, 114, 83, 116, 97, 116, 115, 92, 83, 116,
			101, 97, 109, 95, 71, 101, 116, 85, 115, 101,
			114, 65, 99, 104, 105, 101, 118, 101, 109, 101,
			110, 116, 73, 110, 102, 111, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 69, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 101, 97, 109, 92, 85, 115, 101, 114,
			83, 116, 97, 116, 115, 92, 83, 116, 101, 97,
			109, 95, 71, 101, 116, 85, 115, 101, 114, 78,
			97, 109, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 74, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 101,
			97, 109, 92, 85, 115, 101, 114, 83, 116, 97,
			116, 115, 92, 83, 116, 101, 97, 109, 95, 71,
			101, 116, 85, 115, 101, 114, 83, 116, 97, 116,
			70, 108, 111, 97, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 72, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 85, 115, 101, 114, 83,
			116, 97, 116, 115, 92, 83, 116, 101, 97, 109,
			95, 71, 101, 116, 85, 115, 101, 114, 83, 116,
			97, 116, 73, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 85, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 67, 117, 115, 116, 111, 109,
			32, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 101, 97, 109, 92, 85, 115, 101, 114, 83,
			116, 97, 116, 115, 92, 83, 116, 101, 97, 109,
			95, 73, 110, 100, 105, 99, 97, 116, 101, 65,
			99, 104, 105, 101, 118, 101, 109, 101, 110, 116,
			80, 114, 111, 103, 114, 101, 115, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 77, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 67, 117, 115,
			116, 111, 109, 32, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 101, 97, 109, 92, 85, 115,
			101, 114, 83, 116, 97, 116, 115, 92, 83, 116,
			101, 97, 109, 95, 82, 101, 113, 117, 101, 115,
			116, 67, 117, 114, 114, 101, 110, 116, 83, 116,
			97, 116, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 101,
			97, 109, 92, 85, 115, 101, 114, 83, 116, 97,
			116, 115, 92, 83, 116, 101, 97, 109, 95, 82,
			101, 115, 101, 116, 65, 108, 108, 83, 116, 97,
			116, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 72, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 101, 97,
			109, 92, 85, 115, 101, 114, 83, 116, 97, 116,
			115, 92, 83, 116, 101, 97, 109, 95, 83, 101,
			116, 65, 99, 104, 105, 101, 118, 101, 109, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 70, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 101, 97,
			109, 92, 85, 115, 101, 114, 83, 116, 97, 116,
			115, 92, 83, 116, 101, 97, 109, 95, 83, 101,
			116, 83, 116, 97, 116, 70, 108, 111, 97, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			68, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 101, 97, 109, 92,
			85, 115, 101, 114, 83, 116, 97, 116, 115, 92,
			83, 116, 101, 97, 109, 95, 83, 101, 116, 83,
			116, 97, 116, 73, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 59, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 114, 105, 110, 103, 92, 83, 116, 114,
			105, 110, 103, 84, 121, 112, 101, 119, 114, 105,
			116, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 65, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 67, 117, 115, 116, 111, 109, 32, 65,
			99, 116, 105, 111, 110, 115, 92, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 92, 71, 101, 116,
			70, 111, 114, 119, 97, 114, 100, 68, 105, 114,
			101, 99, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 70, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 67, 117, 115, 116, 111,
			109, 32, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			71, 101, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 83, 105, 98, 108, 105, 110, 103, 73,
			110, 100, 101, 120, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 58, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 67, 117, 115, 116, 111, 109, 32,
			65, 99, 116, 105, 111, 110, 115, 92, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 92, 82, 111,
			116, 97, 116, 101, 65, 114, 111, 117, 110, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			64, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 67,
			117, 115, 116, 111, 109, 32, 65, 99, 116, 105,
			111, 110, 115, 92, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 92, 83, 101, 116, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 80, 97, 114, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 57, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 101, 99, 116,
			111, 114, 51, 92, 82, 97, 110, 100, 111, 109,
			86, 101, 99, 116, 111, 114, 51, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 67, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 67, 117, 115, 116,
			111, 109, 32, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 101, 99, 116, 111, 114, 51, 92, 86,
			101, 99, 116, 111, 114, 51, 79, 112, 101, 114,
			97, 116, 111, 114, 65, 100, 118, 97, 110, 99,
			101, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 67, 117, 115, 116, 111, 109, 32, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 101, 99, 116,
			111, 114, 51, 92, 86, 101, 99, 116, 111, 114,
			51, 83, 109, 111, 111, 116, 104, 68, 97, 109,
			112, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 68, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			67, 117, 115, 116, 111, 109, 32, 65, 99, 116,
			105, 111, 110, 115, 92, 95, 95, 73, 110, 116,
			101, 114, 110, 97, 108, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 65, 99, 116, 105, 111,
			110, 115, 85, 116, 105, 108, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 60, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 68, 97, 116, 97,
			77, 97, 107, 101, 114, 92, 67, 115, 118, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 101,
			116, 67, 115, 118, 67, 111, 108, 117, 109, 110,
			67, 111, 117, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 68, 97, 116, 97, 77, 97,
			107, 101, 114, 92, 67, 115, 118, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 101, 116, 67,
			115, 118, 70, 105, 101, 108, 100, 66, 121, 73,
			110, 100, 101, 120, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 59, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 92, 67, 115, 118, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 101, 116, 67, 115,
			118, 70, 105, 101, 108, 100, 66, 121, 75, 101,
			121, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 68, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			68, 97, 116, 97, 77, 97, 107, 101, 114, 92,
			67, 115, 118, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 101, 116, 67, 115, 118, 70, 105,
			101, 108, 100, 115, 66, 121, 67, 111, 108, 117,
			109, 110, 73, 110, 100, 101, 120, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 68, 97, 116, 97,
			77, 97, 107, 101, 114, 92, 67, 115, 118, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 101,
			116, 67, 115, 118, 70, 105, 101, 108, 100, 115,
			66, 121, 67, 111, 108, 117, 109, 110, 75, 101,
			121, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 60, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			68, 97, 116, 97, 77, 97, 107, 101, 114, 92,
			67, 115, 118, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 101, 116, 67, 115, 118, 70, 105,
			101, 108, 100, 115, 66, 121, 82, 111, 119, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 92, 67, 115,
			118, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 101, 116, 67, 115, 118, 72, 101, 97, 100,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 60, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 68, 97, 116, 97, 77, 97, 107, 101, 114,
			92, 67, 115, 118, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 101, 116, 67, 115, 118, 82,
			101, 99, 111, 114, 100, 67, 111, 117, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			50, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 68,
			97, 116, 97, 77, 97, 107, 101, 114, 92, 67,
			115, 118, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 82, 101, 97, 100, 67, 115, 118, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 64, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 68, 97, 116,
			97, 77, 97, 107, 101, 114, 92, 67, 115, 118,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 82,
			101, 109, 111, 118, 101, 65, 108, 108, 67, 115,
			118, 82, 101, 102, 101, 114, 101, 110, 99, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			61, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 68,
			97, 116, 97, 77, 97, 107, 101, 114, 92, 67,
			115, 118, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 82, 101, 109, 111, 118, 101, 67, 115, 118,
			82, 101, 102, 101, 114, 101, 110, 99, 101, 46,
			99, 115, 0, 0, 0, 2, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 92, 67, 115,
			118, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 115, 118, 82, 101, 97, 100, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 77,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 92, 67, 115,
			118, 92, 88, 109, 108, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 67,
			111, 110, 118, 101, 114, 116, 67, 115, 118, 83,
			116, 114, 105, 110, 103, 84, 111, 88, 109, 108,
			78, 111, 100, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 67, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 92, 88, 109, 108, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 88, 77, 76, 32, 68,
			101, 108, 101, 116, 101, 92, 88, 109, 108, 78,
			111, 100, 101, 68, 101, 108, 101, 116, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 70,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 92, 88, 109,
			108, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			88, 77, 76, 32, 68, 101, 108, 101, 116, 101,
			92, 88, 109, 108, 78, 111, 100, 101, 82, 101,
			109, 111, 118, 101, 65, 108, 108, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 76, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 68, 97, 116, 97,
			77, 97, 107, 101, 114, 92, 88, 109, 108, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 88, 77,
			76, 32, 68, 101, 108, 101, 116, 101, 92, 88,
			109, 108, 78, 111, 100, 101, 82, 101, 109, 111,
			118, 101, 65, 116, 116, 114, 105, 98, 117, 116,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 80, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			68, 97, 116, 97, 77, 97, 107, 101, 114, 92,
			88, 109, 108, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 88, 77, 76, 32, 82, 101, 97, 100,
			92, 88, 109, 108, 71, 101, 116, 78, 101, 120,
			116, 78, 111, 100, 101, 76, 105, 115, 116, 80,
			114, 111, 112, 101, 114, 116, 105, 101, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 72,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 92, 88, 109,
			108, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			88, 77, 76, 32, 82, 101, 97, 100, 92, 88,
			109, 108, 71, 101, 116, 78, 111, 100, 101, 80,
			114, 111, 112, 101, 114, 116, 105, 101, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 66,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 92, 88, 109,
			108, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			88, 77, 76, 32, 82, 101, 97, 100, 92, 88,
			109, 108, 83, 101, 108, 101, 99, 116, 78, 111,
			100, 101, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 92, 88, 109, 108, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 88, 77, 76, 32, 82, 101,
			97, 100, 92, 88, 109, 108, 83, 101, 108, 101,
			99, 116, 83, 105, 110, 103, 108, 101, 78, 111,
			100, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 73, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 68, 97, 116, 97, 77, 97, 107, 101, 114,
			92, 88, 109, 108, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 88, 77, 76, 32, 84, 111, 111,
			108, 115, 92, 88, 109, 108, 78, 111, 100, 101,
			115, 77, 97, 116, 104, 79, 112, 101, 114, 97,
			116, 111, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 65, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 92, 88, 109, 108, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 88, 77, 76, 32, 87, 114,
			105, 116, 101, 92, 88, 109, 108, 67, 108, 111,
			110, 101, 78, 111, 100, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 66, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 68, 97, 116, 97, 77,
			97, 107, 101, 114, 92, 88, 109, 108, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 88, 77, 76,
			32, 87, 114, 105, 116, 101, 92, 88, 109, 108,
			67, 114, 101, 97, 116, 101, 78, 111, 100, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			66, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 68,
			97, 116, 97, 77, 97, 107, 101, 114, 92, 88,
			109, 108, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 88, 77, 76, 32, 87, 114, 105, 116, 101,
			92, 88, 109, 108, 73, 110, 115, 101, 114, 116,
			78, 111, 100, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 66, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 92, 88, 109, 108, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 88, 77, 76, 32, 87,
			114, 105, 116, 101, 92, 88, 109, 108, 80, 97,
			114, 101, 110, 116, 78, 111, 100, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 67, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 68, 97, 116,
			97, 77, 97, 107, 101, 114, 92, 88, 109, 108,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 88,
			77, 76, 32, 87, 114, 105, 116, 101, 92, 88,
			109, 108, 82, 101, 112, 108, 97, 99, 101, 78,
			111, 100, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 67, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 92, 88, 109, 108, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 88, 77, 76, 32, 87, 114,
			105, 116, 101, 92, 88, 109, 108, 83, 97, 118,
			101, 73, 110, 80, 114, 111, 120, 121, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 73, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 68, 97, 116,
			97, 77, 97, 107, 101, 114, 92, 88, 109, 108,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 88,
			77, 76, 32, 87, 114, 105, 116, 101, 92, 88,
			109, 108, 83, 101, 116, 78, 111, 100, 101, 80,
			114, 111, 112, 101, 114, 116, 105, 101, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 67,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 92, 88, 109,
			108, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			88, 77, 76, 92, 88, 109, 108, 76, 111, 97,
			100, 70, 114, 111, 109, 84, 101, 120, 116, 65,
			115, 115, 101, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 69, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 92, 88, 109, 108, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 88, 77, 76, 92, 88,
			109, 108, 80, 114, 111, 120, 121, 71, 101, 116,
			88, 109, 108, 65, 115, 83, 116, 114, 105, 110,
			103, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 75, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			68, 97, 116, 97, 77, 97, 107, 101, 114, 92,
			88, 109, 108, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 88, 77, 76, 92, 88, 109, 108, 80,
			114, 111, 120, 121, 82, 101, 102, 114, 101, 115,
			104, 83, 116, 114, 105, 110, 103, 86, 101, 114,
			115, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 79, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 92, 88, 109, 108, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 95, 95, 105, 110, 116,
			101, 114, 110, 97, 108, 95, 95, 92, 70, 115,
			109, 88, 109, 108, 80, 114, 111, 112, 101, 114,
			116, 105, 101, 115, 83, 116, 111, 114, 97, 103,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 77, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			68, 97, 116, 97, 77, 97, 107, 101, 114, 92,
			88, 109, 108, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 95, 95, 105, 110, 116, 101, 114, 110,
			97, 108, 95, 95, 92, 70, 115, 109, 88, 109,
			108, 80, 114, 111, 112, 101, 114, 116, 105, 101,
			115, 84, 121, 112, 101, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 70, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 68, 97, 116, 97, 77,
			97, 107, 101, 114, 92, 88, 109, 108, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 95, 95, 105,
			110, 116, 101, 114, 110, 97, 108, 95, 95, 92,
			70, 115, 109, 88, 109, 108, 80, 114, 111, 112,
			101, 114, 116, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 68, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 92, 88, 109, 108, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 95, 95, 105, 110, 116,
			101, 114, 110, 97, 108, 95, 95, 92, 70, 115,
			109, 88, 109, 108, 83, 111, 117, 114, 99, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			69, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 68,
			97, 116, 97, 77, 97, 107, 101, 114, 92, 88,
			109, 108, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 95, 95, 105, 110, 116, 101, 114, 110, 97,
			108, 95, 95, 92, 70, 115, 109, 88, 112, 97,
			116, 104, 81, 117, 101, 114, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 83, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 68, 97, 116, 97,
			77, 97, 107, 101, 114, 92, 88, 109, 108, 92,
			65, 114, 114, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 71, 101,
			116, 88, 109, 108, 78, 111, 100, 101, 80, 114,
			111, 112, 101, 114, 116, 105, 101, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 67, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 68, 97, 116,
			97, 77, 97, 107, 101, 114, 92, 88, 109, 108,
			92, 95, 95, 105, 110, 116, 101, 114, 110, 97,
			108, 95, 95, 92, 68, 97, 116, 97, 77, 97,
			107, 101, 114, 88, 109, 108, 65, 99, 116, 105,
			111, 110, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 92, 88, 109, 108, 92, 95, 95, 105, 110,
			116, 101, 114, 110, 97, 108, 95, 95, 92, 68,
			97, 116, 97, 77, 97, 107, 101, 114, 88, 109,
			108, 78, 111, 100, 101, 65, 99, 116, 105, 111,
			110, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 75, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 68, 97, 116, 97, 77, 97, 107, 101, 114,
			92, 88, 109, 108, 92, 95, 95, 105, 110, 116,
			101, 114, 110, 97, 108, 95, 95, 92, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 88, 109, 108,
			78, 111, 100, 101, 76, 105, 115, 116, 65, 99,
			116, 105, 111, 110, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 73, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 68, 97, 116, 97, 77, 97,
			107, 101, 114, 92, 88, 109, 108, 92, 95, 95,
			105, 110, 116, 101, 114, 110, 97, 108, 95, 95,
			92, 68, 97, 116, 97, 77, 97, 107, 101, 114,
			88, 109, 108, 78, 111, 100, 101, 76, 105, 115,
			116, 80, 114, 111, 120, 121, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 69, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 68, 97, 116, 97, 77,
			97, 107, 101, 114, 92, 88, 109, 108, 92, 95,
			95, 105, 110, 116, 101, 114, 110, 97, 108, 95,
			95, 92, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 88, 109, 108, 78, 111, 100, 101, 80, 114,
			111, 120, 121, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 65, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 92, 88, 109, 108, 92, 95, 95, 105, 110,
			116, 101, 114, 110, 97, 108, 95, 95, 92, 68,
			97, 116, 97, 77, 97, 107, 101, 114, 88, 109,
			108, 80, 114, 111, 120, 121, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 65, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 68, 97, 116, 97, 77,
			97, 107, 101, 114, 92, 88, 109, 108, 92, 95,
			95, 105, 110, 116, 101, 114, 110, 97, 108, 95,
			95, 92, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 88, 109, 108, 85, 116, 105, 108, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 66,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 92, 88, 109,
			108, 92, 95, 95, 105, 110, 116, 101, 114, 110,
			97, 108, 95, 95, 92, 79, 98, 106, 101, 99,
			116, 115, 92, 70, 115, 109, 88, 109, 108, 78,
			111, 100, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 70, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 92, 88, 109, 108, 92, 95, 95, 105, 110,
			116, 101, 114, 110, 97, 108, 95, 95, 92, 79,
			98, 106, 101, 99, 116, 115, 92, 70, 115, 109,
			88, 109, 108, 78, 111, 100, 101, 76, 105, 115,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			68, 97, 116, 97, 77, 97, 107, 101, 114, 92,
			95, 105, 110, 116, 101, 114, 110, 97, 108, 95,
			92, 68, 97, 116, 97, 77, 97, 107, 101, 114,
			67, 111, 114, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 60, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 92, 95, 105, 110, 116, 101, 114, 110,
			97, 108, 95, 92, 68, 97, 116, 97, 77, 97,
			107, 101, 114, 80, 114, 111, 120, 121, 66, 97,
			115, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 70, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 80, 97, 116, 104, 70, 105, 110, 100, 105,
			110, 103, 92, 65, 103, 101, 110, 116, 92, 65,
			103, 101, 110, 116, 65, 99, 116, 105, 118, 97,
			116, 101, 67, 117, 114, 114, 101, 110, 116, 79,
			102, 102, 77, 101, 115, 104, 76, 105, 110, 107,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			63, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 80,
			97, 116, 104, 70, 105, 110, 100, 105, 110, 103,
			92, 65, 103, 101, 110, 116, 92, 65, 103, 101,
			110, 116, 67, 111, 109, 112, 108, 101, 116, 101,
			79, 102, 102, 77, 101, 115, 104, 76, 105, 110,
			107, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			80, 97, 116, 104, 70, 105, 110, 100, 105, 110,
			103, 92, 65, 103, 101, 110, 116, 92, 65, 103,
			101, 110, 116, 70, 105, 110, 100, 67, 108, 111,
			115, 101, 115, 116, 69, 100, 103, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 48, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 65, 103, 101, 110, 116,
			77, 111, 118, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 51, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 65, 103, 101, 110, 116, 82, 97, 121, 67,
			97, 115, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 53, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 80, 97, 116, 104, 70, 105, 110, 100,
			105, 110, 103, 92, 65, 103, 101, 110, 116, 92,
			65, 103, 101, 110, 116, 82, 101, 115, 101, 116,
			80, 97, 116, 104, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 50, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 65, 103, 101, 110, 116, 82, 101, 115, 117,
			109, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 62, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 80, 97, 116, 104, 70, 105, 110, 100, 105,
			110, 103, 92, 65, 103, 101, 110, 116, 92, 65,
			103, 101, 110, 116, 83, 97, 109, 112, 108, 101,
			80, 97, 116, 104, 80, 111, 115, 105, 116, 105,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 51, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 80, 97, 116, 104, 70, 105, 110, 100, 105,
			110, 103, 92, 65, 103, 101, 110, 116, 92, 65,
			103, 101, 110, 116, 83, 101, 116, 80, 97, 116,
			104, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 48, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			80, 97, 116, 104, 70, 105, 110, 100, 105, 110,
			103, 92, 65, 103, 101, 110, 116, 92, 65, 103,
			101, 110, 116, 83, 116, 111, 112, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 48, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 65, 103,
			101, 110, 116, 92, 65, 103, 101, 110, 116, 87,
			97, 114, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 58, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 80, 97, 116, 104, 70, 105, 110, 100,
			105, 110, 103, 92, 65, 103, 101, 110, 116, 92,
			71, 101, 116, 65, 103, 101, 110, 116, 65, 117,
			116, 111, 66, 114, 97, 107, 105, 110, 103, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 57,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 80, 97,
			116, 104, 70, 105, 110, 100, 105, 110, 103, 92,
			65, 103, 101, 110, 116, 92, 71, 101, 116, 65,
			103, 101, 110, 116, 65, 117, 116, 111, 82, 101,
			112, 97, 116, 104, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 70, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 71, 101, 116, 65, 103, 101, 110, 116, 65,
			117, 116, 111, 84, 114, 97, 118, 101, 114, 115,
			101, 79, 102, 102, 77, 101, 115, 104, 76, 105,
			110, 107, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 64, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 80, 97, 116, 104, 70, 105, 110, 100, 105,
			110, 103, 92, 65, 103, 101, 110, 116, 92, 71,
			101, 116, 65, 103, 101, 110, 116, 65, 118, 111,
			105, 100, 97, 110, 99, 101, 80, 114, 105, 111,
			114, 105, 116, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 71, 101, 116, 65, 103, 101, 110, 116, 66,
			97, 115, 101, 79, 102, 102, 115, 101, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 69,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 80, 97,
			116, 104, 70, 105, 110, 100, 105, 110, 103, 92,
			65, 103, 101, 110, 116, 92, 71, 101, 116, 65,
			103, 101, 110, 116, 67, 117, 114, 114, 101, 110,
			116, 79, 102, 102, 77, 101, 115, 104, 76, 105,
			110, 107, 68, 97, 116, 97, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 75, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 80, 97, 116, 104, 70,
			105, 110, 100, 105, 110, 103, 92, 65, 103, 101,
			110, 116, 92, 71, 101, 116, 65, 103, 101, 110,
			116, 67, 117, 114, 114, 101, 110, 116, 79, 102,
			102, 77, 101, 115, 104, 76, 105, 110, 107, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 80, 97,
			116, 104, 70, 105, 110, 100, 105, 110, 103, 92,
			65, 103, 101, 110, 116, 92, 71, 101, 116, 65,
			103, 101, 110, 116, 68, 101, 115, 105, 114, 101,
			100, 86, 101, 108, 111, 99, 105, 116, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 80, 97,
			116, 104, 70, 105, 110, 100, 105, 110, 103, 92,
			65, 103, 101, 110, 116, 92, 71, 101, 116, 65,
			103, 101, 110, 116, 68, 101, 115, 116, 105, 110,
			97, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 54, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 80, 97, 116, 104, 70, 105,
			110, 100, 105, 110, 103, 92, 65, 103, 101, 110,
			116, 92, 71, 101, 116, 65, 103, 101, 110, 116,
			72, 97, 115, 80, 97, 116, 104, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 65, 103,
			101, 110, 116, 92, 71, 101, 116, 65, 103, 101,
			110, 116, 72, 101, 105, 103, 104, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 71, 101, 116, 65, 103,
			101, 110, 116, 73, 115, 79, 110, 79, 102, 102,
			77, 101, 115, 104, 76, 105, 110, 107, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 71, 101, 116, 65, 103,
			101, 110, 116, 73, 115, 80, 97, 116, 104, 83,
			116, 97, 108, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 56, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 71, 101, 116, 65, 103, 101, 110, 116, 73,
			115, 83, 116, 111, 112, 112, 101, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 56, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 71, 101, 116, 65, 103,
			101, 110, 116, 76, 97, 121, 101, 114, 67, 111,
			115, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 66, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 80, 97, 116, 104, 70, 105, 110, 100, 105,
			110, 103, 92, 65, 103, 101, 110, 116, 92, 71,
			101, 116, 65, 103, 101, 110, 116, 77, 97, 120,
			105, 109, 117, 109, 65, 99, 99, 101, 108, 101,
			114, 97, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 66, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 80, 97, 116, 104, 70,
			105, 110, 100, 105, 110, 103, 92, 65, 103, 101,
			110, 116, 92, 71, 101, 116, 65, 103, 101, 110,
			116, 77, 97, 120, 105, 109, 117, 109, 65, 110,
			103, 117, 108, 97, 114, 83, 112, 101, 101, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			59, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 80,
			97, 116, 104, 70, 105, 110, 100, 105, 110, 103,
			92, 65, 103, 101, 110, 116, 92, 71, 101, 116,
			65, 103, 101, 110, 116, 77, 97, 120, 105, 109,
			117, 109, 83, 112, 101, 101, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 65, 103,
			101, 110, 116, 92, 71, 101, 116, 65, 103, 101,
			110, 116, 78, 101, 120, 116, 79, 102, 102, 77,
			101, 115, 104, 76, 105, 110, 107, 68, 97, 116,
			97, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			80, 97, 116, 104, 70, 105, 110, 100, 105, 110,
			103, 92, 65, 103, 101, 110, 116, 92, 71, 101,
			116, 65, 103, 101, 110, 116, 78, 101, 120, 116,
			80, 111, 115, 105, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 68, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 71, 101, 116, 65, 103,
			101, 110, 116, 79, 98, 115, 116, 97, 99, 108,
			101, 65, 118, 111, 105, 100, 97, 110, 99, 101,
			84, 121, 112, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 58, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 71, 101, 116, 65, 103, 101, 110, 116, 80,
			97, 116, 104, 80, 101, 110, 100, 105, 110, 103,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 80,
			97, 116, 104, 70, 105, 110, 100, 105, 110, 103,
			92, 65, 103, 101, 110, 116, 92, 71, 101, 116,
			65, 103, 101, 110, 116, 80, 97, 116, 104, 83,
			116, 97, 116, 117, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 80, 97, 116, 104, 70, 105,
			110, 100, 105, 110, 103, 92, 65, 103, 101, 110,
			116, 92, 71, 101, 116, 65, 103, 101, 110, 116,
			82, 97, 100, 105, 117, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 80, 97, 116, 104, 70,
			105, 110, 100, 105, 110, 103, 92, 65, 103, 101,
			110, 116, 92, 71, 101, 116, 65, 103, 101, 110,
			116, 82, 101, 109, 97, 105, 110, 105, 110, 103,
			68, 105, 115, 116, 97, 110, 99, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 61, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 71, 101, 116, 65, 103,
			101, 110, 116, 83, 116, 101, 101, 114, 105, 110,
			103, 84, 97, 114, 103, 101, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 63, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 65, 103,
			101, 110, 116, 92, 71, 101, 116, 65, 103, 101,
			110, 116, 83, 116, 111, 112, 112, 105, 110, 103,
			68, 105, 115, 116, 97, 110, 99, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 61, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 71, 101, 116, 65, 103,
			101, 110, 116, 85, 112, 100, 97, 116, 101, 80,
			111, 115, 105, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 61, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 65, 103,
			101, 110, 116, 92, 71, 101, 116, 65, 103, 101,
			110, 116, 85, 112, 100, 97, 116, 101, 82, 111,
			116, 97, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 80, 97, 116, 104, 70,
			105, 110, 100, 105, 110, 103, 92, 65, 103, 101,
			110, 116, 92, 71, 101, 116, 65, 103, 101, 110,
			116, 86, 101, 108, 111, 99, 105, 116, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 59,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 80, 97,
			116, 104, 70, 105, 110, 100, 105, 110, 103, 92,
			65, 103, 101, 110, 116, 92, 71, 101, 116, 65,
			103, 101, 110, 116, 87, 97, 108, 107, 97, 98,
			108, 101, 77, 97, 115, 107, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 80, 97, 116, 104, 70,
			105, 110, 100, 105, 110, 103, 92, 65, 103, 101,
			110, 116, 92, 83, 101, 116, 65, 103, 101, 110,
			116, 65, 114, 101, 97, 77, 97, 115, 107, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 80, 97,
			116, 104, 70, 105, 110, 100, 105, 110, 103, 92,
			65, 103, 101, 110, 116, 92, 83, 101, 116, 65,
			103, 101, 110, 116, 65, 117, 116, 111, 66, 114,
			97, 107, 105, 110, 103, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 57, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 80, 97, 116, 104, 70, 105,
			110, 100, 105, 110, 103, 92, 65, 103, 101, 110,
			116, 92, 83, 101, 116, 65, 103, 101, 110, 116,
			65, 117, 116, 111, 82, 101, 112, 97, 116, 104,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			70, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 80,
			97, 116, 104, 70, 105, 110, 100, 105, 110, 103,
			92, 65, 103, 101, 110, 116, 92, 83, 101, 116,
			65, 103, 101, 110, 116, 65, 117, 116, 111, 84,
			114, 97, 118, 101, 114, 115, 101, 79, 102, 102,
			77, 101, 115, 104, 76, 105, 110, 107, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 64, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 83, 101, 116, 65, 103,
			101, 110, 116, 65, 118, 111, 105, 100, 97, 110,
			99, 101, 80, 114, 105, 111, 114, 105, 116, 121,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			58, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 80,
			97, 116, 104, 70, 105, 110, 100, 105, 110, 103,
			92, 65, 103, 101, 110, 116, 92, 83, 101, 116,
			65, 103, 101, 110, 116, 68, 101, 115, 116, 105,
			110, 97, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 70, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 80, 97, 116, 104, 70,
			105, 110, 100, 105, 110, 103, 92, 65, 103, 101,
			110, 116, 92, 83, 101, 116, 65, 103, 101, 110,
			116, 68, 101, 115, 116, 105, 110, 97, 116, 105,
			111, 110, 65, 115, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 53, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 83, 101, 116, 65, 103, 101, 110, 116, 72,
			101, 105, 103, 104, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 80, 97, 116, 104, 70, 105,
			110, 100, 105, 110, 103, 92, 65, 103, 101, 110,
			116, 92, 83, 101, 116, 65, 103, 101, 110, 116,
			73, 115, 83, 116, 111, 112, 112, 101, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 56,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 80, 97,
			116, 104, 70, 105, 110, 100, 105, 110, 103, 92,
			65, 103, 101, 110, 116, 92, 83, 101, 116, 65,
			103, 101, 110, 116, 76, 97, 121, 101, 114, 67,
			111, 115, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 66, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 80, 97, 116, 104, 70, 105, 110, 100,
			105, 110, 103, 92, 65, 103, 101, 110, 116, 92,
			83, 101, 116, 65, 103, 101, 110, 116, 77, 97,
			120, 105, 109, 117, 109, 65, 99, 99, 101, 108,
			101, 114, 97, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 65, 103,
			101, 110, 116, 92, 83, 101, 116, 65, 103, 101,
			110, 116, 77, 97, 120, 105, 109, 117, 109, 65,
			110, 103, 117, 108, 97, 114, 83, 112, 101, 101,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			80, 97, 116, 104, 70, 105, 110, 100, 105, 110,
			103, 92, 65, 103, 101, 110, 116, 92, 83, 101,
			116, 65, 103, 101, 110, 116, 77, 97, 120, 105,
			109, 117, 109, 83, 112, 101, 101, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 68, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 65,
			103, 101, 110, 116, 92, 83, 101, 116, 65, 103,
			101, 110, 116, 79, 98, 115, 116, 97, 99, 108,
			101, 65, 118, 111, 105, 100, 97, 110, 99, 101,
			84, 121, 112, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 51, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 83, 101, 116, 65, 103, 101, 110, 116, 80,
			97, 116, 104, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 53, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 80, 97, 116, 104, 70, 105, 110, 100,
			105, 110, 103, 92, 65, 103, 101, 110, 116, 92,
			83, 101, 116, 65, 103, 101, 110, 116, 82, 97,
			100, 105, 117, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 63, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 83, 101, 116, 65, 103, 101, 110, 116, 83,
			116, 111, 112, 112, 105, 110, 103, 68, 105, 115,
			116, 97, 110, 99, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 80, 97, 116, 104, 70, 105,
			110, 100, 105, 110, 103, 92, 65, 103, 101, 110,
			116, 92, 83, 101, 116, 65, 103, 101, 110, 116,
			85, 112, 100, 97, 116, 101, 80, 111, 115, 105,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 65, 103, 101, 110, 116,
			92, 83, 101, 116, 65, 103, 101, 110, 116, 85,
			112, 100, 97, 116, 101, 82, 111, 116, 97, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 64, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 80, 97, 116, 104, 70, 105, 110, 100,
			105, 110, 103, 92, 65, 103, 101, 110, 116, 92,
			87, 97, 116, 99, 104, 65, 103, 101, 110, 116,
			73, 115, 79, 110, 79, 102, 102, 77, 101, 115,
			104, 76, 105, 110, 107, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 55, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 80, 97, 116, 104, 70, 105,
			110, 100, 105, 110, 103, 92, 78, 97, 118, 77,
			101, 115, 104, 92, 70, 115, 109, 78, 97, 118,
			77, 101, 115, 104, 80, 97, 116, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 61, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 80, 97, 116,
			104, 70, 105, 110, 100, 105, 110, 103, 92, 78,
			97, 118, 77, 101, 115, 104, 92, 78, 97, 118,
			77, 101, 115, 104, 67, 97, 108, 99, 117, 108,
			97, 116, 101, 80, 97, 116, 104, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 79, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 78, 97,
			118, 77, 101, 115, 104, 92, 78, 97, 118, 77,
			101, 115, 104, 67, 97, 108, 99, 117, 108, 97,
			116, 101, 80, 97, 116, 104, 66, 101, 116, 119,
			101, 101, 110, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 63, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 78, 97, 118, 77, 101,
			115, 104, 92, 78, 97, 118, 77, 101, 115, 104,
			70, 105, 110, 100, 67, 108, 111, 115, 101, 115,
			116, 69, 100, 103, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 59, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 80, 97, 116, 104, 70, 105,
			110, 100, 105, 110, 103, 92, 78, 97, 118, 77,
			101, 115, 104, 92, 78, 97, 118, 77, 101, 115,
			104, 71, 101, 116, 65, 114, 101, 97, 67, 111,
			115, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 64, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 80, 97, 116, 104, 70, 105, 110, 100, 105,
			110, 103, 92, 78, 97, 118, 77, 101, 115, 104,
			92, 78, 97, 118, 77, 101, 115, 104, 71, 101,
			116, 76, 97, 121, 101, 114, 70, 114, 111, 109,
			78, 97, 109, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 55, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 78, 97, 118, 77, 101,
			115, 104, 92, 78, 97, 118, 77, 101, 115, 104,
			82, 97, 121, 67, 97, 115, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 62, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 78, 97,
			118, 77, 101, 115, 104, 92, 78, 97, 118, 77,
			101, 115, 104, 83, 97, 109, 112, 108, 101, 80,
			111, 115, 105, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 59, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 80, 97, 116, 104,
			70, 105, 110, 100, 105, 110, 103, 92, 78, 97,
			118, 77, 101, 115, 104, 92, 78, 97, 118, 77,
			101, 115, 104, 83, 101, 116, 65, 114, 101, 97,
			67, 111, 115, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 68, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 79, 102, 102, 77, 101,
			115, 104, 76, 105, 110, 107, 92, 71, 101, 116,
			79, 102, 102, 77, 101, 115, 104, 76, 105, 110,
			107, 65, 99, 116, 105, 118, 97, 116, 101, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			72, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 80,
			97, 116, 104, 70, 105, 110, 100, 105, 110, 103,
			92, 79, 102, 102, 77, 101, 115, 104, 76, 105,
			110, 107, 92, 71, 101, 116, 79, 102, 102, 77,
			101, 115, 104, 76, 105, 110, 107, 66, 105, 68,
			105, 114, 101, 99, 116, 105, 111, 110, 97, 108,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			71, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 80,
			97, 116, 104, 70, 105, 110, 100, 105, 110, 103,
			92, 79, 102, 102, 77, 101, 115, 104, 76, 105,
			110, 107, 92, 71, 101, 116, 79, 102, 102, 77,
			101, 115, 104, 76, 105, 110, 107, 67, 111, 115,
			116, 79, 118, 101, 114, 114, 105, 100, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 67,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 80, 97,
			116, 104, 70, 105, 110, 100, 105, 110, 103, 92,
			79, 102, 102, 77, 101, 115, 104, 76, 105, 110,
			107, 92, 71, 101, 116, 79, 102, 102, 77, 101,
			115, 104, 76, 105, 110, 107, 79, 99, 99, 117,
			112, 105, 101, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 81, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 80, 97, 116, 104, 70, 105, 110,
			100, 105, 110, 103, 92, 79, 102, 102, 77, 101,
			115, 104, 76, 105, 110, 107, 92, 71, 101, 116,
			79, 102, 102, 115, 101, 116, 77, 101, 115, 104,
			76, 105, 110, 107, 65, 117, 116, 111, 85, 112,
			100, 97, 116, 101, 80, 111, 115, 105, 116, 105,
			111, 110, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 74, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 80, 97, 116, 104, 70, 105, 110, 100,
			105, 110, 103, 92, 79, 102, 102, 77, 101, 115,
			104, 76, 105, 110, 107, 92, 71, 101, 116, 79,
			102, 102, 115, 101, 116, 77, 101, 115, 104, 76,
			105, 110, 107, 78, 97, 118, 77, 101, 115, 104,
			76, 97, 121, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 70, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 85, 116, 105, 108, 115, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 77, 111,
			110, 111, 66, 101, 104, 97, 118, 105, 111, 117,
			114, 92, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 69, 118, 101, 110, 116, 115, 66, 114, 105,
			100, 103, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 45, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 85, 116, 105, 108, 115, 92, 67, 111,
			109, 112, 111, 110, 101, 110, 116, 115, 92, 67,
			111, 109, 109, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 70, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 85, 116, 105, 108, 115,
			92, 69, 118, 101, 110, 116, 32, 80, 114, 111,
			112, 101, 114, 116, 105, 101, 115, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 101, 116, 69,
			118, 101, 110, 116, 80, 114, 111, 112, 101, 114,
			116, 105, 101, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 70, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 85, 116, 105, 108, 115, 92, 69,
			118, 101, 110, 116, 32, 80, 114, 111, 112, 101,
			114, 116, 105, 101, 115, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 101, 116, 69, 118, 101,
			110, 116, 80, 114, 111, 112, 101, 114, 116, 105,
			101, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 63, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 85, 116, 105, 108, 115, 92, 69, 120, 116,
			101, 110, 115, 105, 111, 110, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 85, 116, 105,
			108, 115, 95, 101, 120, 116, 101, 110, 115, 105,
			111, 110, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 56, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 85, 116, 105, 108, 115, 92, 73, 110,
			116, 101, 114, 110, 97, 108, 92, 69, 118, 101,
			110, 116, 68, 97, 116, 97, 83, 101, 110, 100,
			101, 114, 80, 114, 111, 120, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 85, 116, 105, 108,
			115, 92, 73, 110, 116, 101, 114, 110, 97, 108,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			85, 116, 105, 108, 115, 68, 111, 116, 78, 101,
			116, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 41, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			85, 116, 105, 108, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 85, 116, 105, 108, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			53, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 85,
			116, 105, 108, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 85, 116, 105, 108, 115, 95,
			99, 111, 110, 118, 101, 114, 115, 105, 111, 110,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 48, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			85, 116, 105, 108, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 85, 116, 105, 108, 115,
			95, 69, 118, 101, 110, 116, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 45, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 85, 116, 105, 108,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 85, 116, 105, 108, 115, 95, 70, 115, 109,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			48, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 32, 85,
			116, 105, 108, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 85, 116, 105, 108, 115, 95,
			70, 115, 109, 86, 97, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 85, 116, 105, 108, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			85, 116, 105, 108, 115, 95, 83, 101, 114, 105,
			97, 108, 105, 122, 97, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 74,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 85, 116,
			105, 108, 115, 92, 80, 114, 111, 112, 101, 114,
			116, 121, 68, 114, 97, 119, 101, 114, 115, 92,
			66, 117, 116, 116, 111, 110, 65, 116, 116, 114,
			105, 98, 117, 116, 101, 92, 66, 117, 116, 116,
			111, 110, 65, 116, 116, 114, 105, 98, 117, 116,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 89, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			85, 116, 105, 108, 115, 92, 80, 114, 111, 112,
			101, 114, 116, 121, 68, 114, 97, 119, 101, 114,
			115, 92, 71, 101, 110, 101, 114, 105, 99, 65,
			116, 116, 114, 105, 98, 117, 116, 101, 115, 92,
			69, 118, 101, 110, 116, 84, 97, 114, 103, 101,
			116, 86, 97, 114, 105, 97, 98, 108, 101, 65,
			116, 116, 114, 105, 98, 117, 116, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 85, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 32, 85, 116, 105,
			108, 115, 92, 80, 114, 111, 112, 101, 114, 116,
			121, 68, 114, 97, 119, 101, 114, 115, 92, 71,
			101, 110, 101, 114, 105, 99, 65, 116, 116, 114,
			105, 98, 117, 116, 101, 115, 92, 69, 120, 112,
			101, 99, 116, 67, 111, 109, 112, 111, 110, 101,
			110, 116, 65, 116, 116, 114, 105, 98, 117, 116,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 95, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			85, 116, 105, 108, 115, 92, 80, 114, 111, 112,
			101, 114, 116, 121, 68, 114, 97, 119, 101, 114,
			115, 92, 71, 101, 110, 101, 114, 105, 99, 65,
			116, 116, 114, 105, 98, 117, 116, 101, 115, 92,
			70, 115, 109, 86, 97, 114, 105, 97, 98, 108,
			101, 84, 97, 114, 103, 101, 116, 86, 97, 114,
			105, 97, 98, 108, 101, 65, 116, 116, 114, 105,
			98, 117, 116, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 85, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 32, 85, 116, 105, 108, 115, 92, 80,
			114, 111, 112, 101, 114, 116, 121, 68, 114, 97,
			119, 101, 114, 115, 92, 71, 101, 110, 101, 114,
			105, 99, 65, 116, 116, 114, 105, 98, 117, 116,
			101, 115, 92, 70, 115, 109, 86, 97, 114, 105,
			97, 98, 108, 101, 84, 121, 112, 101, 65, 116,
			116, 114, 105, 98, 117, 116, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 78, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 85, 116, 105, 108,
			115, 92, 80, 114, 111, 112, 101, 114, 116, 121,
			68, 114, 97, 119, 101, 114, 115, 92, 71, 101,
			110, 101, 114, 105, 99, 65, 116, 116, 114, 105,
			98, 117, 116, 101, 115, 92, 82, 101, 113, 117,
			105, 114, 101, 100, 65, 116, 116, 114, 105, 98,
			117, 116, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 81, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 85, 116, 105, 108, 115, 92, 80, 114,
			111, 112, 101, 114, 116, 121, 68, 114, 97, 119,
			101, 114, 115, 92, 71, 101, 110, 101, 114, 105,
			99, 65, 116, 116, 114, 105, 98, 117, 116, 101,
			115, 92, 83, 104, 111, 119, 79, 112, 116, 105,
			111, 110, 115, 65, 116, 116, 114, 105, 98, 117,
			116, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 76, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			32, 85, 116, 105, 108, 115, 92, 80, 114, 111,
			112, 101, 114, 116, 121, 68, 114, 97, 119, 101,
			114, 115, 92, 77, 97, 105, 110, 67, 97, 109,
			101, 114, 97, 84, 97, 114, 103, 101, 116, 92,
			77, 97, 105, 110, 67, 97, 109, 101, 114, 97,
			84, 97, 114, 103, 101, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 59, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 32, 85, 116, 105, 108, 115,
			92, 80, 114, 111, 112, 101, 114, 116, 121, 68,
			114, 97, 119, 101, 114, 115, 92, 79, 119, 110,
			101, 114, 92, 79, 119, 110, 101, 114, 67, 108,
			97, 115, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 72, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 85, 116, 105, 108, 115, 92, 80, 114,
			111, 112, 101, 114, 116, 121, 68, 114, 97, 119,
			101, 114, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 69, 118, 101, 110, 116, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 69, 118,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 84, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 85, 116, 105, 108, 115, 92, 80, 114,
			111, 112, 101, 114, 116, 121, 68, 114, 97, 119,
			101, 114, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 69, 118, 101, 110, 116, 84, 97,
			114, 103, 101, 116, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 69, 118, 101, 110, 116, 84,
			97, 114, 103, 101, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 80, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 85, 116, 105, 108, 115, 92,
			80, 114, 111, 112, 101, 114, 116, 121, 68, 114,
			97, 119, 101, 114, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 70, 115, 109, 84, 97,
			114, 103, 101, 116, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 70, 115, 109, 84, 97, 114,
			103, 101, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 84, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 32, 85, 116, 105, 108, 115, 92, 80, 114,
			111, 112, 101, 114, 116, 121, 68, 114, 97, 119,
			101, 114, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 70, 115, 109, 86, 97, 114, 105,
			97, 98, 108, 101, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 70, 115, 109, 86, 97, 114,
			105, 97, 98, 108, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 96, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 32, 85, 116, 105, 108, 115, 92,
			80, 114, 111, 112, 101, 114, 116, 121, 68, 114,
			97, 119, 101, 114, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 70, 115, 109, 86, 97,
			114, 105, 97, 98, 108, 101, 84, 97, 114, 103,
			101, 116, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 70, 115, 109, 86, 97, 114, 105, 97,
			98, 108, 101, 84, 97, 114, 103, 101, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 100,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 32, 85, 116,
			105, 108, 115, 92, 80, 114, 111, 112, 101, 114,
			116, 121, 68, 114, 97, 119, 101, 114, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 84,
			105, 109, 101, 108, 105, 110, 101, 69, 118, 101,
			110, 116, 84, 97, 114, 103, 101, 116, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 84, 105,
			109, 101, 108, 105, 110, 101, 69, 118, 101, 110,
			116, 84, 97, 114, 103, 101, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 46, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 32, 85, 116, 105, 108,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			86, 101, 114, 115, 105, 111, 110, 73, 110, 102,
			111, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 74, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 32,
			85, 116, 105, 108, 115, 92, 87, 105, 122, 97,
			114, 100, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 69, 118, 101, 110, 116, 80, 114,
			111, 120, 121, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 69, 118, 101, 110, 116, 80, 114,
			111, 120, 121, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 42, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 99, 116, 105, 111, 110, 72, 101, 108, 112,
			101, 114, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 58, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 101, 86, 97, 114,
			105, 97, 98, 108, 101, 115, 92, 65, 110, 105,
			109, 97, 116, 101, 67, 111, 108, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 101, 86, 97, 114, 105, 97, 98, 108,
			101, 115, 92, 65, 110, 105, 109, 97, 116, 101,
			70, 108, 111, 97, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 101, 86,
			97, 114, 105, 97, 98, 108, 101, 115, 92, 65,
			110, 105, 109, 97, 116, 101, 70, 108, 111, 97,
			116, 86, 50, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 62, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 101, 86, 97, 114,
			105, 97, 98, 108, 101, 115, 92, 65, 110, 105,
			109, 97, 116, 101, 70, 115, 109, 65, 99, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 57, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 101, 86, 97, 114,
			105, 97, 98, 108, 101, 115, 92, 65, 110, 105,
			109, 97, 116, 101, 82, 101, 99, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 60, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 110, 105, 109, 97,
			116, 101, 86, 97, 114, 105, 97, 98, 108, 101,
			115, 92, 65, 110, 105, 109, 97, 116, 101, 86,
			101, 99, 116, 111, 114, 51, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 56, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 110, 105, 109, 97, 116, 101,
			86, 97, 114, 105, 97, 98, 108, 101, 115, 92,
			67, 117, 114, 118, 101, 67, 111, 108, 111, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			56, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 101, 86, 97, 114, 105, 97, 98,
			108, 101, 115, 92, 67, 117, 114, 118, 101, 70,
			108, 111, 97, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 60, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 110, 105, 109, 97, 116, 101, 86, 97,
			114, 105, 97, 98, 108, 101, 115, 92, 67, 117,
			114, 118, 101, 70, 115, 109, 65, 99, 116, 105,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 55, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 101, 86, 97, 114, 105,
			97, 98, 108, 101, 115, 92, 67, 117, 114, 118,
			101, 82, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 101, 86,
			97, 114, 105, 97, 98, 108, 101, 115, 92, 67,
			117, 114, 118, 101, 86, 101, 99, 116, 111, 114,
			51, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 101, 86, 97, 114, 105, 97,
			98, 108, 101, 115, 92, 69, 97, 115, 101, 67,
			111, 108, 111, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 55, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 110, 105, 109, 97, 116, 101, 86, 97,
			114, 105, 97, 98, 108, 101, 115, 92, 69, 97,
			115, 101, 70, 108, 111, 97, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 59, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 110, 105, 109, 97, 116,
			101, 86, 97, 114, 105, 97, 98, 108, 101, 115,
			92, 69, 97, 115, 101, 70, 115, 109, 65, 99,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 54, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 110, 105, 109, 97, 116, 101, 86, 97,
			114, 105, 97, 98, 108, 101, 115, 92, 69, 97,
			115, 101, 82, 101, 99, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 57, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 110, 105, 109, 97, 116, 101,
			86, 97, 114, 105, 97, 98, 108, 101, 115, 92,
			69, 97, 115, 101, 86, 101, 99, 116, 111, 114,
			51, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 105, 111, 110, 92, 65, 100,
			100, 65, 110, 105, 109, 97, 116, 105, 111, 110,
			67, 108, 105, 112, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 110, 105, 109, 97, 116, 105, 111, 110,
			92, 65, 100, 100, 77, 105, 120, 105, 110, 103,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 56,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 105, 111, 110, 92, 65, 110, 105, 109,
			97, 116, 105, 111, 110, 83, 101, 116, 116, 105,
			110, 103, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 58, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 105, 111, 110, 92,
			66, 97, 115, 101, 65, 110, 105, 109, 97, 116,
			105, 111, 110, 65, 99, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 53,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 105, 111, 110, 92, 66, 108, 101, 110,
			100, 65, 110, 105, 109, 97, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			65, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 105, 111, 110, 92, 67, 97, 112,
			116, 117, 114, 101, 80, 111, 115, 101, 65, 115,
			65, 110, 105, 109, 97, 116, 105, 111, 110, 67,
			108, 105, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 54, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 105, 111, 110, 92,
			69, 110, 97, 98, 108, 101, 65, 110, 105, 109,
			97, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 105, 111,
			110, 92, 80, 108, 97, 121, 65, 110, 105, 109,
			97, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 105, 111,
			110, 92, 80, 108, 97, 121, 82, 97, 110, 100,
			111, 109, 65, 110, 105, 109, 97, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 60, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 105, 111, 110, 92, 82, 101,
			109, 111, 118, 101, 77, 105, 120, 105, 110, 103,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 105, 111, 110, 92, 82, 101, 119, 105,
			110, 100, 65, 110, 105, 109, 97, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 105, 111, 110, 92, 83, 101,
			116, 65, 110, 105, 109, 97, 116, 105, 111, 110,
			83, 112, 101, 101, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 55, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 105, 111,
			110, 92, 83, 101, 116, 65, 110, 105, 109, 97,
			116, 105, 111, 110, 84, 105, 109, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 57, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 110, 105, 109, 97,
			116, 105, 111, 110, 92, 83, 101, 116, 65, 110,
			105, 109, 97, 116, 105, 111, 110, 87, 101, 105,
			103, 104, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 52, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 105, 111, 110, 92,
			83, 116, 111, 112, 65, 110, 105, 109, 97, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 55, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 67, 114, 111,
			115, 115, 70, 97, 100, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 66, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 110, 105, 109, 97, 116, 111,
			114, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			73, 110, 116, 101, 114, 114, 117, 112, 116, 77,
			97, 116, 99, 104, 84, 97, 114, 103, 101, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 111, 114, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 77, 97, 116, 99, 104, 84,
			97, 114, 103, 101, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 50, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 65, 110, 105, 109, 97, 116, 111, 114, 80,
			108, 97, 121, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 59, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 83, 116, 97,
			114, 116, 80, 108, 97, 121, 98, 97, 99, 107,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			60, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 111, 114, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 83, 116, 97, 114, 116, 82,
			101, 99, 111, 114, 100, 105, 110, 103, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 110, 105, 109, 97,
			116, 111, 114, 92, 65, 110, 105, 109, 97, 116,
			111, 114, 83, 116, 111, 112, 80, 108, 97, 121,
			98, 97, 99, 107, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 59, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 110, 105, 109, 97, 116, 111, 114, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 83, 116,
			111, 112, 82, 101, 99, 111, 114, 100, 105, 110,
			103, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 77, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 111, 114, 92, 66, 97, 115,
			101, 67, 108, 97, 115, 115, 101, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 70, 114, 97,
			109, 101, 85, 112, 100, 97, 116, 101, 83, 101,
			108, 101, 99, 116, 111, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 110, 105, 109, 97, 116, 111,
			114, 92, 71, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 65, 112, 112, 108, 121, 82, 111,
			111, 116, 77, 111, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 110, 105, 109, 97,
			116, 111, 114, 92, 71, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 66, 111, 100, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 63,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 92, 71, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 66, 111, 110, 101,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			53, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 111, 114, 92, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 66, 111, 111,
			108, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 60, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 111, 114, 92, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 67, 117,
			108, 108, 105, 110, 103, 77, 111, 100, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 92, 71, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 67, 117, 114, 114,
			101, 110, 116, 83, 116, 97, 116, 101, 73, 110,
			102, 111, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 71, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 71, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 67,
			117, 114, 114, 101, 110, 116, 83, 116, 97, 116,
			101, 73, 110, 102, 111, 73, 115, 78, 97, 109,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 70, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 111, 114, 92, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 67, 117,
			114, 114, 101, 110, 116, 83, 116, 97, 116, 101,
			73, 110, 102, 111, 73, 115, 84, 97, 103, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 70,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 92, 71, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 67, 117, 114, 114,
			101, 110, 116, 84, 114, 97, 110, 115, 105, 116,
			105, 111, 110, 73, 110, 102, 111, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 76, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 110, 105, 109, 97, 116,
			111, 114, 92, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 67, 117, 114, 114, 101, 110,
			116, 84, 114, 97, 110, 115, 105, 116, 105, 111,
			110, 73, 110, 102, 111, 73, 115, 78, 97, 109,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 80, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 111, 114, 92, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 67, 117,
			114, 114, 101, 110, 116, 84, 114, 97, 110, 115,
			105, 116, 105, 111, 110, 73, 110, 102, 111, 73,
			115, 85, 115, 101, 114, 78, 97, 109, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 92, 71, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 68, 101, 108, 116,
			97, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 64, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 111, 114, 92, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 70, 101,
			101, 116, 80, 105, 118, 111, 116, 65, 99, 116,
			105, 118, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 54, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 92, 71,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			70, 108, 111, 97, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 62, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 71, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 71, 114, 97, 118, 105, 116, 121, 87,
			101, 105, 103, 104, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 59, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 71, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 72, 117, 109, 97, 110, 83, 99, 97,
			108, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 55, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 71, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 73,
			75, 71, 111, 97, 108, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 71, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 73, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 71, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 73, 115, 72, 117, 109, 97, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 92, 71, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 73, 115, 76, 97,
			121, 101, 114, 73, 110, 84, 114, 97, 110, 115,
			105, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 71, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 73, 115, 77, 97, 116, 99, 104, 105,
			110, 103, 84, 97, 114, 103, 101, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 77, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 110, 105, 109, 97,
			116, 111, 114, 92, 71, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 73, 115, 80, 97, 114,
			97, 109, 101, 116, 101, 114, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 100, 66, 121, 67, 117,
			114, 118, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 59, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 92, 71,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			76, 97, 121, 101, 114, 67, 111, 117, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			58, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 111, 114, 92, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 76, 97, 121,
			101, 114, 78, 97, 109, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 71, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 110, 105, 109, 97, 116, 111,
			114, 92, 71, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 76, 97, 121, 101, 114, 115, 65,
			102, 102, 101, 99, 116, 77, 97, 115, 115, 67,
			101, 110, 116, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 71, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 76, 97, 121, 101, 114, 87, 101, 105,
			103, 104, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 69, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 92, 71,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			76, 101, 102, 116, 70, 111, 111, 116, 66, 111,
			116, 116, 111, 109, 72, 101, 105, 103, 104, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			62, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 111, 114, 92, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 78, 101, 120,
			116, 83, 116, 97, 116, 101, 73, 110, 102, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 111, 114, 92, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 80, 105, 118,
			111, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 62, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 71, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 80,
			108, 97, 121, 66, 97, 99, 107, 83, 112, 101,
			101, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 71, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 80,
			108, 97, 121, 98, 97, 99, 107, 84, 105, 109,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 70, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 111, 114, 92, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 82, 105,
			103, 104, 116, 70, 111, 111, 116, 66, 111, 116,
			116, 111, 109, 72, 101, 105, 103, 104, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 53,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 92, 71, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 82, 111, 111, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 111, 114, 92, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 83, 112, 101,
			101, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 55, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 71, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 84,
			97, 114, 103, 101, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 70, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 78, 97, 118, 77, 101, 115, 104, 65, 103,
			101, 110, 116, 65, 110, 105, 109, 97, 116, 111,
			114, 83, 121, 110, 99, 104, 114, 111, 110, 105,
			122, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 64, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 92, 83,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			65, 112, 112, 108, 121, 82, 111, 111, 116, 77,
			111, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 83, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 66, 111, 100, 121, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 53, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 110, 105, 109, 97, 116, 111,
			114, 92, 83, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 66, 111, 111, 108, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 60, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 110, 105, 109, 97, 116,
			111, 114, 92, 83, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 67, 117, 108, 108, 105, 110,
			103, 77, 111, 100, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 110, 105, 109, 97, 116, 111, 114,
			92, 83, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 70, 101, 101, 116, 80, 105, 118, 111,
			116, 65, 99, 116, 105, 118, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 54, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 110, 105, 109, 97, 116,
			111, 114, 92, 83, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 70, 108, 111, 97, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 92, 83, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 73, 75, 71, 111,
			97, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 52, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 83, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 73,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 71, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 83, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 76,
			97, 121, 101, 114, 115, 65, 102, 102, 101, 99,
			116, 77, 97, 115, 115, 67, 101, 110, 116, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 60, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 111, 114, 92, 83, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 76, 97,
			121, 101, 114, 87, 101, 105, 103, 104, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 110, 105, 109,
			97, 116, 111, 114, 92, 83, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 76, 111, 111, 107,
			65, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 62, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 83, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 80,
			108, 97, 121, 66, 97, 99, 107, 83, 112, 101,
			101, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			110, 105, 109, 97, 116, 111, 114, 92, 83, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 80,
			108, 97, 121, 98, 97, 99, 107, 84, 105, 109,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 54, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 110,
			105, 109, 97, 116, 111, 114, 92, 83, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 83, 112,
			101, 101, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 62, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 92, 83,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			83, 116, 97, 98, 105, 108, 105, 122, 101, 70,
			101, 101, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 55, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 110, 105, 109, 97, 116, 111, 114, 92, 83,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			84, 97, 114, 103, 101, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 56, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 110, 105, 109, 97, 116, 111,
			114, 92, 83, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 84, 114, 105, 103, 103, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			61, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 110, 105,
			109, 97, 116, 111, 114, 92, 83, 121, 110, 99,
			65, 110, 105, 109, 97, 116, 111, 114, 66, 111,
			111, 108, 84, 111, 83, 116, 97, 116, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 56,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 112, 112, 108,
			105, 99, 97, 116, 105, 111, 110, 92, 65, 112,
			112, 108, 105, 99, 97, 116, 105, 111, 110, 81,
			117, 105, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 67, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 112, 112, 108, 105, 99, 97, 116, 105, 111,
			110, 92, 65, 112, 112, 108, 105, 99, 97, 116,
			105, 111, 110, 82, 117, 110, 73, 110, 66, 97,
			99, 107, 103, 114, 111, 117, 110, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 56, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 112, 112, 108, 105,
			99, 97, 116, 105, 111, 110, 92, 71, 101, 116,
			83, 99, 114, 101, 101, 110, 72, 101, 105, 103,
			104, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 55, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			112, 112, 108, 105, 99, 97, 116, 105, 111, 110,
			92, 71, 101, 116, 83, 99, 114, 101, 101, 110,
			87, 105, 100, 116, 104, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 112, 112, 108, 105, 99, 97, 116,
			105, 111, 110, 92, 83, 101, 116, 83, 99, 114,
			101, 101, 110, 82, 101, 115, 111, 108, 117, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 55, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 112, 112, 108, 105, 99, 97, 116, 105, 111,
			110, 92, 84, 97, 107, 101, 83, 99, 114, 101,
			101, 110, 115, 104, 111, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 43, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 92, 65,
			114, 114, 97, 121, 65, 100, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 48, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 114, 114, 97, 121, 92,
			65, 114, 114, 97, 121, 65, 100, 100, 82, 97,
			110, 103, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 45, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 114, 114, 97, 121, 92, 65, 114, 114, 97,
			121, 67, 108, 101, 97, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 47, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 92, 65,
			114, 114, 97, 121, 67, 111, 109, 112, 97, 114,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 48, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 92, 65, 114, 114, 97, 121, 67,
			111, 110, 116, 97, 105, 110, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 48, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 114, 114, 97, 121, 92,
			65, 114, 114, 97, 121, 68, 101, 108, 101, 116,
			101, 65, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 47, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 114, 114, 97, 121, 92, 65, 114, 114, 97,
			121, 70, 111, 114, 69, 97, 99, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 43, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			92, 65, 114, 114, 97, 121, 71, 101, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 47,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 114, 114, 97,
			121, 92, 65, 114, 114, 97, 121, 71, 101, 116,
			78, 101, 120, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 49, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 114, 114, 97, 121, 92, 65, 114, 114,
			97, 121, 71, 101, 116, 82, 97, 110, 100, 111,
			109, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 46, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 114,
			114, 97, 121, 92, 65, 114, 114, 97, 121, 73,
			110, 115, 101, 114, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 46, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 114, 114, 97, 121, 92, 65, 114,
			114, 97, 121, 76, 101, 110, 103, 116, 104, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 46,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 114, 114, 97,
			121, 92, 65, 114, 114, 97, 121, 82, 101, 109,
			111, 118, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 49, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 114, 114, 97, 121, 92, 65, 114, 114, 97,
			121, 82, 101, 109, 111, 118, 101, 65, 108, 108,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			46, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 114, 114,
			97, 121, 92, 65, 114, 114, 97, 121, 82, 101,
			115, 105, 122, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 47, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 114, 114, 97, 121, 92, 65, 114, 114,
			97, 121, 82, 101, 118, 101, 114, 115, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 43,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 65, 114, 114, 97,
			121, 92, 65, 114, 114, 97, 121, 83, 101, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 114, 114,
			97, 121, 92, 65, 114, 114, 97, 121, 83, 104,
			117, 102, 102, 108, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 44, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 114, 114, 97, 121, 92, 65, 114,
			114, 97, 121, 83, 111, 114, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 65, 114, 114, 97, 121, 92,
			65, 114, 114, 97, 121, 84, 114, 97, 110, 115,
			102, 101, 114, 86, 97, 108, 117, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 46, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			92, 70, 115, 109, 65, 114, 114, 97, 121, 83,
			101, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 46, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 65,
			114, 114, 97, 121, 92, 71, 101, 116, 70, 115,
			109, 65, 114, 114, 97, 121, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 50, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 114, 114, 97, 121, 92, 71,
			101, 116, 70, 115, 109, 65, 114, 114, 97, 121,
			73, 116, 101, 109, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 46, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 65, 114, 114, 97, 121, 92, 83, 101, 116,
			70, 115, 109, 65, 114, 114, 97, 121, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 50, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 114, 114, 97, 121,
			92, 83, 101, 116, 70, 115, 109, 65, 114, 114,
			97, 121, 73, 116, 101, 109, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 44, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 65, 117, 100, 105, 111, 92, 65,
			117, 100, 105, 111, 77, 117, 116, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 45, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 117, 100, 105, 111,
			92, 65, 117, 100, 105, 111, 80, 97, 117, 115,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 44, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 117,
			100, 105, 111, 92, 65, 117, 100, 105, 111, 80,
			108, 97, 121, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 44, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 117, 100, 105, 111, 92, 65, 117, 100, 105,
			111, 83, 116, 111, 112, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 50, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 117, 100, 105, 111, 92, 80, 108,
			97, 121, 82, 97, 110, 100, 111, 109, 83, 111,
			117, 110, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 44, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			65, 117, 100, 105, 111, 92, 80, 108, 97, 121,
			83, 111, 117, 110, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 47, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 117, 100, 105, 111, 92, 83, 101,
			116, 65, 117, 100, 105, 111, 67, 108, 105, 112,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 65, 117, 100,
			105, 111, 92, 83, 101, 116, 65, 117, 100, 105,
			111, 76, 111, 111, 112, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 48, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 65, 117, 100, 105, 111, 92, 83, 101,
			116, 65, 117, 100, 105, 111, 80, 105, 116, 99,
			104, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 49, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 65, 117,
			100, 105, 111, 92, 83, 101, 116, 65, 117, 100,
			105, 111, 86, 111, 108, 117, 109, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 48, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 65, 117, 100, 105, 111,
			92, 83, 101, 116, 71, 97, 109, 101, 86, 111,
			108, 117, 109, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 45, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 66, 97, 115, 101, 85, 112, 100, 97, 116,
			101, 65, 99, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 48, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 67, 97, 109, 101, 114, 97,
			92, 67, 97, 109, 101, 114, 97, 70, 97, 100,
			101, 73, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 49, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			67, 97, 109, 101, 114, 97, 92, 67, 97, 109,
			101, 114, 97, 70, 97, 100, 101, 79, 117, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 67, 97, 109,
			101, 114, 97, 92, 67, 108, 97, 109, 112, 79,
			114, 116, 104, 111, 103, 114, 97, 112, 104, 105,
			99, 86, 105, 101, 119, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 47, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 67, 97, 109, 101, 114, 97, 92, 67,
			117, 116, 84, 111, 67, 97, 109, 101, 114, 97,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			49, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 67, 97, 109,
			101, 114, 97, 92, 71, 101, 116, 77, 97, 105,
			110, 67, 97, 109, 101, 114, 97, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 54, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 67, 97, 109, 101, 114, 97,
			92, 83, 99, 114, 101, 101, 110, 84, 111, 87,
			111, 114, 108, 100, 80, 111, 105, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 67, 97, 109, 101,
			114, 97, 92, 83, 101, 116, 66, 97, 99, 107,
			103, 114, 111, 117, 110, 100, 67, 111, 108, 111,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 67, 97,
			109, 101, 114, 97, 92, 83, 101, 116, 67, 97,
			109, 101, 114, 97, 67, 117, 108, 108, 105, 110,
			103, 77, 97, 115, 107, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 48, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 67, 97, 109, 101, 114, 97, 92, 83,
			101, 116, 67, 97, 109, 101, 114, 97, 70, 79,
			86, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 49, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 67, 97,
			109, 101, 114, 97, 92, 83, 101, 116, 77, 97,
			105, 110, 67, 97, 109, 101, 114, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 54, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 67, 97, 109, 101, 114,
			97, 92, 87, 111, 114, 108, 100, 84, 111, 83,
			99, 114, 101, 101, 110, 80, 111, 105, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			60, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 67, 104, 97,
			114, 97, 99, 116, 101, 114, 92, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 67, 104, 101,
			99, 107, 72, 101, 105, 103, 104, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 67, 104, 97, 114, 97,
			99, 116, 101, 114, 92, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 67, 114, 111, 117, 99,
			104, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 67, 104,
			97, 114, 97, 99, 116, 101, 114, 92, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 73, 115,
			71, 114, 111, 117, 110, 100, 101, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 67, 104, 97, 114, 97,
			99, 116, 101, 114, 92, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 74, 117, 109, 112, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 53,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 67, 104, 97, 114,
			97, 99, 116, 101, 114, 92, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 77, 111, 118, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			58, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 67, 104, 97,
			114, 97, 99, 116, 101, 114, 92, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 77, 111, 118,
			101, 73, 110, 65, 105, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 57, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 67, 104, 97, 114, 97, 99, 116,
			101, 114, 92, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 83, 101, 116, 116, 105, 110, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 67, 104,
			97, 114, 97, 99, 116, 101, 114, 92, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 83, 105,
			109, 112, 108, 101, 77, 111, 118, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 66, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 67, 104, 97, 114, 97,
			99, 116, 101, 114, 92, 71, 101, 116, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 67, 111,
			108, 108, 105, 115, 105, 111, 110, 70, 108, 97,
			103, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 59, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 67,
			104, 97, 114, 97, 99, 116, 101, 114, 92, 71,
			101, 116, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 72, 105, 116, 73, 110, 102, 111, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 60,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 67, 104, 97, 114,
			97, 99, 116, 101, 114, 92, 71, 101, 116, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 86,
			101, 108, 111, 99, 105, 116, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 51, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 67, 111, 108, 111, 114, 92,
			67, 111, 108, 111, 114, 73, 110, 116, 101, 114,
			112, 111, 108, 97, 116, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 44, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 67, 111, 108, 111, 114, 92, 67,
			111, 108, 111, 114, 82, 97, 109, 112, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 47, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 67, 111, 108, 111, 114,
			92, 71, 101, 116, 67, 111, 108, 111, 114, 82,
			71, 66, 65, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 52, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			67, 111, 108, 111, 114, 92, 83, 101, 108, 101,
			99, 116, 82, 97, 110, 100, 111, 109, 67, 111,
			108, 111, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 47, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			67, 111, 108, 111, 114, 92, 83, 101, 116, 67,
			111, 108, 111, 114, 82, 71, 66, 65, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 48, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 67, 111, 108, 111, 114,
			92, 83, 101, 116, 67, 111, 108, 111, 114, 86,
			97, 108, 117, 101, 46, 99, 115, 0, 0, 0,
			2, 0, 0, 0, 44, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 67, 111, 109, 112, 111, 110, 101, 110, 116,
			65, 99, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 67, 111, 110, 118, 101, 114, 116,
			92, 67, 111, 110, 118, 101, 114, 116, 66, 111,
			111, 108, 84, 111, 67, 111, 108, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 67, 111, 110, 118,
			101, 114, 116, 92, 67, 111, 110, 118, 101, 114,
			116, 66, 111, 111, 108, 84, 111, 70, 108, 111,
			97, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 53, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 67,
			111, 110, 118, 101, 114, 116, 92, 67, 111, 110,
			118, 101, 114, 116, 66, 111, 111, 108, 84, 111,
			73, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 56, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			67, 111, 110, 118, 101, 114, 116, 92, 67, 111,
			110, 118, 101, 114, 116, 66, 111, 111, 108, 84,
			111, 83, 116, 114, 105, 110, 103, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 56, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 67, 111, 110, 118, 101, 114,
			116, 92, 67, 111, 110, 118, 101, 114, 116, 69,
			110, 117, 109, 84, 111, 83, 116, 114, 105, 110,
			103, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 54, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 67, 111,
			110, 118, 101, 114, 116, 92, 67, 111, 110, 118,
			101, 114, 116, 70, 108, 111, 97, 116, 84, 111,
			73, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 57, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			67, 111, 110, 118, 101, 114, 116, 92, 67, 111,
			110, 118, 101, 114, 116, 70, 108, 111, 97, 116,
			84, 111, 83, 116, 114, 105, 110, 103, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 54, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 67, 111, 110, 118, 101,
			114, 116, 92, 67, 111, 110, 118, 101, 114, 116,
			73, 110, 116, 84, 111, 70, 108, 111, 97, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			55, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 67, 111, 110,
			118, 101, 114, 116, 92, 67, 111, 110, 118, 101,
			114, 116, 73, 110, 116, 84, 111, 83, 116, 114,
			105, 110, 103, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			67, 111, 110, 118, 101, 114, 116, 92, 67, 111,
			110, 118, 101, 114, 116, 77, 97, 116, 101, 114,
			105, 97, 108, 84, 111, 79, 98, 106, 101, 99,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 67, 111,
			110, 118, 101, 114, 116, 92, 67, 111, 110, 118,
			101, 114, 116, 83, 101, 99, 111, 110, 100, 115,
			84, 111, 83, 116, 114, 105, 110, 103, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 67, 111, 110, 118, 101,
			114, 116, 92, 67, 111, 110, 118, 101, 114, 116,
			83, 116, 114, 105, 110, 103, 84, 111, 73, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 60, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 67, 111,
			110, 118, 101, 114, 116, 92, 67, 111, 110, 118,
			101, 114, 116, 86, 101, 99, 116, 111, 114, 50,
			84, 111, 86, 101, 99, 116, 111, 114, 51, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 41,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 68, 101, 98, 117,
			103, 92, 65, 115, 115, 101, 114, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 48, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 68, 101, 98, 117, 103,
			92, 66, 97, 115, 101, 76, 111, 103, 65, 99,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 42, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 68, 101, 98, 117, 103, 92, 67, 111, 109,
			109, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 44, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 68, 101, 98, 117, 103, 92, 68, 101, 98,
			117, 103, 66, 111, 111, 108, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 49, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 68, 101, 98, 117, 103, 92, 68,
			101, 98, 117, 103, 68, 114, 97, 119, 83, 104,
			97, 112, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 44, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			68, 101, 98, 117, 103, 92, 68, 101, 98, 117,
			103, 69, 110, 117, 109, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 45, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 68, 101, 98, 117, 103, 92, 68, 101,
			98, 117, 103, 70, 108, 111, 97, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 51, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 68, 101, 98, 117, 103,
			92, 68, 101, 98, 117, 103, 70, 115, 109, 86,
			97, 114, 105, 97, 98, 108, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 50, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 68, 101, 98, 117, 103, 92,
			68, 101, 98, 117, 103, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 43, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 68, 101, 98, 117, 103, 92, 68, 101,
			98, 117, 103, 73, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 43, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 68, 101, 98, 117, 103, 92, 68,
			101, 98, 117, 103, 76, 111, 103, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 46, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 68, 101, 98, 117, 103, 92,
			68, 101, 98, 117, 103, 79, 98, 106, 101, 99,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 47, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 68, 101,
			98, 117, 103, 92, 68, 101, 98, 117, 103, 86,
			101, 99, 116, 111, 114, 51, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 48, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 68, 101, 98, 117, 103, 92, 68,
			114, 97, 119, 68, 101, 98, 117, 103, 76, 105,
			110, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 47, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 68,
			101, 98, 117, 103, 92, 68, 114, 97, 119, 68,
			101, 98, 117, 103, 82, 97, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 49, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 68, 101, 98, 117, 103, 92,
			68, 114, 97, 119, 83, 116, 97, 116, 101, 76,
			97, 98, 101, 108, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 58, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 68, 101, 118, 105, 99, 101, 92, 68, 101,
			118, 105, 99, 101, 79, 114, 105, 101, 110, 116,
			97, 116, 105, 111, 110, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 68, 101, 118,
			105, 99, 101, 92, 68, 101, 118, 105, 99, 101,
			83, 104, 97, 107, 101, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			49, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 68, 101, 118,
			105, 99, 101, 92, 68, 101, 118, 105, 99, 101,
			86, 105, 98, 114, 97, 116, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 57, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 68, 101, 118, 105, 99, 101,
			92, 71, 101, 116, 68, 101, 118, 105, 99, 101,
			65, 99, 99, 101, 108, 101, 114, 97, 116, 105,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 68,
			101, 118, 105, 99, 101, 92, 71, 101, 116, 68,
			101, 118, 105, 99, 101, 82, 111, 108, 108, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 53,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 68, 101, 118, 105,
			99, 101, 92, 71, 101, 116, 73, 80, 104, 111,
			110, 101, 83, 101, 116, 116, 105, 110, 103, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			51, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 68, 101, 118,
			105, 99, 101, 92, 71, 101, 116, 76, 111, 99,
			97, 116, 105, 111, 110, 73, 110, 102, 111, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 49,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 68, 101, 118, 105,
			99, 101, 92, 71, 101, 116, 84, 111, 117, 99,
			104, 67, 111, 117, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 48, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 68, 101, 118, 105, 99, 101, 92,
			71, 101, 116, 84, 111, 117, 99, 104, 73, 110,
			102, 111, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 56, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 68,
			101, 118, 105, 99, 101, 92, 80, 114, 111, 106,
			101, 99, 116, 76, 111, 99, 97, 116, 105, 111,
			110, 84, 111, 77, 97, 112, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 63, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 68, 101, 118, 105, 99, 101, 92,
			83, 116, 97, 114, 116, 76, 111, 99, 97, 116,
			105, 111, 110, 83, 101, 114, 118, 105, 99, 101,
			85, 112, 100, 97, 116, 101, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 62, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 68, 101, 118, 105, 99, 101,
			92, 83, 116, 111, 112, 76, 111, 99, 97, 116,
			105, 111, 110, 83, 101, 114, 118, 105, 99, 101,
			85, 112, 100, 97, 116, 101, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 68, 101, 118, 105, 99, 101,
			92, 83, 119, 105, 112, 101, 71, 101, 115, 116,
			117, 114, 101, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 46, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 68, 101, 118, 105, 99,
			101, 92, 84, 111, 117, 99, 104, 69, 118, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 68,
			101, 118, 105, 99, 101, 92, 84, 111, 117, 99,
			104, 71, 85, 73, 69, 118, 101, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 68, 101, 118, 105,
			99, 101, 92, 84, 111, 117, 99, 104, 79, 98,
			106, 101, 99, 116, 69, 118, 101, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 43,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 69, 97, 115, 105,
			110, 103, 70, 117, 110, 99, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			42, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 69, 102, 102,
			101, 99, 116, 115, 92, 66, 108, 105, 110, 107,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			44, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 69, 102, 102,
			101, 99, 116, 115, 92, 70, 108, 105, 99, 107,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 55, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 69,
			102, 102, 101, 99, 116, 115, 92, 80, 97, 114,
			116, 105, 99, 108, 101, 83, 121, 115, 116, 101,
			109, 80, 108, 97, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 46, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 69, 110, 117, 109, 92, 83, 101, 116,
			69, 110, 117, 109, 86, 97, 108, 117, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 92, 65, 99, 116,
			105, 118, 97, 116, 101, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 92, 65, 99, 116, 105, 118, 97, 116,
			101, 83, 111, 108, 111, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 92, 65, 100, 100, 67, 111, 109, 112,
			111, 110, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 57, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 92, 67, 114, 101, 97, 116, 101, 69,
			109, 112, 116, 121, 79, 98, 106, 101, 99, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			59, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 92, 67, 114,
			101, 97, 116, 101, 78, 101, 119, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 52, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 92, 67, 114, 101, 97, 116,
			101, 79, 98, 106, 101, 99, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 54, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 92, 68, 101, 97, 99, 116,
			105, 118, 97, 116, 101, 83, 101, 108, 102, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 56,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 92, 68, 101, 115,
			116, 114, 111, 121, 67, 111, 109, 112, 111, 110,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 53, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			92, 68, 101, 115, 116, 114, 111, 121, 79, 98,
			106, 101, 99, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 54, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 92, 68, 101, 115, 116, 114, 111, 121, 79,
			98, 106, 101, 99, 116, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 51, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 92, 68, 101, 115, 116, 114, 111,
			121, 83, 101, 108, 102, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 54, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 92, 68, 101, 116, 97, 99, 104, 67,
			104, 105, 108, 100, 114, 101, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 49, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 92, 70, 105, 110, 100, 67,
			104, 105, 108, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 51, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 92, 70, 105, 110, 100, 67, 108, 111, 115,
			101, 115, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 54, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			92, 70, 105, 110, 100, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 48, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 92, 71, 101, 116, 67, 104, 105, 108,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 53, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 92, 71,
			101, 116, 67, 104, 105, 108, 100, 67, 111, 117,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 51, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 92,
			71, 101, 116, 67, 104, 105, 108, 100, 78, 117,
			109, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 51, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 92, 71,
			101, 116, 68, 105, 115, 116, 97, 110, 99, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 92, 71, 101,
			116, 68, 105, 115, 116, 97, 110, 99, 101, 88,
			89, 90, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 48, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 92,
			71, 101, 116, 76, 97, 121, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 47, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 92, 71, 101, 116, 78,
			97, 109, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 52, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			92, 71, 101, 116, 78, 101, 120, 116, 67, 104,
			105, 108, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 48, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			92, 71, 101, 116, 79, 119, 110, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 49,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 92, 71, 101, 116,
			80, 97, 114, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 54, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 92, 71, 101, 116, 82, 97, 110,
			100, 111, 109, 67, 104, 105, 108, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 92, 71, 101, 116, 82,
			97, 110, 100, 111, 109, 79, 98, 106, 101, 99,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 47, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 92, 71,
			101, 116, 82, 111, 111, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 46, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 92, 71, 101, 116, 84, 97, 103,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			51, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 92, 71, 101,
			116, 84, 97, 103, 67, 111, 117, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 92, 71, 101, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 92, 72, 97, 115,
			67, 111, 109, 112, 111, 110, 101, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 92, 83, 101, 108,
			101, 99, 116, 82, 97, 110, 100, 111, 109, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 53,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 92, 83, 101, 116,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			48, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 92, 83, 101,
			116, 76, 97, 121, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 47, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 92, 83, 101, 116, 78, 97, 109,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 49, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 92, 83,
			101, 116, 80, 97, 114, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 46, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 92, 83, 101, 116, 84,
			97, 103, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 57, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 92,
			83, 101, 116, 84, 97, 103, 115, 79, 110, 67,
			104, 105, 108, 100, 114, 101, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 52, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 85, 73, 92, 68, 114,
			97, 119, 70, 117, 108, 108, 115, 99, 114, 101,
			101, 110, 67, 111, 108, 111, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 44, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 85, 73, 92, 68, 114,
			97, 119, 84, 101, 120, 116, 117, 114, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 42,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 92,
			69, 110, 97, 98, 108, 101, 71, 85, 73, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 42,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 92,
			71, 85, 73, 65, 99, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 39,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 92,
			71, 85, 73, 66, 111, 120, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 42, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 85, 73, 92, 71, 85, 73,
			66, 117, 116, 116, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 49, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 85, 73, 92, 71, 85, 73,
			67, 111, 110, 116, 101, 110, 116, 65, 99, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 50, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 85, 73, 92, 71, 85, 73, 69, 108, 101,
			109, 101, 110, 116, 72, 105, 116, 84, 101, 115,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 92, 71, 85, 73, 72, 111, 114, 105, 122,
			111, 110, 116, 97, 108, 83, 108, 105, 100, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 41, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 92, 71, 85, 73, 76, 97, 98, 101, 108,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			43, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 85, 73,
			92, 71, 85, 73, 84, 111, 111, 108, 116, 105,
			112, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 50, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 92, 71, 85, 73, 86, 101, 114, 116, 105,
			99, 97, 108, 83, 108, 105, 100, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 47,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 92,
			82, 101, 115, 101, 116, 71, 85, 73, 77, 97,
			116, 114, 105, 120, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 42, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 92, 82, 111, 116, 97, 116,
			101, 71, 85, 73, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 41, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 92, 83, 99, 97, 108, 101,
			71, 85, 73, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 44, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 85, 73, 92, 83, 101, 116, 71, 85, 73,
			65, 108, 112, 104, 97, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 54, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 85, 73, 92, 83, 101, 116, 71,
			85, 73, 66, 97, 99, 107, 103, 114, 111, 117,
			110, 100, 67, 111, 108, 111, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 44, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 85, 73, 92, 83, 101,
			116, 71, 85, 73, 67, 111, 108, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 51,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 92,
			83, 101, 116, 71, 85, 73, 67, 111, 110, 116,
			101, 110, 116, 67, 111, 108, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 44, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 85, 73, 92, 83,
			101, 116, 71, 85, 73, 68, 101, 112, 116, 104,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			43, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 85, 73,
			92, 83, 101, 116, 71, 85, 73, 83, 107, 105,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 47, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 92, 83, 101, 116, 77, 111, 117, 115, 101,
			67, 117, 114, 115, 111, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 50, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 85, 73, 69, 108, 101, 109,
			101, 110, 116, 92, 83, 101, 116, 71, 85, 73,
			84, 101, 120, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 53, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 69, 108, 101, 109, 101, 110,
			116, 92, 83, 101, 116, 71, 85, 73, 84, 101,
			120, 116, 117, 114, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 71, 85, 73, 69, 108, 101, 109, 101,
			110, 116, 92, 83, 101, 116, 71, 85, 73, 84,
			101, 120, 116, 117, 114, 101, 65, 108, 112, 104,
			97, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 58, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 69, 108, 101, 109, 101, 110, 116, 92, 83,
			101, 116, 71, 85, 73, 84, 101, 120, 116, 117,
			114, 101, 67, 111, 108, 111, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 54, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 92, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 65, 99, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 57,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 76,
			97, 121, 111, 117, 116, 92, 71, 85, 73, 76,
			97, 121, 111, 117, 116, 66, 101, 103, 105, 110,
			65, 114, 101, 97, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 69, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			66, 101, 103, 105, 110, 65, 114, 101, 97, 70,
			111, 108, 108, 111, 119, 79, 98, 106, 101, 99,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 66, 101, 103,
			105, 110, 67, 101, 110, 116, 101, 114, 101, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			63, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 66, 101, 103, 105,
			110, 72, 111, 114, 105, 122, 111, 110, 116, 97,
			108, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 63, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 66, 101, 103,
			105, 110, 83, 99, 114, 111, 108, 108, 86, 105,
			101, 119, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 92, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 66, 101,
			103, 105, 110, 86, 101, 114, 116, 105, 99, 97,
			108, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 51, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 66, 111, 120,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 66, 117, 116, 116,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 68, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 92, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 67, 111,
			110, 102, 105, 114, 109, 80, 97, 115, 115, 119,
			111, 114, 100, 70, 105, 101, 108, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 92, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 69, 109, 97, 105, 108, 70,
			105, 101, 108, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 55, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			69, 110, 100, 65, 114, 101, 97, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 59, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 92, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 69, 110, 100, 67, 101, 110, 116,
			101, 114, 101, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			69, 110, 100, 72, 111, 114, 105, 122, 111, 110,
			116, 97, 108, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 61, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			71, 85, 73, 76, 97, 121, 111, 117, 116, 92,
			71, 85, 73, 76, 97, 121, 111, 117, 116, 69,
			110, 100, 83, 99, 114, 111, 108, 108, 86, 105,
			101, 119, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 59, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 92, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 69, 110,
			100, 86, 101, 114, 116, 105, 99, 97, 108, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 61,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 76,
			97, 121, 111, 117, 116, 92, 71, 85, 73, 76,
			97, 121, 111, 117, 116, 70, 108, 101, 120, 105,
			98, 108, 101, 83, 112, 97, 99, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 92, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 70, 108, 111, 97, 116, 70,
			105, 101, 108, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 58, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			70, 108, 111, 97, 116, 76, 97, 98, 101, 108,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			64, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 72, 111, 114, 105,
			122, 111, 110, 116, 97, 108, 83, 108, 105, 100,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 56, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 92, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 73, 110,
			116, 70, 105, 101, 108, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 56, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 71, 85, 73, 76, 97, 121, 111,
			117, 116, 92, 71, 85, 73, 76, 97, 121, 111,
			117, 116, 73, 110, 116, 76, 97, 98, 101, 108,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			53, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 76, 97, 98, 101,
			108, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 80, 97, 115,
			115, 119, 111, 114, 100, 70, 105, 101, 108, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			60, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 92, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 82, 101, 112, 101,
			97, 116, 66, 117, 116, 116, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 92, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 83, 112, 97, 99, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 57,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 76,
			97, 121, 111, 117, 116, 92, 71, 85, 73, 76,
			97, 121, 111, 117, 116, 84, 101, 120, 116, 70,
			105, 101, 108, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			84, 101, 120, 116, 76, 97, 98, 101, 108, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 71, 85, 73, 76,
			97, 121, 111, 117, 116, 92, 71, 85, 73, 76,
			97, 121, 111, 117, 116, 84, 111, 103, 103, 108,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 92, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 84, 111, 111,
			108, 98, 97, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 62, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			86, 101, 114, 116, 105, 99, 97, 108, 83, 108,
			105, 100, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 51, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			92, 85, 115, 101, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 41, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			73, 110, 112, 117, 116, 92, 65, 110, 121, 75,
			101, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 42, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 73,
			110, 112, 117, 116, 92, 71, 101, 116, 65, 120,
			105, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 48, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 73,
			110, 112, 117, 116, 92, 71, 101, 116, 65, 120,
			105, 115, 86, 101, 99, 116, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 44, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 73, 110, 112, 117, 116,
			92, 71, 101, 116, 66, 117, 116, 116, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			48, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 73, 110, 112,
			117, 116, 92, 71, 101, 116, 66, 117, 116, 116,
			111, 110, 68, 111, 119, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 46, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 73, 110, 112, 117, 116, 92, 71,
			101, 116, 66, 117, 116, 116, 111, 110, 85, 112,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			41, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 73, 110, 112,
			117, 116, 92, 71, 101, 116, 75, 101, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 45,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 73, 110, 112, 117,
			116, 92, 71, 101, 116, 75, 101, 121, 68, 111,
			119, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 43, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 73,
			110, 112, 117, 116, 92, 71, 101, 116, 75, 101,
			121, 85, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 49, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			73, 110, 112, 117, 116, 92, 71, 101, 116, 77,
			111, 117, 115, 101, 66, 117, 116, 116, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			53, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 73, 110, 112,
			117, 116, 92, 71, 101, 116, 77, 111, 117, 115,
			101, 66, 117, 116, 116, 111, 110, 68, 111, 119,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 51, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 73, 110,
			112, 117, 116, 92, 71, 101, 116, 77, 111, 117,
			115, 101, 66, 117, 116, 116, 111, 110, 85, 112,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			44, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 73, 110, 112,
			117, 116, 92, 71, 101, 116, 77, 111, 117, 115,
			101, 88, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 44, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 73,
			110, 112, 117, 116, 92, 71, 101, 116, 77, 111,
			117, 115, 101, 89, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 44, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 73, 110, 112, 117, 116, 92, 77, 111, 117,
			115, 101, 76, 111, 111, 107, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 45, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 73, 110, 112, 117, 116, 92, 77,
			111, 117, 115, 101, 76, 111, 111, 107, 50, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 44,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 73, 110, 112, 117,
			116, 92, 77, 111, 117, 115, 101, 80, 105, 99,
			107, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 49, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 73, 110,
			112, 117, 116, 92, 77, 111, 117, 115, 101, 80,
			105, 99, 107, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 49, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 73, 110, 112, 117, 116,
			92, 82, 101, 115, 101, 116, 73, 110, 112, 117,
			116, 65, 120, 101, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 45, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 73, 110, 112, 117, 116, 92, 83, 99,
			114, 101, 101, 110, 80, 105, 99, 107, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 61, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 73, 110, 112, 117, 116,
			92, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			73, 110, 112, 117, 116, 84, 111, 87, 111, 114,
			108, 100, 83, 112, 97, 99, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 45, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 73, 110, 112, 117, 116, 92,
			87, 97, 105, 116, 65, 110, 121, 75, 101, 121,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 76, 101, 118,
			101, 108, 92, 68, 111, 110, 116, 68, 101, 115,
			116, 114, 111, 121, 79, 110, 76, 111, 97, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			44, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 76, 101, 118,
			101, 108, 92, 76, 111, 97, 100, 76, 101, 118,
			101, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 47, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			101, 118, 101, 108, 92, 76, 111, 97, 100, 76,
			101, 118, 101, 108, 78, 117, 109, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 47, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 76, 101, 118, 101, 108, 92,
			82, 101, 115, 116, 97, 114, 116, 76, 101, 118,
			101, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			105, 103, 104, 116, 115, 92, 83, 101, 116, 76,
			105, 103, 104, 116, 67, 111, 108, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 50,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 76, 105, 103, 104,
			116, 115, 92, 83, 101, 116, 76, 105, 103, 104,
			116, 67, 111, 111, 107, 105, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 49, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 76, 105, 103, 104, 116, 115,
			92, 83, 101, 116, 76, 105, 103, 104, 116, 70,
			108, 97, 114, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 53, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 105, 103, 104, 116, 115, 92, 83, 101,
			116, 76, 105, 103, 104, 116, 73, 110, 116, 101,
			110, 115, 105, 116, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 49, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 76, 105, 103, 104, 116, 115, 92, 83,
			101, 116, 76, 105, 103, 104, 116, 82, 97, 110,
			103, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 53, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			105, 103, 104, 116, 115, 92, 83, 101, 116, 76,
			105, 103, 104, 116, 83, 112, 111, 116, 65, 110,
			103, 108, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 48, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			76, 105, 103, 104, 116, 115, 92, 83, 101, 116,
			76, 105, 103, 104, 116, 84, 121, 112, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 53,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 76, 105, 103, 104,
			116, 115, 92, 83, 101, 116, 83, 104, 97, 100,
			111, 119, 83, 116, 114, 101, 110, 103, 116, 104,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			46, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 76, 111, 103,
			105, 99, 92, 66, 111, 111, 108, 65, 108, 108,
			84, 114, 117, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 46, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 111, 103, 105, 99, 92, 66, 111, 111,
			108, 65, 110, 121, 84, 114, 117, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 46, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 76, 111, 103, 105, 99,
			92, 66, 111, 111, 108, 67, 104, 97, 110, 103,
			101, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 47, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			111, 103, 105, 99, 92, 66, 111, 111, 108, 78,
			111, 110, 101, 84, 114, 117, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 47, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 76, 111, 103, 105, 99, 92,
			66, 111, 111, 108, 79, 112, 101, 114, 97, 116,
			111, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 43, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			111, 103, 105, 99, 92, 66, 111, 111, 108, 84,
			101, 115, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 47, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			76, 111, 103, 105, 99, 92, 67, 111, 108, 111,
			114, 67, 111, 109, 112, 97, 114, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 46, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 76, 111, 103, 105, 99,
			92, 69, 110, 117, 109, 67, 111, 109, 112, 97,
			114, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 45, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			111, 103, 105, 99, 92, 69, 110, 117, 109, 83,
			119, 105, 116, 99, 104, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 47, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 76, 111, 103, 105, 99, 92, 70, 108,
			111, 97, 116, 67, 104, 97, 110, 103, 101, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 76, 111, 103,
			105, 99, 92, 70, 108, 111, 97, 116, 67, 111,
			109, 112, 97, 114, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 48, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 76, 111, 103, 105, 99, 92, 70, 108,
			111, 97, 116, 83, 105, 103, 110, 84, 101, 115,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 46, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 76, 111,
			103, 105, 99, 92, 70, 108, 111, 97, 116, 83,
			119, 105, 116, 99, 104, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 49, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 76, 111, 103, 105, 99, 92, 70, 115,
			109, 72, 97, 115, 86, 97, 114, 105, 97, 98,
			108, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			111, 103, 105, 99, 92, 70, 115, 109, 83, 116,
			97, 116, 101, 83, 119, 105, 116, 99, 104, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 47,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 76, 111, 103, 105,
			99, 92, 70, 115, 109, 83, 116, 97, 116, 101,
			84, 101, 115, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 52, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 111, 103, 105, 99, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 67, 104, 97,
			110, 103, 101, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 52, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 111, 103, 105, 99, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 67, 111, 109,
			112, 97, 114, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 55, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 111, 103, 105, 99, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 67, 111, 109,
			112, 97, 114, 101, 84, 97, 103, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 56, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 76, 111, 103, 105, 99, 92,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			72, 97, 115, 67, 104, 105, 108, 100, 114, 101,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 54, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 76, 111,
			103, 105, 99, 92, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 73, 115, 67, 104, 105, 108,
			100, 79, 102, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 51, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			76, 111, 103, 105, 99, 92, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 73, 115, 78, 117,
			108, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			111, 103, 105, 99, 92, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 73, 115, 86, 105, 115,
			105, 98, 108, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 62, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 111, 103, 105, 99, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 73, 115, 86,
			105, 115, 105, 98, 108, 101, 84, 111, 67, 97,
			109, 101, 114, 97, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 54, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 111, 103, 105, 99, 92, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 84, 97, 103,
			83, 119, 105, 116, 99, 104, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 45, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 76, 111, 103, 105, 99, 92, 73,
			110, 116, 67, 104, 97, 110, 103, 101, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 45,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 76, 111, 103, 105,
			99, 92, 73, 110, 116, 67, 111, 109, 112, 97,
			114, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 44, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 76,
			111, 103, 105, 99, 92, 73, 110, 116, 83, 119,
			105, 116, 99, 104, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 48, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 111, 103, 105, 99, 92, 79, 98, 106,
			101, 99, 116, 67, 111, 109, 112, 97, 114, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			46, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 76, 111, 103,
			105, 99, 92, 82, 101, 99, 116, 67, 111, 109,
			112, 97, 114, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 48, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 76, 111, 103, 105, 99, 92, 83, 116, 114,
			105, 110, 103, 67, 104, 97, 110, 103, 101, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			48, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 76, 111, 103,
			105, 99, 92, 83, 116, 114, 105, 110, 103, 67,
			111, 109, 112, 97, 114, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 49, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 76, 111, 103, 105, 99, 92, 83,
			116, 114, 105, 110, 103, 67, 111, 110, 116, 97,
			105, 110, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 47, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			76, 111, 103, 105, 99, 92, 83, 116, 114, 105,
			110, 103, 83, 119, 105, 116, 99, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 49, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 76, 111, 103, 105, 99,
			92, 86, 101, 99, 116, 111, 114, 50, 67, 111,
			109, 112, 97, 114, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 49, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 76, 111, 103, 105, 99, 92, 86, 101,
			99, 116, 111, 114, 51, 67, 111, 109, 112, 97,
			114, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 77,
			97, 116, 101, 114, 105, 97, 108, 92, 71, 101,
			116, 77, 97, 116, 101, 114, 105, 97, 108, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 56,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 77, 97, 116, 101,
			114, 105, 97, 108, 92, 71, 101, 116, 77, 97,
			116, 101, 114, 105, 97, 108, 84, 101, 120, 116,
			117, 114, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 49, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 97, 116, 101, 114, 105, 97, 108, 92, 83,
			101, 116, 77, 97, 116, 101, 114, 105, 97, 108,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 77, 97, 116,
			101, 114, 105, 97, 108, 92, 83, 101, 116, 77,
			97, 116, 101, 114, 105, 97, 108, 67, 111, 108,
			111, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 77,
			97, 116, 101, 114, 105, 97, 108, 92, 83, 101,
			116, 77, 97, 116, 101, 114, 105, 97, 108, 70,
			108, 111, 97, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 77, 97, 116, 101, 114, 105, 97, 108, 92,
			83, 101, 116, 77, 97, 116, 101, 114, 105, 97,
			108, 77, 111, 118, 105, 101, 84, 101, 120, 116,
			117, 114, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 56, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 97, 116, 101, 114, 105, 97, 108, 92, 83,
			101, 116, 77, 97, 116, 101, 114, 105, 97, 108,
			84, 101, 120, 116, 117, 114, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 54, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 77, 97, 116, 101, 114, 105,
			97, 108, 92, 83, 101, 116, 77, 97, 116, 101,
			114, 105, 97, 108, 86, 97, 108, 117, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 77, 97, 116, 101,
			114, 105, 97, 108, 92, 83, 101, 116, 82, 97,
			110, 100, 111, 109, 77, 97, 116, 101, 114, 105,
			97, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 77,
			97, 116, 101, 114, 105, 97, 108, 92, 83, 101,
			116, 84, 101, 120, 116, 117, 114, 101, 79, 102,
			102, 115, 101, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 53, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 77, 97, 116, 101, 114, 105, 97, 108, 92,
			83, 101, 116, 84, 101, 120, 116, 117, 114, 101,
			83, 99, 97, 108, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 77, 97, 116, 101, 114, 105, 97, 108,
			92, 83, 101, 116, 84, 101, 120, 116, 117, 114,
			101, 86, 97, 108, 117, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 51, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 77, 97, 116, 101, 114, 105, 97,
			108, 92, 83, 101, 116, 86, 105, 115, 105, 98,
			105, 108, 105, 116, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 42, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 77, 97, 116, 104, 92, 66, 111, 111,
			108, 70, 108, 105, 112, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 42, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 77, 97, 116, 104, 92, 70, 108, 111,
			97, 116, 65, 98, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 42, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 77, 97, 116, 104, 92, 70, 108, 111,
			97, 116, 65, 100, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 50, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 77, 97, 116, 104, 92, 70, 108, 111,
			97, 116, 65, 100, 100, 77, 117, 108, 116, 105,
			112, 108, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 44, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 97, 116, 104, 92, 70, 108, 111, 97, 116,
			67, 108, 97, 109, 112, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 49, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 77, 97, 116, 104, 92, 70, 108, 111,
			97, 116, 68, 101, 108, 116, 97, 65, 110, 103,
			108, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 45, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 77,
			97, 116, 104, 92, 70, 108, 111, 97, 116, 68,
			105, 118, 105, 100, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 50, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 77, 97, 116, 104, 92, 70, 108, 111,
			97, 116, 73, 110, 116, 101, 114, 112, 111, 108,
			97, 116, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 47, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 97, 116, 104, 92, 70, 108, 111, 97, 116,
			77, 117, 108, 116, 105, 112, 108, 121, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 47, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 77, 97, 116, 104, 92,
			70, 108, 111, 97, 116, 79, 112, 101, 114, 97,
			116, 111, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 47, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 97, 116, 104, 92, 70, 108, 111, 97, 116,
			83, 117, 98, 116, 114, 97, 99, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 43, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 77, 97, 116, 104, 92,
			70, 108, 111, 97, 116, 87, 114, 97, 112, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 40,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 77, 97, 116, 104,
			92, 73, 110, 116, 65, 100, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 42, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 77, 97, 116, 104, 92, 73,
			110, 116, 67, 108, 97, 109, 112, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 45, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 77, 97, 116, 104, 92, 73,
			110, 116, 79, 112, 101, 114, 97, 116, 111, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			45, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 77, 97, 116,
			104, 92, 73, 110, 116, 83, 117, 98, 116, 114,
			97, 99, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 41, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 97, 116, 104, 92, 73, 110, 116, 87, 114,
			97, 112, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 44, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 77,
			97, 116, 104, 92, 82, 97, 110, 100, 111, 109,
			66, 111, 111, 108, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 45, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 77, 97, 116, 104, 92, 82, 97, 110, 100,
			111, 109, 70, 108, 111, 97, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 43, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 77, 97, 116, 104, 92, 82,
			97, 110, 100, 111, 109, 73, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 45, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 77, 97, 116, 104, 92,
			83, 97, 109, 112, 108, 101, 67, 117, 114, 118,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 51, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 77, 97,
			116, 104, 92, 83, 101, 108, 101, 99, 116, 82,
			97, 110, 100, 111, 109, 70, 108, 111, 97, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			49, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 77, 97, 116,
			104, 92, 83, 101, 108, 101, 99, 116, 82, 97,
			110, 100, 111, 109, 73, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 46, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 77, 97, 116, 104, 92, 83,
			101, 116, 66, 111, 111, 108, 86, 97, 108, 117,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 47, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 77, 97,
			116, 104, 92, 83, 101, 116, 70, 108, 111, 97,
			116, 86, 97, 108, 117, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 49, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 77, 97, 116, 104, 92, 83, 101,
			116, 73, 110, 116, 70, 114, 111, 109, 70, 108,
			111, 97, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 45, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 97, 116, 104, 92, 83, 101, 116, 73, 110,
			116, 86, 97, 108, 117, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 52, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 77, 97, 116, 104, 92, 86, 101,
			99, 116, 111, 114, 50, 82, 97, 110, 100, 111,
			109, 86, 97, 108, 117, 101, 46, 99, 115, 0,
			0, 0, 2, 0, 0, 0, 65, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 77, 97, 116, 104, 69, 120, 112,
			114, 101, 115, 115, 105, 111, 110, 92, 77, 97,
			116, 104, 111, 115, 92, 77, 97, 116, 104, 69,
			120, 112, 114, 101, 115, 115, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 61,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 77, 97, 116, 104,
			69, 120, 112, 114, 101, 115, 115, 105, 111, 110,
			92, 77, 97, 116, 104, 111, 115, 92, 77, 97,
			116, 104, 80, 97, 114, 115, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 48, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 77, 101, 115, 104, 92,
			71, 101, 116, 86, 101, 114, 116, 101, 120, 67,
			111, 117, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 51, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 77, 101, 115, 104, 92, 71, 101, 116, 86,
			101, 114, 116, 101, 120, 80, 111, 115, 105, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			77, 111, 118, 105, 101, 92, 77, 111, 118, 105,
			101, 84, 101, 120, 116, 117, 114, 101, 65, 117,
			100, 105, 111, 83, 101, 116, 116, 105, 110, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 77, 111,
			118, 105, 101, 92, 80, 97, 117, 115, 101, 77,
			111, 118, 105, 101, 84, 101, 120, 116, 117, 114,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 51, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 77, 111,
			118, 105, 101, 92, 80, 108, 97, 121, 77, 111,
			118, 105, 101, 84, 101, 120, 116, 117, 114, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			51, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 77, 111, 118,
			105, 101, 92, 83, 116, 111, 112, 77, 111, 118,
			105, 101, 84, 101, 120, 116, 117, 114, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 80, 104, 121, 115,
			105, 99, 115, 92, 65, 100, 100, 69, 120, 112,
			108, 111, 115, 105, 111, 110, 70, 111, 114, 99,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 45, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 92, 65, 100, 100, 70,
			111, 114, 99, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 46, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 104, 121, 115, 105, 99, 115, 92, 65,
			100, 100, 84, 111, 114, 113, 117, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 51, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 80, 104, 121, 115, 105,
			99, 115, 92, 67, 111, 108, 108, 105, 115, 105,
			111, 110, 69, 118, 101, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 46, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 92, 69, 120, 112, 108, 111, 115, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 49, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 92, 70, 105, 110, 100,
			79, 118, 101, 114, 108, 97, 112, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 80, 104, 121, 115, 105,
			99, 115, 92, 71, 101, 116, 67, 111, 108, 108,
			105, 115, 105, 111, 110, 73, 110, 102, 111, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 80, 104, 121, 115,
			105, 99, 115, 92, 71, 101, 116, 74, 111, 105,
			110, 116, 66, 114, 101, 97, 107, 73, 110, 102,
			111, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 44, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 92, 71, 101, 116, 77,
			97, 115, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 61, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 92, 71, 101,
			116, 80, 97, 114, 116, 105, 99, 108, 101, 67,
			111, 108, 108, 105, 115, 105, 111, 110, 73, 110,
			102, 111, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 92, 71, 101, 116,
			82, 97, 121, 99, 97, 115, 116, 65, 108, 108,
			73, 110, 102, 111, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 54, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 104, 121, 115, 105, 99, 115, 92, 71,
			101, 116, 82, 97, 121, 99, 97, 115, 116, 72,
			105, 116, 73, 110, 102, 111, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 45, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 80, 104, 121, 115, 105, 99, 115,
			92, 71, 101, 116, 83, 112, 101, 101, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 51,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 80, 104, 121, 115,
			105, 99, 115, 92, 71, 101, 116, 84, 114, 105,
			103, 103, 101, 114, 73, 110, 102, 111, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 48, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 80, 104, 121, 115, 105,
			99, 115, 92, 71, 101, 116, 86, 101, 108, 111,
			99, 105, 116, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 48, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 104, 121, 115, 105, 99, 115, 92, 73,
			115, 75, 105, 110, 101, 109, 97, 116, 105, 99,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 104, 121,
			115, 105, 99, 115, 92, 73, 115, 83, 108, 101,
			101, 112, 105, 110, 103, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 49, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 92,
			77, 111, 118, 101, 80, 111, 115, 105, 116, 105,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 44, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 92, 82, 97, 121,
			99, 97, 115, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 47, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 104, 121, 115, 105, 99, 115, 92, 82,
			97, 121, 99, 97, 115, 116, 65, 108, 108, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 80, 104, 121, 115,
			105, 99, 115, 92, 83, 101, 116, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 86, 101, 108,
			111, 99, 105, 116, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 44, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 92,
			83, 101, 116, 68, 114, 97, 103, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 47, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 92, 83, 101, 116, 71, 114, 97, 118, 105,
			116, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 51, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 92, 83, 101, 116,
			73, 115, 75, 105, 110, 101, 109, 97, 116, 105,
			99, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 58, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 92, 83, 101, 116, 74,
			111, 105, 110, 116, 67, 111, 110, 110, 101, 99,
			116, 101, 100, 66, 111, 100, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 44, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 92, 83, 101, 116, 77, 97, 115, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 48,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 80, 104, 121, 115,
			105, 99, 115, 92, 83, 101, 116, 86, 101, 108,
			111, 99, 105, 116, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 42, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 92,
			83, 108, 101, 101, 112, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 54, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 92,
			84, 114, 97, 110, 115, 108, 97, 116, 101, 80,
			111, 115, 105, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 49, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 92, 84, 114, 105, 103, 103, 101, 114, 69,
			118, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 47, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 104, 121, 115, 105, 99, 115, 92, 85,
			115, 101, 71, 114, 97, 118, 105, 116, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 80, 104, 121, 115,
			105, 99, 115, 92, 87, 97, 107, 101, 65, 108,
			108, 82, 105, 103, 105, 100, 66, 111, 100, 105,
			101, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 43, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 92, 87, 97, 107,
			101, 85, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 49, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 50, 68, 92,
			65, 100, 100, 70, 111, 114, 99, 101, 50, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 104, 121,
			115, 105, 99, 115, 50, 68, 92, 65, 100, 100,
			82, 101, 108, 97, 116, 105, 118, 101, 70, 111,
			114, 99, 101, 50, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 50, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 50,
			68, 92, 65, 100, 100, 84, 111, 114, 113, 117,
			101, 50, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 55, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 50, 68, 92,
			67, 111, 108, 108, 105, 115, 105, 111, 110, 50,
			100, 69, 118, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 57, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 80, 104, 121, 115, 105, 99, 115,
			50, 68, 92, 71, 101, 116, 67, 111, 108, 108,
			105, 115, 105, 111, 110, 50, 100, 73, 110, 102,
			111, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 58, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 50, 68, 92, 71, 101,
			116, 74, 111, 105, 110, 116, 66, 114, 101, 97,
			107, 50, 100, 73, 110, 102, 111, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 48, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 50, 68, 92, 71, 101, 116, 77, 97, 115,
			115, 50, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 56, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 50, 68, 92,
			71, 101, 116, 78, 101, 120, 116, 76, 105, 110,
			101, 67, 97, 115, 116, 50, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 59, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 50, 68, 92, 71, 101, 116, 78, 101, 120,
			116, 79, 118, 101, 114, 108, 97, 112, 65, 114,
			101, 97, 50, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 104, 121, 115, 105, 99, 115, 50, 68,
			92, 71, 101, 116, 78, 101, 120, 116, 79, 118,
			101, 114, 108, 97, 112, 67, 105, 114, 99, 108,
			101, 50, 100, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 50, 68, 92,
			71, 101, 116, 78, 101, 120, 116, 79, 118, 101,
			114, 108, 97, 112, 80, 111, 105, 110, 116, 50,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 50, 68, 92, 71, 101,
			116, 78, 101, 120, 116, 82, 97, 121, 67, 97,
			115, 116, 50, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 58, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 104, 121, 115, 105, 99, 115, 50, 68,
			92, 71, 101, 116, 82, 97, 121, 67, 97, 115,
			116, 72, 105, 116, 50, 100, 73, 110, 102, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			49, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 104, 121,
			115, 105, 99, 115, 50, 68, 92, 71, 101, 116,
			83, 112, 101, 101, 100, 50, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 55, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 50, 68, 92, 71, 101, 116, 84, 114, 105,
			103, 103, 101, 114, 50, 100, 73, 110, 102, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 104, 121,
			115, 105, 99, 115, 50, 68, 92, 71, 101, 116,
			86, 101, 108, 111, 99, 105, 116, 121, 50, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			53, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 104, 121,
			115, 105, 99, 115, 50, 68, 92, 73, 115, 70,
			105, 120, 101, 100, 65, 110, 103, 108, 101, 50,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 50, 68, 92, 73, 115,
			75, 105, 110, 101, 109, 97, 116, 105, 99, 50,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 51, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 50, 68, 92, 73, 115,
			83, 108, 101, 101, 112, 105, 110, 103, 50, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			49, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 104, 121,
			115, 105, 99, 115, 50, 68, 92, 76, 105, 110,
			101, 67, 97, 115, 116, 50, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 47, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 50, 68, 92, 76, 111, 111, 107, 65, 116,
			50, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 57, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 50, 68, 92, 76,
			111, 111, 107, 65, 116, 50, 100, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 50, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 50, 68, 92, 77, 111, 117, 115, 101, 80,
			105, 99, 107, 50, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 55, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 50,
			68, 92, 77, 111, 117, 115, 101, 80, 105, 99,
			107, 50, 100, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 80, 104, 121, 115, 105,
			99, 115, 50, 68, 92, 77, 111, 118, 101, 80,
			111, 115, 105, 116, 105, 111, 110, 50, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 48,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 80, 104, 121, 115,
			105, 99, 115, 50, 68, 92, 82, 97, 121, 67,
			97, 115, 116, 50, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 51, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 50,
			68, 92, 83, 99, 114, 101, 101, 110, 80, 105,
			99, 107, 50, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 104, 121, 115, 105, 99, 115, 50, 68,
			92, 83, 101, 116, 67, 111, 108, 108, 105, 100,
			101, 114, 50, 100, 73, 115, 84, 114, 105, 103,
			103, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 51, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 50, 68, 92,
			83, 101, 116, 71, 114, 97, 118, 105, 116, 121,
			50, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 56, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 50, 68, 92, 83,
			101, 116, 71, 114, 97, 118, 105, 116, 121, 50,
			100, 83, 99, 97, 108, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 80, 104, 121, 115, 105, 99, 115,
			50, 68, 92, 83, 101, 116, 72, 105, 110, 103,
			101, 74, 111, 105, 110, 116, 50, 100, 80, 114,
			111, 112, 101, 114, 116, 105, 101, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 56, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 80, 104, 121, 115, 105,
			99, 115, 50, 68, 92, 83, 101, 116, 73, 115,
			70, 105, 120, 101, 100, 65, 110, 103, 108, 101,
			50, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 55, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 50, 68, 92, 83,
			101, 116, 73, 115, 75, 105, 110, 101, 109, 97,
			116, 105, 99, 50, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 48, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 104, 121, 115, 105, 99, 115, 50,
			68, 92, 83, 101, 116, 77, 97, 115, 115, 50,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 50, 68, 92, 83, 101,
			116, 86, 101, 108, 111, 99, 105, 116, 121, 50,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 64, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 104,
			121, 115, 105, 99, 115, 50, 68, 92, 83, 101,
			116, 87, 104, 101, 101, 108, 74, 111, 105, 110,
			116, 50, 100, 80, 114, 111, 112, 101, 114, 116,
			105, 101, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 46, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 50, 68, 92,
			83, 108, 101, 101, 112, 50, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 104, 121, 115, 105, 99,
			115, 50, 68, 92, 83, 109, 111, 111, 116, 104,
			76, 111, 111, 107, 65, 116, 50, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 60, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 80, 104, 121, 115, 105,
			99, 115, 50, 68, 92, 84, 111, 117, 99, 104,
			32, 79, 98, 106, 101, 99, 116, 32, 50, 100,
			32, 69, 118, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 58, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 80, 104, 121, 115, 105, 99, 115,
			50, 68, 92, 84, 114, 97, 110, 115, 108, 97,
			116, 101, 80, 111, 115, 105, 116, 105, 111, 110,
			50, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 53, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			104, 121, 115, 105, 99, 115, 50, 68, 92, 84,
			114, 105, 103, 103, 101, 114, 50, 100, 69, 118,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 59, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 104, 121, 115, 105, 99, 115, 50, 68, 92,
			87, 97, 107, 101, 65, 108, 108, 82, 105, 103,
			105, 100, 66, 111, 100, 105, 101, 115, 50, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 104, 121,
			115, 105, 99, 115, 50, 68, 92, 87, 97, 107,
			101, 85, 112, 50, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 80, 108, 97, 121, 101, 114, 80, 114,
			101, 102, 115, 92, 80, 108, 97, 121, 101, 114,
			80, 114, 101, 102, 115, 68, 101, 108, 101, 116,
			101, 65, 108, 108, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 108, 97, 121, 101, 114, 80, 114, 101,
			102, 115, 92, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 68, 101, 108, 101, 116, 101,
			75, 101, 121, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			80, 108, 97, 121, 101, 114, 80, 114, 101, 102,
			115, 92, 80, 108, 97, 121, 101, 114, 80, 114,
			101, 102, 115, 71, 101, 116, 70, 108, 111, 97,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 58, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 80, 108,
			97, 121, 101, 114, 80, 114, 101, 102, 115, 92,
			80, 108, 97, 121, 101, 114, 80, 114, 101, 102,
			115, 71, 101, 116, 73, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 61, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 80, 108, 97, 121, 101, 114,
			80, 114, 101, 102, 115, 92, 80, 108, 97, 121,
			101, 114, 80, 114, 101, 102, 115, 71, 101, 116,
			83, 116, 114, 105, 110, 103, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 58, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 92, 80, 108, 97, 121, 101,
			114, 80, 114, 101, 102, 115, 72, 97, 115, 75,
			101, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 64, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 80,
			108, 97, 121, 101, 114, 80, 114, 101, 102, 115,
			92, 80, 108, 97, 121, 101, 114, 80, 114, 101,
			102, 115, 76, 111, 97, 100, 86, 97, 114, 105,
			97, 98, 108, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 64, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 108, 97, 121, 101, 114, 80, 114, 101,
			102, 115, 92, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 83, 97, 118, 101, 86, 97,
			114, 105, 97, 98, 108, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 60, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 92, 80, 108, 97, 121, 101,
			114, 80, 114, 101, 102, 115, 83, 101, 116, 70,
			108, 111, 97, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 58, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 108, 97, 121, 101, 114, 80, 114, 101,
			102, 115, 92, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 83, 101, 116, 73, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			61, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 108, 97,
			121, 101, 114, 80, 114, 101, 102, 115, 92, 80,
			108, 97, 121, 101, 114, 80, 114, 101, 102, 115,
			83, 101, 116, 83, 116, 114, 105, 110, 103, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 63,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 80, 114, 111, 99,
			101, 100, 117, 114, 97, 108, 77, 97, 116, 101,
			114, 105, 97, 108, 92, 82, 101, 98, 117, 105,
			108, 100, 84, 101, 120, 116, 117, 114, 101, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			68, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 114, 111,
			99, 101, 100, 117, 114, 97, 108, 77, 97, 116,
			101, 114, 105, 97, 108, 92, 83, 101, 116, 80,
			114, 111, 99, 101, 100, 117, 114, 97, 108, 66,
			111, 111, 108, 101, 97, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 66, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 80, 114, 111, 99, 101, 100, 117,
			114, 97, 108, 77, 97, 116, 101, 114, 105, 97,
			108, 92, 83, 101, 116, 80, 114, 111, 99, 101,
			100, 117, 114, 97, 108, 67, 111, 108, 111, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			66, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 114, 111,
			99, 101, 100, 117, 114, 97, 108, 77, 97, 116,
			101, 114, 105, 97, 108, 92, 83, 101, 116, 80,
			114, 111, 99, 101, 100, 117, 114, 97, 108, 70,
			108, 111, 97, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 68, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 80, 114, 111, 99, 101, 100, 117, 114, 97,
			108, 77, 97, 116, 101, 114, 105, 97, 108, 92,
			83, 101, 116, 80, 114, 111, 99, 101, 100, 117,
			114, 97, 108, 86, 101, 99, 116, 111, 114, 50,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			68, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 80, 114, 111,
			99, 101, 100, 117, 114, 97, 108, 77, 97, 116,
			101, 114, 105, 97, 108, 92, 83, 101, 116, 80,
			114, 111, 99, 101, 100, 117, 114, 97, 108, 86,
			101, 99, 116, 111, 114, 51, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 92, 71, 101, 116, 81, 117, 97,
			116, 101, 114, 110, 105, 111, 110, 69, 117, 108,
			101, 114, 65, 110, 103, 108, 101, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 65, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 81, 117, 97, 116, 101,
			114, 110, 105, 111, 110, 92, 71, 101, 116, 81,
			117, 97, 116, 101, 114, 110, 105, 111, 110, 70,
			114, 111, 109, 82, 111, 116, 97, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 75, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 81, 117,
			97, 116, 101, 114, 110, 105, 111, 110, 92, 71,
			101, 116, 81, 117, 97, 116, 101, 114, 110, 105,
			111, 110, 77, 117, 108, 116, 105, 112, 108, 105,
			101, 100, 66, 121, 81, 117, 97, 116, 101, 114,
			110, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 71, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 81, 117, 97, 116, 101, 114, 110, 105, 111,
			110, 92, 71, 101, 116, 81, 117, 97, 116, 101,
			114, 110, 105, 111, 110, 77, 117, 108, 116, 105,
			112, 108, 105, 101, 100, 66, 121, 86, 101, 99,
			116, 111, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 59, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			81, 117, 97, 116, 101, 114, 110, 105, 111, 110,
			92, 81, 117, 97, 116, 101, 114, 110, 105, 111,
			110, 65, 110, 103, 108, 101, 65, 120, 105, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			60, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 81, 117, 97,
			116, 101, 114, 110, 105, 111, 110, 92, 81, 117,
			97, 116, 101, 114, 110, 105, 111, 110, 66, 97,
			115, 101, 65, 99, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 57, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 81, 117, 97, 116, 101,
			114, 110, 105, 111, 110, 92, 81, 117, 97, 116,
			101, 114, 110, 105, 111, 110, 67, 111, 109, 112,
			97, 114, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 55, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			81, 117, 97, 116, 101, 114, 110, 105, 111, 110,
			92, 81, 117, 97, 116, 101, 114, 110, 105, 111,
			110, 69, 117, 108, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 57, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 92, 81, 117, 97, 116, 101, 114,
			110, 105, 111, 110, 73, 110, 118, 101, 114, 115,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 54, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 81, 117,
			97, 116, 101, 114, 110, 105, 111, 110, 92, 81,
			117, 97, 116, 101, 114, 110, 105, 111, 110, 76,
			101, 114, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 62, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			81, 117, 97, 116, 101, 114, 110, 105, 111, 110,
			92, 81, 117, 97, 116, 101, 114, 110, 105, 111,
			110, 76, 111, 111, 107, 82, 111, 116, 97, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 63, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			81, 117, 97, 116, 101, 114, 110, 105, 111, 110,
			92, 81, 117, 97, 116, 101, 114, 110, 105, 111,
			110, 76, 111, 119, 80, 97, 115, 115, 70, 105,
			108, 116, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 63, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 81, 117, 97, 116, 101, 114, 110, 105, 111,
			110, 92, 81, 117, 97, 116, 101, 114, 110, 105,
			111, 110, 82, 111, 116, 97, 116, 101, 84, 111,
			119, 97, 114, 100, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 55, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 81, 117, 97, 116, 101, 114, 110, 105,
			111, 110, 92, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 83, 108, 101, 114, 112, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 47, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 82, 101, 99, 116, 92,
			71, 101, 116, 82, 101, 99, 116, 70, 105, 101,
			108, 100, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 46, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			82, 101, 99, 116, 92, 82, 101, 99, 116, 67,
			111, 110, 116, 97, 105, 110, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 46, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 82, 101, 99, 116, 92, 82,
			101, 99, 116, 79, 118, 101, 114, 108, 97, 112,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 47, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 82, 101,
			99, 116, 92, 83, 101, 116, 82, 101, 99, 116,
			70, 105, 101, 108, 100, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 51, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 82, 101, 99, 116, 92, 83, 101,
			116, 82, 101, 99, 116, 70, 114, 111, 109, 80,
			111, 105, 110, 116, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 46, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 82, 101, 99, 116, 92, 83, 101, 116,
			82, 101, 99, 116, 86, 97, 108, 117, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 75,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 67, 111, 110, 116, 97, 105, 110,
			115, 83, 99, 114, 101, 101, 110, 80, 111, 105,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 70, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 92, 82, 101, 99, 116, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 70, 108, 105, 112,
			76, 97, 121, 111, 117, 116, 65, 120, 101, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			75, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 82, 101, 99,
			116, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			92, 82, 101, 99, 116, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 71, 101, 116, 65, 110, 99,
			104, 111, 114, 101, 100, 80, 111, 115, 105, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 68, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 71, 101, 116,
			65, 110, 99, 104, 111, 114, 77, 97, 120, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 71, 101, 116, 65, 110, 99, 104,
			111, 114, 77, 105, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 74, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 71,
			101, 116, 65, 110, 99, 104, 111, 114, 77, 105,
			110, 65, 110, 100, 77, 97, 120, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 72, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 92, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 71, 101, 116, 76, 111, 99, 97, 108, 80,
			111, 115, 105, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 72, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 92, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 71, 101, 116, 76, 111, 99, 97, 108, 82,
			111, 116, 97, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 92, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 71, 101, 116, 79, 102, 102, 115, 101, 116,
			77, 97, 120, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 68, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 71, 101, 116,
			79, 102, 102, 115, 101, 116, 77, 105, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 64,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 71, 101, 116, 80, 105, 118, 111,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 63, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 92, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 71, 101, 116, 82, 101,
			99, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 68, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 92, 82, 101, 99, 116, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 71, 101, 116, 83,
			105, 122, 101, 68, 101, 108, 116, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 72, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 82, 101, 99, 116, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 92, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 80, 105, 120, 101, 108, 65, 100, 106,
			117, 115, 116, 80, 111, 105, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 71, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 82, 101, 99, 116, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 92, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 80, 105, 120, 101, 108, 65, 100, 106,
			117, 115, 116, 82, 101, 99, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 90, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 92, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 83, 99, 114, 101, 101, 110, 80, 111, 105,
			110, 116, 84, 111, 76, 111, 99, 97, 108, 80,
			111, 105, 110, 116, 73, 110, 82, 101, 99, 116,
			97, 110, 103, 108, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 90, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 83,
			99, 114, 101, 101, 110, 80, 111, 105, 110, 116,
			84, 111, 87, 111, 114, 108, 100, 80, 111, 105,
			110, 116, 73, 110, 82, 101, 99, 116, 97, 110,
			103, 108, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 75, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 83, 101, 116,
			65, 110, 99, 104, 111, 114, 101, 100, 80, 111,
			115, 105, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 68, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 82, 101, 99, 116, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 92, 82, 101, 99,
			116, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			83, 101, 116, 65, 110, 99, 104, 111, 114, 77,
			97, 120, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 68, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 92, 82, 101, 99, 116, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 83, 101, 116, 65,
			110, 99, 104, 111, 114, 77, 105, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 74, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 82, 101, 99, 116, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 92, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 83, 101, 116, 65, 110, 99, 104, 111,
			114, 77, 105, 110, 65, 110, 100, 77, 97, 120,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			77, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 82, 101, 99,
			116, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			92, 82, 101, 99, 116, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 83, 101, 116, 65, 110, 99,
			104, 111, 114, 82, 101, 99, 116, 80, 111, 115,
			105, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 72, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 83,
			101, 116, 76, 111, 99, 97, 108, 80, 111, 115,
			105, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 72, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 83,
			101, 116, 76, 111, 99, 97, 108, 82, 111, 116,
			97, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 68, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 83,
			101, 116, 79, 102, 102, 115, 101, 116, 77, 97,
			120, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 68, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 92, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 83, 101, 116, 79, 102,
			102, 115, 101, 116, 77, 105, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 64, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 92, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 83, 101, 116, 80, 105, 118, 111, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 73,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 83, 101, 116, 83, 99, 114, 101,
			101, 110, 80, 111, 115, 105, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			79, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 82, 101, 99,
			116, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			92, 82, 101, 99, 116, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 83, 101, 116, 83, 99, 114,
			101, 101, 110, 82, 101, 99, 116, 70, 114, 111,
			109, 80, 111, 105, 110, 116, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 92, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 83, 101, 116, 83, 105, 122, 101, 68, 101,
			108, 116, 97, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 74, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 92, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 87, 111, 114,
			108, 100, 84, 111, 83, 99, 114, 101, 101, 110,
			80, 111, 105, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 82, 101, 110, 100, 101, 114, 83, 101,
			116, 116, 105, 110, 103, 115, 92, 69, 110, 97,
			98, 108, 101, 70, 111, 103, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 59, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 82, 101, 110, 100, 101, 114, 83,
			101, 116, 116, 105, 110, 103, 115, 92, 83, 101,
			116, 65, 109, 98, 105, 101, 110, 116, 76, 105,
			103, 104, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			82, 101, 110, 100, 101, 114, 83, 101, 116, 116,
			105, 110, 103, 115, 92, 83, 101, 116, 70, 108,
			97, 114, 101, 83, 116, 114, 101, 110, 103, 116,
			104, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 82, 101,
			110, 100, 101, 114, 83, 101, 116, 116, 105, 110,
			103, 115, 92, 83, 101, 116, 70, 111, 103, 67,
			111, 108, 111, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 82, 101, 110, 100, 101, 114, 83, 101, 116,
			116, 105, 110, 103, 115, 92, 83, 101, 116, 70,
			111, 103, 68, 101, 110, 115, 105, 116, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 59,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 82, 101, 110, 100,
			101, 114, 83, 101, 116, 116, 105, 110, 103, 115,
			92, 83, 101, 116, 72, 97, 108, 111, 83, 116,
			114, 101, 110, 103, 116, 104, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 53, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 82, 101, 110, 100, 101, 114, 83,
			101, 116, 116, 105, 110, 103, 115, 92, 83, 101,
			116, 83, 107, 121, 98, 111, 120, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 62, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 99, 101, 110, 101, 77,
			97, 110, 97, 103, 101, 114, 92, 65, 108, 108,
			111, 119, 83, 99, 101, 110, 101, 65, 99, 116,
			105, 118, 97, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 99, 101, 110, 101, 77,
			97, 110, 97, 103, 101, 114, 92, 67, 114, 101,
			97, 116, 101, 83, 99, 101, 110, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 74, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 99, 101, 110, 101,
			77, 97, 110, 97, 103, 101, 114, 92, 71, 101,
			116, 83, 99, 101, 110, 101, 65, 99, 116, 105,
			118, 97, 116, 101, 67, 104, 97, 110, 103, 101,
			100, 69, 118, 101, 110, 116, 68, 97, 116, 97,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			60, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 99, 101,
			110, 101, 77, 97, 110, 97, 103, 101, 114, 92,
			71, 101, 116, 83, 99, 101, 110, 101, 66, 117,
			105, 108, 100, 73, 110, 100, 101, 120, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 99, 101, 110, 101,
			77, 97, 110, 97, 103, 101, 114, 92, 71, 101,
			116, 83, 99, 101, 110, 101, 67, 111, 117, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 70, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 99,
			101, 110, 101, 77, 97, 110, 97, 103, 101, 114,
			92, 71, 101, 116, 83, 99, 101, 110, 101, 67,
			111, 117, 110, 116, 73, 110, 66, 117, 105, 108,
			100, 83, 101, 116, 116, 105, 110, 103, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 57,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 99, 101, 110,
			101, 77, 97, 110, 97, 103, 101, 114, 92, 71,
			101, 116, 83, 99, 101, 110, 101, 73, 115, 68,
			105, 114, 116, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 58, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 99, 101, 110, 101, 77, 97, 110, 97,
			103, 101, 114, 92, 71, 101, 116, 83, 99, 101,
			110, 101, 73, 115, 76, 111, 97, 100, 101, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 99, 101,
			110, 101, 77, 97, 110, 97, 103, 101, 114, 92,
			71, 101, 116, 83, 99, 101, 110, 101, 73, 115,
			86, 97, 108, 105, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 99, 101, 110, 101, 77, 97, 110,
			97, 103, 101, 114, 92, 71, 101, 116, 83, 99,
			101, 110, 101, 76, 111, 97, 100, 101, 100, 69,
			118, 101, 110, 116, 68, 97, 116, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 54, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 99, 101, 110, 101,
			77, 97, 110, 97, 103, 101, 114, 92, 71, 101,
			116, 83, 99, 101, 110, 101, 78, 97, 109, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 99, 101,
			110, 101, 77, 97, 110, 97, 103, 101, 114, 92,
			71, 101, 116, 83, 99, 101, 110, 101, 80, 97,
			116, 104, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 60, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			99, 101, 110, 101, 77, 97, 110, 97, 103, 101,
			114, 92, 71, 101, 116, 83, 99, 101, 110, 101,
			80, 114, 111, 112, 101, 114, 116, 105, 101, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			59, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 99, 101,
			110, 101, 77, 97, 110, 97, 103, 101, 114, 92,
			71, 101, 116, 83, 99, 101, 110, 101, 82, 111,
			111, 116, 67, 111, 117, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 99, 101, 110, 101, 77,
			97, 110, 97, 103, 101, 114, 92, 71, 101, 116,
			83, 99, 101, 110, 101, 82, 111, 111, 116, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			67, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 99, 101,
			110, 101, 77, 97, 110, 97, 103, 101, 114, 92,
			71, 101, 116, 83, 99, 101, 110, 101, 85, 110,
			76, 111, 97, 100, 101, 100, 69, 118, 101, 110,
			116, 68, 97, 116, 97, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 69, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 99, 101, 110, 101, 77, 97, 110,
			97, 103, 101, 114, 92, 73, 110, 116, 101, 114,
			110, 97, 108, 92, 71, 101, 116, 83, 99, 101,
			110, 101, 65, 99, 116, 105, 111, 110, 66, 97,
			115, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 51, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			99, 101, 110, 101, 77, 97, 110, 97, 103, 101,
			114, 92, 76, 111, 97, 100, 83, 99, 101, 110,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 57, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 99,
			101, 110, 101, 77, 97, 110, 97, 103, 101, 114,
			92, 76, 111, 97, 100, 83, 99, 101, 110, 101,
			65, 115, 121, 110, 99, 104, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 53, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 99, 101, 110, 101, 77, 97,
			110, 97, 103, 101, 114, 92, 77, 101, 114, 103,
			101, 83, 99, 101, 110, 101, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 63, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 99, 101, 110, 101, 77,
			97, 110, 97, 103, 101, 114, 92, 77, 111, 118,
			101, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 84, 111, 83, 99, 101, 110, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 69, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 99, 101, 110, 101,
			77, 97, 110, 97, 103, 101, 114, 92, 83, 101,
			110, 100, 65, 99, 116, 105, 118, 101, 83, 99,
			101, 110, 101, 67, 104, 97, 110, 103, 101, 100,
			69, 118, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 62, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 99, 101, 110, 101, 77, 97, 110,
			97, 103, 101, 114, 92, 83, 101, 110, 100, 83,
			99, 101, 110, 101, 76, 111, 97, 100, 101, 100,
			69, 118, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 99, 101, 110, 101, 77, 97, 110,
			97, 103, 101, 114, 92, 83, 101, 110, 100, 83,
			99, 101, 110, 101, 85, 110, 76, 111, 97, 100,
			101, 100, 69, 118, 101, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 56, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 99, 101, 110, 101, 77,
			97, 110, 97, 103, 101, 114, 92, 83, 101, 116,
			65, 99, 116, 105, 118, 101, 83, 99, 101, 110,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 53, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 99,
			101, 110, 101, 77, 97, 110, 97, 103, 101, 114,
			92, 85, 110, 108, 111, 97, 100, 83, 99, 101,
			110, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 59, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			99, 101, 110, 101, 77, 97, 110, 97, 103, 101,
			114, 92, 85, 110, 108, 111, 97, 100, 83, 99,
			101, 110, 101, 65, 115, 121, 110, 99, 104, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 46,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 99, 114, 101,
			101, 110, 92, 83, 99, 114, 101, 101, 110, 87,
			114, 97, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 52, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 99, 114, 105, 112, 116, 67, 111, 110, 116,
			114, 111, 108, 92, 65, 100, 100, 83, 99, 114,
			105, 112, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 52, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 99, 114, 105, 112, 116, 67, 111, 110, 116,
			114, 111, 108, 92, 65, 120, 105, 115, 69, 118,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 53, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 99, 114, 105, 112, 116, 67, 111, 110, 116,
			114, 111, 108, 92, 67, 97, 108, 108, 77, 101,
			116, 104, 111, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 59, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 99, 114, 105, 112, 116, 67, 111, 110,
			116, 114, 111, 108, 92, 67, 97, 108, 108, 83,
			116, 97, 116, 105, 99, 77, 101, 116, 104, 111,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 58, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 99,
			114, 105, 112, 116, 67, 111, 110, 116, 114, 111,
			108, 92, 69, 110, 97, 98, 108, 101, 66, 101,
			104, 97, 118, 105, 111, 117, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 55, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 99, 114, 105, 112, 116,
			67, 111, 110, 116, 114, 111, 108, 92, 73, 110,
			118, 111, 107, 101, 77, 101, 116, 104, 111, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 99, 114,
			105, 112, 116, 67, 111, 110, 116, 114, 111, 108,
			92, 83, 101, 110, 100, 77, 101, 115, 115, 97,
			103, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 57, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			99, 114, 105, 112, 116, 67, 111, 110, 116, 114,
			111, 108, 92, 83, 116, 97, 114, 116, 67, 111,
			114, 111, 117, 116, 105, 110, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 112, 114, 105, 116, 101,
			82, 101, 110, 100, 101, 114, 101, 114, 92, 71,
			101, 116, 83, 112, 114, 105, 116, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 112, 114, 105, 116,
			101, 82, 101, 110, 100, 101, 114, 101, 114, 92,
			71, 101, 116, 83, 112, 114, 105, 116, 101, 67,
			111, 108, 111, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 112, 114, 105, 116, 101, 82, 101, 110,
			100, 101, 114, 101, 114, 92, 71, 101, 116, 83,
			112, 114, 105, 116, 101, 70, 108, 105, 112, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 112, 114, 105,
			116, 101, 82, 101, 110, 100, 101, 114, 101, 114,
			92, 71, 101, 116, 83, 112, 114, 105, 116, 101,
			77, 97, 115, 107, 73, 110, 116, 101, 114, 97,
			99, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 112, 114, 105, 116, 101, 82, 101,
			110, 100, 101, 114, 101, 114, 92, 71, 101, 116,
			83, 112, 114, 105, 116, 101, 79, 114, 100, 101,
			114, 73, 110, 76, 97, 121, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 65, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 112, 114, 105, 116,
			101, 82, 101, 110, 100, 101, 114, 101, 114, 92,
			71, 101, 116, 83, 112, 114, 105, 116, 101, 83,
			111, 114, 116, 105, 110, 103, 76, 97, 121, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 62, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 112,
			114, 105, 116, 101, 82, 101, 110, 100, 101, 114,
			101, 114, 92, 71, 101, 116, 115, 112, 114, 105,
			116, 101, 83, 111, 114, 116, 80, 111, 105, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 53, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 112,
			114, 105, 116, 101, 82, 101, 110, 100, 101, 114,
			101, 114, 92, 83, 101, 116, 83, 112, 114, 105,
			116, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 58, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			112, 114, 105, 116, 101, 82, 101, 110, 100, 101,
			114, 101, 114, 92, 83, 101, 116, 83, 112, 114,
			105, 116, 101, 67, 111, 108, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 57, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 112, 114, 105, 116,
			101, 82, 101, 110, 100, 101, 114, 101, 114, 92,
			83, 101, 116, 83, 112, 114, 105, 116, 101, 70,
			108, 105, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 68, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 112, 114, 105, 116, 101, 82, 101, 110, 100,
			101, 114, 101, 114, 92, 83, 101, 116, 83, 112,
			114, 105, 116, 101, 77, 97, 115, 107, 73, 110,
			116, 101, 114, 97, 99, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 112, 114, 105,
			116, 101, 82, 101, 110, 100, 101, 114, 101, 114,
			92, 83, 101, 116, 83, 112, 114, 105, 116, 101,
			79, 114, 100, 101, 114, 73, 110, 76, 97, 121,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 69, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			112, 114, 105, 116, 101, 82, 101, 110, 100, 101,
			114, 101, 114, 92, 83, 101, 116, 83, 112, 114,
			105, 116, 101, 83, 111, 114, 116, 105, 110, 103,
			76, 97, 121, 101, 114, 66, 121, 73, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 71,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 112, 114, 105,
			116, 101, 82, 101, 110, 100, 101, 114, 101, 114,
			92, 83, 101, 116, 83, 112, 114, 105, 116, 101,
			83, 111, 114, 116, 105, 110, 103, 76, 97, 121,
			101, 114, 66, 121, 78, 97, 109, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 112, 114, 105, 116,
			101, 82, 101, 110, 100, 101, 114, 101, 114, 92,
			83, 101, 116, 83, 112, 114, 105, 116, 101, 83,
			111, 114, 116, 80, 111, 105, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 63, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 66, 97,
			115, 101, 70, 115, 109, 86, 97, 114, 105, 97,
			98, 108, 101, 65, 99, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 97, 116,
			101, 77, 97, 99, 104, 105, 110, 101, 92, 66,
			97, 115, 101, 70, 115, 109, 86, 97, 114, 105,
			97, 98, 108, 101, 73, 110, 100, 101, 120, 65,
			99, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 66, 108, 111, 99, 107,
			69, 118, 101, 110, 116, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 56, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 66, 114, 111, 97,
			100, 99, 97, 115, 116, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			51, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 97,
			116, 101, 77, 97, 99, 104, 105, 110, 101, 92,
			69, 110, 97, 98, 108, 101, 70, 83, 77, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 51,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 97, 116,
			101, 77, 97, 99, 104, 105, 110, 101, 92, 70,
			105, 110, 105, 115, 104, 70, 83, 77, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 70, 111,
			114, 119, 97, 114, 100, 65, 108, 108, 69, 118,
			101, 110, 116, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 54, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 97, 116, 101, 77, 97, 99, 104,
			105, 110, 101, 92, 70, 111, 114, 119, 97, 114,
			100, 69, 118, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 58, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 71, 101, 116, 69,
			118, 101, 110, 116, 66, 111, 111, 108, 68, 97,
			116, 97, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 59, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 97, 116, 101, 77, 97, 99, 104, 105, 110,
			101, 92, 71, 101, 116, 69, 118, 101, 110, 116,
			70, 108, 111, 97, 116, 68, 97, 116, 97, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 97, 116,
			101, 77, 97, 99, 104, 105, 110, 101, 92, 71,
			101, 116, 69, 118, 101, 110, 116, 73, 110, 102,
			111, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 57, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			97, 116, 101, 77, 97, 99, 104, 105, 110, 101,
			92, 71, 101, 116, 69, 118, 101, 110, 116, 73,
			110, 116, 68, 97, 116, 97, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 56, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 71, 101, 116, 69,
			118, 101, 110, 116, 83, 101, 110, 116, 66, 121,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			60, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 97,
			116, 101, 77, 97, 99, 104, 105, 110, 101, 92,
			71, 101, 116, 69, 118, 101, 110, 116, 83, 116,
			114, 105, 110, 103, 68, 97, 116, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 61, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 71, 101,
			116, 69, 118, 101, 110, 116, 86, 101, 99, 116,
			111, 114, 50, 68, 97, 116, 97, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 61, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 97, 116, 101, 77,
			97, 99, 104, 105, 110, 101, 92, 71, 101, 116,
			69, 118, 101, 110, 116, 86, 101, 99, 116, 111,
			114, 51, 68, 97, 116, 97, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 52, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 71, 101, 116, 70,
			115, 109, 66, 111, 111, 108, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 53, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 71, 101, 116, 70,
			115, 109, 67, 111, 108, 111, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 52, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 97, 116, 101, 77,
			97, 99, 104, 105, 110, 101, 92, 71, 101, 116,
			70, 115, 109, 69, 110, 117, 109, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 97, 116, 101, 77,
			97, 99, 104, 105, 110, 101, 92, 71, 101, 116,
			70, 115, 109, 70, 108, 111, 97, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 71, 101,
			116, 70, 115, 109, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 51, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 97, 116, 101, 77, 97, 99, 104,
			105, 110, 101, 92, 71, 101, 116, 70, 115, 109,
			73, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 56, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 97, 116, 101, 77, 97, 99, 104, 105,
			110, 101, 92, 71, 101, 116, 70, 115, 109, 77,
			97, 116, 101, 114, 105, 97, 108, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 54, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 97, 116, 101, 77,
			97, 99, 104, 105, 110, 101, 92, 71, 101, 116,
			70, 115, 109, 79, 98, 106, 101, 99, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 97, 116,
			101, 77, 97, 99, 104, 105, 110, 101, 92, 71,
			101, 116, 70, 115, 109, 81, 117, 97, 116, 101,
			114, 110, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 71, 101, 116, 70, 115,
			109, 82, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 71, 101, 116, 70, 115,
			109, 83, 116, 97, 116, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 54, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 71, 101, 116, 70,
			115, 109, 83, 116, 114, 105, 110, 103, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 71, 101,
			116, 70, 115, 109, 84, 101, 120, 116, 117, 114,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			97, 116, 101, 77, 97, 99, 104, 105, 110, 101,
			92, 71, 101, 116, 70, 115, 109, 86, 97, 114,
			105, 97, 98, 108, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 57, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 71, 101, 116, 70, 115,
			109, 86, 97, 114, 105, 97, 98, 108, 101, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			55, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 97,
			116, 101, 77, 97, 99, 104, 105, 110, 101, 92,
			71, 101, 116, 70, 115, 109, 86, 101, 99, 116,
			111, 114, 50, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 55, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 97, 116, 101, 77, 97, 99, 104, 105,
			110, 101, 92, 71, 101, 116, 70, 115, 109, 86,
			101, 99, 116, 111, 114, 51, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 54, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 71, 101, 116, 76,
			97, 115, 116, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 71, 101,
			116, 80, 114, 101, 118, 105, 111, 117, 115, 83,
			116, 97, 116, 101, 78, 97, 109, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 59, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 71, 111,
			116, 111, 80, 114, 101, 118, 105, 111, 117, 115,
			83, 116, 97, 116, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 54, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 73, 103, 110, 111, 114,
			101, 69, 118, 101, 110, 116, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 59, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 97, 116, 101, 77,
			97, 99, 104, 105, 110, 101, 92, 75, 105, 108,
			108, 68, 101, 108, 97, 121, 101, 100, 69, 118,
			101, 110, 116, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 97, 116, 101, 77, 97, 99, 104,
			105, 110, 101, 92, 76, 97, 116, 101, 85, 112,
			100, 97, 116, 101, 69, 118, 101, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 46,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 97, 116,
			101, 77, 97, 99, 104, 105, 110, 101, 92, 76,
			111, 111, 112, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 51, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 97, 116, 101, 77, 97, 99, 104, 105,
			110, 101, 92, 76, 111, 111, 112, 83, 116, 97,
			116, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 56, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 97, 116, 101, 77, 97, 99, 104, 105, 110,
			101, 92, 78, 101, 120, 116, 70, 114, 97, 109,
			101, 69, 118, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 53, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 82, 97, 110, 100,
			111, 109, 69, 118, 101, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 48, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 97, 116, 101, 77,
			97, 99, 104, 105, 110, 101, 92, 82, 117, 110,
			70, 83, 77, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 54, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 97, 116, 101, 77, 97, 99, 104, 105,
			110, 101, 92, 82, 117, 110, 70, 83, 77, 65,
			99, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 51, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 83, 101, 110, 100, 69,
			118, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 97, 116, 101, 77, 97, 99, 104,
			105, 110, 101, 92, 83, 101, 110, 100, 69, 118,
			101, 110, 116, 66, 121, 78, 97, 109, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 56,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 97, 116,
			101, 77, 97, 99, 104, 105, 110, 101, 92, 83,
			101, 110, 100, 69, 118, 101, 110, 116, 84, 111,
			70, 115, 109, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 57, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 97, 116, 101, 77, 97, 99, 104, 105,
			110, 101, 92, 83, 101, 110, 100, 82, 97, 110,
			100, 111, 109, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 83, 101,
			113, 117, 101, 110, 99, 101, 69, 118, 101, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 54, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			97, 116, 101, 77, 97, 99, 104, 105, 110, 101,
			92, 83, 101, 116, 69, 118, 101, 110, 116, 68,
			97, 116, 97, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 59, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 97, 116, 101, 77, 97, 99, 104, 105,
			110, 101, 92, 83, 101, 116, 69, 118, 101, 110,
			116, 70, 108, 111, 97, 116, 68, 97, 116, 97,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 97,
			116, 101, 77, 97, 99, 104, 105, 110, 101, 92,
			83, 101, 116, 69, 118, 101, 110, 116, 73, 110,
			116, 68, 97, 116, 97, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 83, 101, 116, 69, 118,
			101, 110, 116, 83, 116, 114, 105, 110, 103, 68,
			97, 116, 97, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 56, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			83, 116, 97, 116, 101, 77, 97, 99, 104, 105,
			110, 101, 92, 83, 101, 116, 69, 118, 101, 110,
			116, 84, 97, 114, 103, 101, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 52, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 97, 116, 101, 77,
			97, 99, 104, 105, 110, 101, 92, 83, 101, 116,
			70, 115, 109, 66, 111, 111, 108, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 83, 116, 97, 116, 101, 77,
			97, 99, 104, 105, 110, 101, 92, 83, 101, 116,
			70, 115, 109, 67, 111, 108, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 52, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 83, 101,
			116, 70, 115, 109, 69, 110, 117, 109, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 83, 101,
			116, 70, 115, 109, 70, 108, 111, 97, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 97, 116,
			101, 77, 97, 99, 104, 105, 110, 101, 92, 83,
			101, 116, 70, 115, 109, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 51, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 83, 101, 116, 70, 115,
			109, 73, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 56, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 97, 116, 101, 77, 97, 99, 104,
			105, 110, 101, 92, 83, 101, 116, 70, 115, 109,
			77, 97, 116, 101, 114, 105, 97, 108, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 54, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 83, 101,
			116, 70, 115, 109, 79, 98, 106, 101, 99, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			58, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 83, 116, 97,
			116, 101, 77, 97, 99, 104, 105, 110, 101, 92,
			83, 101, 116, 70, 115, 109, 81, 117, 97, 116,
			101, 114, 110, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 52, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 83, 101, 116, 70,
			115, 109, 82, 101, 99, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 54, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 97, 116, 101, 77, 97,
			99, 104, 105, 110, 101, 92, 83, 101, 116, 70,
			115, 109, 83, 116, 114, 105, 110, 103, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 83, 101,
			116, 70, 115, 109, 84, 101, 120, 116, 117, 114,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			97, 116, 101, 77, 97, 99, 104, 105, 110, 101,
			92, 83, 101, 116, 70, 115, 109, 86, 97, 114,
			105, 97, 98, 108, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 55, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 83, 116, 97, 116, 101, 77, 97, 99,
			104, 105, 110, 101, 92, 83, 101, 116, 70, 115,
			109, 86, 101, 99, 116, 111, 114, 50, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 97, 116, 101,
			77, 97, 99, 104, 105, 110, 101, 92, 83, 101,
			116, 70, 115, 109, 86, 101, 99, 116, 111, 114,
			51, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 47, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 83, 116,
			114, 105, 110, 103, 92, 66, 117, 105, 108, 100,
			83, 116, 114, 105, 110, 103, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 48, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 114, 105, 110, 103, 92,
			70, 111, 114, 109, 97, 116, 83, 116, 114, 105,
			110, 103, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 114, 105, 110, 103, 92, 71, 101, 116, 83,
			116, 114, 105, 110, 103, 76, 101, 102, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 51,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 114, 105,
			110, 103, 92, 71, 101, 116, 83, 116, 114, 105,
			110, 103, 76, 101, 110, 103, 116, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 50, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 114, 105, 110,
			103, 92, 71, 101, 116, 83, 116, 114, 105, 110,
			103, 82, 105, 103, 104, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 48, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 83, 116, 114, 105, 110, 103, 92,
			71, 101, 116, 83, 117, 98, 115, 116, 114, 105,
			110, 103, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 114, 105, 110, 103, 92, 83, 101, 108, 101,
			99, 116, 82, 97, 110, 100, 111, 109, 83, 116,
			114, 105, 110, 103, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 50, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 83, 116, 114, 105, 110, 103, 92, 83, 101,
			116, 83, 116, 114, 105, 110, 103, 86, 97, 108,
			117, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 48, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 114, 105, 110, 103, 92, 83, 116, 114, 105,
			110, 103, 65, 112, 112, 101, 110, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 46, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 83, 116, 114, 105, 110,
			103, 92, 83, 116, 114, 105, 110, 103, 74, 111,
			105, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 83,
			116, 114, 105, 110, 103, 92, 83, 116, 114, 105,
			110, 103, 82, 101, 112, 108, 97, 99, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 47,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 83, 116, 114, 105,
			110, 103, 92, 83, 116, 114, 105, 110, 103, 83,
			112, 108, 105, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 51, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 84, 105, 109, 101, 92, 71, 101, 116, 83,
			121, 115, 116, 101, 109, 68, 97, 116, 101, 84,
			105, 109, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 45, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 105, 109, 101, 92, 71, 101, 116, 84, 105,
			109, 101, 73, 110, 102, 111, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 43, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 105, 109, 101, 92, 80, 101,
			114, 83, 101, 99, 111, 110, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 44, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 84, 105, 109, 101, 92, 82,
			97, 110, 100, 111, 109, 87, 97, 105, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 43,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 84, 105, 109, 101,
			92, 83, 99, 97, 108, 101, 84, 105, 109, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			38, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 84, 105, 109,
			101, 92, 87, 97, 105, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 92, 65, 108, 105, 103, 110, 84, 111,
			68, 105, 114, 101, 99, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 92, 67, 108, 97, 109,
			112, 80, 111, 115, 105, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 92, 67, 108, 97, 109,
			112, 82, 111, 116, 97, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 92, 71, 101, 116, 65,
			110, 103, 108, 101, 84, 111, 84, 97, 114, 103,
			101, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 50, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 92, 71,
			101, 116, 80, 111, 115, 105, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 92, 71, 101, 116,
			80, 111, 115, 105, 116, 105, 111, 110, 50, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			50, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 92, 71, 101, 116,
			82, 111, 116, 97, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 47, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 92, 71, 101, 116, 83, 99,
			97, 108, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 64, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			73, 110, 118, 101, 114, 115, 101, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 68, 105, 114, 101,
			99, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 92, 73, 110, 118, 101, 114, 115, 101, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 80, 111,
			105, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 45, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			76, 111, 111, 107, 65, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 54, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 92, 76, 111, 111, 107, 65, 116, 68,
			105, 114, 101, 99, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 49, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 92, 77, 111, 118, 101, 79,
			98, 106, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 50, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 92, 77, 111, 118, 101, 84, 111, 119, 97,
			114, 100, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 45, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			82, 111, 116, 97, 116, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 50, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 92, 83, 101, 116, 80, 111, 115, 105,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 52, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			92, 83, 101, 116, 80, 111, 115, 105, 116, 105,
			111, 110, 50, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 56, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			92, 83, 101, 116, 82, 97, 110, 100, 111, 109,
			82, 111, 116, 97, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 50, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 92, 83, 101, 116, 82, 111,
			116, 97, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 47, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 92, 83, 101, 116, 83, 99, 97, 108,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 49, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 92, 83, 105,
			109, 112, 108, 101, 76, 111, 111, 107, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 57, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 92, 83, 109, 111, 111, 116,
			104, 70, 111, 108, 108, 111, 119, 65, 99, 116,
			105, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 51, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 92,
			83, 109, 111, 111, 116, 104, 76, 111, 111, 107,
			65, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 60, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 92, 83,
			109, 111, 111, 116, 104, 76, 111, 111, 107, 65,
			116, 68, 105, 114, 101, 99, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 92, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 68, 105, 114, 101,
			99, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 92, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 80, 111, 105, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 48, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 92, 84, 114, 97, 110, 115, 108, 97,
			116, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 52, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 84,
			114, 105, 103, 111, 110, 111, 109, 101, 116, 114,
			121, 92, 71, 101, 116, 65, 67, 111, 115, 105,
			110, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 50, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 84,
			114, 105, 103, 111, 110, 111, 109, 101, 116, 114,
			121, 92, 71, 101, 116, 65, 83, 105, 110, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			49, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 84, 114, 105,
			103, 111, 110, 111, 109, 101, 116, 114, 121, 92,
			71, 101, 116, 65, 116, 97, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 50, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 84, 114, 105, 103, 111, 110,
			111, 109, 101, 116, 114, 121, 92, 71, 101, 116,
			65, 116, 97, 110, 50, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 114, 105, 103, 111, 110, 111, 109,
			101, 116, 114, 121, 92, 71, 101, 116, 65, 116,
			97, 110, 50, 70, 114, 111, 109, 86, 101, 99,
			116, 111, 114, 50, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 84, 114, 105, 103, 111, 110, 111, 109, 101,
			116, 114, 121, 92, 71, 101, 116, 65, 116, 97,
			110, 50, 70, 114, 111, 109, 86, 101, 99, 116,
			111, 114, 51, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 51, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 114, 105, 103, 111, 110, 111, 109, 101, 116,
			114, 121, 92, 71, 101, 116, 67, 111, 115, 105,
			110, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 84,
			114, 105, 103, 111, 110, 111, 109, 101, 116, 114,
			121, 92, 71, 101, 116, 83, 105, 110, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 48,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 84, 114, 105, 103,
			111, 110, 111, 109, 101, 116, 114, 121, 92, 71,
			101, 116, 84, 97, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 62, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 119, 101, 101, 110, 92, 66, 97,
			115, 101, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 119, 101, 101, 110, 65, 99, 116, 105, 111,
			110, 66, 97, 115, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 119, 101, 101, 110, 92, 66, 97,
			115, 101, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 119, 101, 101, 110, 67, 111, 109, 112, 111,
			110, 101, 110, 116, 66, 97, 115, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 84, 119, 101, 101, 110,
			92, 66, 97, 115, 101, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 119, 101, 101, 110, 69, 120,
			116, 101, 110, 115, 105, 111, 110, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 59, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 84, 119, 101, 101, 110,
			92, 66, 97, 115, 101, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 119, 101, 101, 110, 72, 101,
			108, 112, 101, 114, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 119, 101, 101, 110, 92, 66, 97,
			115, 101, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 119, 101, 101, 110, 80, 114, 111, 112, 101,
			114, 116, 121, 66, 97, 115, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 64, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 84, 119, 101, 101, 110, 92,
			66, 97, 115, 101, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 119, 101, 101, 110, 86, 97, 114,
			105, 97, 98, 108, 101, 66, 97, 115, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 45,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 84, 119, 101, 101,
			110, 92, 84, 119, 101, 101, 110, 65, 117, 100,
			105, 111, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 46, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 84,
			119, 101, 101, 110, 92, 84, 119, 101, 101, 110,
			67, 97, 109, 101, 114, 97, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 45, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 84, 119, 101, 101, 110, 92, 84,
			119, 101, 101, 110, 67, 111, 108, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 44,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 84, 119, 101, 101,
			110, 92, 84, 119, 101, 101, 110, 70, 97, 100,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 45, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 84, 119,
			101, 101, 110, 92, 84, 119, 101, 101, 110, 70,
			108, 111, 97, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 43, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 84, 119, 101, 101, 110, 92, 84, 119, 101,
			101, 110, 73, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 48, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 119, 101, 101, 110, 92, 84, 119,
			101, 101, 110, 80, 111, 115, 105, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 45, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 84, 119,
			101, 101, 110, 92, 84, 119, 101, 101, 110, 80,
			117, 110, 99, 104, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 50, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 84, 119, 101, 101, 110, 92, 84, 119, 101,
			101, 110, 81, 117, 97, 116, 101, 114, 110, 105,
			111, 110, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 44, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 84,
			119, 101, 101, 110, 92, 84, 119, 101, 101, 110,
			82, 101, 99, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 48, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 84, 119, 101, 101, 110, 92, 84, 119, 101,
			101, 110, 82, 111, 116, 97, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			45, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 84, 119, 101,
			101, 110, 92, 84, 119, 101, 101, 110, 83, 99,
			97, 108, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 50, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			84, 119, 101, 101, 110, 92, 84, 119, 101, 101,
			110, 85, 105, 80, 111, 115, 105, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 46, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 84, 119,
			101, 101, 110, 92, 84, 119, 101, 101, 110, 85,
			105, 83, 105, 122, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 47, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 84, 119, 101, 101, 110, 92, 84, 119,
			101, 101, 110, 86, 101, 99, 116, 111, 114, 50,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 84, 119, 101,
			101, 110, 92, 84, 119, 101, 101, 110, 86, 101,
			99, 116, 111, 114, 51, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 67, 97, 110, 118, 97,
			115, 92, 85, 105, 67, 97, 110, 118, 97, 115,
			69, 110, 97, 98, 108, 101, 82, 97, 121, 99,
			97, 115, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 66, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 67, 97, 110, 118, 97, 115, 92,
			85, 105, 67, 97, 110, 118, 97, 115, 70, 111,
			114, 99, 101, 85, 112, 100, 97, 116, 101, 67,
			97, 110, 118, 97, 115, 101, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 60, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 85, 73, 92, 67, 97, 110,
			118, 97, 115, 92, 85, 105, 67, 97, 110, 118,
			97, 115, 71, 114, 111, 117, 112, 83, 101, 116,
			65, 108, 112, 104, 97, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 67, 97, 110, 118, 97,
			115, 92, 85, 105, 67, 97, 110, 118, 97, 115,
			71, 114, 111, 117, 112, 83, 101, 116, 80, 114,
			111, 112, 101, 114, 116, 105, 101, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 67, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 67, 97,
			110, 118, 97, 115, 92, 85, 105, 67, 97, 110,
			118, 97, 115, 83, 99, 97, 108, 101, 114, 71,
			101, 116, 83, 99, 97, 108, 101, 70, 97, 99,
			116, 111, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 67, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 67, 97, 110, 118, 97, 115, 92,
			85, 105, 67, 97, 110, 118, 97, 115, 83, 99,
			97, 108, 101, 114, 83, 101, 116, 83, 99, 97,
			108, 101, 70, 97, 99, 116, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 76, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 67, 111,
			109, 112, 111, 110, 101, 110, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 67, 97,
			110, 118, 97, 115, 82, 97, 121, 99, 97, 115,
			116, 70, 105, 108, 116, 101, 114, 80, 114, 111,
			120, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 75, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 67, 111, 109, 112, 111, 110, 101, 110,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 85, 105, 66, 111, 111, 108, 86, 97,
			108, 117, 101, 67, 104, 97, 110, 103, 101, 100,
			69, 118, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 67, 111, 109, 112, 111,
			110, 101, 110, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 85, 105, 67, 108, 105,
			99, 107, 69, 118, 101, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 64, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 85, 73, 92, 67, 111, 109,
			112, 111, 110, 101, 110, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 85, 105, 68,
			114, 97, 103, 69, 118, 101, 110, 116, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 63,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 67,
			111, 109, 112, 111, 110, 101, 110, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 85,
			105, 68, 114, 111, 112, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			66, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			67, 111, 109, 112, 111, 110, 101, 110, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			85, 105, 69, 110, 100, 69, 100, 105, 116, 69,
			118, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 63, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 85, 73, 92, 67, 111, 109, 112, 111, 110,
			101, 110, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 85, 105, 69, 118, 101, 110,
			116, 66, 97, 115, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 76, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 67, 111, 109, 112, 111,
			110, 101, 110, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 85, 105, 70, 108, 111,
			97, 116, 86, 97, 108, 117, 101, 67, 104, 97,
			110, 103, 101, 100, 69, 118, 101, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 74,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 67,
			111, 109, 112, 111, 110, 101, 110, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 85,
			105, 73, 110, 116, 86, 97, 108, 117, 101, 67,
			104, 97, 110, 103, 101, 100, 69, 118, 101, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 67, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 67, 111, 109, 112, 111, 110, 101, 110, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 85, 105, 80, 111, 105, 110, 116, 101, 114,
			69, 118, 101, 110, 116, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 78, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 67, 111, 109, 112,
			111, 110, 101, 110, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 85, 105, 86, 101,
			99, 116, 111, 114, 50, 86, 97, 108, 117, 101,
			67, 104, 97, 110, 103, 101, 100, 69, 118, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 66, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 69, 118, 101, 110, 116, 83, 121, 115,
			116, 101, 109, 92, 69, 118, 101, 110, 116, 84,
			114, 105, 103, 103, 101, 114, 65, 99, 116, 105,
			111, 110, 66, 97, 115, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 74, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 69, 118, 101, 110,
			116, 83, 121, 115, 116, 101, 109, 92, 85, 105,
			69, 118, 101, 110, 116, 83, 121, 115, 116, 101,
			109, 67, 117, 114, 114, 101, 110, 116, 82, 97,
			121, 67, 97, 115, 116, 65, 108, 108, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 69, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 69, 118,
			101, 110, 116, 83, 121, 115, 116, 101, 109, 92,
			85, 105, 69, 118, 101, 110, 116, 83, 121, 115,
			116, 101, 109, 69, 120, 101, 99, 117, 116, 101,
			69, 118, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 68, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 69, 118, 101, 110, 116,
			83, 121, 115, 116, 101, 109, 92, 85, 105, 71,
			101, 116, 76, 97, 115, 116, 80, 111, 105, 110,
			116, 101, 114, 68, 97, 116, 97, 73, 110, 102,
			111, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 80, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 69, 118, 101, 110, 116, 83, 121, 115, 116,
			101, 109, 92, 85, 105, 71, 101, 116, 76, 97,
			115, 116, 80, 111, 105, 110, 116, 101, 114, 69,
			118, 101, 110, 116, 68, 97, 116, 97, 73, 110,
			112, 117, 116, 66, 117, 116, 116, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 67,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 69,
			118, 101, 110, 116, 83, 121, 115, 116, 101, 109,
			92, 85, 105, 71, 101, 116, 83, 101, 108, 101,
			99, 116, 101, 100, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 67, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 85, 73, 92, 69, 118, 101, 110, 116, 83,
			121, 115, 116, 101, 109, 92, 85, 105, 73, 115,
			80, 111, 105, 110, 116, 101, 114, 79, 118, 101,
			114, 85, 105, 79, 98, 106, 101, 99, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 69,
			118, 101, 110, 116, 83, 121, 115, 116, 101, 109,
			92, 85, 105, 79, 110, 66, 101, 103, 105, 110,
			68, 114, 97, 103, 69, 118, 101, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 59,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 69,
			118, 101, 110, 116, 83, 121, 115, 116, 101, 109,
			92, 85, 105, 79, 110, 67, 97, 110, 99, 101,
			108, 69, 118, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 61, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 69, 118, 101, 110,
			116, 83, 121, 115, 116, 101, 109, 92, 85, 105,
			79, 110, 68, 101, 115, 101, 108, 101, 99, 116,
			69, 118, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 57, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 69, 118, 101, 110, 116,
			83, 121, 115, 116, 101, 109, 92, 85, 105, 79,
			110, 68, 114, 97, 103, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			69, 118, 101, 110, 116, 83, 121, 115, 116, 101,
			109, 92, 85, 105, 79, 110, 68, 114, 111, 112,
			69, 118, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 69, 118, 101, 110, 116,
			83, 121, 115, 116, 101, 109, 92, 85, 105, 79,
			110, 69, 110, 100, 68, 114, 97, 103, 69, 118,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 76, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 69, 118, 101, 110, 116, 83, 121,
			115, 116, 101, 109, 92, 85, 105, 79, 110, 73,
			110, 105, 116, 105, 97, 108, 105, 122, 101, 80,
			111, 116, 101, 110, 116, 105, 97, 108, 68, 114,
			97, 103, 69, 118, 101, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 57, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 85, 73, 92, 69, 118, 101,
			110, 116, 83, 121, 115, 116, 101, 109, 92, 85,
			105, 79, 110, 77, 111, 118, 101, 69, 118, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 69, 118, 101, 110, 116, 83, 121, 115,
			116, 101, 109, 92, 85, 105, 79, 110, 80, 111,
			105, 110, 116, 101, 114, 67, 108, 105, 99, 107,
			69, 118, 101, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 69, 118, 101, 110, 116,
			83, 121, 115, 116, 101, 109, 92, 85, 105, 79,
			110, 80, 111, 105, 110, 116, 101, 114, 68, 111,
			119, 110, 69, 118, 101, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 85, 73, 92, 69, 118, 101,
			110, 116, 83, 121, 115, 116, 101, 109, 92, 85,
			105, 79, 110, 80, 111, 105, 110, 116, 101, 114,
			69, 110, 116, 101, 114, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			64, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			69, 118, 101, 110, 116, 83, 121, 115, 116, 101,
			109, 92, 85, 105, 79, 110, 80, 111, 105, 110,
			116, 101, 114, 69, 120, 105, 116, 69, 118, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 62, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 69, 118, 101, 110, 116, 83, 121, 115,
			116, 101, 109, 92, 85, 105, 79, 110, 80, 111,
			105, 110, 116, 101, 114, 85, 112, 69, 118, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 59, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 69, 118, 101, 110, 116, 83, 121, 115,
			116, 101, 109, 92, 85, 105, 79, 110, 83, 99,
			114, 111, 108, 108, 69, 118, 101, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 59,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 69,
			118, 101, 110, 116, 83, 121, 115, 116, 101, 109,
			92, 85, 105, 79, 110, 83, 101, 108, 101, 99,
			116, 69, 118, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 59, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 69, 118, 101, 110,
			116, 83, 121, 115, 116, 101, 109, 92, 85, 105,
			79, 110, 83, 117, 98, 109, 105, 116, 69, 118,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 67, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 69, 118, 101, 110, 116, 83, 121,
			115, 116, 101, 109, 92, 85, 105, 79, 110, 85,
			112, 100, 97, 116, 101, 83, 101, 108, 101, 99,
			116, 101, 100, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 67, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 69, 118,
			101, 110, 116, 83, 121, 115, 116, 101, 109, 92,
			85, 105, 83, 101, 116, 83, 101, 108, 101, 99,
			116, 101, 100, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 63, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 76, 97, 121, 111, 117, 116, 92,
			85, 105, 76, 97, 121, 111, 117, 116, 69, 108,
			101, 109, 101, 110, 116, 71, 101, 116, 86, 97,
			108, 117, 101, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 63, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 85, 73, 92, 76, 97, 121, 111, 117, 116,
			92, 85, 105, 76, 97, 121, 111, 117, 116, 69,
			108, 101, 109, 101, 110, 116, 83, 101, 116, 86,
			97, 108, 117, 101, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 76, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 83, 101, 108, 101, 99,
			116, 97, 98, 108, 101, 92, 85, 105, 69, 120,
			112, 108, 105, 99, 105, 116, 78, 97, 118, 105,
			103, 97, 116, 105, 111, 110, 71, 101, 116, 80,
			114, 111, 112, 101, 114, 116, 105, 101, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 76,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 83,
			101, 108, 101, 99, 116, 97, 98, 108, 101, 92,
			85, 105, 69, 120, 112, 108, 105, 99, 105, 116,
			78, 97, 118, 105, 103, 97, 116, 105, 111, 110,
			83, 101, 116, 80, 114, 111, 112, 101, 114, 116,
			105, 101, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 58, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 83, 101, 108, 101, 99, 116, 97,
			98, 108, 101, 92, 85, 105, 71, 101, 116, 66,
			108, 111, 99, 107, 67, 111, 108, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 83,
			101, 108, 101, 99, 116, 97, 98, 108, 101, 92,
			85, 105, 71, 101, 116, 73, 115, 73, 110, 116,
			101, 114, 97, 99, 116, 97, 98, 108, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 83,
			101, 108, 101, 99, 116, 97, 98, 108, 101, 92,
			85, 105, 78, 97, 118, 105, 103, 97, 116, 105,
			111, 110, 71, 101, 116, 77, 111, 100, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 83,
			101, 108, 101, 99, 116, 97, 98, 108, 101, 92,
			85, 105, 78, 97, 118, 105, 103, 97, 116, 105,
			111, 110, 83, 101, 116, 77, 111, 100, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 83,
			101, 108, 101, 99, 116, 97, 98, 108, 101, 92,
			85, 105, 83, 101, 116, 65, 110, 105, 109, 97,
			116, 105, 111, 110, 84, 114, 105, 103, 103, 101,
			114, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 58, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 83, 101, 108, 101, 99, 116, 97, 98,
			108, 101, 92, 85, 105, 83, 101, 116, 66, 108,
			111, 99, 107, 67, 111, 108, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 83, 101,
			108, 101, 99, 116, 97, 98, 108, 101, 92, 85,
			105, 83, 101, 116, 73, 115, 73, 110, 116, 101,
			114, 97, 99, 116, 97, 98, 108, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 83, 101,
			108, 101, 99, 116, 97, 98, 108, 101, 92, 85,
			105, 84, 114, 97, 110, 115, 105, 116, 105, 111,
			110, 71, 101, 116, 84, 121, 112, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 83, 101,
			108, 101, 99, 116, 97, 98, 108, 101, 92, 85,
			105, 84, 114, 97, 110, 115, 105, 116, 105, 111,
			110, 83, 101, 116, 84, 121, 112, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 45, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 85, 105,
			66, 117, 116, 116, 111, 110, 65, 114, 114, 97,
			121, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 66, 117, 116, 116, 111, 110, 79,
			110, 67, 108, 105, 99, 107, 69, 118, 101, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 68, 114, 111, 112, 68, 111, 119,
			110, 65, 100, 100, 79, 112, 116, 105, 111, 110,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 54, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 68, 114, 111, 112, 68, 111, 119,
			110, 67, 108, 101, 97, 114, 79, 112, 116, 105,
			111, 110, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 57, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 68, 114, 111, 112, 68,
			111, 119, 110, 71, 101, 116, 83, 101, 108, 101,
			99, 116, 101, 100, 68, 97, 116, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 50, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 85, 105,
			68, 114, 111, 112, 68, 111, 119, 110, 83, 101,
			116, 86, 97, 108, 117, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 85, 105, 71, 114,
			97, 112, 104, 105, 99, 67, 114, 111, 115, 115,
			70, 97, 100, 101, 65, 108, 112, 104, 97, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 85,
			105, 71, 114, 97, 112, 104, 105, 99, 67, 114,
			111, 115, 115, 70, 97, 100, 101, 67, 111, 108,
			111, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 71, 114, 97, 112, 104, 105,
			99, 71, 101, 116, 67, 111, 108, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 49,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 85,
			105, 71, 114, 97, 112, 104, 105, 99, 83, 101,
			116, 67, 111, 108, 111, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 52, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 85, 105, 73, 109,
			97, 103, 101, 71, 101, 116, 70, 105, 108, 108,
			65, 109, 111, 117, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 48, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 85, 105, 73, 109,
			97, 103, 101, 71, 101, 116, 83, 112, 114, 105,
			116, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 52, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 73, 109, 97, 103, 101, 83,
			101, 116, 70, 105, 108, 108, 65, 109, 111, 117,
			110, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 55, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 73, 109, 97, 103, 101, 83,
			101, 116, 82, 97, 121, 99, 97, 115, 116, 84,
			97, 114, 103, 101, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 48, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 85, 105, 73, 109, 97,
			103, 101, 83, 101, 116, 83, 112, 114, 105, 116,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 65, 99, 116, 105, 118, 97, 116,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 54, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 68, 101, 97, 99, 116, 105, 118,
			97, 116, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 61, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 73, 110, 112, 117, 116,
			70, 105, 101, 108, 100, 71, 101, 116, 67, 97,
			114, 101, 116, 66, 108, 105, 110, 107, 82, 97,
			116, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 73, 110, 112, 117, 116, 70,
			105, 101, 108, 100, 71, 101, 116, 67, 104, 97,
			114, 97, 99, 116, 101, 114, 76, 105, 109, 105,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 62, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 71, 101, 116, 72, 105, 100, 101,
			77, 111, 98, 105, 108, 101, 73, 110, 112, 117,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 71, 101, 116, 73, 115, 70, 111,
			99, 117, 115, 101, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 85, 105, 73, 110, 112,
			117, 116, 70, 105, 101, 108, 100, 71, 101, 116,
			80, 108, 97, 99, 101, 72, 111, 108, 100, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 71, 101, 116, 83, 101, 108, 101,
			99, 116, 105, 111, 110, 67, 111, 108, 111, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			51, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			85, 105, 73, 110, 112, 117, 116, 70, 105, 101,
			108, 100, 71, 101, 116, 84, 101, 120, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 85,
			105, 73, 110, 112, 117, 116, 70, 105, 101, 108,
			100, 71, 101, 116, 84, 101, 120, 116, 65, 115,
			70, 108, 111, 97, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 85, 105, 73, 110, 112,
			117, 116, 70, 105, 101, 108, 100, 71, 101, 116,
			84, 101, 120, 116, 65, 115, 73, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 85,
			105, 73, 110, 112, 117, 116, 70, 105, 101, 108,
			100, 71, 101, 116, 87, 97, 115, 67, 97, 110,
			99, 101, 108, 101, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 62, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 85, 105, 73, 110, 112,
			117, 116, 70, 105, 101, 108, 100, 77, 111, 118,
			101, 67, 97, 114, 101, 116, 84, 111, 84, 101,
			120, 116, 69, 110, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 85, 105, 73, 110, 112,
			117, 116, 70, 105, 101, 108, 100, 77, 111, 118,
			101, 67, 97, 114, 101, 116, 84, 111, 84, 101,
			120, 116, 83, 116, 97, 114, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 58, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 85, 73, 92, 85, 105, 73,
			110, 112, 117, 116, 70, 105, 101, 108, 100, 79,
			110, 69, 110, 100, 69, 100, 105, 116, 69, 118,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 57, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 73, 110, 112, 117, 116,
			70, 105, 101, 108, 100, 79, 110, 83, 117, 98,
			109, 105, 116, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 85, 105,
			73, 110, 112, 117, 116, 70, 105, 101, 108, 100,
			79, 110, 86, 97, 108, 117, 101, 67, 104, 97,
			110, 103, 101, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 85, 105,
			73, 110, 112, 117, 116, 70, 105, 101, 108, 100,
			83, 101, 116, 65, 115, 116, 101, 114, 105, 120,
			67, 104, 97, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 85, 73, 92, 85, 105, 73, 110, 112, 117,
			116, 102, 105, 101, 108, 100, 83, 101, 116, 67,
			97, 114, 101, 116, 66, 108, 105, 110, 107, 82,
			97, 116, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 61, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 73, 110, 112, 117, 116,
			70, 105, 101, 108, 100, 83, 101, 116, 67, 104,
			97, 114, 97, 99, 116, 101, 114, 76, 105, 109,
			105, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 62, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 73, 110, 112, 117, 116, 70,
			105, 101, 108, 100, 83, 101, 116, 72, 105, 100,
			101, 77, 111, 98, 105, 108, 101, 73, 110, 112,
			117, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 58, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 73, 110, 112, 117, 116, 70,
			105, 101, 108, 100, 83, 101, 116, 80, 108, 97,
			99, 101, 72, 111, 108, 100, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 61, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 85, 105,
			73, 110, 112, 117, 116, 70, 105, 101, 108, 100,
			83, 101, 116, 83, 101, 108, 101, 99, 116, 105,
			111, 110, 67, 111, 108, 111, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 51, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 85, 73, 92, 85, 105, 73,
			110, 112, 117, 116, 70, 105, 101, 108, 100, 83,
			101, 116, 84, 101, 120, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 58, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 85, 105, 82, 97,
			119, 73, 109, 97, 103, 101, 83, 101, 116, 82,
			97, 121, 99, 97, 115, 116, 84, 97, 114, 103,
			101, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 52, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 82, 97, 119, 73, 109, 97,
			103, 101, 83, 101, 116, 84, 101, 120, 116, 117,
			114, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 41, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 82, 101, 98, 117, 105, 108,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 83, 99, 114, 111, 108, 108, 98,
			97, 114, 71, 101, 116, 68, 105, 114, 101, 99,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 51, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 85, 73, 92, 85, 105, 83, 99, 114, 111,
			108, 108, 98, 97, 114, 71, 101, 116, 86, 97,
			108, 117, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 62, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 83, 99, 114, 111, 108,
			108, 98, 97, 114, 79, 110, 86, 97, 108, 117,
			101, 67, 104, 97, 110, 103, 101, 100, 69, 118,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 55, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 83, 99, 114, 111, 108,
			108, 98, 97, 114, 83, 101, 116, 68, 105, 114,
			101, 99, 116, 105, 111, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 59, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 73, 92, 85, 105, 83, 99,
			114, 111, 108, 108, 98, 97, 114, 83, 101, 116,
			78, 117, 109, 98, 101, 114, 79, 102, 83, 116,
			101, 112, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 50, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 83, 99, 114, 111, 108,
			108, 98, 97, 114, 83, 101, 116, 83, 105, 122,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 51, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 83, 99, 114, 111, 108, 108, 98,
			97, 114, 83, 101, 116, 86, 97, 108, 117, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			85, 105, 83, 99, 114, 111, 108, 108, 82, 101,
			99, 116, 83, 101, 116, 72, 111, 114, 105, 122,
			111, 110, 116, 97, 108, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 85, 105, 83, 99, 114,
			111, 108, 108, 82, 101, 99, 116, 83, 101, 116,
			78, 111, 114, 109, 97, 108, 105, 122, 101, 100,
			80, 111, 115, 105, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 85, 105,
			83, 99, 114, 111, 108, 108, 82, 101, 99, 116,
			83, 101, 116, 86, 101, 114, 116, 105, 99, 97,
			108, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 83, 108, 105, 100, 101, 114, 71,
			101, 116, 68, 105, 114, 101, 99, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 49, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 85, 73,
			92, 85, 105, 83, 108, 105, 100, 101, 114, 71,
			101, 116, 77, 105, 110, 77, 97, 120, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 85, 105,
			83, 108, 105, 100, 101, 114, 71, 101, 116, 78,
			111, 114, 109, 97, 108, 105, 122, 101, 100, 86,
			97, 108, 117, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 48, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 85, 73, 92, 85, 105, 83, 108, 105, 100,
			101, 114, 71, 101, 116, 86, 97, 108, 117, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			55, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			85, 105, 83, 108, 105, 100, 101, 114, 71, 101,
			116, 87, 104, 111, 108, 101, 78, 117, 109, 98,
			101, 114, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 59, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 83, 108, 105, 100, 101,
			114, 79, 110, 86, 97, 108, 117, 101, 67, 104,
			97, 110, 103, 101, 100, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			85, 105, 83, 108, 105, 100, 101, 114, 83, 101,
			116, 68, 105, 114, 101, 99, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			49, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			85, 105, 83, 108, 105, 100, 101, 114, 83, 101,
			116, 77, 105, 110, 77, 97, 120, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 58, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 85, 73, 92, 85, 105, 83,
			108, 105, 100, 101, 114, 83, 101, 116, 78, 111,
			114, 109, 97, 108, 105, 122, 101, 100, 86, 97,
			108, 117, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 48, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 83, 108, 105, 100, 101,
			114, 83, 101, 116, 86, 97, 108, 117, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 73, 92, 85,
			105, 83, 108, 105, 100, 101, 114, 83, 101, 116,
			87, 104, 111, 108, 101, 78, 117, 109, 98, 101,
			114, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 45, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 85,
			73, 92, 85, 105, 84, 101, 120, 116, 71, 101,
			116, 84, 101, 120, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 45, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 73, 92, 85, 105, 84, 101, 120,
			116, 83, 101, 116, 84, 101, 120, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 47, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 85, 73, 92, 85, 105,
			84, 111, 103, 103, 108, 101, 71, 101, 116, 73,
			115, 79, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 59, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			85, 73, 92, 85, 105, 84, 111, 103, 103, 108,
			101, 79, 110, 86, 97, 108, 117, 101, 67, 104,
			97, 110, 103, 101, 100, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 85, 73, 92,
			85, 105, 84, 111, 103, 103, 108, 101, 83, 101,
			116, 73, 115, 79, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 85, 110, 105, 116, 121, 79, 98, 106,
			101, 99, 116, 92, 71, 101, 116, 67, 111, 109,
			112, 111, 110, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 52, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 110, 105, 116, 121, 79, 98,
			106, 101, 99, 116, 92, 71, 101, 116, 80, 114,
			111, 112, 101, 114, 116, 121, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 85, 110, 105, 116, 121, 79, 98,
			106, 101, 99, 116, 92, 83, 101, 116, 79, 98,
			106, 101, 99, 116, 86, 97, 108, 117, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 85, 110, 105, 116,
			121, 79, 98, 106, 101, 99, 116, 92, 83, 101,
			116, 80, 114, 111, 112, 101, 114, 116, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 49,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 101, 99, 116,
			111, 114, 50, 92, 68, 101, 98, 117, 103, 86,
			101, 99, 116, 111, 114, 50, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 53, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 101, 99, 116, 111, 114, 50,
			92, 71, 101, 116, 86, 101, 99, 116, 111, 114,
			50, 76, 101, 110, 103, 116, 104, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 49, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 101, 99, 116, 111, 114,
			50, 92, 71, 101, 116, 86, 101, 99, 116, 111,
			114, 50, 88, 89, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 56, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 101, 99, 116, 111, 114, 50, 92, 83,
			101, 108, 101, 99, 116, 82, 97, 110, 100, 111,
			109, 86, 101, 99, 116, 111, 114, 50, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 52, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 101, 99, 116, 111,
			114, 50, 92, 83, 101, 116, 86, 101, 99, 116,
			111, 114, 50, 86, 97, 108, 117, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 49, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 101, 99, 116, 111,
			114, 50, 92, 83, 101, 116, 86, 101, 99, 116,
			111, 114, 50, 88, 89, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 47, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 101, 99, 116, 111, 114, 50, 92,
			86, 101, 99, 116, 111, 114, 50, 65, 100, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			49, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 101, 99,
			116, 111, 114, 50, 92, 86, 101, 99, 116, 111,
			114, 50, 65, 100, 100, 88, 89, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 58, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 101, 99, 116, 111, 114,
			50, 92, 86, 101, 99, 116, 111, 114, 50, 67,
			108, 97, 109, 112, 77, 97, 103, 110, 105, 116,
			117, 100, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 58, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 101, 99, 116, 111, 114, 50, 92, 86, 101,
			99, 116, 111, 114, 50, 72, 105, 103, 104, 80,
			97, 115, 115, 70, 105, 108, 116, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 101, 99, 116,
			111, 114, 50, 92, 86, 101, 99, 116, 111, 114,
			50, 73, 110, 116, 101, 114, 112, 111, 108, 97,
			116, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 50, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			101, 99, 116, 111, 114, 50, 92, 86, 101, 99,
			116, 111, 114, 50, 73, 110, 118, 101, 114, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			48, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 101, 99,
			116, 111, 114, 50, 92, 86, 101, 99, 116, 111,
			114, 50, 76, 101, 114, 112, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 57, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 101, 99, 116, 111, 114, 50,
			92, 86, 101, 99, 116, 111, 114, 50, 76, 111,
			119, 80, 97, 115, 115, 70, 105, 108, 116, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 101,
			99, 116, 111, 114, 50, 92, 86, 101, 99, 116,
			111, 114, 50, 77, 111, 118, 101, 84, 111, 119,
			97, 114, 100, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 52, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 101, 99, 116, 111, 114, 50, 92, 86,
			101, 99, 116, 111, 114, 50, 77, 117, 108, 116,
			105, 112, 108, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 53, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 101, 99, 116, 111, 114, 50, 92, 86,
			101, 99, 116, 111, 114, 50, 78, 111, 114, 109,
			97, 108, 105, 122, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 101, 99, 116, 111, 114, 50, 92,
			86, 101, 99, 116, 111, 114, 50, 79, 112, 101,
			114, 97, 116, 111, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 53, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 101, 99, 116, 111, 114, 50, 92,
			86, 101, 99, 116, 111, 114, 50, 80, 101, 114,
			83, 101, 99, 111, 110, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 57, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 101, 99, 116, 111, 114, 50,
			92, 86, 101, 99, 116, 111, 114, 50, 82, 111,
			116, 97, 116, 101, 84, 111, 119, 97, 114, 100,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 55, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 101,
			99, 116, 111, 114, 50, 92, 86, 101, 99, 116,
			111, 114, 50, 83, 110, 97, 112, 84, 111, 65,
			110, 103, 108, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 54, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 101, 99, 116, 111, 114, 50, 92, 86,
			101, 99, 116, 111, 114, 50, 83, 110, 97, 112,
			84, 111, 71, 114, 105, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 53, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 101, 99, 116, 111, 114, 50,
			92, 86, 101, 99, 116, 111, 114, 50, 83, 117,
			98, 115, 116, 114, 97, 99, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 50, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 101, 99, 116, 111, 114,
			51, 92, 71, 101, 116, 86, 101, 99, 116, 111,
			114, 51, 88, 89, 90, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 101, 99, 116, 111, 114, 51, 92,
			71, 101, 116, 86, 101, 99, 116, 111, 114, 76,
			101, 110, 103, 116, 104, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 101, 99, 116, 111, 114, 51, 92,
			83, 101, 108, 101, 99, 116, 82, 97, 110, 100,
			111, 109, 86, 101, 99, 116, 111, 114, 51, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 101, 99, 116,
			111, 114, 51, 92, 83, 101, 116, 86, 101, 99,
			116, 111, 114, 51, 86, 97, 108, 117, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 50,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 101, 99, 116,
			111, 114, 51, 92, 83, 101, 116, 86, 101, 99,
			116, 111, 114, 51, 88, 89, 90, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 47, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 101, 99, 116, 111, 114,
			51, 92, 86, 101, 99, 116, 111, 114, 51, 65,
			100, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 50, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			101, 99, 116, 111, 114, 51, 92, 86, 101, 99,
			116, 111, 114, 51, 65, 100, 100, 88, 89, 90,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			58, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 101, 99,
			116, 111, 114, 51, 92, 86, 101, 99, 116, 111,
			114, 51, 67, 108, 97, 109, 112, 77, 97, 103,
			110, 105, 116, 117, 100, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 60, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 101, 99, 116, 111, 114, 51,
			92, 86, 101, 99, 116, 111, 114, 51, 67, 108,
			97, 109, 112, 77, 97, 103, 110, 105, 116, 117,
			100, 101, 88, 90, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 58, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 101, 99, 116, 111, 114, 51, 92, 86,
			101, 99, 116, 111, 114, 51, 72, 105, 103, 104,
			80, 97, 115, 115, 70, 105, 108, 116, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			55, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 101, 99,
			116, 111, 114, 51, 92, 86, 101, 99, 116, 111,
			114, 51, 73, 110, 116, 101, 114, 112, 111, 108,
			97, 116, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 50, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 101, 99, 116, 111, 114, 51, 92, 86, 101,
			99, 116, 111, 114, 51, 73, 110, 118, 101, 114,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 48, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 101,
			99, 116, 111, 114, 51, 92, 86, 101, 99, 116,
			111, 114, 51, 76, 101, 114, 112, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 57, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 101, 99, 116, 111, 114,
			51, 92, 86, 101, 99, 116, 111, 114, 51, 76,
			111, 119, 80, 97, 115, 115, 70, 105, 108, 116,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 52, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			101, 99, 116, 111, 114, 51, 92, 86, 101, 99,
			116, 111, 114, 51, 77, 117, 108, 116, 105, 112,
			108, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 53, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			101, 99, 116, 111, 114, 51, 92, 86, 101, 99,
			116, 111, 114, 51, 78, 111, 114, 109, 97, 108,
			105, 122, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 52, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 101, 99, 116, 111, 114, 51, 92, 86, 101,
			99, 116, 111, 114, 51, 79, 112, 101, 114, 97,
			116, 111, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 53, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 101, 99, 116, 111, 114, 51, 92, 86, 101,
			99, 116, 111, 114, 51, 80, 101, 114, 83, 101,
			99, 111, 110, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 101, 99, 116, 111, 114, 51, 92, 86,
			101, 99, 116, 111, 114, 51, 82, 111, 116, 97,
			116, 101, 84, 111, 119, 97, 114, 100, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 101, 99, 116,
			111, 114, 51, 92, 86, 101, 99, 116, 111, 114,
			51, 83, 110, 97, 112, 84, 111, 71, 114, 105,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 101,
			99, 116, 111, 114, 51, 92, 86, 101, 99, 116,
			111, 114, 51, 83, 117, 98, 116, 114, 97, 99,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 66, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 105,
			100, 101, 111, 67, 108, 105, 112, 92, 86, 105,
			100, 101, 111, 67, 108, 105, 112, 71, 101, 116,
			65, 117, 100, 105, 111, 84, 114, 97, 99, 107,
			67, 111, 117, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 105, 100, 101, 111, 67, 108, 105,
			112, 92, 86, 105, 100, 101, 111, 67, 108, 105,
			112, 71, 101, 116, 70, 114, 97, 109, 101, 67,
			111, 117, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 60, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 105, 100, 101, 111, 67, 108, 105, 112,
			92, 86, 105, 100, 101, 111, 67, 108, 105, 112,
			71, 101, 116, 70, 114, 97, 109, 101, 82, 97,
			116, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 57, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			105, 100, 101, 111, 67, 108, 105, 112, 92, 86,
			105, 100, 101, 111, 67, 108, 105, 112, 71, 101,
			116, 76, 101, 110, 103, 116, 104, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 63, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 105, 100, 101, 111, 67,
			108, 105, 112, 92, 86, 105, 100, 101, 111, 67,
			108, 105, 112, 71, 101, 116, 79, 114, 105, 103,
			105, 110, 97, 108, 80, 97, 116, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			67, 108, 105, 112, 92, 86, 105, 100, 101, 111,
			67, 108, 105, 112, 71, 101, 116, 83, 105, 122,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 62, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 69, 114, 114, 111, 114, 69, 118, 101, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 69, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 70, 114, 97, 109, 101, 68, 114, 111, 112,
			112, 101, 100, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 67, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 70, 114,
			97, 109, 101, 82, 101, 97, 100, 121, 69, 118,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 66, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 65, 115, 112, 101,
			99, 116, 82, 97, 116, 105, 111, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 70, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			65, 117, 100, 105, 111, 79, 117, 116, 112, 117,
			116, 77, 111, 100, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 70, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 65, 117,
			100, 105, 111, 84, 114, 97, 99, 107, 67, 111,
			117, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 78, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 67, 97, 110, 83,
			101, 116, 68, 105, 114, 101, 99, 116, 65, 117,
			100, 105, 111, 86, 111, 108, 117, 109, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 74,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 67, 97, 110, 83, 101, 116, 80, 108,
			97, 121, 98, 97, 99, 107, 83, 112, 101, 101,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 71, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 67, 97, 110, 83, 101, 116,
			83, 107, 105, 112, 79, 110, 68, 114, 111, 112,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			65, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 67, 97, 110, 83, 101, 116, 84,
			105, 109, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 67, 97, 110, 83,
			101, 116, 84, 105, 109, 101, 83, 111, 117, 114,
			99, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 62, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 67, 97, 110, 83, 116,
			101, 112, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 83, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 100, 65, 117, 100, 105, 111,
			84, 114, 97, 99, 107, 77, 97, 120, 67, 111,
			117, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 72, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 67, 117, 114, 114,
			101, 110, 116, 70, 114, 97, 109, 101, 73, 110,
			100, 101, 120, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 65, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 70, 114, 97, 109,
			101, 67, 111, 117, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 70,
			114, 97, 109, 101, 82, 97, 116, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 64, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 73, 115, 76, 111, 111, 112, 105, 110, 103,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			64, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 73, 115, 80, 108, 97, 121, 105,
			110, 103, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 73, 115, 80, 114, 101,
			112, 97, 114, 101, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 68, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 80, 108,
			97, 121, 98, 97, 99, 107, 83, 112, 101, 101,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 66, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 80, 108, 97, 121, 79, 110,
			65, 119, 97, 107, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 65, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 82, 101,
			110, 100, 101, 114, 77, 111, 100, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 75, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 83, 101, 110, 100, 70, 114, 97, 109, 101,
			82, 101, 97, 100, 121, 69, 118, 101, 110, 116,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 65, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 83, 107, 105, 112, 79, 110,
			68, 114, 111, 112, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 61, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 83, 111, 117,
			114, 99, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 67, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 84, 97, 114, 103,
			101, 116, 67, 97, 109, 101, 114, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 72, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 84, 97, 114, 103, 101, 116, 67, 97, 109,
			101, 114, 97, 65, 108, 112, 104, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 77, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 84, 97, 114, 103, 101, 116, 77, 97, 116,
			101, 114, 105, 97, 108, 80, 114, 111, 112, 101,
			114, 116, 121, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 68, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 84, 97, 114, 103,
			101, 116, 84, 101, 120, 116, 117, 114, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 84, 101, 120, 116, 117, 114, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 59,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 84, 105, 109, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 65, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 84,
			105, 109, 101, 83, 111, 117, 114, 99, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 85, 114, 108, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 86, 105,
			100, 101, 111, 67, 108, 105, 112, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 72, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			87, 97, 105, 116, 70, 111, 114, 70, 105, 114,
			115, 116, 70, 114, 97, 109, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 73, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 76, 111, 111,
			112, 80, 111, 105, 110, 116, 82, 101, 97, 99,
			104, 101, 100, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 57, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 80, 97,
			117, 115, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 56, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 65, 99, 116, 105, 111, 110, 115, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 80, 108, 97, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 59, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 80, 114, 101,
			112, 97, 114, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 74, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 80, 114, 101, 112, 97, 114,
			101, 100, 67, 111, 109, 112, 108, 101, 116, 101,
			100, 69, 118, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 70, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 83, 101, 101, 107,
			67, 111, 109, 112, 108, 101, 116, 101, 100, 69,
			118, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 66, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 83, 101, 116, 65, 115, 112,
			101, 99, 116, 82, 97, 116, 105, 111, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 70, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 83, 101,
			116, 65, 117, 100, 105, 111, 79, 117, 116, 112,
			117, 116, 77, 111, 100, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 68, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 83, 101, 116, 80,
			108, 97, 121, 98, 97, 99, 107, 83, 112, 101,
			101, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 66, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 83, 101, 116, 80, 108, 97, 121, 79,
			110, 65, 119, 97, 107, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 65, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 83, 101, 116, 82,
			101, 110, 100, 101, 114, 77, 111, 100, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 75,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 83, 101, 110, 100, 70, 114, 97, 109,
			101, 82, 101, 97, 100, 121, 69, 118, 101, 110,
			116, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			92, 65, 99, 116, 105, 111, 110, 115, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 83, 101, 116, 83, 107, 105, 112, 79,
			110, 68, 114, 111, 112, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 83, 101, 116, 83, 111,
			117, 114, 99, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 67, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 83, 101, 116, 84, 97, 114,
			103, 101, 116, 67, 97, 109, 101, 114, 97, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 72,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 84, 97, 114, 103, 101, 116, 67, 97,
			109, 101, 114, 97, 65, 108, 112, 104, 97, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 77,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 92, 65, 99,
			116, 105, 111, 110, 115, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 84, 97, 114, 103, 101, 116, 77, 97,
			116, 101, 114, 105, 97, 108, 80, 114, 111, 112,
			101, 114, 116, 121, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 68, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 65, 99, 116, 105, 111, 110, 115,
			92, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 83, 101, 116, 84, 97, 114,
			103, 101, 116, 84, 101, 120, 116, 117, 114, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			59, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			83, 101, 116, 84, 105, 109, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 92, 65, 99, 116, 105,
			111, 110, 115, 92, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 92, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 83, 101, 116,
			84, 105, 109, 101, 83, 111, 117, 114, 99, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			58, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			83, 101, 116, 85, 114, 108, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 65, 99, 116, 105, 111,
			110, 115, 92, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 83, 101, 116, 86,
			105, 100, 101, 111, 67, 108, 105, 112, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 72, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 83, 101,
			116, 87, 97, 105, 116, 70, 111, 114, 70, 105,
			114, 115, 116, 70, 114, 97, 109, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 64, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 65, 99, 116,
			105, 111, 110, 115, 92, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 83, 116,
			97, 114, 116, 101, 100, 69, 118, 101, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			63, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 92, 65,
			99, 116, 105, 111, 110, 115, 92, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 92, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			83, 116, 101, 112, 70, 111, 114, 119, 97, 114,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 115, 92, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 92,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 83, 116, 111, 112, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 42, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 65, 99, 116, 105, 111, 110,
			115, 92, 87, 101, 98, 92, 87, 87, 87, 79,
			98, 106, 101, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 33, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 92, 70, 115, 109, 80, 114, 111,
			99, 101, 115, 115, 111, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 33, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 85, 112, 100, 97, 116,
			101, 72, 101, 108, 112, 101, 114, 46, 99, 115,
			0, 0, 0, 9, 0, 0, 0, 75, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 92, 67, 111, 110, 116, 114, 111, 108,
			82, 101, 109, 97, 112, 112, 105, 110, 103, 49,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 67,
			111, 110, 116, 114, 111, 108, 82, 101, 109, 97,
			112, 112, 105, 110, 103, 68, 101, 109, 111, 49,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			83, 92, 65, 115, 115, 101, 116, 115, 92, 82,
			101, 119, 105, 114, 101, 100, 92, 69, 120, 97,
			109, 112, 108, 101, 115, 92, 67, 117, 115, 116,
			111, 109, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 115, 84, 105, 108, 116, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 67, 117, 115, 116,
			111, 109, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 115, 84, 105, 108, 116, 68, 101, 109,
			111, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 79, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			97, 109, 112, 108, 101, 115, 92, 67, 117, 115,
			116, 111, 109, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 115, 84, 111, 117, 99, 104, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 117,
			115, 116, 111, 109, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 68, 101, 109, 111, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 86, 92,
			65, 115, 115, 101, 116, 115, 92, 82, 101, 119,
			105, 114, 101, 100, 92, 69, 120, 97, 109, 112,
			108, 101, 115, 92, 67, 117, 115, 116, 111, 109,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			115, 84, 111, 117, 99, 104, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 67, 117, 115, 116, 111,
			109, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 68, 101, 109, 111, 95, 80, 108, 97, 121,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 77, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 97, 109, 112, 108, 101, 115, 92, 67, 117,
			115, 116, 111, 109, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 115, 84, 111, 117, 99, 104,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 84,
			111, 117, 99, 104, 66, 117, 116, 116, 111, 110,
			69, 120, 97, 109, 112, 108, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 79, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 92, 67, 117, 115, 116, 111, 109, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 115,
			84, 111, 117, 99, 104, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 84, 111, 117, 99, 104, 74,
			111, 121, 115, 116, 105, 99, 107, 69, 120, 97,
			109, 112, 108, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 99, 92, 65, 115, 115, 101,
			116, 115, 92, 82, 101, 119, 105, 114, 101, 100,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 92,
			67, 117, 115, 116, 111, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 72, 97, 114,
			100, 119, 97, 114, 101, 74, 111, 121, 115, 116,
			105, 99, 107, 77, 97, 112, 80, 108, 97, 116,
			102, 111, 114, 109, 68, 97, 116, 97, 83, 101,
			116, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 92, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			97, 109, 112, 108, 101, 115, 92, 67, 117, 115,
			116, 111, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 117, 115, 116, 111, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 72, 97, 114, 100, 119, 97,
			114, 101, 74, 111, 121, 115, 116, 105, 99, 107,
			77, 97, 112, 80, 114, 111, 118, 105, 100, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 72, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			97, 109, 112, 108, 101, 115, 92, 67, 117, 115,
			116, 111, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 117, 115, 116, 111, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 77, 97, 110, 97, 103, 101,
			114, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 80, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			97, 109, 112, 108, 101, 115, 92, 67, 117, 115,
			116, 111, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			77, 121, 80, 108, 97, 116, 102, 111, 114, 109,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			69, 120, 116, 101, 110, 115, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 81,
			92, 65, 115, 115, 101, 116, 115, 92, 82, 101,
			119, 105, 114, 101, 100, 92, 69, 120, 97, 109,
			112, 108, 101, 115, 92, 67, 117, 115, 116, 111,
			109, 80, 108, 97, 116, 102, 111, 114, 109, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 77, 121,
			80, 108, 97, 116, 102, 111, 114, 109, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 73, 100,
			101, 110, 116, 105, 102, 105, 101, 114, 46, 99,
			115, 0, 0, 0, 4, 0, 0, 0, 91, 92,
			65, 115, 115, 101, 116, 115, 92, 82, 101, 119,
			105, 114, 101, 100, 92, 69, 120, 97, 109, 112,
			108, 101, 115, 92, 67, 117, 115, 116, 111, 109,
			80, 108, 97, 116, 102, 111, 114, 109, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 77, 121, 80,
			108, 97, 116, 102, 111, 114, 109, 72, 97, 114,
			100, 119, 97, 114, 101, 74, 111, 121, 115, 116,
			105, 99, 107, 77, 97, 112, 80, 108, 97, 116,
			102, 111, 114, 109, 77, 97, 112, 46, 99, 115,
			0, 0, 0, 2, 0, 0, 0, 72, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 92, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 77, 121, 80, 108,
			97, 116, 102, 111, 114, 109, 73, 110, 112, 117,
			116, 83, 111, 117, 114, 99, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 82, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 92, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 77, 121, 80, 108,
			97, 116, 102, 111, 114, 109, 85, 110, 105, 102,
			105, 101, 100, 75, 101, 121, 98, 111, 97, 114,
			100, 83, 111, 117, 114, 99, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 79, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 92, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 77, 121, 80, 108,
			97, 116, 102, 111, 114, 109, 85, 110, 105, 102,
			105, 101, 100, 77, 111, 117, 115, 101, 83, 111,
			117, 114, 99, 101, 46, 99, 115, 0, 0, 0,
			2, 0, 0, 0, 75, 92, 65, 115, 115, 101,
			116, 115, 92, 82, 101, 119, 105, 114, 101, 100,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 92,
			67, 117, 115, 116, 111, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 85, 110, 105, 116, 121, 74, 111,
			121, 115, 116, 105, 99, 107, 73, 110, 112, 117,
			116, 83, 111, 117, 114, 99, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 64, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 92, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 86, 105, 98, 114,
			97, 116, 105, 111, 110, 84, 101, 115, 116, 46,
			99, 115, 0, 0, 0, 2, 0, 0, 0, 94,
			92, 65, 115, 115, 101, 116, 115, 92, 82, 101,
			119, 105, 114, 101, 100, 92, 69, 120, 97, 109,
			112, 108, 101, 115, 92, 68, 117, 97, 108, 83,
			104, 111, 99, 107, 52, 83, 112, 101, 99, 105,
			97, 108, 70, 101, 97, 116, 117, 114, 101, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 68,
			117, 97, 108, 83, 104, 111, 99, 107, 52, 83,
			112, 101, 99, 105, 97, 108, 70, 101, 97, 116,
			117, 114, 101, 115, 69, 120, 97, 109, 112, 108,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 75, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			97, 109, 112, 108, 101, 115, 92, 69, 105, 103,
			104, 116, 80, 108, 97, 121, 101, 114, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 69, 105,
			103, 104, 116, 80, 108, 97, 121, 101, 114, 115,
			69, 120, 97, 109, 112, 108, 101, 95, 80, 108,
			97, 121, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 101, 92, 65, 115, 115, 101,
			116, 115, 92, 82, 101, 119, 105, 114, 101, 100,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 92,
			70, 97, 108, 108, 98, 97, 99, 107, 74, 111,
			121, 115, 116, 105, 99, 107, 73, 100, 101, 110,
			116, 105, 102, 105, 99, 97, 116, 105, 111, 110,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 70,
			97, 108, 108, 98, 97, 99, 107, 74, 111, 121,
			115, 116, 105, 99, 107, 73, 100, 101, 110, 116,
			105, 102, 105, 99, 97, 116, 105, 111, 110, 68,
			101, 109, 111, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 72, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			69, 120, 97, 109, 112, 108, 101, 115, 92, 71,
			97, 109, 101, 112, 97, 100, 84, 101, 109, 112,
			108, 97, 116, 101, 85, 73, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 85, 73, 69, 102, 102,
			101, 99, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 73, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			69, 120, 97, 109, 112, 108, 101, 115, 92, 71,
			97, 109, 101, 112, 97, 100, 84, 101, 109, 112,
			108, 97, 116, 101, 85, 73, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 85, 73, 69, 108, 101,
			109, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			3, 0, 0, 0, 71, 92, 65, 115, 115, 101,
			116, 115, 92, 82, 101, 119, 105, 114, 101, 100,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 92,
			71, 97, 109, 101, 112, 97, 100, 84, 101, 109,
			112, 108, 97, 116, 101, 85, 73, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 71, 97, 109, 101,
			112, 97, 100, 84, 101, 109, 112, 108, 97, 116,
			101, 85, 73, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 78, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			69, 120, 97, 109, 112, 108, 101, 115, 92, 80,
			108, 97, 121, 101, 114, 77, 111, 117, 115, 101,
			83, 112, 114, 105, 116, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 108, 97, 121, 101,
			114, 77, 111, 117, 115, 101, 83, 112, 114, 105,
			116, 101, 69, 120, 97, 109, 112, 108, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 87,
			92, 65, 115, 115, 101, 116, 115, 92, 82, 101,
			119, 105, 114, 101, 100, 92, 69, 120, 97, 109,
			112, 108, 101, 115, 92, 80, 108, 97, 121, 101,
			114, 77, 111, 117, 115, 101, 85, 110, 105, 116,
			121, 85, 73, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 80, 108, 97, 121, 101, 114, 80, 111,
			105, 110, 116, 101, 114, 69, 118, 101, 110, 116,
			72, 97, 110, 100, 108, 101, 114, 69, 120, 97,
			109, 112, 108, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 64, 92, 65, 115, 115, 101,
			116, 115, 92, 82, 101, 119, 105, 114, 101, 100,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 92,
			80, 108, 97, 121, 101, 114, 77, 111, 117, 115,
			101, 85, 110, 105, 116, 121, 85, 73, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 85, 73, 80,
			111, 105, 110, 116, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 93, 92, 65, 115,
			115, 101, 116, 115, 92, 82, 101, 119, 105, 114,
			101, 100, 92, 69, 120, 97, 109, 112, 108, 101,
			115, 92, 80, 114, 101, 115, 115, 65, 110, 121,
			66, 117, 116, 116, 111, 110, 84, 111, 74, 111,
			105, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 80, 114, 101, 115, 115, 65, 110, 121, 66,
			117, 116, 116, 111, 110, 84, 111, 74, 111, 105,
			110, 69, 120, 97, 109, 112, 108, 101, 95, 65,
			115, 115, 105, 103, 110, 101, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 95, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 92, 80, 114, 101, 115, 115, 65, 110,
			121, 66, 117, 116, 116, 111, 110, 84, 111, 74,
			111, 105, 110, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 80, 114, 101, 115, 115, 65, 110, 121,
			66, 117, 116, 116, 111, 110, 84, 111, 74, 111,
			105, 110, 69, 120, 97, 109, 112, 108, 101, 95,
			71, 97, 109, 101, 80, 108, 97, 121, 101, 114,
			46, 99, 115, 0, 0, 0, 2, 0, 0, 0,
			85, 92, 65, 115, 115, 101, 116, 115, 92, 82,
			101, 119, 105, 114, 101, 100, 92, 69, 120, 97,
			109, 112, 108, 101, 115, 92, 80, 114, 101, 115,
			115, 83, 116, 97, 114, 116, 84, 111, 74, 111,
			105, 110, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 80, 114, 101, 115, 115, 83, 116, 97, 114,
			116, 84, 111, 74, 111, 105, 110, 69, 120, 97,
			109, 112, 108, 101, 95, 65, 115, 115, 105, 103,
			110, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 87, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			69, 120, 97, 109, 112, 108, 101, 115, 92, 80,
			114, 101, 115, 115, 83, 116, 97, 114, 116, 84,
			111, 74, 111, 105, 110, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 80, 114, 101, 115, 115, 83,
			116, 97, 114, 116, 84, 111, 74, 111, 105, 110,
			69, 120, 97, 109, 112, 108, 101, 95, 71, 97,
			109, 101, 80, 108, 97, 121, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 49, 92,
			65, 115, 115, 101, 116, 115, 92, 82, 101, 119,
			105, 114, 101, 100, 92, 69, 120, 97, 109, 112,
			108, 101, 115, 92, 83, 104, 97, 114, 101, 100,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 66,
			117, 108, 108, 101, 116, 46, 99, 115, 0, 0,
			0, 3, 0, 0, 0, 109, 92, 65, 115, 115,
			101, 116, 115, 92, 82, 101, 119, 105, 114, 101,
			100, 92, 69, 120, 97, 109, 112, 108, 101, 115,
			92, 83, 105, 109, 112, 108, 101, 67, 111, 109,
			98, 105, 110, 101, 100, 75, 101, 121, 98, 111,
			97, 114, 100, 77, 111, 117, 115, 101, 82, 101,
			109, 97, 112, 112, 105, 110, 103, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 83, 105, 109, 112,
			108, 101, 67, 111, 109, 98, 105, 110, 101, 100,
			75, 101, 121, 98, 111, 97, 114, 100, 77, 111,
			117, 115, 101, 82, 101, 109, 97, 112, 112, 105,
			110, 103, 46, 99, 115, 0, 0, 0, 2, 0,
			0, 0, 81, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 97, 109, 112, 108, 101, 115, 92, 83, 105,
			109, 112, 108, 101, 67, 111, 110, 116, 114, 111,
			108, 82, 101, 109, 97, 112, 112, 105, 110, 103,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 83,
			105, 109, 112, 108, 101, 67, 111, 110, 116, 114,
			111, 108, 82, 101, 109, 97, 112, 112, 105, 110,
			103, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 99, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			116, 114, 97, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 92, 69,
			120, 97, 109, 112, 108, 101, 115, 92, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 68, 101, 109, 111, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 68, 101, 109,
			111, 77, 101, 115, 115, 97, 103, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 82, 101, 119,
			105, 114, 101, 100, 92, 69, 120, 116, 114, 97,
			115, 92, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 66, 117, 116, 116, 111, 110,
			73, 110, 102, 111, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 65, 92, 65, 115, 115, 101,
			116, 115, 92, 82, 101, 119, 105, 114, 101, 100,
			92, 69, 120, 116, 114, 97, 115, 92, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 97, 108, 105, 98, 114, 97, 116, 105, 111,
			110, 87, 105, 110, 100, 111, 119, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 63, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 116, 114, 97, 115,
			92, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 67, 97, 110, 118, 97, 115, 83,
			99, 97, 108, 101, 114, 69, 120, 116, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 66, 92,
			65, 115, 115, 101, 116, 115, 92, 82, 101, 119,
			105, 114, 101, 100, 92, 69, 120, 116, 114, 97,
			115, 92, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 67, 97, 110, 118, 97, 115,
			83, 99, 97, 108, 101, 114, 70, 105, 116, 116,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 116, 114, 97, 115, 92, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 46, 99, 115, 0, 0, 0, 15, 0, 0,
			0, 69, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			116, 114, 97, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			95, 67, 108, 97, 115, 115, 101, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 67, 92,
			65, 115, 115, 101, 116, 115, 92, 82, 101, 119,
			105, 114, 101, 100, 92, 69, 120, 116, 114, 97,
			115, 92, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 95, 69, 110,
			117, 109, 115, 46, 99, 115, 0, 0, 0, 7,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			69, 120, 116, 114, 97, 115, 92, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 95, 73, 110, 112, 117, 116, 71, 114,
			105, 100, 46, 99, 115, 0, 0, 0, 2, 0,
			0, 0, 75, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 116, 114, 97, 115, 92, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 95, 87, 105, 110, 100, 111, 119, 77, 97,
			110, 97, 103, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 82, 101, 119, 105, 114, 101,
			100, 92, 69, 120, 116, 114, 97, 115, 92, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 67, 117, 115, 116, 111, 109, 66, 117, 116,
			116, 111, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			69, 120, 116, 114, 97, 115, 92, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 67,
			117, 115, 116, 111, 109, 83, 108, 105, 100, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 60, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			116, 114, 97, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 67, 117, 115,
			116, 111, 109, 84, 111, 103, 103, 108, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 82, 101,
			119, 105, 114, 101, 100, 92, 69, 120, 116, 114,
			97, 115, 92, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 67, 117, 115, 116,
			111, 109, 83, 101, 108, 101, 99, 116, 97, 98,
			108, 101, 46, 99, 115, 0, 0, 0, 2, 0,
			0, 0, 67, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 116, 114, 97, 115, 92, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 110,
			112, 117, 116, 66, 101, 104, 97, 118, 105, 111,
			114, 87, 105, 110, 100, 111, 119, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 62, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 116, 114, 97, 115,
			92, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 73, 110, 102, 111, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 56, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 116, 114, 97, 115,
			92, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 73, 110, 112, 117, 116, 82, 111,
			119, 46, 99, 115, 0, 0, 0, 3, 0, 0,
			0, 60, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			116, 114, 97, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 76, 97, 110,
			103, 117, 97, 103, 101, 68, 97, 116, 97, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 64,
			92, 65, 115, 115, 101, 116, 115, 92, 82, 101,
			119, 105, 114, 101, 100, 92, 69, 120, 116, 114,
			97, 115, 92, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 76, 97, 110, 103, 117,
			97, 103, 101, 68, 97, 116, 97, 66, 97, 115,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 73, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			116, 114, 97, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 99, 114,
			111, 108, 108, 98, 97, 114, 86, 105, 115, 105,
			98, 105, 108, 105, 116, 121, 72, 101, 108, 112,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 73, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 116, 114, 97, 115, 92, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 83, 99,
			114, 111, 108, 108, 82, 101, 99, 116, 83, 101,
			108, 101, 99, 116, 97, 98, 108, 101, 67, 104,
			105, 108, 100, 46, 99, 115, 0, 0, 0, 2,
			0, 0, 0, 61, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			69, 120, 116, 114, 97, 115, 92, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 84,
			104, 101, 109, 101, 100, 69, 108, 101, 109, 101,
			110, 116, 46, 99, 115, 0, 0, 0, 10, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 116, 114, 97, 115, 92, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 84, 104,
			101, 109, 101, 83, 101, 116, 116, 105, 110, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 58, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			116, 114, 97, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 84, 111, 103,
			103, 108, 101, 73, 110, 102, 111, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 57, 92, 65,
			115, 115, 101, 116, 115, 92, 82, 101, 119, 105,
			114, 101, 100, 92, 69, 120, 116, 114, 97, 115,
			92, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 85, 73, 67, 111, 110, 116, 114,
			111, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 60, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 116, 114, 97, 115, 92, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 73,
			67, 111, 110, 116, 114, 111, 108, 83, 101, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			61, 92, 65, 115, 115, 101, 116, 115, 92, 82,
			101, 119, 105, 114, 101, 100, 92, 69, 120, 116,
			114, 97, 115, 92, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 85, 73, 69, 108,
			101, 109, 101, 110, 116, 73, 110, 102, 111, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 65, 115, 115, 101, 116, 115, 92, 82, 101,
			119, 105, 114, 101, 100, 92, 69, 120, 116, 114,
			97, 115, 92, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 85, 73, 71, 114, 111,
			117, 112, 46, 99, 115, 0, 0, 0, 2, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 82, 101, 119, 105, 114, 101, 100, 92, 69,
			120, 116, 114, 97, 115, 92, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 85, 73,
			73, 109, 97, 103, 101, 72, 101, 108, 112, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 66, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 69, 120,
			116, 114, 97, 115, 92, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 85, 73, 83,
			101, 108, 101, 99, 116, 105, 111, 110, 85, 116,
			105, 108, 105, 116, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 63, 92, 65, 115, 115,
			101, 116, 115, 92, 82, 101, 119, 105, 114, 101,
			100, 92, 69, 120, 116, 114, 97, 115, 92, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 85, 73, 83, 108, 105, 100, 101, 114, 67,
			111, 110, 116, 114, 111, 108, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 82, 101, 119, 105, 114,
			101, 100, 92, 69, 120, 116, 114, 97, 115, 92,
			67, 111, 110, 116, 114, 111, 108, 77, 97, 112,
			112, 101, 114, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 85, 73, 84, 111, 111, 108, 115, 46,
			99, 115, 0, 0, 0, 2, 0, 0, 0, 54,
			92, 65, 115, 115, 101, 116, 115, 92, 82, 101,
			119, 105, 114, 101, 100, 92, 69, 120, 116, 114,
			97, 115, 92, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 87, 105, 110, 100, 111,
			119, 46, 99, 115, 0, 0, 0, 30, 0, 0,
			0, 64, 92, 65, 115, 115, 101, 116, 115, 92,
			82, 101, 119, 105, 114, 101, 100, 92, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 92,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 92,
			65, 99, 116, 105, 111, 110, 69, 108, 101, 109,
			101, 110, 116, 77, 97, 112, 65, 99, 116, 105,
			111, 110, 115, 46, 99, 115, 0, 0, 0, 72,
			0, 0, 0, 47, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 92, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 92, 67, 111, 109, 109, 111, 110, 46, 99,
			115, 0, 0, 0, 85, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 82, 101, 119,
			105, 114, 101, 100, 92, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 92, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 92, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 65, 99, 116,
			105, 111, 110, 115, 46, 99, 115, 0, 0, 0,
			146, 0, 0, 0, 54, 92, 65, 115, 115, 101,
			116, 115, 92, 82, 101, 119, 105, 114, 101, 100,
			92, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 92, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 92, 80, 108, 97, 121, 101, 114, 65,
			99, 116, 105, 111, 110, 115, 46, 99, 115, 0,
			0, 0, 89, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 82, 101, 119, 105, 114,
			101, 100, 92, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 92, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 92, 82, 101, 73, 110, 112,
			117, 116, 65, 99, 116, 105, 111, 110, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 61,
			92, 65, 115, 115, 101, 116, 115, 92, 82, 101,
			119, 105, 114, 101, 100, 92, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 92, 85, 110,
			105, 116, 121, 85, 73, 92, 80, 108, 97, 121,
			101, 114, 80, 111, 105, 110, 116, 101, 114, 69,
			118, 101, 110, 116, 68, 97, 116, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 57, 92,
			65, 115, 115, 101, 116, 115, 92, 82, 101, 119,
			105, 114, 101, 100, 92, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 92, 85, 110, 105,
			116, 121, 85, 73, 92, 82, 101, 119, 105, 114,
			101, 100, 69, 118, 101, 110, 116, 83, 121, 115,
			116, 101, 109, 46, 99, 115, 0, 0, 0, 5,
			0, 0, 0, 64, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 92, 85, 110, 105, 116, 121, 85, 73, 92,
			82, 101, 119, 105, 114, 101, 100, 80, 111, 105,
			110, 116, 101, 114, 73, 110, 112, 117, 116, 77,
			111, 100, 117, 108, 101, 46, 99, 115, 0, 0,
			0, 2, 0, 0, 0, 67, 92, 65, 115, 115,
			101, 116, 115, 92, 82, 101, 119, 105, 114, 101,
			100, 92, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 92, 85, 110, 105, 116, 121, 85,
			73, 92, 82, 101, 119, 105, 114, 101, 100, 83,
			116, 97, 110, 100, 97, 108, 111, 110, 101, 73,
			110, 112, 117, 116, 77, 111, 100, 117, 108, 101,
			46, 99, 115, 0, 0, 0, 13, 0, 0, 0,
			75, 92, 65, 115, 115, 101, 116, 115, 92, 82,
			101, 119, 105, 114, 101, 100, 92, 73, 110, 116,
			101, 114, 110, 97, 108, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 84, 101, 109, 112, 108, 97,
			116, 101, 115, 92, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 84, 101, 109, 112, 108, 97,
			116, 101, 115, 46, 99, 115, 0, 0, 0, 5,
			0, 0, 0, 73, 92, 65, 115, 115, 101, 116,
			115, 92, 82, 101, 119, 105, 114, 101, 100, 92,
			73, 110, 116, 101, 114, 110, 97, 108, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 68, 97, 116,
			97, 83, 116, 111, 114, 97, 103, 101, 92, 85,
			115, 101, 114, 68, 97, 116, 97, 83, 116, 111,
			114, 101, 95, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 48, 92, 65, 115, 115, 101,
			116, 115, 92, 82, 101, 119, 105, 114, 101, 100,
			92, 73, 110, 116, 101, 114, 110, 97, 108, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 110,
			112, 117, 116, 77, 97, 110, 97, 103, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 82,
			101, 119, 105, 114, 101, 100, 92, 73, 110, 116,
			101, 114, 110, 97, 108, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 77, 105, 115, 99, 92, 69,
			120, 116, 101, 114, 110, 97, 108, 84, 111, 111,
			108, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 38, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 65,
			99, 104, 105, 101, 118, 101, 109, 101, 110, 116,
			115, 77, 97, 110, 97, 103, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 36, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 65, 110, 110, 111, 117,
			110, 99, 101, 109, 101, 110, 116, 115, 68, 101,
			115, 107, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 38, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 65,
			110, 110, 111, 117, 110, 99, 101, 109, 101, 110,
			116, 83, 112, 101, 97, 107, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 37, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 65, 110, 116, 105, 84,
			104, 101, 102, 116, 66, 101, 104, 97, 118, 105,
			111, 117, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 36, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			65, 117, 120, 105, 108, 105, 97, 114, 67, 104,
			97, 110, 103, 101, 70, 79, 86, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 34, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 65, 117, 120, 105, 108, 105,
			97, 114, 77, 101, 116, 104, 111, 100, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 33,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 66, 105, 110, 80,
			97, 99, 107, 105, 110, 103, 77, 97, 105, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			33, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 66, 105, 110,
			80, 97, 99, 107, 105, 110, 103, 84, 101, 115,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 27, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 66, 108,
			111, 111, 109, 83, 101, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 26, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 66, 111, 120, 68, 97, 116, 97,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			42, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 66, 114, 101,
			97, 107, 105, 110, 103, 68, 101, 115, 116, 114,
			111, 121, 76, 105, 115, 116, 101, 110, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			32, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 66, 117, 105,
			108, 100, 97, 98, 108, 101, 73, 110, 102, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			37, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 66, 117, 105,
			108, 100, 101, 114, 95, 68, 101, 99, 111, 114,
			97, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 31, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 66, 117, 105, 108, 100, 101, 114, 95,
			77, 97, 105, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 37, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 66, 117, 105, 108, 100, 101, 114, 95, 80,
			97, 105, 110, 116, 97, 98, 108, 101, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 45,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 67, 97, 103, 101,
			69, 118, 101, 110, 116, 67, 114, 101, 97, 116,
			101, 68, 117, 109, 109, 121, 65, 110, 105, 109,
			97, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 33, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 67,
			97, 114, 100, 98, 111, 97, 114, 100, 66, 97,
			108, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 30, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 108, 101, 97, 110, 101, 114, 68, 101, 115,
			107, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 31, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 108,
			101, 97, 110, 101, 114, 82, 111, 98, 111, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			35, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 67, 108, 101,
			97, 110, 101, 114, 83, 101, 116, 86, 111, 108,
			117, 109, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 30, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 108, 111, 99, 107, 82, 111, 116, 97, 116,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 30, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 111,
			108, 111, 114, 80, 105, 99, 107, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 37,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 67, 111, 112, 121,
			80, 97, 115, 116, 101, 67, 108, 105, 112, 98,
			111, 97, 114, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 35, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 67, 111, 114, 110, 101, 114, 83, 104, 101,
			108, 118, 101, 115, 70, 105, 120, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 33, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 68, 97, 116, 97, 95, 67,
			111, 110, 116, 97, 105, 110, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 31, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 68, 97, 116, 97, 95,
			80, 114, 111, 100, 117, 99, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 32, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 68, 101, 98, 116, 67, 111,
			108, 108, 101, 99, 116, 111, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 30, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 68, 101, 98, 116, 77, 97,
			110, 97, 103, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 33, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 68, 101, 98, 117, 103, 83, 97, 118,
			101, 83, 104, 97, 114, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 33, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 68, 69, 66, 85, 71, 95, 65,
			117, 116, 111, 70, 105, 108, 108, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 38, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 68, 101, 99, 111, 114, 97,
			116, 105, 111, 110, 69, 120, 116, 114, 97, 68,
			97, 116, 97, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 31, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			68, 101, 108, 97, 121, 66, 111, 120, 77, 101,
			115, 104, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 31, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 68,
			101, 109, 111, 108, 105, 115, 104, 97, 98, 108,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 38, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 68, 101,
			109, 111, 108, 105, 115, 104, 97, 98, 108, 101,
			77, 97, 110, 97, 103, 101, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 40, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 68, 101, 109, 111, 108, 105,
			115, 104, 68, 101, 98, 114, 105, 115, 67, 111,
			110, 116, 114, 111, 108, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 35, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 68, 101, 109, 111, 108, 105, 116, 105,
			111, 110, 72, 97, 109, 109, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 38, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 68, 114, 97, 119, 67,
			111, 114, 114, 101, 99, 116, 76, 105, 115, 116,
			101, 110, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 37, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 68, 114, 97, 119, 84, 104, 101, 87, 111,
			114, 100, 77, 97, 110, 97, 103, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 29,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 68, 117, 109, 109,
			121, 83, 116, 117, 102, 102, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 34, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 69, 97, 115, 116, 101, 114, 66,
			101, 104, 97, 118, 105, 111, 117, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 32, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 69, 97, 115, 116, 101,
			114, 67, 104, 101, 99, 107, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 42, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 69, 109, 112, 108, 111,
			121, 101, 101, 115, 68, 97, 116, 97, 71, 101,
			110, 101, 114, 97, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 37, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 69, 118, 101, 110, 116,
			67, 97, 103, 101, 83, 112, 97, 119, 110, 78,
			101, 116, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 36, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			69, 120, 112, 97, 110, 115, 105, 111, 110, 65,
			117, 120, 105, 108, 105, 97, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 35, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 70, 105, 114, 101, 69, 120,
			116, 105, 110, 103, 117, 105, 115, 104, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			39, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 70, 105, 114,
			101, 69, 120, 116, 105, 110, 103, 117, 105, 115,
			104, 101, 114, 84, 97, 107, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 34, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 71, 97, 99, 104, 97, 112,
			111, 110, 67, 97, 112, 115, 117, 108, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 29,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 71, 97, 109, 101,
			67, 97, 110, 118, 97, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 27, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 71, 97, 109, 101, 68, 97, 116,
			97, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 32, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 71, 101,
			116, 80, 108, 97, 121, 101, 114, 76, 111, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 36, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 71, 101,
			116, 82, 101, 119, 105, 114, 101, 100, 75, 101,
			121, 78, 97, 109, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 33, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 72, 97, 108, 108, 111, 119, 101, 101,
			110, 71, 104, 111, 115, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 26, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 72, 97, 116, 73, 110, 102, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			40, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 73, 110, 116,
			101, 114, 97, 99, 116, 97, 98, 108, 101, 67,
			111, 110, 116, 97, 105, 110, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 35, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 110, 116, 101, 114,
			97, 99, 116, 97, 98, 108, 101, 68, 97, 116,
			97, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 37, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 110,
			118, 111, 105, 99, 101, 115, 83, 116, 97, 116,
			105, 115, 116, 105, 99, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 44, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 73, 110, 118, 111, 105, 99, 101,
			84, 101, 109, 112, 108, 97, 116, 101, 82, 101,
			102, 101, 114, 101, 110, 99, 101, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 42, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 76, 111, 98, 98, 121,
			80, 97, 115, 115, 119, 111, 114, 100, 67, 111,
			110, 118, 101, 114, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 38, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 76, 111, 99, 97, 108,
			105, 122, 97, 116, 105, 111, 110, 77, 97, 110,
			97, 103, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 28, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 77, 97, 105, 110, 95, 68, 97, 116, 97,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			36, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 77, 97, 110,
			97, 103, 101, 114, 66, 108, 97, 99, 107, 98,
			111, 97, 114, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 36, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 77, 97, 110, 117, 102, 97, 99, 116, 117,
			114, 105, 110, 103, 66, 97, 115, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 41, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 77, 105, 110, 105, 84,
			114, 97, 110, 115, 112, 111, 114, 116, 66, 101,
			104, 97, 118, 105, 111, 117, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 40, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 77, 105, 110, 105, 84, 114,
			97, 110, 115, 112, 111, 114, 116, 76, 105, 115,
			116, 101, 110, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 29, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 77, 105, 115, 116, 101, 114, 71, 105,
			102, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 31, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 77,
			105, 115, 116, 101, 114, 71, 114, 117, 115, 99,
			104, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 47, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 78, 101,
			116, 119, 111, 114, 107, 92, 67, 117, 115, 116,
			111, 109, 78, 101, 116, 119, 111, 114, 107, 77,
			97, 110, 97, 103, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 45, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 78, 101, 116, 119, 111, 114, 107,
			92, 76, 111, 98, 98, 105, 101, 115, 76, 105,
			115, 116, 77, 97, 110, 97, 103, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 42,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 78, 101, 116, 119,
			111, 114, 107, 92, 76, 111, 98, 98, 121, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 41,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 78, 101, 116, 119,
			111, 114, 107, 92, 76, 111, 98, 98, 121, 68,
			97, 116, 97, 69, 110, 116, 114, 121, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 42, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 78, 101, 116, 119, 111,
			114, 107, 92, 77, 97, 115, 116, 101, 114, 76,
			111, 98, 98, 121, 68, 97, 116, 97, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 52, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 78, 101, 116, 119, 111,
			114, 107, 92, 77, 117, 108, 116, 105, 112, 108,
			97, 121, 101, 114, 73, 110, 105, 116, 105, 97,
			108, 105, 122, 97, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 41, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 78, 101, 116, 119, 111,
			114, 107, 92, 78, 101, 116, 119, 111, 114, 107,
			83, 112, 97, 119, 110, 101, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 41, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 78, 101, 116, 119, 111, 114,
			107, 92, 80, 108, 97, 121, 101, 114, 76, 105,
			115, 116, 73, 116, 101, 109, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 40, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 78, 101, 116, 119, 111, 114, 107,
			92, 80, 108, 97, 121, 101, 114, 78, 101, 116,
			119, 111, 114, 107, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 49, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 78, 101, 116, 119, 111, 114, 107, 92, 80,
			108, 97, 121, 101, 114, 79, 98, 106, 101, 99,
			116, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 46, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 78, 101,
			116, 119, 111, 114, 107, 92, 80, 108, 97, 121,
			101, 114, 83, 121, 110, 99, 67, 104, 97, 114,
			97, 99, 116, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 37, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 78, 101, 116, 119, 111, 114, 107, 92,
			83, 116, 101, 97, 109, 76, 111, 98, 98, 121,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			39, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 78, 101, 116,
			119, 111, 114, 107, 71, 97, 109, 101, 66, 101,
			104, 97, 118, 105, 111, 114, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 34, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 78, 101, 119, 66, 117, 102,
			102, 101, 114, 83, 121, 115, 116, 101, 109, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 35,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 78, 80, 67, 95,
			67, 117, 115, 116, 111, 109, 101, 114, 73, 110,
			102, 111, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 27, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 78,
			80, 67, 95, 73, 110, 102, 111, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 30, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 78, 80, 67, 95, 77, 97,
			110, 97, 103, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 28, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 78, 80, 67, 95, 83, 112, 101, 101,
			100, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 36, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 79, 108,
			100, 66, 97, 99, 107, 117, 112, 115, 77, 97,
			110, 97, 103, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 36, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 79, 110, 69, 110, 97, 98, 108, 101,
			83, 101, 116, 80, 97, 114, 101, 110, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 33,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 79, 112, 101, 110,
			68, 105, 115, 99, 111, 114, 100, 85, 82, 76,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			48, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 79, 112, 116,
			105, 109, 105, 122, 97, 116, 105, 111, 110, 76,
			97, 121, 101, 114, 67, 117, 108, 108, 68, 105,
			115, 116, 97, 110, 99, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 41, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 79, 114, 100, 101, 114, 68, 117,
			109, 109, 121, 66, 111, 120, 66, 101, 104, 97,
			118, 105, 111, 117, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 33, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 79, 114, 100, 101, 114, 105, 110, 103,
			68, 101, 118, 105, 99, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 31, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 79, 114, 100, 101, 114, 105, 110,
			103, 84, 114, 97, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 33, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 79, 114, 100, 101, 114, 80, 97, 99,
			107, 97, 103, 105, 110, 103, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 36, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 79, 114, 100, 101, 114, 80, 97,
			99, 107, 97, 103, 105, 110, 103, 66, 111, 120,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			42, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 79, 114, 100,
			101, 114, 80, 97, 99, 107, 97, 103, 105, 110,
			103, 82, 101, 102, 101, 114, 101, 110, 99, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			45, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 79, 114, 100,
			101, 114, 80, 97, 99, 107, 97, 103, 105, 110,
			103, 85, 73, 82, 101, 102, 101, 114, 101, 110,
			99, 101, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 35, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			79, 114, 100, 101, 114, 80, 105, 99, 107, 117,
			112, 80, 111, 105, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 38, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 79, 116, 104, 101, 114, 80, 114,
			111, 112, 115, 66, 101, 104, 97, 118, 105, 111,
			117, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 28, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 80,
			97, 105, 110, 116, 97, 98, 108, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 45, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 97, 105, 110, 116,
			97, 98, 108, 101, 65, 117, 120, 105, 108, 105,
			97, 114, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 32, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 80, 97,
			105, 110, 116, 97, 98, 108, 101, 68, 97, 116,
			97, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 38, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 80, 97,
			105, 110, 116, 97, 98, 108, 101, 68, 101, 99,
			111, 114, 97, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 36, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 80, 97, 105, 110, 116, 97,
			98, 108, 101, 115, 77, 97, 110, 97, 103, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 40, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 80, 105,
			99, 116, 117, 114, 101, 70, 114, 97, 109, 101,
			66, 101, 104, 97, 118, 105, 111, 117, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 32,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 80, 105, 110, 112,
			111, 105, 110, 116, 83, 104, 101, 108, 102, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 40,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 80, 105, 110, 112,
			111, 105, 110, 116, 83, 104, 101, 108, 102, 70,
			114, 111, 109, 84, 114, 97, 121, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 48, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 80, 108, 97, 121, 101, 114,
			92, 67, 117, 115, 116, 111, 109, 67, 97, 109,
			101, 114, 97, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 46, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			80, 108, 97, 121, 101, 114, 92, 70, 105, 114,
			115, 116, 80, 101, 114, 115, 111, 110, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 38, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 80, 108, 97, 121, 101, 114,
			92, 80, 108, 97, 121, 101, 114, 67, 114, 111,
			117, 99, 104, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 36, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			80, 108, 97, 121, 101, 114, 80, 101, 114, 109,
			105, 115, 115, 105, 111, 110, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 33, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 80, 114, 105, 99, 105, 110,
			103, 77, 97, 99, 104, 105, 110, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 42, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 114, 105, 99, 105,
			110, 103, 77, 97, 99, 104, 105, 110, 101, 65,
			117, 116, 111, 109, 97, 116, 105, 99, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 35, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 114, 111, 100, 117,
			99, 116, 65, 110, 105, 109, 97, 116, 105, 111,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 39, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 80, 114,
			111, 100, 117, 99, 116, 67, 104, 101, 99, 107,
			111, 117, 116, 83, 112, 97, 119, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 33, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 114, 111, 100, 117,
			99, 116, 76, 105, 115, 116, 105, 110, 103, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 33,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 82, 101, 102, 101,
			114, 101, 110, 99, 101, 76, 105, 103, 104, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 82, 101, 102,
			101, 114, 101, 110, 99, 101, 115, 92, 79, 114,
			100, 101, 114, 105, 110, 103, 76, 105, 115, 116,
			82, 101, 102, 101, 114, 101, 110, 99, 101, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 82, 101, 102,
			101, 114, 101, 110, 99, 101, 115, 95, 83, 116,
			97, 116, 105, 115, 116, 105, 99, 115, 80, 114,
			111, 100, 117, 99, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 42, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 82, 101, 102, 108, 101, 99, 116, 105,
			111, 110, 80, 114, 111, 98, 101, 115, 77, 97,
			110, 97, 103, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 30, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 83, 97, 108, 101, 115, 68, 101, 118,
			105, 99, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 32, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 97, 118, 101, 66, 101, 104, 97, 118, 105,
			111, 117, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 37, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 101, 97, 115, 111, 110, 97, 108, 65, 108,
			105, 101, 110, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 36, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 83, 101, 97, 115, 111,
			110, 97, 108, 66, 101, 104, 97, 118, 105, 111,
			117, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 36, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 83,
			101, 97, 115, 111, 110, 97, 108, 67, 97, 103,
			101, 69, 118, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 42, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 83, 101, 97, 115, 111, 110, 97,
			108, 67, 97, 103, 101, 69, 118, 101, 110, 116,
			65, 110, 105, 109, 97, 108, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 36, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 83, 101, 97, 115, 111, 110, 97,
			108, 67, 104, 114, 105, 115, 116, 109, 97, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			33, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 101, 97,
			115, 111, 110, 97, 108, 95, 65, 108, 105, 101,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 31, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 83, 101,
			97, 115, 111, 110, 97, 108, 95, 85, 70, 79,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			36, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 101, 116,
			67, 117, 108, 116, 117, 114, 101, 68, 101, 99,
			105, 109, 97, 108, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 40, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 83, 101, 116, 76, 111, 99, 97, 108, 105,
			122, 97, 116, 105, 111, 110, 83, 116, 114, 105,
			110, 103, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 34, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 83,
			101, 116, 85, 73, 83, 116, 97, 116, 105, 115,
			116, 105, 99, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 28, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 83, 101, 116, 86, 111, 108, 117, 109, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			32, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 101, 116,
			86, 115, 121, 110, 99, 67, 111, 117, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			40, 92, 65, 115, 115, 101, 116, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 83, 112, 97,
			99, 101, 65, 99, 113, 117, 105, 115, 105, 116,
			105, 111, 110, 66, 111, 97, 114, 100, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 37, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 83, 82, 80, 66, 97,
			116, 99, 104, 101, 114, 80, 114, 111, 102, 105,
			108, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 42, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 116, 97, 116, 105, 115, 116, 105, 99, 115,
			71, 101, 110, 101, 114, 97, 116, 101, 76, 105,
			115, 116, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 46, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 116, 101, 97, 109, 119, 111, 114, 107, 115,
			46, 78, 69, 84, 92, 83, 116, 101, 97, 109,
			77, 97, 110, 97, 103, 101, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 46, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 83, 116, 101, 97, 109, 119,
			111, 114, 107, 115, 46, 78, 69, 84, 92, 83,
			116, 101, 97, 109, 79, 118, 101, 114, 108, 97,
			121, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 37, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 83, 116,
			111, 108, 101, 110, 80, 114, 111, 100, 117, 99,
			116, 83, 112, 97, 119, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 38, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 83, 117, 114, 118, 101, 105, 108,
			108, 97, 110, 99, 101, 67, 97, 109, 101, 114,
			97, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 35, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 83,
			117, 114, 118, 101, 105, 108, 108, 97, 110, 99,
			101, 68, 101, 115, 107, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 30, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 84, 104, 101, 67, 111, 111, 108, 82,
			111, 111, 109, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 42, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			84, 105, 109, 101, 65, 99, 99, 101, 108, 101,
			114, 97, 116, 105, 111, 110, 87, 97, 116, 99,
			104, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 35, 92, 65, 115, 115, 101, 116,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			84, 111, 111, 108, 98, 111, 120, 66, 101, 104,
			97, 118, 105, 111, 117, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 33, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 84, 111, 111, 108, 115, 79, 114,
			103, 97, 110, 105, 122, 101, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 29, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 84, 114, 97, 115, 104, 80,
			108, 97, 99, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 29, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 84, 114, 97, 115, 104, 83, 112, 97, 119,
			110, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 27, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 84, 114,
			97, 121, 68, 97, 116, 97, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 34, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 84, 117, 116, 111, 114, 105, 97,
			108, 77, 97, 110, 97, 103, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 31, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 85, 73, 73, 110, 112,
			117, 116, 70, 105, 101, 108, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 34, 92, 65,
			115, 115, 101, 116, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 85, 112, 103, 114, 97, 100,
			101, 115, 77, 97, 110, 97, 103, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 28,
			92, 65, 115, 115, 101, 116, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 87, 101, 98, 72,
			101, 108, 112, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 31, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 87, 104, 101, 101, 108, 67, 111, 110,
			116, 114, 111, 108, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 30, 92, 65, 115, 115, 101,
			116, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 90, 79, 114, 100, 101, 114, 68, 117, 109,
			109, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 32, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 90,
			95, 70, 80, 83, 95, 68, 105, 115, 112, 108,
			97, 121, 46, 99, 115, 0, 0, 0, 2, 0,
			0, 0, 31, 92, 65, 115, 115, 101, 116, 115,
			92, 83, 71, 83, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 66, 116, 110, 83, 112, 101, 97,
			107, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 27, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 71, 83, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 85, 83, 103, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 109, 111, 111, 116,
			104, 32, 83, 121, 110, 99, 92, 67, 111, 109,
			109, 111, 110, 92, 82, 101, 113, 117, 105, 114,
			101, 100, 32, 73, 110, 116, 101, 114, 110, 97,
			108, 32, 85, 115, 101, 32, 83, 99, 114, 105,
			112, 116, 115, 92, 72, 97, 108, 102, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 70, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 109, 111,
			111, 116, 104, 32, 83, 121, 110, 99, 92, 67,
			111, 109, 109, 111, 110, 92, 82, 101, 113, 117,
			105, 114, 101, 100, 32, 73, 110, 116, 101, 114,
			110, 97, 108, 32, 85, 115, 101, 32, 83, 99,
			114, 105, 112, 116, 115, 92, 72, 97, 108, 102,
			72, 101, 108, 112, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 67, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 109, 111, 111, 116,
			104, 32, 83, 121, 110, 99, 92, 67, 111, 109,
			109, 111, 110, 92, 82, 101, 113, 117, 105, 114,
			101, 100, 32, 73, 110, 116, 101, 114, 110, 97,
			108, 32, 85, 115, 101, 32, 83, 99, 114, 105,
			112, 116, 115, 92, 77, 115, 103, 84, 121, 112,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 89, 92, 65, 115, 115, 101, 116, 115, 92,
			83, 109, 111, 111, 116, 104, 32, 83, 121, 110,
			99, 92, 77, 105, 114, 114, 111, 114, 92, 83,
			101, 114, 118, 101, 114, 32, 65, 117, 116, 104,
			111, 114, 105, 116, 97, 116, 105, 118, 101, 92,
			83, 101, 114, 118, 101, 114, 65, 117, 116, 104,
			111, 114, 105, 116, 121, 69, 120, 97, 109, 112,
			108, 101, 80, 108, 97, 121, 101, 114, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 70, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 109, 111,
			111, 116, 104, 32, 83, 121, 110, 99, 92, 77,
			105, 114, 114, 111, 114, 92, 83, 109, 111, 111,
			116, 104, 32, 83, 121, 110, 99, 32, 65, 115,
			115, 101, 116, 92, 83, 109, 111, 111, 116, 104,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			77, 105, 114, 114, 111, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 83, 109, 111, 111, 116,
			104, 32, 83, 121, 110, 99, 92, 77, 105, 114,
			114, 111, 114, 92, 83, 109, 111, 111, 116, 104,
			32, 83, 121, 110, 99, 32, 65, 115, 115, 101,
			116, 92, 83, 109, 111, 111, 116, 104, 83, 121,
			110, 99, 77, 105, 114, 114, 111, 114, 46, 99,
			115, 0, 0, 0, 3, 0, 0, 0, 59, 92,
			65, 115, 115, 101, 116, 115, 92, 83, 109, 111,
			111, 116, 104, 32, 83, 121, 110, 99, 92, 77,
			105, 114, 114, 111, 114, 92, 83, 109, 111, 111,
			116, 104, 32, 83, 121, 110, 99, 32, 65, 115,
			115, 101, 116, 92, 83, 116, 97, 116, 101, 77,
			105, 114, 114, 111, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 95, 92, 65, 115, 115,
			101, 116, 115, 92, 83, 109, 111, 111, 116, 104,
			32, 83, 121, 110, 99, 92, 77, 105, 114, 114,
			111, 114, 92, 83, 109, 111, 111, 116, 104, 32,
			83, 121, 110, 99, 32, 69, 120, 97, 109, 112,
			108, 101, 32, 83, 99, 101, 110, 101, 92, 83,
			109, 111, 111, 116, 104, 83, 121, 110, 99, 77,
			105, 114, 114, 111, 114, 69, 120, 97, 109, 112,
			108, 101, 80, 108, 97, 121, 101, 114, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 61, 92,
			65, 115, 115, 101, 116, 115, 92, 84, 101, 120,
			116, 77, 101, 115, 104, 32, 80, 114, 111, 92,
			69, 120, 97, 109, 112, 108, 101, 115, 32, 38,
			32, 69, 120, 116, 114, 97, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 66, 101, 110, 99,
			104, 109, 97, 114, 107, 48, 49, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 66, 92, 65,
			115, 115, 101, 116, 115, 92, 84, 101, 120, 116,
			77, 101, 115, 104, 32, 80, 114, 111, 92, 69,
			120, 97, 109, 112, 108, 101, 115, 32, 38, 32,
			69, 120, 116, 114, 97, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 66, 101, 110, 99, 104,
			109, 97, 114, 107, 48, 49, 95, 85, 71, 85,
			73, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			84, 101, 120, 116, 77, 101, 115, 104, 32, 80,
			114, 111, 92, 69, 120, 97, 109, 112, 108, 101,
			115, 32, 38, 32, 69, 120, 116, 114, 97, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 66,
			101, 110, 99, 104, 109, 97, 114, 107, 48, 50,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			61, 92, 65, 115, 115, 101, 116, 115, 92, 84,
			101, 120, 116, 77, 101, 115, 104, 32, 80, 114,
			111, 92, 69, 120, 97, 109, 112, 108, 101, 115,
			32, 38, 32, 69, 120, 116, 114, 97, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 66, 101,
			110, 99, 104, 109, 97, 114, 107, 48, 51, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 61,
			92, 65, 115, 115, 101, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 32, 80, 114, 111,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 32,
			38, 32, 69, 120, 116, 114, 97, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 66, 101, 110,
			99, 104, 109, 97, 114, 107, 48, 52, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 66, 92,
			65, 115, 115, 101, 116, 115, 92, 84, 101, 120,
			116, 77, 101, 115, 104, 32, 80, 114, 111, 92,
			69, 120, 97, 109, 112, 108, 101, 115, 32, 38,
			32, 69, 120, 116, 114, 97, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 67, 97, 109, 101,
			114, 97, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 64, 92, 65, 115, 115, 101, 116, 115,
			92, 84, 101, 120, 116, 77, 101, 115, 104, 32,
			80, 114, 111, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 32, 38, 32, 69, 120, 116, 114, 97,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			67, 104, 97, 116, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 64, 92, 65, 115, 115, 101,
			116, 115, 92, 84, 101, 120, 116, 77, 101, 115,
			104, 32, 80, 114, 111, 92, 69, 120, 97, 109,
			112, 108, 101, 115, 32, 38, 32, 69, 120, 116,
			114, 97, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 68, 114, 111, 112, 100, 111, 119, 110,
			83, 97, 109, 112, 108, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 84, 101, 120, 116, 77,
			101, 115, 104, 32, 80, 114, 111, 92, 69, 120,
			97, 109, 112, 108, 101, 115, 32, 38, 32, 69,
			120, 116, 114, 97, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 69, 110, 118, 77, 97, 112,
			65, 110, 105, 109, 97, 116, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 60, 92,
			65, 115, 115, 101, 116, 115, 92, 84, 101, 120,
			116, 77, 101, 115, 104, 32, 80, 114, 111, 92,
			69, 120, 97, 109, 112, 108, 101, 115, 32, 38,
			32, 69, 120, 116, 114, 97, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 79, 98, 106, 101,
			99, 116, 83, 112, 105, 110, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 68, 92, 65, 115,
			115, 101, 116, 115, 92, 84, 101, 120, 116, 77,
			101, 115, 104, 32, 80, 114, 111, 92, 69, 120,
			97, 109, 112, 108, 101, 115, 32, 38, 32, 69,
			120, 116, 114, 97, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 83, 104, 97, 100, 101, 114,
			80, 114, 111, 112, 65, 110, 105, 109, 97, 116,
			111, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 62, 92, 65, 115, 115, 101, 116, 115,
			92, 84, 101, 120, 116, 77, 101, 115, 104, 32,
			80, 114, 111, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 32, 38, 32, 69, 120, 116, 114, 97,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 105, 109, 112, 108, 101, 83, 99, 114, 105,
			112, 116, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 84, 101, 120, 116, 77, 101, 115, 104, 32,
			80, 114, 111, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 32, 38, 32, 69, 120, 116, 114, 97,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 107, 101, 119, 84, 101, 120, 116, 69, 120,
			97, 109, 112, 108, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 84, 101, 120, 116, 77, 101,
			115, 104, 32, 80, 114, 111, 92, 69, 120, 97,
			109, 112, 108, 101, 115, 32, 38, 32, 69, 120,
			116, 114, 97, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 84, 101, 108, 101, 84, 121, 112,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 70, 92, 65, 115, 115, 101, 116, 115, 92,
			84, 101, 120, 116, 77, 101, 115, 104, 32, 80,
			114, 111, 92, 69, 120, 97, 109, 112, 108, 101,
			115, 32, 38, 32, 69, 120, 116, 114, 97, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 84,
			101, 120, 116, 67, 111, 110, 115, 111, 108, 101,
			83, 105, 109, 117, 108, 97, 116, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 73,
			92, 65, 115, 115, 101, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 32, 80, 114, 111,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 32,
			38, 32, 69, 120, 116, 114, 97, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 84, 101, 120,
			116, 77, 101, 115, 104, 80, 114, 111, 70, 108,
			111, 97, 116, 105, 110, 103, 84, 101, 120, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			65, 92, 65, 115, 115, 101, 116, 115, 92, 84,
			101, 120, 116, 77, 101, 115, 104, 32, 80, 114,
			111, 92, 69, 120, 97, 109, 112, 108, 101, 115,
			32, 38, 32, 69, 120, 116, 114, 97, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 83, 112, 97, 119,
			110, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 74, 92, 65, 115, 115, 101, 116,
			115, 92, 84, 101, 120, 116, 77, 101, 115, 104,
			32, 80, 114, 111, 92, 69, 120, 97, 109, 112,
			108, 101, 115, 32, 38, 32, 69, 120, 116, 114,
			97, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 84, 77, 80, 114, 111, 95, 73, 110, 115,
			116, 114, 117, 99, 116, 105, 111, 110, 79, 118,
			101, 114, 108, 97, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 68, 92, 65, 115, 115,
			101, 116, 115, 92, 84, 101, 120, 116, 77, 101,
			115, 104, 32, 80, 114, 111, 92, 69, 120, 97,
			109, 112, 108, 101, 115, 32, 38, 32, 69, 120,
			116, 114, 97, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 84, 77, 80, 95, 68, 105, 103,
			105, 116, 86, 97, 108, 105, 100, 97, 116, 111,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 70, 92, 65, 115, 115, 101, 116, 115, 92,
			84, 101, 120, 116, 77, 101, 115, 104, 32, 80,
			114, 111, 92, 69, 120, 97, 109, 112, 108, 101,
			115, 32, 38, 32, 69, 120, 116, 114, 97, 115,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 84,
			77, 80, 95, 69, 120, 97, 109, 112, 108, 101,
			83, 99, 114, 105, 112, 116, 95, 48, 49, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 70,
			92, 65, 115, 115, 101, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 32, 80, 114, 111,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 32,
			38, 32, 69, 120, 116, 114, 97, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 84, 77, 80,
			95, 70, 114, 97, 109, 101, 82, 97, 116, 101,
			67, 111, 117, 110, 116, 101, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 74, 92, 65,
			115, 115, 101, 116, 115, 92, 84, 101, 120, 116,
			77, 101, 115, 104, 32, 80, 114, 111, 92, 69,
			120, 97, 109, 112, 108, 101, 115, 32, 38, 32,
			69, 120, 116, 114, 97, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 84, 77, 80, 95, 80,
			104, 111, 110, 101, 78, 117, 109, 98, 101, 114,
			86, 97, 108, 105, 100, 97, 116, 111, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 68,
			92, 65, 115, 115, 101, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 32, 80, 114, 111,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 32,
			38, 32, 69, 120, 116, 114, 97, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 84, 77, 80,
			95, 84, 101, 120, 116, 69, 118, 101, 110, 116,
			67, 104, 101, 99, 107, 46, 99, 115, 0, 0,
			0, 6, 0, 0, 0, 70, 92, 65, 115, 115,
			101, 116, 115, 92, 84, 101, 120, 116, 77, 101,
			115, 104, 32, 80, 114, 111, 92, 69, 120, 97,
			109, 112, 108, 101, 115, 32, 38, 32, 69, 120,
			116, 114, 97, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 84, 77, 80, 95, 84, 101, 120,
			116, 69, 118, 101, 110, 116, 72, 97, 110, 100,
			108, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 84, 101, 120, 116, 77, 101, 115, 104,
			32, 80, 114, 111, 92, 69, 120, 97, 109, 112,
			108, 101, 115, 32, 38, 32, 69, 120, 116, 114,
			97, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 84, 77, 80, 95, 84, 101, 120, 116, 73,
			110, 102, 111, 68, 101, 98, 117, 103, 84, 111,
			111, 108, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 68, 92, 65, 115, 115, 101, 116, 115,
			92, 84, 101, 120, 116, 77, 101, 115, 104, 32,
			80, 114, 111, 92, 69, 120, 97, 109, 112, 108,
			101, 115, 32, 38, 32, 69, 120, 116, 114, 97,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			84, 77, 80, 95, 84, 101, 120, 116, 83, 101,
			108, 101, 99, 116, 111, 114, 95, 65, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 68, 92,
			65, 115, 115, 101, 116, 115, 92, 84, 101, 120,
			116, 77, 101, 115, 104, 32, 80, 114, 111, 92,
			69, 120, 97, 109, 112, 108, 101, 115, 32, 38,
			32, 69, 120, 116, 114, 97, 115, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 84, 77, 80, 95,
			84, 101, 120, 116, 83, 101, 108, 101, 99, 116,
			111, 114, 95, 66, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 72, 92, 65, 115, 115, 101,
			116, 115, 92, 84, 101, 120, 116, 77, 101, 115,
			104, 32, 80, 114, 111, 92, 69, 120, 97, 109,
			112, 108, 101, 115, 32, 38, 32, 69, 120, 116,
			114, 97, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 84, 77, 80, 95, 85, 105, 70, 114,
			97, 109, 101, 82, 97, 116, 101, 67, 111, 117,
			110, 116, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 67, 92, 65, 115, 115, 101,
			116, 115, 92, 84, 101, 120, 116, 77, 101, 115,
			104, 32, 80, 114, 111, 92, 69, 120, 97, 109,
			112, 108, 101, 115, 32, 38, 32, 69, 120, 116,
			114, 97, 115, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 86, 101, 114, 116, 101, 120, 67, 111,
			108, 111, 114, 67, 121, 99, 108, 101, 114, 46,
			99, 115, 0, 0, 0, 2, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 32, 80, 114, 111,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 32,
			38, 32, 69, 120, 116, 114, 97, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 86, 101, 114,
			116, 101, 120, 74, 105, 116, 116, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 32, 80, 114, 111,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 32,
			38, 32, 69, 120, 116, 114, 97, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 86, 101, 114,
			116, 101, 120, 83, 104, 97, 107, 101, 65, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 62,
			92, 65, 115, 115, 101, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 32, 80, 114, 111,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 32,
			38, 32, 69, 120, 116, 114, 97, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 86, 101, 114,
			116, 101, 120, 83, 104, 97, 107, 101, 66, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 60,
			92, 65, 115, 115, 101, 116, 115, 92, 84, 101,
			120, 116, 77, 101, 115, 104, 32, 80, 114, 111,
			92, 69, 120, 97, 109, 112, 108, 101, 115, 32,
			38, 32, 69, 120, 116, 114, 97, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 86, 101, 114,
			116, 101, 120, 90, 111, 111, 109, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 65, 92, 65,
			115, 115, 101, 116, 115, 92, 84, 101, 120, 116,
			77, 101, 115, 104, 32, 80, 114, 111, 92, 69,
			120, 97, 109, 112, 108, 101, 115, 32, 38, 32,
			69, 120, 116, 114, 97, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 87, 97, 114, 112, 84,
			101, 120, 116, 69, 120, 97, 109, 112, 108, 101,
			46, 99, 115, 0, 0, 0, 2, 0, 0, 0,
			38, 92, 65, 115, 115, 101, 116, 115, 92, 84,
			117, 116, 111, 114, 105, 97, 108, 73, 110, 102,
			111, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			82, 101, 97, 100, 109, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 61, 92, 65, 115,
			115, 101, 116, 115, 92, 86, 117, 112, 108, 101,
			120, 92, 87, 101, 98, 86, 105, 101, 119, 92,
			67, 111, 114, 101, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 65, 117, 116, 104, 82, 101, 113,
			117, 101, 115, 116, 101, 100, 69, 118, 101, 110,
			116, 65, 114, 103, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 51, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 66, 97, 115, 101, 75, 101, 121, 98,
			111, 97, 114, 100, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 56, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 66, 97, 115, 101, 87, 101, 98, 86, 105,
			101, 119, 80, 114, 101, 102, 97, 98, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 67, 97, 110, 118, 97,
			115, 75, 101, 121, 98, 111, 97, 114, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 67, 111, 114, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 67, 97, 110, 118,
			97, 115, 80, 111, 105, 110, 116, 101, 114, 73,
			110, 112, 117, 116, 68, 101, 116, 101, 99, 116,
			111, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 58, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 67,
			97, 110, 118, 97, 115, 87, 101, 98, 86, 105,
			101, 119, 80, 114, 101, 102, 97, 98, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 67, 108, 105, 99, 107,
			101, 100, 69, 118, 101, 110, 116, 65, 114, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 62, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 111,
			110, 115, 111, 108, 101, 77, 101, 115, 115, 97,
			103, 101, 69, 118, 101, 110, 116, 65, 114, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 45, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 111,
			111, 107, 105, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 66, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 68, 101, 102, 97, 117, 108, 116, 80, 111,
			105, 110, 116, 101, 114, 73, 110, 112, 117, 116,
			68, 101, 116, 101, 99, 116, 111, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 63, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 68, 111, 119, 110, 108,
			111, 97, 100, 67, 104, 97, 110, 103, 101, 100,
			69, 118, 101, 110, 116, 65, 114, 103, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 48,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 67, 111, 114, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 69, 118, 101, 110,
			116, 65, 114, 103, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 70, 105, 108, 101, 83, 101, 108, 101,
			99, 116, 105, 111, 110, 69, 118, 101, 110, 116,
			65, 114, 103, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 72, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 70, 111, 99, 117, 115, 101, 100, 73, 110,
			112, 117, 116, 70, 105, 101, 108, 100, 67, 104,
			97, 110, 103, 101, 100, 69, 118, 101, 110, 116,
			65, 114, 103, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 53, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 73, 67, 111, 111, 107, 105, 101, 77, 97,
			110, 97, 103, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 59, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 73, 110, 116, 101, 114, 110, 97, 108,
			92, 66, 97, 115, 101, 87, 101, 98, 86, 105,
			101, 119, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 61, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			110, 116, 101, 114, 110, 97, 108, 92, 66, 114,
			105, 100, 103, 101, 77, 101, 115, 115, 97, 103,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 110,
			116, 101, 114, 110, 97, 108, 92, 67, 97, 99,
			104, 105, 110, 103, 71, 101, 116, 116, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			74, 92, 65, 115, 115, 101, 116, 115, 92, 86,
			117, 112, 108, 101, 120, 92, 87, 101, 98, 86,
			105, 101, 119, 92, 67, 111, 114, 101, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 73, 110, 116,
			101, 114, 110, 97, 108, 92, 67, 97, 110, 118,
			97, 115, 86, 105, 101, 119, 112, 111, 114, 116,
			77, 97, 116, 101, 114, 105, 97, 108, 86, 105,
			101, 119, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 68, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			110, 116, 101, 114, 110, 97, 108, 92, 67, 111,
			110, 115, 111, 108, 101, 66, 114, 105, 100, 103,
			101, 77, 101, 115, 115, 97, 103, 101, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 60, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 110, 116, 101, 114,
			110, 97, 108, 92, 67, 117, 114, 115, 111, 114,
			72, 101, 108, 112, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 63, 92, 65, 115,
			115, 101, 116, 115, 92, 86, 117, 112, 108, 101,
			120, 92, 87, 101, 98, 86, 105, 101, 119, 92,
			67, 111, 114, 101, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 73, 110, 116, 101, 114, 110, 97,
			108, 92, 68, 111, 119, 110, 108, 111, 97, 100,
			77, 101, 115, 115, 97, 103, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 86, 117, 112, 108,
			101, 120, 92, 87, 101, 98, 86, 105, 101, 119,
			92, 67, 111, 114, 101, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 73, 110, 116, 101, 114, 110,
			97, 108, 92, 70, 105, 108, 101, 83, 101, 108,
			101, 99, 116, 105, 111, 110, 77, 101, 115, 115,
			97, 103, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 58, 92, 65, 115, 115, 101, 116,
			115, 92, 86, 117, 112, 108, 101, 120, 92, 87,
			101, 98, 86, 105, 101, 119, 92, 67, 111, 114,
			101, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			73, 110, 116, 101, 114, 110, 97, 108, 92, 73,
			87, 101, 98, 80, 108, 117, 103, 105, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 64,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 67, 111, 114, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 73, 110, 116, 101,
			114, 110, 97, 108, 92, 74, 115, 111, 110, 65,
			114, 114, 97, 121, 87, 114, 97, 112, 112, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 63, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 110,
			116, 101, 114, 110, 97, 108, 92, 75, 101, 121,
			98, 111, 97, 114, 100, 77, 97, 110, 97, 103,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 58, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			110, 116, 101, 114, 110, 97, 108, 92, 75, 101,
			121, 98, 111, 97, 114, 100, 85, 73, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 110, 116, 101, 114,
			110, 97, 108, 92, 76, 97, 98, 101, 108, 65,
			116, 116, 114, 105, 98, 117, 116, 101, 46, 99,
			115, 0, 0, 0, 3, 0, 0, 0, 70, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 110, 116, 101, 114,
			110, 97, 108, 92, 78, 97, 116, 105, 118, 101,
			75, 101, 121, 98, 111, 97, 114, 100, 76, 105,
			115, 116, 101, 110, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 67, 92, 65, 115,
			115, 101, 116, 115, 92, 86, 117, 112, 108, 101,
			120, 92, 87, 101, 98, 86, 105, 101, 119, 92,
			67, 111, 114, 101, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 73, 110, 116, 101, 114, 110, 97,
			108, 92, 83, 116, 114, 105, 110, 103, 66, 114,
			105, 100, 103, 101, 77, 101, 115, 115, 97, 103,
			101, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 73, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 110,
			116, 101, 114, 110, 97, 108, 92, 83, 116, 114,
			105, 110, 103, 87, 105, 116, 104, 73, 100, 66,
			114, 105, 100, 103, 101, 77, 101, 115, 115, 97,
			103, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 64, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			110, 116, 101, 114, 110, 97, 108, 92, 84, 104,
			114, 101, 97, 100, 68, 105, 115, 112, 97, 116,
			99, 104, 101, 114, 46, 99, 115, 0, 0, 0,
			2, 0, 0, 0, 65, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 73, 110, 116, 101, 114, 110, 97, 108, 92,
			85, 114, 108, 67, 104, 97, 110, 103, 101, 100,
			77, 101, 115, 115, 97, 103, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 68, 92, 65,
			115, 115, 101, 116, 115, 92, 86, 117, 112, 108,
			101, 120, 92, 87, 101, 98, 86, 105, 101, 119,
			92, 67, 111, 114, 101, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 73, 110, 116, 101, 114, 110,
			97, 108, 92, 86, 105, 101, 119, 112, 111, 114,
			116, 77, 97, 116, 101, 114, 105, 97, 108, 86,
			105, 101, 119, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 77, 92, 65, 115, 115, 101, 116,
			115, 92, 86, 117, 112, 108, 101, 120, 92, 87,
			101, 98, 86, 105, 101, 119, 92, 67, 111, 114,
			101, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			73, 110, 116, 101, 114, 110, 97, 108, 92, 86,
			117, 108, 107, 97, 110, 68, 101, 108, 97, 121,
			101, 100, 84, 101, 120, 116, 117, 114, 101, 68,
			101, 115, 116, 114, 111, 121, 101, 114, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 110, 116, 101, 114,
			110, 97, 108, 92, 86, 88, 85, 116, 105, 108,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 64, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 73, 110,
			116, 101, 114, 110, 97, 108, 92, 87, 101, 98,
			80, 108, 117, 103, 105, 110, 70, 97, 99, 116,
			111, 114, 121, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 61, 92, 65, 115, 115, 101, 116,
			115, 92, 86, 117, 112, 108, 101, 120, 92, 87,
			101, 98, 86, 105, 101, 119, 92, 67, 111, 114,
			101, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			73, 110, 116, 101, 114, 110, 97, 108, 92, 87,
			101, 98, 86, 105, 101, 119, 76, 111, 103, 103,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 60, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			80, 111, 105, 110, 116, 101, 114, 73, 110, 112,
			117, 116, 68, 101, 116, 101, 99, 116, 111, 114,
			46, 99, 115, 0, 0, 0, 2, 0, 0, 0,
			47, 92, 65, 115, 115, 101, 116, 115, 92, 86,
			117, 112, 108, 101, 120, 92, 87, 101, 98, 86,
			105, 101, 119, 92, 67, 111, 114, 101, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 73, 87, 101,
			98, 86, 105, 101, 119, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 59, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 73, 87, 105, 116, 104, 67, 104, 97,
			110, 103, 105, 110, 103, 84, 101, 120, 116, 117,
			114, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			87, 105, 116, 104, 67, 117, 114, 115, 111, 114,
			84, 121, 112, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 55, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 73, 87, 105, 116, 104, 68, 101, 101, 112,
			76, 105, 110, 107, 105, 110, 103, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 86, 117, 112, 108,
			101, 120, 92, 87, 101, 98, 86, 105, 101, 119,
			92, 67, 111, 114, 101, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 73, 87, 105, 116, 104, 68,
			111, 119, 110, 108, 111, 97, 100, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 63, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 87, 105, 116, 104,
			70, 97, 108, 108, 98, 97, 99, 107, 84, 101,
			120, 116, 117, 114, 101, 68, 97, 116, 97, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 57,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 67, 111, 114, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 73, 87, 105, 116,
			104, 70, 97, 108, 108, 98, 97, 99, 107, 86,
			105, 100, 101, 111, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 73, 87, 105, 116, 104, 70, 105, 108, 101,
			83, 101, 108, 101, 99, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 2, 0, 0, 0, 48,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 67, 111, 114, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 73, 87, 105, 116,
			104, 70, 105, 110, 100, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 73, 87, 105, 116, 104, 72, 116, 116,
			112, 65, 117, 116, 104, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 73, 87, 105, 116, 104, 75, 101, 121,
			68, 111, 119, 110, 65, 110, 100, 85, 112, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 67, 111, 114, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 73, 87, 105, 116,
			104, 77, 111, 118, 97, 98, 108, 101, 80, 111,
			105, 110, 116, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 73, 87, 105, 116, 104, 77, 117, 116,
			97, 98, 108, 101, 65, 117, 100, 105, 111, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 56,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 67, 111, 114, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 73, 87, 105, 116,
			104, 78, 97, 116, 105, 118, 101, 50, 68, 77,
			111, 100, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 67, 92, 65, 115, 115, 101, 116,
			115, 92, 86, 117, 112, 108, 101, 120, 92, 87,
			101, 98, 86, 105, 101, 119, 92, 67, 111, 114,
			101, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			73, 87, 105, 116, 104, 78, 97, 116, 105, 118,
			101, 74, 97, 118, 97, 83, 99, 114, 105, 112,
			116, 68, 105, 97, 108, 111, 103, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 66, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 73, 87, 105, 116, 104,
			78, 97, 116, 105, 118, 101, 79, 110, 83, 99,
			114, 101, 101, 110, 75, 101, 121, 98, 111, 97,
			114, 100, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 55, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 73,
			87, 105, 116, 104, 80, 100, 102, 67, 114, 101,
			97, 116, 105, 111, 110, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 73, 87, 105, 116, 104, 80, 105, 120,
			101, 108, 68, 101, 110, 115, 105, 116, 121, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 60,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 67, 111, 114, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 73, 87, 105, 116,
			104, 80, 111, 105, 110, 116, 101, 114, 68, 111,
			119, 110, 65, 110, 100, 85, 112, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 50, 92, 65,
			115, 115, 101, 116, 115, 92, 86, 117, 112, 108,
			101, 120, 92, 87, 101, 98, 86, 105, 101, 119,
			92, 67, 111, 114, 101, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 73, 87, 105, 116, 104, 80,
			111, 112, 117, 112, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 61, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 73, 87, 105, 116, 104, 83, 101, 116,
			116, 97, 98, 108, 101, 85, 115, 101, 114, 65,
			103, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 49, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 73, 87, 105, 116, 104, 84, 111, 117, 99,
			104, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 47, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 75, 101,
			121, 98, 111, 97, 114, 100, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 56, 92, 65, 115,
			115, 101, 116, 115, 92, 86, 117, 112, 108, 101,
			120, 92, 87, 101, 98, 86, 105, 101, 119, 92,
			67, 111, 114, 101, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 77, 111, 99, 107, 67, 111, 111,
			107, 105, 101, 77, 97, 110, 97, 103, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 86,
			117, 112, 108, 101, 120, 92, 87, 101, 98, 86,
			105, 101, 119, 92, 67, 111, 114, 101, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 77, 111, 99,
			107, 87, 101, 98, 80, 108, 117, 103, 105, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			50, 92, 65, 115, 115, 101, 116, 115, 92, 86,
			117, 112, 108, 101, 120, 92, 87, 101, 98, 86,
			105, 101, 119, 92, 67, 111, 114, 101, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 77, 111, 99,
			107, 87, 101, 98, 86, 105, 101, 119, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 97, 103, 101, 76,
			111, 97, 100, 70, 97, 105, 108, 101, 100, 69,
			118, 101, 110, 116, 65, 114, 103, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 97, 103, 101, 76,
			111, 97, 100, 70, 97, 105, 108, 101, 100, 69,
			120, 99, 101, 112, 116, 105, 111, 110, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 55, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 80, 111, 105, 110, 116,
			101, 114, 69, 118, 101, 110, 116, 65, 114, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 53, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 80, 111,
			105, 110, 116, 101, 114, 79, 112, 116, 105, 111,
			110, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 62, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 80,
			111, 112, 117, 112, 82, 101, 113, 117, 101, 115,
			116, 101, 100, 69, 118, 101, 110, 116, 65, 114,
			103, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 63, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 67, 111, 114, 101,
			92, 83, 99, 114, 105, 112, 116, 115, 92, 80,
			114, 111, 103, 114, 101, 115, 115, 67, 104, 97,
			110, 103, 101, 100, 69, 118, 101, 110, 116, 65,
			114, 103, 115, 46, 99, 115, 0, 0, 0, 2,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 86, 117, 112, 108, 101, 120, 92, 87,
			101, 98, 86, 105, 101, 119, 92, 67, 111, 114,
			101, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 99, 114, 105, 112, 116, 68, 105, 97, 108,
			111, 103, 69, 118, 101, 110, 116, 65, 114, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 83, 99,
			114, 111, 108, 108, 101, 100, 69, 118, 101, 110,
			116, 65, 114, 103, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 84, 101, 114, 109, 105, 110, 97, 116,
			101, 100, 69, 118, 101, 110, 116, 65, 114, 103,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 49, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 67, 111, 114, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 84, 111,
			117, 99, 104, 69, 118, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 52, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 85, 114, 108, 65, 99,
			116, 105, 111, 110, 84, 121, 112, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 86, 117, 112,
			108, 101, 120, 92, 87, 101, 98, 86, 105, 101,
			119, 92, 67, 111, 114, 101, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 85, 114, 108, 67, 104,
			97, 110, 103, 101, 100, 69, 118, 101, 110, 116,
			65, 114, 103, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 42, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 87, 101, 98, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 53, 92, 65, 115, 115, 101,
			116, 115, 92, 86, 117, 112, 108, 101, 120, 92,
			87, 101, 98, 86, 105, 101, 119, 92, 67, 111,
			114, 101, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 87, 101, 98, 86, 105, 101, 119, 79, 112,
			116, 105, 111, 110, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 87, 101, 98, 86, 105, 101, 119, 80,
			114, 101, 102, 97, 98, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 66, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 67,
			111, 114, 101, 92, 83, 99, 114, 105, 112, 116,
			115, 92, 87, 101, 98, 86, 105, 101, 119, 85,
			110, 97, 118, 97, 105, 108, 97, 98, 108, 101,
			69, 120, 99, 101, 112, 116, 105, 111, 110, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 59,
			92, 65, 115, 115, 101, 116, 115, 92, 86, 117,
			112, 108, 101, 120, 92, 87, 101, 98, 86, 105,
			101, 119, 92, 68, 101, 109, 111, 115, 92, 83,
			99, 114, 105, 112, 116, 115, 92, 65, 100, 118,
			97, 110, 99, 101, 100, 87, 101, 98, 86, 105,
			101, 119, 68, 101, 109, 111, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 53, 92, 65, 115,
			115, 101, 116, 115, 92, 86, 117, 112, 108, 101,
			120, 92, 87, 101, 98, 86, 105, 101, 119, 92,
			68, 101, 109, 111, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 67, 97, 109, 101, 114, 97,
			82, 111, 116, 97, 116, 111, 114, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 55, 92, 65,
			115, 115, 101, 116, 115, 92, 86, 117, 112, 108,
			101, 120, 92, 87, 101, 98, 86, 105, 101, 119,
			92, 68, 101, 109, 111, 115, 92, 83, 99, 114,
			105, 112, 116, 115, 92, 67, 97, 110, 118, 97,
			115, 80, 111, 112, 117, 112, 68, 101, 109, 111,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 86,
			117, 112, 108, 101, 120, 92, 87, 101, 98, 86,
			105, 101, 119, 92, 68, 101, 109, 111, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 67, 97,
			110, 118, 97, 115, 87, 101, 98, 86, 105, 101,
			119, 68, 101, 109, 111, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 68,
			101, 109, 111, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 67, 97, 110, 118, 97, 115, 87,
			111, 114, 108, 100, 83, 112, 97, 99, 101, 68,
			101, 109, 111, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 64, 92, 65, 115, 115, 101, 116,
			115, 92, 86, 117, 112, 108, 101, 120, 92, 87,
			101, 98, 86, 105, 101, 119, 92, 68, 101, 109,
			111, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 72, 97, 114, 100, 119, 97, 114, 101, 75,
			101, 121, 98, 111, 97, 114, 100, 76, 105, 115,
			116, 101, 110, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 49, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 68,
			101, 109, 111, 115, 92, 83, 99, 114, 105, 112,
			116, 115, 92, 80, 111, 112, 117, 112, 68, 101,
			109, 111, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 57, 92, 65, 115, 115, 101, 116, 115,
			92, 86, 117, 112, 108, 101, 120, 92, 87, 101,
			98, 86, 105, 101, 119, 92, 68, 101, 109, 111,
			115, 92, 83, 99, 114, 105, 112, 116, 115, 92,
			83, 105, 109, 112, 108, 101, 87, 101, 98, 86,
			105, 101, 119, 68, 101, 109, 111, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 80, 92, 65,
			115, 115, 101, 116, 115, 92, 86, 117, 112, 108,
			101, 120, 92, 87, 101, 98, 86, 105, 101, 119,
			92, 83, 116, 97, 110, 100, 97, 108, 111, 110,
			101, 92, 77, 97, 99, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 73, 110, 116, 101, 114, 110,
			97, 108, 92, 77, 97, 99, 87, 101, 98, 80,
			108, 117, 103, 105, 110, 82, 101, 103, 105, 115,
			116, 114, 97, 110, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 68, 92, 65, 115, 115,
			101, 116, 115, 92, 86, 117, 112, 108, 101, 120,
			92, 87, 101, 98, 86, 105, 101, 119, 92, 83,
			116, 97, 110, 100, 97, 108, 111, 110, 101, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 83, 116,
			97, 110, 100, 97, 108, 111, 110, 101, 67, 111,
			111, 107, 105, 101, 77, 97, 110, 97, 103, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 64, 92, 65, 115, 115, 101, 116, 115, 92,
			86, 117, 112, 108, 101, 120, 92, 87, 101, 98,
			86, 105, 101, 119, 92, 83, 116, 97, 110, 100,
			97, 108, 111, 110, 101, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 83, 116, 97, 110, 100, 97,
			108, 111, 110, 101, 87, 101, 98, 80, 108, 117,
			103, 105, 110, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 62, 92, 65, 115, 115, 101, 116,
			115, 92, 86, 117, 112, 108, 101, 120, 92, 87,
			101, 98, 86, 105, 101, 119, 92, 83, 116, 97,
			110, 100, 97, 108, 111, 110, 101, 92, 83, 99,
			114, 105, 112, 116, 115, 92, 83, 116, 97, 110,
			100, 97, 108, 111, 110, 101, 87, 101, 98, 86,
			105, 101, 119, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 69, 92, 65, 115, 115, 101, 116,
			115, 92, 86, 117, 112, 108, 101, 120, 92, 87,
			101, 98, 86, 105, 101, 119, 92, 83, 116, 97,
			110, 100, 97, 108, 111, 110, 101, 92, 87, 105,
			110, 100, 111, 119, 115, 92, 83, 99, 114, 105,
			112, 116, 115, 92, 87, 105, 110, 100, 111, 119,
			115, 87, 101, 98, 80, 108, 117, 103, 105, 110,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			79, 92, 65, 115, 115, 101, 116, 115, 92, 86,
			117, 112, 108, 101, 120, 92, 87, 101, 98, 86,
			105, 101, 119, 92, 83, 116, 97, 110, 100, 97,
			108, 111, 110, 101, 92, 87, 105, 110, 100, 111,
			119, 115, 92, 83, 99, 114, 105, 112, 116, 115,
			92, 87, 105, 110, 100, 111, 119, 115, 87, 101,
			98, 80, 108, 117, 103, 105, 110, 82, 101, 103,
			105, 115, 116, 114, 97, 110, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 67, 92, 65,
			115, 115, 101, 116, 115, 92, 86, 117, 112, 108,
			101, 120, 92, 87, 101, 98, 86, 105, 101, 119,
			92, 83, 116, 97, 110, 100, 97, 108, 111, 110,
			101, 92, 87, 105, 110, 100, 111, 119, 115, 92,
			83, 99, 114, 105, 112, 116, 115, 92, 87, 105,
			110, 100, 111, 119, 115, 87, 101, 98, 86, 105,
			101, 119, 46, 99, 115
		};
		result.TypesData = new byte[129345]
		{
			0, 0, 0, 0, 13, 124, 67, 105, 114, 99,
			108, 101, 83, 108, 105, 100, 101, 114, 0, 0,
			0, 0, 11, 124, 73, 109, 97, 103, 101, 66,
			111, 97, 114, 100, 0, 0, 0, 0, 21, 124,
			82, 97, 110, 100, 111, 109, 69, 110, 97, 98,
			108, 101, 65, 110, 105, 109, 97, 116, 111, 114,
			0, 0, 0, 0, 14, 124, 67, 97, 109, 77,
			111, 117, 115, 101, 79, 114, 98, 105, 116, 0,
			0, 0, 0, 18, 124, 77, 111, 117, 115, 101,
			76, 111, 111, 107, 65, 100, 118, 97, 110, 99,
			101, 100, 0, 0, 0, 0, 13, 124, 65, 117,
			100, 105, 101, 110, 99, 101, 80, 97, 116, 104,
			0, 0, 0, 0, 9, 124, 77, 111, 118, 101,
			80, 97, 116, 104, 0, 0, 0, 0, 8, 124,
			78, 101, 119, 80, 97, 116, 104, 0, 0, 0,
			0, 15, 124, 80, 101, 111, 112, 108, 101, 87,
			97, 108, 107, 80, 97, 116, 104, 0, 0, 0,
			0, 9, 124, 87, 97, 108, 107, 80, 97, 116,
			104, 0, 0, 0, 0, 13, 124, 82, 111, 116,
			97, 116, 101, 111, 98, 106, 101, 99, 116, 0,
			0, 0, 0, 17, 124, 80, 101, 111, 112, 108,
			101, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 0, 0, 0, 0, 24, 124, 80, 111, 112,
			117, 108, 97, 116, 105, 111, 110, 83, 121, 115,
			116, 101, 109, 77, 97, 110, 97, 103, 101, 114,
			0, 0, 0, 0, 22, 124, 83, 116, 97, 110,
			100, 105, 110, 103, 80, 101, 111, 112, 108, 101,
			67, 111, 110, 99, 101, 114, 116, 0, 0, 0,
			0, 21, 124, 83, 116, 97, 110, 100, 105, 110,
			103, 80, 101, 111, 112, 108, 101, 83, 116, 114,
			101, 101, 116, 0, 0, 0, 0, 12, 124, 67,
			111, 109, 109, 111, 110, 85, 116, 105, 108, 115,
			0, 0, 0, 0, 18, 124, 83, 104, 102, 117,
			102, 102, 108, 101, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 0, 0, 0, 0, 10, 124, 66,
			105, 108, 108, 98, 111, 97, 114, 100, 0, 0,
			0, 0, 20, 66, 105, 108, 108, 98, 111, 97,
			114, 100, 124, 65, 100, 118, 101, 114, 116, 76,
			105, 115, 116, 0, 0, 0, 0, 9, 124, 68,
			97, 121, 78, 105, 103, 104, 116, 0, 0, 0,
			0, 44, 85, 110, 105, 116, 121, 84, 101, 109,
			112, 108, 97, 116, 101, 80, 114, 111, 106, 101,
			99, 116, 115, 124, 83, 105, 109, 112, 108, 101,
			67, 97, 109, 101, 114, 97, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 0, 0, 0, 0,
			56, 85, 110, 105, 116, 121, 84, 101, 109, 112,
			108, 97, 116, 101, 80, 114, 111, 106, 101, 99,
			116, 115, 46, 83, 105, 109, 112, 108, 101, 67,
			97, 109, 101, 114, 97, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 124, 67, 97, 109, 101,
			114, 97, 83, 116, 97, 116, 101, 0, 0, 0,
			0, 76, 68, 105, 115, 115, 111, 110, 97, 110,
			99, 101, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 115, 46, 77, 105, 114, 114,
			111, 114, 73, 103, 110, 111, 114, 97, 110, 99,
			101, 46, 68, 101, 109, 111, 124, 77, 105, 114,
			114, 111, 114, 73, 103, 110, 111, 114, 97, 110,
			99, 101, 80, 108, 97, 121, 101, 114, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 0, 0,
			0, 0, 61, 68, 105, 115, 115, 111, 110, 97,
			110, 99, 101, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 115, 46, 77, 105, 114,
			114, 111, 114, 73, 103, 110, 111, 114, 97, 110,
			99, 101, 124, 77, 105, 114, 114, 111, 114, 73,
			103, 110, 111, 114, 97, 110, 99, 101, 67, 108,
			105, 101, 110, 116, 0, 0, 0, 0, 67, 68,
			105, 115, 115, 111, 110, 97, 110, 99, 101, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 115, 46, 77, 105, 114, 114, 111, 114, 73,
			103, 110, 111, 114, 97, 110, 99, 101, 124, 77,
			105, 114, 114, 111, 114, 73, 103, 110, 111, 114,
			97, 110, 99, 101, 67, 111, 109, 109, 115, 78,
			101, 116, 119, 111, 114, 107, 0, 0, 0, 0,
			50, 68, 105, 115, 115, 111, 110, 97, 110, 99,
			101, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 115, 46, 77, 105, 114, 114, 111,
			114, 73, 103, 110, 111, 114, 97, 110, 99, 101,
			124, 77, 105, 114, 114, 111, 114, 67, 111, 110,
			110, 0, 0, 0, 0, 74, 68, 105, 115, 115,
			111, 110, 97, 110, 99, 101, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 115, 46,
			77, 105, 114, 114, 111, 114, 73, 103, 110, 111,
			114, 97, 110, 99, 101, 124, 68, 105, 115, 115,
			111, 110, 97, 110, 99, 101, 78, 101, 116, 119,
			111, 114, 107, 77, 101, 115, 115, 97, 103, 101,
			69, 120, 116, 101, 110, 115, 105, 111, 110, 115,
			0, 0, 0, 0, 64, 68, 105, 115, 115, 111,
			110, 97, 110, 99, 101, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 115, 46, 77,
			105, 114, 114, 111, 114, 73, 103, 110, 111, 114,
			97, 110, 99, 101, 124, 68, 105, 115, 115, 111,
			110, 97, 110, 99, 101, 78, 101, 116, 119, 111,
			114, 107, 77, 101, 115, 115, 97, 103, 101, 0,
			0, 0, 0, 61, 68, 105, 115, 115, 111, 110,
			97, 110, 99, 101, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 115, 46, 77, 105,
			114, 114, 111, 114, 73, 103, 110, 111, 114, 97,
			110, 99, 101, 124, 77, 105, 114, 114, 111, 114,
			73, 103, 110, 111, 114, 97, 110, 99, 101, 80,
			108, 97, 121, 101, 114, 0, 0, 0, 0, 61,
			68, 105, 115, 115, 111, 110, 97, 110, 99, 101,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 115, 46, 77, 105, 114, 114, 111, 114,
			73, 103, 110, 111, 114, 97, 110, 99, 101, 124,
			77, 105, 114, 114, 111, 114, 73, 103, 110, 111,
			114, 97, 110, 99, 101, 83, 101, 114, 118, 101,
			114, 0, 0, 0, 0, 51, 68, 105, 115, 115,
			111, 110, 97, 110, 99, 101, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 115, 46,
			79, 102, 102, 108, 105, 110, 101, 124, 79, 102,
			102, 108, 105, 110, 101, 67, 111, 109, 109, 115,
			78, 101, 116, 119, 111, 114, 107, 0, 0, 0,
			0, 16, 69, 110, 118, 105, 114, 111, 124, 69,
			118, 101, 110, 116, 84, 101, 115, 116, 0, 0,
			0, 0, 15, 69, 110, 118, 105, 114, 111, 124,
			85, 73, 83, 97, 109, 112, 108, 101, 0, 0,
			0, 0, 34, 69, 110, 118, 105, 114, 111, 124,
			69, 110, 118, 105, 114, 111, 77, 105, 99, 114,
			111, 115, 112, 108, 97, 116, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 0, 0, 0,
			0, 25, 69, 110, 118, 105, 114, 111, 124, 69,
			110, 118, 105, 114, 111, 77, 105, 114, 114, 111,
			114, 80, 108, 97, 121, 101, 114, 0, 0, 0,
			0, 25, 69, 110, 118, 105, 114, 111, 124, 69,
			110, 118, 105, 114, 111, 77, 105, 114, 114, 111,
			114, 83, 101, 114, 118, 101, 114, 0, 0, 0,
			0, 30, 69, 110, 118, 105, 114, 111, 124, 69,
			110, 118, 105, 114, 111, 80, 104, 111, 116, 111,
			110, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 0, 0, 0, 0, 22, 86, 70, 88,
			84, 111, 111, 108, 115, 124, 86, 70, 88, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 0,
			0, 0, 0, 29, 72, 105, 103, 104, 108, 105,
			103, 104, 116, 80, 108, 117, 115, 46, 68, 101,
			109, 111, 115, 124, 72, 105, 116, 70, 120, 68,
			101, 109, 111, 0, 0, 0, 0, 39, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 80, 108, 117,
			115, 46, 68, 101, 109, 111, 115, 124, 77, 97,
			110, 117, 97, 108, 83, 101, 108, 101, 99, 116,
			105, 111, 110, 68, 101, 109, 111, 0, 0, 0,
			0, 47, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 80, 108, 117, 115, 46, 68, 101, 109, 111,
			115, 124, 83, 112, 104, 101, 114, 101, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 69, 118, 101,
			110, 116, 69, 120, 97, 109, 112, 108, 101, 0,
			0, 0, 0, 48, 72, 105, 103, 104, 108, 105,
			103, 104, 116, 80, 108, 117, 115, 46, 68, 101,
			109, 111, 115, 124, 83, 112, 104, 101, 114, 101,
			83, 101, 108, 101, 99, 116, 105, 111, 110, 69,
			118, 101, 110, 116, 115, 69, 120, 97, 109, 112,
			108, 101, 0, 0, 0, 0, 44, 72, 105, 103,
			104, 108, 105, 103, 104, 116, 80, 108, 117, 115,
			124, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			80, 108, 117, 115, 82, 101, 110, 100, 101, 114,
			80, 97, 115, 115, 70, 101, 97, 116, 117, 114,
			101, 0, 0, 0, 0, 58, 72, 105, 103, 104,
			108, 105, 103, 104, 116, 80, 108, 117, 115, 46,
			72, 105, 103, 104, 108, 105, 103, 104, 116, 80,
			108, 117, 115, 82, 101, 110, 100, 101, 114, 80,
			97, 115, 115, 70, 101, 97, 116, 117, 114, 101,
			124, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			80, 97, 115, 115, 0, 0, 0, 0, 67, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 80, 108,
			117, 115, 46, 72, 105, 103, 104, 108, 105, 103,
			104, 116, 80, 108, 117, 115, 82, 101, 110, 100,
			101, 114, 80, 97, 115, 115, 70, 101, 97, 116,
			117, 114, 101, 43, 72, 105, 103, 104, 108, 105,
			103, 104, 116, 80, 97, 115, 115, 124, 80, 97,
			115, 115, 68, 97, 116, 97, 0, 0, 0, 0,
			75, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			80, 108, 117, 115, 46, 72, 105, 103, 104, 108,
			105, 103, 104, 116, 80, 108, 117, 115, 82, 101,
			110, 100, 101, 114, 80, 97, 115, 115, 70, 101,
			97, 116, 117, 114, 101, 43, 72, 105, 103, 104,
			108, 105, 103, 104, 116, 80, 97, 115, 115, 124,
			68, 105, 115, 116, 97, 110, 99, 101, 67, 111,
			109, 112, 97, 114, 101, 114, 0, 0, 0, 0,
			36, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			80, 108, 117, 115, 124, 81, 117, 97, 108, 105,
			116, 121, 76, 101, 118, 101, 108, 69, 120, 116,
			101, 110, 115, 105, 111, 110, 115, 0, 0, 0,
			0, 26, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 80, 108, 117, 115, 124, 71, 108, 111, 119,
			80, 97, 115, 115, 68, 97, 116, 97, 1, 0,
			0, 0, 29, 72, 105, 103, 104, 108, 105, 103,
			104, 116, 80, 108, 117, 115, 124, 72, 105, 103,
			104, 108, 105, 103, 104, 116, 69, 102, 102, 101,
			99, 116, 0, 0, 0, 0, 44, 72, 105, 103,
			104, 108, 105, 103, 104, 116, 80, 108, 117, 115,
			46, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			69, 102, 102, 101, 99, 116, 124, 77, 111, 100,
			101, 108, 77, 97, 116, 101, 114, 105, 97, 108,
			115, 0, 0, 0, 0, 52, 72, 105, 103, 104,
			108, 105, 103, 104, 116, 80, 108, 117, 115, 46,
			72, 105, 103, 104, 108, 105, 103, 104, 116, 69,
			102, 102, 101, 99, 116, 124, 80, 101, 114, 67,
			97, 109, 101, 114, 97, 79, 99, 99, 108, 117,
			115, 105, 111, 110, 68, 97, 116, 97, 1, 0,
			0, 0, 29, 72, 105, 103, 104, 108, 105, 103,
			104, 116, 80, 108, 117, 115, 124, 72, 105, 103,
			104, 108, 105, 103, 104, 116, 69, 102, 102, 101,
			99, 116, 1, 0, 0, 0, 29, 72, 105, 103,
			104, 108, 105, 103, 104, 116, 80, 108, 117, 115,
			124, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			69, 102, 102, 101, 99, 116, 0, 0, 0, 0,
			30, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			80, 108, 117, 115, 124, 72, 105, 103, 104, 108,
			105, 103, 104, 116, 77, 97, 110, 97, 103, 101,
			114, 0, 0, 0, 0, 30, 72, 105, 103, 104,
			108, 105, 103, 104, 116, 80, 108, 117, 115, 124,
			72, 105, 103, 104, 108, 105, 103, 104, 116, 80,
			114, 111, 102, 105, 108, 101, 0, 0, 0, 0,
			22, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			80, 108, 117, 115, 124, 77, 101, 115, 104, 68,
			97, 116, 97, 0, 0, 0, 0, 41, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 80, 108, 117,
			115, 124, 72, 105, 103, 104, 108, 105, 103, 104,
			116, 83, 101, 101, 84, 104, 114, 111, 117, 103,
			104, 79, 99, 99, 108, 117, 100, 101, 114, 0,
			0, 0, 0, 30, 72, 105, 103, 104, 108, 105,
			103, 104, 116, 80, 108, 117, 115, 124, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 84, 114, 105,
			103, 103, 101, 114, 0, 0, 0, 0, 24, 72,
			105, 103, 104, 108, 105, 103, 104, 116, 80, 108,
			117, 115, 124, 73, 110, 112, 117, 116, 80, 114,
			111, 120, 121, 0, 0, 0, 0, 18, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 80, 108, 117,
			115, 124, 77, 105, 115, 99, 0, 0, 0, 0,
			28, 72, 105, 103, 104, 108, 105, 103, 104, 116,
			80, 108, 117, 115, 124, 82, 101, 110, 100, 101,
			114, 105, 110, 103, 85, 116, 105, 108, 115, 0,
			0, 0, 0, 26, 72, 105, 103, 104, 108, 105,
			103, 104, 116, 80, 108, 117, 115, 124, 83, 104,
			97, 100, 101, 114, 80, 97, 114, 97, 109, 115,
			0, 0, 0, 0, 21, 72, 105, 103, 104, 108,
			105, 103, 104, 116, 80, 108, 117, 115, 124, 86,
			82, 67, 104, 101, 99, 107, 0, 0, 0, 0,
			25, 124, 65, 100, 100, 105, 116, 105, 111, 110,
			110, 97, 108, 81, 117, 101, 117, 101, 80, 114,
			111, 118, 105, 100, 101, 114, 0, 0, 0, 0,
			11, 124, 77, 97, 115, 107, 69, 102, 102, 101,
			99, 116, 0, 0, 0, 0, 17, 74, 52, 70,
			124, 81, 117, 101, 117, 101, 80, 114, 111, 118,
			105, 100, 101, 114, 0, 0, 0, 0, 30, 124,
			69, 120, 112, 111, 115, 101, 77, 101, 116, 104,
			111, 100, 73, 110, 69, 100, 105, 116, 111, 114,
			65, 116, 116, 114, 105, 98, 117, 116, 101, 0,
			0, 0, 0, 24, 74, 52, 70, 124, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 69, 120,
			116, 101, 110, 115, 105, 111, 110, 115, 0, 0,
			0, 0, 16, 74, 52, 70, 124, 74, 52, 70,
			66, 101, 104, 97, 118, 105, 111, 117, 114, 0,
			0, 0, 0, 13, 74, 52, 70, 124, 83, 105,
			110, 103, 108, 101, 116, 111, 110, 0, 0, 0,
			0, 20, 74, 52, 70, 124, 83, 105, 110, 103,
			108, 101, 116, 111, 110, 80, 101, 114, 115, 105,
			115, 116, 0, 0, 0, 0, 9, 74, 52, 70,
			124, 84, 111, 111, 108, 115, 0, 0, 0, 0,
			22, 73, 69, 83, 76, 105, 103, 104, 116, 115,
			124, 73, 69, 83, 67, 111, 110, 118, 101, 114,
			116, 101, 114, 0, 0, 0, 0, 17, 73, 69,
			83, 76, 105, 103, 104, 116, 115, 124, 73, 69,
			83, 68, 97, 116, 97, 0, 0, 0, 0, 17,
			73, 69, 83, 76, 105, 103, 104, 116, 115, 124,
			69, 88, 82, 68, 97, 116, 97, 0, 0, 0,
			0, 22, 73, 69, 83, 76, 105, 103, 104, 116,
			115, 124, 73, 69, 83, 84, 111, 67, 117, 98,
			101, 109, 97, 112, 0, 0, 0, 0, 30, 73,
			69, 83, 76, 105, 103, 104, 116, 115, 124, 73,
			69, 83, 84, 111, 83, 112, 111, 116, 108, 105,
			103, 104, 116, 67, 111, 111, 107, 105, 101, 0,
			0, 0, 0, 22, 73, 69, 83, 76, 105, 103,
			104, 116, 115, 124, 73, 69, 83, 84, 111, 84,
			101, 120, 116, 117, 114, 101, 0, 0, 0, 0,
			18, 77, 105, 110, 105, 69, 88, 82, 124, 72,
			97, 108, 102, 72, 101, 108, 112, 101, 114, 0,
			0, 0, 0, 15, 77, 105, 110, 105, 69, 88,
			82, 124, 77, 105, 110, 105, 69, 88, 82, 0,
			0, 0, 0, 18, 73, 69, 83, 76, 105, 103,
			104, 116, 115, 124, 80, 97, 114, 115, 101, 73,
			69, 83, 0, 0, 0, 0, 27, 73, 69, 83,
			76, 105, 103, 104, 116, 115, 124, 73, 69, 83,
			80, 97, 114, 115, 101, 69, 120, 99, 101, 112,
			116, 105, 111, 110, 0, 0, 0, 0, 28, 73,
			69, 83, 76, 105, 103, 104, 116, 115, 124, 82,
			117, 110, 116, 105, 109, 101, 73, 69, 83, 73,
			109, 112, 111, 114, 116, 101, 114, 0, 0, 0,
			0, 20, 124, 80, 97, 114, 116, 105, 99, 108,
			101, 83, 99, 97, 108, 101, 65, 100, 106, 117,
			115, 116, 0, 0, 0, 0, 11, 124, 70, 114,
			101, 101, 67, 97, 109, 101, 114, 97, 0, 0,
			0, 0, 59, 67, 114, 111, 109, 117, 108, 101,
			110, 116, 66, 105, 115, 103, 101, 116, 116, 105,
			46, 67, 111, 110, 116, 97, 105, 110, 101, 114,
			80, 97, 99, 107, 105, 110, 103, 46, 65, 108,
			103, 111, 114, 105, 116, 104, 109, 115, 124, 65,
			108, 103, 111, 114, 105, 116, 104, 109, 66, 97,
			115, 101, 0, 0, 0, 0, 53, 67, 114, 111,
			109, 117, 108, 101, 110, 116, 66, 105, 115, 103,
			101, 116, 116, 105, 46, 67, 111, 110, 116, 97,
			105, 110, 101, 114, 80, 97, 99, 107, 105, 110,
			103, 46, 65, 108, 103, 111, 114, 105, 116, 104,
			109, 115, 124, 69, 66, 95, 65, 70, 73, 84,
			0, 0, 0, 0, 59, 67, 114, 111, 109, 117,
			108, 101, 110, 116, 66, 105, 115, 103, 101, 116,
			116, 105, 46, 67, 111, 110, 116, 97, 105, 110,
			101, 114, 80, 97, 99, 107, 105, 110, 103, 46,
			65, 108, 103, 111, 114, 105, 116, 104, 109, 115,
			46, 69, 66, 95, 65, 70, 73, 84, 124, 76,
			97, 121, 101, 114, 0, 0, 0, 0, 62, 67,
			114, 111, 109, 117, 108, 101, 110, 116, 66, 105,
			115, 103, 101, 116, 116, 105, 46, 67, 111, 110,
			116, 97, 105, 110, 101, 114, 80, 97, 99, 107,
			105, 110, 103, 46, 65, 108, 103, 111, 114, 105,
			116, 104, 109, 115, 46, 69, 66, 95, 65, 70,
			73, 84, 124, 83, 99, 114, 97, 112, 80, 97,
			100, 0, 0, 0, 0, 63, 67, 114, 111, 109,
			117, 108, 101, 110, 116, 66, 105, 115, 103, 101,
			116, 116, 105, 46, 67, 111, 110, 116, 97, 105,
			110, 101, 114, 80, 97, 99, 107, 105, 110, 103,
			46, 65, 108, 103, 111, 114, 105, 116, 104, 109,
			115, 124, 73, 80, 97, 99, 107, 105, 110, 103,
			65, 108, 103, 111, 114, 105, 116, 104, 109, 0,
			0, 0, 0, 66, 67, 114, 111, 109, 117, 108,
			101, 110, 116, 66, 105, 115, 103, 101, 116, 116,
			105, 46, 67, 111, 110, 116, 97, 105, 110, 101,
			114, 80, 97, 99, 107, 105, 110, 103, 46, 69,
			110, 116, 105, 116, 105, 101, 115, 124, 65, 108,
			103, 111, 114, 105, 116, 104, 109, 80, 97, 99,
			107, 105, 110, 103, 82, 101, 115, 117, 108, 116,
			0, 0, 0, 0, 53, 67, 114, 111, 109, 117,
			108, 101, 110, 116, 66, 105, 115, 103, 101, 116,
			116, 105, 46, 67, 111, 110, 116, 97, 105, 110,
			101, 114, 80, 97, 99, 107, 105, 110, 103, 46,
			69, 110, 116, 105, 116, 105, 101, 115, 124, 67,
			111, 110, 116, 97, 105, 110, 101, 114, 0, 0,
			0, 0, 66, 67, 114, 111, 109, 117, 108, 101,
			110, 116, 66, 105, 115, 103, 101, 116, 116, 105,
			46, 67, 111, 110, 116, 97, 105, 110, 101, 114,
			80, 97, 99, 107, 105, 110, 103, 46, 69, 110,
			116, 105, 116, 105, 101, 115, 124, 67, 111, 110,
			116, 97, 105, 110, 101, 114, 80, 97, 99, 107,
			105, 110, 103, 82, 101, 115, 117, 108, 116, 0,
			0, 0, 0, 17, 124, 67, 111, 110, 116, 97,
			105, 110, 101, 114, 84, 101, 115, 116, 105, 110,
			103, 0, 0, 0, 0, 48, 67, 114, 111, 109,
			117, 108, 101, 110, 116, 66, 105, 115, 103, 101,
			116, 116, 105, 46, 67, 111, 110, 116, 97, 105,
			110, 101, 114, 80, 97, 99, 107, 105, 110, 103,
			46, 69, 110, 116, 105, 116, 105, 101, 115, 124,
			73, 116, 101, 109, 0, 0, 0, 0, 49, 67,
			114, 111, 109, 117, 108, 101, 110, 116, 66, 105,
			115, 103, 101, 116, 116, 105, 46, 67, 111, 110,
			116, 97, 105, 110, 101, 114, 80, 97, 99, 107,
			105, 110, 103, 124, 80, 97, 99, 107, 105, 110,
			103, 83, 101, 114, 118, 105, 99, 101, 0, 0,
			0, 0, 22, 72, 101, 115, 115, 98, 117, 114,
			103, 124, 112, 117, 108, 115, 105, 110, 103, 76,
			105, 103, 104, 116, 115, 0, 0, 0, 0, 35,
			124, 83, 105, 110, 101, 67, 97, 109, 101, 114,
			97, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 66, 101, 116, 116, 101, 114, 67, 114, 121,
			115, 116, 97, 108, 115, 0, 0, 0, 0, 31,
			124, 83, 105, 110, 101, 85, 73, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 66, 101, 116,
			116, 101, 114, 67, 114, 121, 115, 116, 97, 108,
			115, 0, 0, 0, 0, 26, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 66,
			117, 116, 116, 111, 110, 77, 97, 110, 97, 103,
			101, 114, 0, 0, 0, 0, 34, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 46,
			66, 117, 116, 116, 111, 110, 77, 97, 110, 97,
			103, 101, 114, 124, 80, 97, 100, 100, 105, 110,
			103, 0, 0, 0, 0, 21, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 80,
			105, 101, 67, 104, 97, 114, 116, 0, 0, 0,
			0, 38, 77, 105, 99, 104, 115, 107, 121, 46,
			77, 85, 73, 80, 46, 80, 105, 101, 67, 104,
			97, 114, 116, 124, 80, 105, 101, 67, 104, 97,
			114, 116, 68, 97, 116, 97, 78, 111, 100, 101,
			0, 0, 0, 0, 31, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 67, 111,
			110, 116, 101, 120, 116, 77, 101, 110, 117, 67,
			111, 110, 116, 101, 110, 116, 0, 0, 0, 0,
			43, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 46, 67, 111, 110, 116, 101, 120,
			116, 77, 101, 110, 117, 67, 111, 110, 116, 101,
			110, 116, 124, 67, 111, 110, 116, 101, 120, 116,
			73, 116, 101, 109, 0, 0, 0, 0, 43, 77,
			105, 99, 104, 115, 107, 121, 46, 77, 85, 73,
			80, 46, 67, 111, 110, 116, 101, 120, 116, 77,
			101, 110, 117, 67, 111, 110, 116, 101, 110, 116,
			124, 83, 117, 98, 77, 101, 110, 117, 73, 116,
			101, 109, 0, 0, 0, 0, 37, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 124,
			67, 111, 110, 116, 101, 120, 116, 77, 101, 110,
			117, 67, 111, 110, 116, 101, 110, 116, 77, 111,
			98, 105, 108, 101, 0, 0, 0, 0, 49, 77,
			105, 99, 104, 115, 107, 121, 46, 77, 85, 73,
			80, 46, 67, 111, 110, 116, 101, 120, 116, 77,
			101, 110, 117, 67, 111, 110, 116, 101, 110, 116,
			77, 111, 98, 105, 108, 101, 124, 67, 111, 110,
			116, 101, 120, 116, 73, 116, 101, 109, 0, 0,
			0, 0, 31, 77, 105, 99, 104, 115, 107, 121,
			46, 77, 85, 73, 80, 124, 67, 111, 110, 116,
			101, 120, 116, 77, 101, 110, 117, 77, 97, 110,
			97, 103, 101, 114, 0, 0, 0, 0, 31, 77,
			105, 99, 104, 115, 107, 121, 46, 77, 85, 73,
			80, 124, 67, 111, 110, 116, 101, 120, 116, 77,
			101, 110, 117, 83, 117, 98, 77, 101, 110, 117,
			0, 0, 0, 0, 30, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 77, 85,
			73, 80, 73, 110, 116, 101, 114, 110, 97, 108,
			84, 111, 111, 108, 115, 0, 0, 0, 0, 28,
			77, 105, 99, 104, 115, 107, 121, 46, 77, 85,
			73, 80, 124, 68, 101, 109, 111, 69, 108, 101,
			109, 101, 110, 116, 83, 119, 97, 121, 0, 0,
			0, 0, 34, 77, 105, 99, 104, 115, 107, 121,
			46, 77, 85, 73, 80, 124, 68, 101, 109, 111,
			69, 108, 101, 109, 101, 110, 116, 83, 119, 97,
			121, 80, 97, 114, 101, 110, 116, 0, 0, 0,
			0, 27, 77, 105, 99, 104, 115, 107, 121, 46,
			77, 85, 73, 80, 124, 68, 101, 109, 111, 76,
			105, 115, 116, 83, 104, 97, 100, 111, 119, 0,
			0, 0, 0, 31, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 124, 73, 110, 112,
			117, 116, 83, 121, 115, 116, 101, 109, 67, 104,
			101, 99, 107, 101, 114, 0, 0, 0, 0, 22,
			77, 105, 99, 104, 115, 107, 121, 46, 77, 85,
			73, 80, 124, 76, 97, 117, 110, 99, 104, 85,
			82, 76, 0, 0, 0, 0, 27, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 124,
			67, 117, 115, 116, 111, 109, 68, 114, 111, 112,
			100, 111, 119, 110, 0, 0, 0, 0, 41, 77,
			105, 99, 104, 115, 107, 121, 46, 77, 85, 73,
			80, 46, 67, 117, 115, 116, 111, 109, 68, 114,
			111, 112, 100, 111, 119, 110, 124, 68, 114, 111,
			112, 100, 111, 119, 110, 69, 118, 101, 110, 116,
			0, 0, 0, 0, 48, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 46, 67, 117,
			115, 116, 111, 109, 68, 114, 111, 112, 100, 111,
			119, 110, 124, 73, 116, 101, 109, 84, 101, 120,
			116, 67, 104, 97, 110, 103, 101, 100, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 32, 77, 105,
			99, 104, 115, 107, 121, 46, 77, 85, 73, 80,
			46, 67, 117, 115, 116, 111, 109, 68, 114, 111,
			112, 100, 111, 119, 110, 124, 73, 116, 101, 109,
			0, 0, 0, 0, 32, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 68, 114,
			111, 112, 100, 111, 119, 110, 77, 117, 108, 116,
			105, 83, 101, 108, 101, 99, 116, 0, 0, 0,
			0, 44, 77, 105, 99, 104, 115, 107, 121, 46,
			77, 85, 73, 80, 46, 68, 114, 111, 112, 100,
			111, 119, 110, 77, 117, 108, 116, 105, 83, 101,
			108, 101, 99, 116, 124, 84, 111, 103, 103, 108,
			101, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			37, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 46, 68, 114, 111, 112, 100, 111,
			119, 110, 77, 117, 108, 116, 105, 83, 101, 108,
			101, 99, 116, 124, 73, 116, 101, 109, 0, 0,
			0, 0, 31, 77, 105, 99, 104, 115, 107, 121,
			46, 77, 85, 73, 80, 124, 72, 111, 114, 105,
			122, 111, 110, 116, 97, 108, 83, 101, 108, 101,
			99, 116, 111, 114, 0, 0, 0, 0, 45, 77,
			105, 99, 104, 115, 107, 121, 46, 77, 85, 73,
			80, 46, 72, 111, 114, 105, 122, 111, 110, 116,
			97, 108, 83, 101, 108, 101, 99, 116, 111, 114,
			124, 83, 101, 108, 101, 99, 116, 111, 114, 69,
			118, 101, 110, 116, 0, 0, 0, 0, 52, 77,
			105, 99, 104, 115, 107, 121, 46, 77, 85, 73,
			80, 46, 72, 111, 114, 105, 122, 111, 110, 116,
			97, 108, 83, 101, 108, 101, 99, 116, 111, 114,
			124, 73, 116, 101, 109, 84, 101, 120, 116, 67,
			104, 97, 110, 103, 101, 100, 69, 118, 101, 110,
			116, 0, 0, 0, 0, 36, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 46, 72,
			111, 114, 105, 122, 111, 110, 116, 97, 108, 83,
			101, 108, 101, 99, 116, 111, 114, 124, 73, 116,
			101, 109, 0, 0, 0, 0, 32, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 124,
			65, 110, 105, 109, 97, 116, 101, 100, 73, 99,
			111, 110, 72, 97, 110, 100, 108, 101, 114, 0,
			0, 0, 0, 24, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 124, 73, 99, 111,
			110, 76, 105, 98, 114, 97, 114, 121, 0, 0,
			0, 0, 33, 77, 105, 99, 104, 115, 107, 121,
			46, 77, 85, 73, 80, 46, 73, 99, 111, 110,
			76, 105, 98, 114, 97, 114, 121, 124, 73, 99,
			111, 110, 73, 116, 101, 109, 0, 0, 0, 0,
			24, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 73, 99, 111, 110, 77, 97,
			110, 97, 103, 101, 114, 0, 0, 0, 0, 29,
			77, 105, 99, 104, 115, 107, 121, 46, 77, 85,
			73, 80, 124, 67, 117, 115, 116, 111, 109, 73,
			110, 112, 117, 116, 70, 105, 101, 108, 100, 0,
			0, 0, 0, 27, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 124, 76, 97, 121,
			111, 117, 116, 71, 114, 111, 117, 112, 70, 105,
			120, 0, 0, 0, 0, 30, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 82,
			97, 100, 105, 97, 108, 76, 97, 121, 111, 117,
			116, 71, 114, 111, 117, 112, 0, 0, 0, 0,
			21, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 76, 105, 115, 116, 86, 105,
			101, 119, 0, 0, 0, 0, 30, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 46,
			76, 105, 115, 116, 86, 105, 101, 119, 124, 76,
			105, 115, 116, 73, 116, 101, 109, 0, 0, 0,
			0, 29, 77, 105, 99, 104, 115, 107, 121, 46,
			77, 85, 73, 80, 46, 76, 105, 115, 116, 86,
			105, 101, 119, 124, 76, 105, 115, 116, 82, 111,
			119, 0, 0, 0, 0, 25, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 76,
			105, 115, 116, 86, 105, 101, 119, 73, 116, 101,
			109, 0, 0, 0, 0, 24, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 76,
			105, 115, 116, 86, 105, 101, 119, 82, 111, 119,
			0, 0, 0, 0, 31, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 77, 111,
			100, 97, 108, 87, 105, 110, 100, 111, 119, 77,
			97, 110, 97, 103, 101, 114, 0, 0, 0, 0,
			32, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 78, 111, 116, 105, 102, 105,
			99, 97, 116, 105, 111, 110, 77, 97, 110, 97,
			103, 101, 114, 0, 0, 0, 0, 33, 77, 105,
			99, 104, 115, 107, 121, 46, 77, 85, 73, 80,
			124, 78, 111, 116, 105, 102, 105, 99, 97, 116,
			105, 111, 110, 83, 116, 97, 99, 107, 105, 110,
			103, 0, 0, 0, 0, 21, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 80,
			66, 70, 105, 108, 108, 101, 100, 0, 0, 0,
			0, 24, 77, 105, 99, 104, 115, 107, 121, 46,
			77, 85, 73, 80, 124, 80, 114, 111, 103, 114,
			101, 115, 115, 66, 97, 114, 0, 0, 0, 0,
			41, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 46, 80, 114, 111, 103, 114, 101,
			115, 115, 66, 97, 114, 124, 80, 114, 111, 103,
			114, 101, 115, 115, 66, 97, 114, 69, 118, 101,
			110, 116, 0, 0, 0, 0, 19, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 124,
			82, 105, 112, 112, 108, 101, 0, 0, 0, 0,
			23, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 85, 73, 71, 114, 97, 100,
			105, 101, 110, 116, 0, 0, 0, 0, 25, 77,
			105, 99, 104, 115, 107, 121, 46, 77, 85, 73,
			80, 124, 82, 97, 100, 105, 97, 108, 83, 108,
			105, 100, 101, 114, 0, 0, 0, 0, 37, 77,
			105, 99, 104, 115, 107, 121, 46, 77, 85, 73,
			80, 46, 82, 97, 100, 105, 97, 108, 83, 108,
			105, 100, 101, 114, 124, 83, 108, 105, 100, 101,
			114, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			27, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 82, 97, 110, 103, 101, 77,
			97, 120, 83, 108, 105, 100, 101, 114, 0, 0,
			0, 0, 27, 77, 105, 99, 104, 115, 107, 121,
			46, 77, 85, 73, 80, 124, 82, 97, 110, 103,
			101, 77, 105, 110, 83, 108, 105, 100, 101, 114,
			0, 0, 0, 0, 24, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 82, 97,
			110, 103, 101, 83, 108, 105, 100, 101, 114, 0,
			0, 0, 0, 24, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 124, 83, 108, 105,
			100, 101, 114, 73, 110, 112, 117, 116, 0, 0,
			0, 0, 26, 77, 105, 99, 104, 115, 107, 121,
			46, 77, 85, 73, 80, 124, 83, 108, 105, 100,
			101, 114, 77, 97, 110, 97, 103, 101, 114, 0,
			0, 0, 0, 38, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 46, 83, 108, 105,
			100, 101, 114, 77, 97, 110, 97, 103, 101, 114,
			124, 83, 108, 105, 100, 101, 114, 69, 118, 101,
			110, 116, 0, 0, 0, 0, 26, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 124,
			83, 119, 105, 116, 99, 104, 77, 97, 110, 97,
			103, 101, 114, 0, 0, 0, 0, 38, 77, 105,
			99, 104, 115, 107, 121, 46, 77, 85, 73, 80,
			46, 83, 119, 105, 116, 99, 104, 77, 97, 110,
			97, 103, 101, 114, 124, 83, 119, 105, 116, 99,
			104, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			25, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 67, 117, 115, 116, 111, 109,
			84, 111, 103, 103, 108, 101, 0, 0, 0, 0,
			27, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 69, 108, 101, 109, 101, 110,
			116, 84, 97, 98, 98, 105, 110, 103, 0, 0,
			0, 0, 27, 77, 105, 99, 104, 115, 107, 121,
			46, 77, 85, 73, 80, 124, 84, 111, 111, 108,
			116, 105, 112, 67, 111, 110, 116, 101, 110, 116,
			0, 0, 0, 0, 27, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 84, 111,
			111, 108, 116, 105, 112, 77, 97, 110, 97, 103,
			101, 114, 0, 0, 0, 0, 22, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 124,
			85, 73, 77, 97, 110, 97, 103, 101, 114, 0,
			0, 0, 0, 34, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 124, 85, 73, 77,
			97, 110, 97, 103, 101, 114, 65, 110, 105, 109,
			97, 116, 101, 100, 73, 99, 111, 110, 0, 0,
			0, 0, 28, 77, 105, 99, 104, 115, 107, 121,
			46, 77, 85, 73, 80, 124, 85, 73, 77, 97,
			110, 97, 103, 101, 114, 66, 117, 116, 116, 111,
			110, 0, 0, 0, 0, 33, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 85,
			73, 77, 97, 110, 97, 103, 101, 114, 67, 111,
			110, 116, 101, 120, 116, 77, 101, 110, 117, 0,
			0, 0, 0, 28, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 124, 85, 73, 77,
			97, 110, 97, 103, 101, 114, 67, 117, 115, 116,
			111, 109, 0, 0, 0, 0, 30, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 124,
			85, 73, 77, 97, 110, 97, 103, 101, 114, 68,
			114, 111, 112, 100, 111, 119, 110, 0, 0, 0,
			0, 34, 77, 105, 99, 104, 115, 107, 121, 46,
			77, 85, 73, 80, 124, 85, 73, 77, 97, 110,
			97, 103, 101, 114, 68, 114, 111, 112, 100, 111,
			119, 110, 73, 116, 101, 109, 0, 0, 0, 0,
			31, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 85, 73, 77, 97, 110, 97,
			103, 101, 114, 72, 83, 101, 108, 101, 99, 116,
			111, 114, 0, 0, 0, 0, 32, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 124,
			85, 73, 77, 97, 110, 97, 103, 101, 114, 73,
			110, 112, 117, 116, 70, 105, 101, 108, 100, 0,
			0, 0, 0, 33, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 124, 85, 73, 77,
			97, 110, 97, 103, 101, 114, 77, 111, 100, 97,
			108, 87, 105, 110, 100, 111, 119, 0, 0, 0,
			0, 34, 77, 105, 99, 104, 115, 107, 121, 46,
			77, 85, 73, 80, 124, 85, 73, 77, 97, 110,
			97, 103, 101, 114, 78, 111, 116, 105, 102, 105,
			99, 97, 116, 105, 111, 110, 0, 0, 0, 0,
			30, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 85, 73, 77, 97, 110, 97,
			103, 101, 114, 80, 105, 101, 67, 104, 97, 114,
			116, 0, 0, 0, 0, 33, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 85,
			73, 77, 97, 110, 97, 103, 101, 114, 80, 114,
			111, 103, 114, 101, 115, 115, 66, 97, 114, 0,
			0, 0, 0, 37, 77, 105, 99, 104, 115, 107,
			121, 46, 77, 85, 73, 80, 124, 85, 73, 77,
			97, 110, 97, 103, 101, 114, 80, 114, 111, 103,
			114, 101, 115, 115, 66, 97, 114, 76, 111, 111,
			112, 0, 0, 0, 0, 31, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 85,
			73, 77, 97, 110, 97, 103, 101, 114, 83, 99,
			114, 111, 108, 108, 98, 97, 114, 0, 0, 0,
			0, 28, 77, 105, 99, 104, 115, 107, 121, 46,
			77, 85, 73, 80, 124, 85, 73, 77, 97, 110,
			97, 103, 101, 114, 83, 108, 105, 100, 101, 114,
			0, 0, 0, 0, 28, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 85, 73,
			77, 97, 110, 97, 103, 101, 114, 83, 119, 105,
			116, 99, 104, 0, 0, 0, 0, 28, 77, 105,
			99, 104, 115, 107, 121, 46, 77, 85, 73, 80,
			124, 85, 73, 77, 97, 110, 97, 103, 101, 114,
			84, 111, 103, 103, 108, 101, 0, 0, 0, 0,
			29, 77, 105, 99, 104, 115, 107, 121, 46, 77,
			85, 73, 80, 124, 85, 73, 77, 97, 110, 97,
			103, 101, 114, 84, 111, 111, 108, 116, 105, 112,
			0, 0, 0, 0, 35, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 85, 73,
			77, 97, 110, 97, 103, 101, 114, 87, 105, 110,
			100, 111, 119, 77, 97, 110, 97, 103, 101, 114,
			0, 0, 0, 0, 26, 77, 105, 99, 104, 115,
			107, 121, 46, 77, 85, 73, 80, 124, 87, 105,
			110, 100, 111, 119, 68, 114, 97, 103, 103, 101,
			114, 0, 0, 0, 0, 26, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 124, 87,
			105, 110, 100, 111, 119, 77, 97, 110, 97, 103,
			101, 114, 0, 0, 0, 0, 44, 77, 105, 99,
			104, 115, 107, 121, 46, 77, 85, 73, 80, 46,
			87, 105, 110, 100, 111, 119, 77, 97, 110, 97,
			103, 101, 114, 124, 87, 105, 110, 100, 111, 119,
			67, 104, 97, 110, 103, 101, 69, 118, 101, 110,
			116, 0, 0, 0, 0, 37, 77, 105, 99, 104,
			115, 107, 121, 46, 77, 85, 73, 80, 46, 87,
			105, 110, 100, 111, 119, 77, 97, 110, 97, 103,
			101, 114, 124, 87, 105, 110, 100, 111, 119, 73,
			116, 101, 109, 0, 0, 0, 0, 32, 77, 105,
			99, 104, 115, 107, 121, 46, 77, 85, 73, 80,
			124, 87, 105, 110, 100, 111, 119, 77, 97, 110,
			97, 103, 101, 114, 66, 117, 116, 116, 111, 110,
			0, 0, 0, 0, 12, 124, 83, 112, 97, 119,
			110, 69, 102, 102, 101, 99, 116, 0, 0, 0,
			0, 10, 124, 82, 97, 109, 112, 65, 115, 115,
			101, 116, 0, 0, 0, 0, 16, 124, 65, 100,
			106, 117, 115, 116, 84, 105, 109, 101, 83, 99,
			97, 108, 101, 0, 0, 0, 0, 18, 124, 80,
			114, 111, 120, 105, 109, 105, 116, 121, 65, 99,
			116, 105, 118, 97, 116, 101, 0, 0, 0, 0,
			21, 124, 83, 105, 109, 112, 108, 101, 67, 104,
			97, 114, 97, 99, 116, 101, 114, 77, 111, 116,
			111, 114, 0, 0, 0, 0, 9, 124, 69, 120,
			116, 101, 114, 110, 97, 108, 0, 0, 0, 0,
			14, 124, 67, 111, 108, 111, 114, 83, 101, 108,
			101, 99, 116, 111, 114, 0, 0, 0, 0, 9,
			124, 66, 97, 115, 101, 84, 111, 111, 108, 0,
			0, 0, 0, 10, 124, 66, 114, 117, 115, 104,
			73, 116, 101, 109, 0, 0, 0, 0, 10, 124,
			67, 108, 101, 97, 114, 84, 111, 111, 108, 0,
			0, 0, 0, 9, 124, 82, 101, 100, 111, 84,
			111, 111, 108, 0, 0, 0, 0, 9, 124, 83,
			97, 118, 101, 84, 111, 111, 108, 0, 0, 0,
			0, 9, 124, 83, 101, 116, 116, 105, 110, 103,
			115, 0, 0, 0, 0, 9, 124, 85, 110, 100,
			111, 84, 111, 111, 108, 0, 0, 0, 0, 10,
			124, 66, 101, 110, 99, 104, 109, 97, 114, 107,
			0, 0, 0, 0, 23, 124, 82, 97, 119, 73,
			109, 97, 103, 101, 87, 105, 116, 104, 82, 97,
			119, 84, 101, 120, 116, 117, 114, 101, 0, 0,
			0, 0, 8, 124, 82, 101, 99, 111, 100, 101,
			114, 0, 0, 0, 0, 16, 82, 101, 99, 111,
			100, 101, 114, 124, 80, 111, 115, 105, 116, 105,
			111, 110, 0, 0, 0, 0, 12, 124, 83, 99,
			114, 97, 116, 99, 104, 67, 97, 114, 100, 0,
			0, 0, 0, 8, 124, 83, 97, 109, 112, 108,
			101, 115, 0, 0, 0, 0, 16, 124, 83, 99,
			101, 110, 101, 86, 105, 101, 119, 67, 97, 109,
			101, 114, 97, 0, 0, 0, 0, 12, 124, 115,
			112, 114, 105, 116, 101, 95, 100, 101, 109, 111,
			0, 0, 0, 0, 15, 124, 99, 104, 97, 110,
			103, 101, 95, 114, 97, 119, 95, 116, 101, 120,
			0, 0, 0, 0, 13, 124, 114, 97, 119, 105,
			109, 97, 103, 101, 116, 101, 115, 116, 0, 0,
			0, 0, 5, 124, 84, 101, 115, 116, 0, 0,
			0, 0, 24, 87, 105, 110, 103, 46, 117, 80,
			97, 105, 110, 116, 101, 114, 124, 80, 97, 105,
			110, 116, 80, 111, 105, 110, 116, 0, 0, 0,
			0, 23, 87, 105, 110, 103, 46, 117, 80, 97,
			105, 110, 116, 101, 114, 124, 66, 97, 115, 101,
			66, 114, 117, 115, 104, 0, 0, 0, 0, 28,
			87, 105, 110, 103, 46, 117, 80, 97, 105, 110,
			116, 101, 114, 124, 67, 111, 109, 112, 111, 115,
			105, 116, 101, 66, 114, 117, 115, 104, 0, 0,
			0, 0, 26, 87, 105, 110, 103, 46, 117, 80,
			97, 105, 110, 116, 101, 114, 124, 68, 114, 111,
			112, 112, 101, 114, 66, 114, 117, 115, 104, 0,
			0, 0, 0, 23, 87, 105, 110, 103, 46, 117,
			80, 97, 105, 110, 116, 101, 114, 124, 70, 105,
			108, 108, 66, 114, 117, 115, 104, 0, 0, 0,
			0, 25, 87, 105, 110, 103, 46, 117, 80, 97,
			105, 110, 116, 101, 114, 124, 71, 114, 97, 112,
			105, 99, 66, 114, 117, 115, 104, 0, 0, 0,
			0, 23, 87, 105, 110, 103, 46, 117, 80, 97,
			105, 110, 116, 101, 114, 124, 76, 105, 110, 101,
			66, 114, 117, 115, 104, 0, 0, 0, 0, 26,
			87, 105, 110, 103, 46, 117, 80, 97, 105, 110,
			116, 101, 114, 124, 83, 99, 114, 97, 116, 99,
			104, 66, 114, 117, 115, 104, 0, 0, 0, 0,
			23, 87, 105, 110, 103, 46, 117, 80, 97, 105,
			110, 116, 101, 114, 124, 83, 101, 97, 108, 66,
			114, 117, 115, 104, 0, 0, 0, 0, 24, 87,
			105, 110, 103, 46, 117, 80, 97, 105, 110, 116,
			101, 114, 124, 83, 111, 108, 105, 100, 66, 114,
			117, 115, 104, 0, 0, 0, 0, 26, 87, 105,
			110, 103, 46, 117, 80, 97, 105, 110, 116, 101,
			114, 124, 84, 101, 120, 116, 117, 114, 101, 66,
			114, 117, 115, 104, 0, 0, 0, 0, 27, 87,
			105, 110, 103, 46, 117, 80, 97, 105, 110, 116,
			101, 114, 124, 66, 97, 115, 101, 66, 114, 117,
			115, 104, 80, 111, 115, 116, 0, 0, 0, 0,
			27, 87, 105, 110, 103, 46, 117, 80, 97, 105,
			110, 116, 101, 114, 124, 66, 108, 117, 114, 66,
			114, 117, 115, 104, 80, 111, 115, 116, 0, 0,
			0, 0, 30, 87, 105, 110, 103, 46, 117, 80,
			97, 105, 110, 116, 101, 114, 124, 79, 117, 116,
			108, 105, 110, 101, 66, 114, 117, 115, 104, 80,
			111, 115, 116, 0, 0, 0, 0, 26, 87, 105,
			110, 103, 46, 117, 80, 97, 105, 110, 116, 101,
			114, 124, 69, 100, 105, 116, 111, 114, 67, 97,
			110, 118, 97, 115, 0, 0, 0, 0, 30, 87,
			105, 110, 103, 46, 117, 80, 97, 105, 110, 116,
			101, 114, 124, 77, 101, 115, 104, 76, 97, 121,
			101, 114, 83, 101, 116, 116, 105, 110, 103, 0,
			0, 0, 0, 29, 87, 105, 110, 103, 46, 117,
			80, 97, 105, 110, 116, 101, 114, 124, 77, 101,
			115, 104, 80, 97, 105, 110, 116, 67, 97, 110,
			118, 97, 115, 0, 0, 0, 0, 33, 87, 105,
			110, 103, 46, 117, 80, 97, 105, 110, 116, 101,
			114, 124, 82, 97, 119, 73, 109, 97, 103, 101,
			80, 97, 105, 110, 116, 67, 97, 110, 118, 97,
			115, 0, 0, 0, 0, 30, 87, 105, 110, 103,
			46, 117, 80, 97, 105, 110, 116, 101, 114, 124,
			83, 99, 114, 101, 101, 110, 85, 86, 82, 101,
			110, 100, 101, 114, 101, 114, 0, 0, 0, 0,
			31, 87, 105, 110, 103, 46, 117, 80, 97, 105,
			110, 116, 101, 114, 124, 83, 112, 114, 105, 116,
			101, 80, 97, 105, 110, 116, 67, 97, 110, 118,
			97, 115, 0, 0, 0, 0, 20, 87, 105, 110,
			103, 46, 117, 80, 97, 105, 110, 116, 101, 114,
			124, 68, 114, 97, 119, 101, 114, 0, 0, 0,
			0, 23, 87, 105, 110, 103, 46, 117, 80, 97,
			105, 110, 116, 101, 114, 124, 67, 111, 110, 115,
			116, 97, 110, 116, 115, 0, 0, 0, 0, 29,
			87, 105, 110, 103, 46, 117, 80, 97, 105, 110,
			116, 101, 114, 124, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 66, 114, 117, 115, 104, 0,
			0, 0, 0, 27, 87, 105, 110, 103, 46, 117,
			80, 97, 105, 110, 116, 101, 114, 124, 76, 97,
			121, 101, 114, 83, 101, 116, 116, 105, 110, 103,
			115, 0, 0, 0, 0, 25, 87, 105, 110, 103,
			46, 117, 80, 97, 105, 110, 116, 101, 114, 124,
			80, 97, 105, 110, 116, 67, 97, 110, 118, 97,
			115, 0, 0, 0, 0, 30, 87, 105, 110, 103,
			46, 117, 80, 97, 105, 110, 116, 101, 114, 124,
			80, 97, 105, 110, 116, 67, 97, 110, 118, 97,
			115, 76, 97, 121, 101, 114, 0, 0, 0, 0,
			26, 87, 105, 110, 103, 46, 117, 80, 97, 105,
			110, 116, 101, 114, 124, 80, 97, 105, 110, 116,
			67, 111, 109, 109, 97, 110, 100, 0, 0, 0,
			0, 30, 87, 105, 110, 103, 46, 117, 80, 97,
			105, 110, 116, 101, 114, 124, 80, 97, 105, 110,
			116, 101, 114, 79, 112, 101, 114, 97, 116, 105,
			111, 110, 0, 0, 0, 0, 24, 87, 105, 110,
			103, 46, 117, 80, 97, 105, 110, 116, 101, 114,
			124, 77, 101, 115, 104, 68, 114, 97, 119, 101,
			114, 0, 0, 0, 0, 27, 87, 105, 110, 103,
			46, 117, 80, 97, 105, 110, 116, 101, 114, 124,
			80, 97, 105, 110, 116, 82, 97, 119, 73, 109,
			97, 103, 101, 0, 0, 0, 0, 26, 87, 105,
			110, 103, 46, 117, 80, 97, 105, 110, 116, 101,
			114, 124, 83, 112, 114, 105, 116, 101, 68, 114,
			97, 119, 101, 114, 0, 0, 0, 0, 17, 124,
			67, 117, 98, 105, 99, 66, 101, 122, 105, 101,
			114, 67, 117, 114, 118, 101, 0, 0, 0, 0,
			16, 124, 67, 117, 98, 105, 99, 66, 101, 122,
			105, 101, 114, 80, 97, 116, 104, 0, 0, 0,
			0, 18, 69, 115, 46, 73, 110, 107, 80, 97,
			105, 110, 116, 101, 114, 124, 77, 97, 116, 104,
			0, 0, 0, 0, 26, 69, 115, 46, 73, 110,
			107, 80, 97, 105, 110, 116, 101, 114, 124, 77,
			101, 115, 104, 79, 112, 101, 114, 97, 116, 111,
			114, 0, 0, 0, 0, 27, 87, 105, 110, 103,
			46, 117, 80, 97, 105, 110, 116, 101, 114, 124,
			66, 108, 101, 110, 100, 77, 97, 116, 101, 114,
			105, 97, 108, 0, 0, 0, 0, 31, 87, 105,
			110, 103, 46, 117, 80, 97, 105, 110, 116, 101,
			114, 124, 67, 111, 112, 121, 66, 108, 101, 110,
			100, 77, 97, 116, 101, 114, 105, 97, 108, 0,
			0, 0, 0, 31, 87, 105, 110, 103, 46, 117,
			80, 97, 105, 110, 116, 101, 114, 124, 77, 97,
			115, 107, 66, 108, 101, 110, 100, 77, 97, 116,
			101, 114, 105, 97, 108, 0, 0, 0, 0, 34,
			87, 105, 110, 103, 46, 117, 80, 97, 105, 110,
			116, 101, 114, 124, 79, 118, 101, 114, 108, 97,
			121, 66, 108, 101, 110, 100, 77, 97, 116, 101,
			114, 105, 97, 108, 0, 0, 0, 0, 30, 87,
			105, 110, 103, 46, 117, 80, 97, 105, 110, 116,
			101, 114, 124, 82, 101, 110, 100, 101, 114, 85,
			86, 77, 97, 116, 101, 114, 105, 97, 108, 0,
			0, 0, 0, 22, 87, 105, 110, 103, 46, 117,
			80, 97, 105, 110, 116, 101, 114, 124, 71, 114,
			97, 98, 65, 114, 101, 97, 0, 0, 0, 0,
			29, 87, 105, 110, 103, 46, 117, 80, 97, 105,
			110, 116, 101, 114, 124, 67, 117, 115, 116, 111,
			109, 67, 111, 114, 111, 117, 116, 105, 110, 101,
			0, 0, 0, 0, 31, 87, 105, 110, 103, 46,
			117, 80, 97, 105, 110, 116, 101, 114, 124, 67,
			111, 114, 111, 117, 116, 105, 110, 101, 80, 114,
			111, 118, 105, 100, 101, 114, 0, 0, 0, 0,
			17, 87, 105, 110, 103, 124, 73, 73, 110, 105,
			116, 105, 97, 108, 105, 122, 101, 114, 0, 0,
			0, 0, 26, 87, 105, 110, 103, 46, 117, 80,
			97, 105, 110, 116, 101, 114, 124, 73, 110, 112,
			117, 116, 77, 97, 110, 97, 103, 101, 114, 0,
			0, 0, 0, 33, 87, 105, 110, 103, 46, 117,
			80, 97, 105, 110, 116, 101, 114, 46, 73, 110,
			112, 117, 116, 77, 97, 110, 97, 103, 101, 114,
			124, 75, 101, 121, 77, 97, 112, 0, 0, 0,
			0, 22, 87, 105, 110, 103, 46, 117, 80, 97,
			105, 110, 116, 101, 114, 124, 75, 101, 121, 71,
			114, 111, 117, 112, 0, 0, 0, 0, 27, 87,
			105, 110, 103, 46, 117, 80, 97, 105, 110, 116,
			101, 114, 124, 77, 111, 110, 111, 83, 105, 110,
			103, 108, 101, 116, 111, 110, 0, 0, 0, 0,
			29, 87, 105, 110, 103, 46, 117, 80, 97, 105,
			110, 116, 101, 114, 124, 78, 111, 114, 109, 97,
			108, 83, 105, 110, 103, 108, 101, 116, 111, 110,
			0, 0, 0, 0, 25, 87, 105, 110, 103, 46,
			117, 80, 97, 105, 110, 116, 101, 114, 124, 66,
			97, 115, 101, 67, 111, 109, 109, 97, 110, 100,
			0, 0, 0, 0, 21, 87, 105, 110, 103, 46,
			117, 80, 97, 105, 110, 116, 101, 114, 124, 67,
			111, 109, 109, 97, 110, 100, 0, 0, 0, 0,
			30, 87, 105, 110, 103, 46, 117, 80, 97, 105,
			110, 116, 101, 114, 124, 67, 111, 109, 112, 111,
			115, 105, 116, 101, 67, 111, 109, 109, 97, 110,
			100, 0, 0, 0, 0, 22, 87, 105, 110, 103,
			46, 117, 80, 97, 105, 110, 116, 101, 114, 124,
			73, 67, 111, 109, 109, 97, 110, 100, 0, 0,
			0, 0, 24, 87, 105, 110, 103, 46, 117, 80,
			97, 105, 110, 116, 101, 114, 124, 73, 79, 112,
			101, 114, 97, 116, 105, 111, 110, 0, 0, 0,
			0, 23, 87, 105, 110, 103, 46, 117, 80, 97,
			105, 110, 116, 101, 114, 124, 79, 112, 101, 114,
			97, 116, 105, 111, 110, 0, 0, 0, 0, 30,
			87, 105, 110, 103, 46, 117, 80, 97, 105, 110,
			116, 101, 114, 124, 83, 99, 101, 110, 101, 73,
			110, 116, 101, 114, 97, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 23, 87, 105, 110, 103, 46,
			117, 80, 97, 105, 110, 116, 101, 114, 124, 83,
			105, 110, 103, 108, 101, 116, 111, 110, 0, 0,
			0, 0, 25, 87, 105, 110, 103, 46, 117, 80,
			97, 105, 110, 116, 101, 114, 124, 84, 101, 120,
			116, 117, 114, 101, 84, 111, 111, 108, 0, 0,
			0, 0, 25, 87, 105, 110, 103, 46, 117, 80,
			97, 105, 110, 116, 101, 114, 124, 85, 116, 105,
			108, 115, 72, 101, 108, 112, 101, 114, 0, 0,
			0, 0, 13, 124, 82, 111, 116, 97, 116, 101,
			83, 101, 101, 107, 101, 114, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			65, 100, 100, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 65, 100, 100,
			82, 97, 110, 103, 101, 0, 0, 0, 0, 44,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 67,
			108, 101, 97, 114, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 67, 108,
			101, 97, 114, 65, 108, 108, 80, 114, 111, 120,
			105, 101, 115, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 67, 111, 110,
			99, 97, 116, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 67, 111, 110,
			116, 97, 105, 110, 115, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 67,
			111, 112, 121, 84, 111, 0, 0, 0, 0, 44,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 67,
			111, 117, 110, 116, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 69, 120,
			105, 115, 116, 115, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 71, 101,
			116, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 71, 101, 116, 78, 101,
			120, 116, 0, 0, 0, 0, 50, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 71, 101, 116, 80,
			114, 101, 118, 105, 111, 117, 115, 0, 0, 0,
			0, 48, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 71, 101, 116, 82, 97, 110, 100, 111, 109,
			0, 0, 0, 0, 62, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 71, 101, 116, 82, 97, 110,
			100, 111, 109, 67, 117, 114, 118, 101, 100, 87,
			101, 105, 103, 104, 116, 101, 100, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 71, 101, 116, 84, 121, 112, 101, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 73, 110, 100, 101, 120, 79, 102, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 73, 110, 115, 101, 114, 116, 0,
			0, 0, 0, 48, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 73, 110, 116, 101, 114, 115, 101,
			99, 116, 0, 0, 0, 0, 46, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 73, 115, 69, 109,
			112, 116, 121, 0, 0, 0, 0, 50, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 76, 97, 115,
			116, 73, 110, 100, 101, 120, 79, 102, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 77, 111, 118, 101, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			71, 101, 116, 82, 101, 108, 97, 116, 105, 118,
			101, 0, 0, 0, 0, 49, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 82, 97, 121, 99, 97,
			115, 116, 65, 108, 108, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 82,
			101, 109, 111, 118, 101, 0, 0, 0, 0, 47,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 82,
			101, 109, 111, 118, 101, 65, 116, 0, 0, 0,
			0, 50, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 82, 101, 109, 111, 118, 101, 82, 97, 110,
			103, 101, 0, 0, 0, 0, 50, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 82, 101, 115, 101,
			116, 86, 97, 108, 117, 101, 115, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 82, 101, 118, 101, 114, 115, 101, 0, 0,
			0, 0, 55, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 82, 101, 118, 101, 114, 116, 84, 111,
			83, 110, 97, 112, 83, 104, 111, 116, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 83, 101, 116, 0, 0, 0, 0, 56,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 83,
			101, 116, 69, 118, 101, 110, 116, 67, 97, 108,
			108, 98, 97, 99, 107, 115, 0, 0, 0, 0,
			46, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			83, 104, 117, 102, 102, 108, 101, 0, 0, 0,
			0, 43, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 83, 111, 114, 116, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 83,
			119, 97, 112, 73, 116, 101, 109, 115, 0, 0,
			0, 0, 51, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 84, 97, 107, 101, 83, 110, 97, 112,
			83, 104, 111, 116, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 67, 114,
			101, 97, 116, 101, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 68,
			101, 115, 116, 114, 111, 121, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 0, 0, 0, 0, 43,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			70, 105, 110, 100, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 72, 97,
			115, 104, 84, 97, 98, 108, 101, 67, 114, 101,
			97, 116, 101, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 68, 101,
			115, 116, 114, 111, 121, 72, 97, 115, 104, 84,
			97, 98, 108, 101, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 65, 100,
			100, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 65, 100, 100, 77, 97,
			110, 121, 0, 0, 0, 0, 44, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 67, 108, 101, 97,
			114, 0, 0, 0, 0, 45, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 67, 111, 110, 99, 97,
			116, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 67, 111, 110, 116, 97,
			105, 110, 115, 0, 0, 0, 0, 50, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 72, 97,
			115, 104, 84, 97, 98, 108, 101, 67, 111, 110,
			116, 97, 105, 110, 115, 75, 101, 121, 0, 0,
			0, 0, 52, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 72, 97, 115, 104, 84, 97, 98,
			108, 101, 67, 111, 110, 116, 97, 105, 110, 115,
			86, 97, 108, 117, 101, 0, 0, 0, 0, 44,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			72, 97, 115, 104, 84, 97, 98, 108, 101, 67,
			111, 117, 110, 116, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 69, 100,
			105, 116, 75, 101, 121, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			72, 97, 115, 104, 84, 97, 98, 108, 101, 69,
			120, 105, 115, 116, 115, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			72, 97, 115, 104, 84, 97, 98, 108, 101, 71,
			101, 116, 0, 0, 0, 0, 54, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 71, 101, 116, 75,
			101, 121, 70, 114, 111, 109, 86, 97, 108, 117,
			101, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 71, 101, 116, 77, 97,
			110, 121, 0, 0, 0, 0, 46, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 72, 97, 115,
			104, 84, 97, 98, 108, 101, 71, 101, 116, 78,
			101, 120, 116, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 72, 97,
			115, 104, 84, 97, 98, 108, 101, 71, 101, 116,
			82, 97, 110, 100, 111, 109, 0, 0, 0, 0,
			46, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			71, 101, 116, 84, 121, 112, 101, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 72, 97, 115, 104, 84, 97, 98, 108,
			101, 73, 115, 69, 109, 112, 116, 121, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 72, 97, 115, 104, 84, 97, 98,
			108, 101, 75, 101, 121, 115, 0, 0, 0, 0,
			45, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			82, 101, 109, 111, 118, 101, 0, 0, 0, 0,
			53, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 72, 97, 115, 104, 84, 97, 98, 108, 101,
			82, 101, 118, 101, 114, 116, 83, 110, 97, 112,
			83, 104, 111, 116, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 72,
			97, 115, 104, 84, 97, 98, 108, 101, 83, 101,
			116, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 83, 101, 116, 77, 97,
			110, 121, 0, 0, 0, 0, 28, 124, 72, 97,
			115, 104, 84, 97, 98, 108, 101, 83, 111, 114,
			116, 75, 101, 121, 115, 102, 114, 111, 109, 86,
			97, 108, 117, 101, 115, 0, 0, 0, 0, 51,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			72, 97, 115, 104, 84, 97, 98, 108, 101, 84,
			97, 107, 101, 83, 110, 97, 112, 83, 104, 111,
			116, 0, 0, 0, 0, 45, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 72, 97, 115, 104,
			84, 97, 98, 108, 101, 86, 97, 108, 117, 101,
			115, 0, 0, 0, 0, 58, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 65, 99, 116, 105, 118,
			97, 116, 101, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 115, 0, 0, 0, 0, 57, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 67, 111,
			110, 116, 97, 105, 110, 115, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 0, 0, 0, 0,
			59, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			70, 105, 110, 100, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 115, 66, 121, 84, 97, 103,
			0, 0, 0, 0, 62, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 114, 114, 97, 121,
			76, 105, 115, 116, 71, 101, 116, 65, 108, 108,
			67, 104, 105, 108, 100, 79, 102, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 0, 0, 0,
			0, 62, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 71, 101, 116, 67, 104, 105, 108, 100, 114,
			101, 110, 79, 102, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 0, 0, 0, 0, 59, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 71, 101,
			116, 67, 108, 111, 115, 101, 115, 116, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 0, 0,
			0, 0, 66, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 71, 101, 116, 67, 108, 111, 115, 101,
			115, 116, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 73, 110, 83, 105, 103, 104, 116, 0,
			0, 0, 0, 60, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 71, 101, 116, 70, 97, 114, 116,
			104, 101, 115, 116, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 0, 0, 0, 0, 67, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 71, 101,
			116, 70, 97, 114, 116, 104, 101, 115, 116, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 73,
			110, 83, 105, 103, 104, 116, 0, 0, 0, 0,
			68, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			71, 101, 116, 71, 97, 109, 101, 111, 98, 106,
			101, 99, 116, 77, 97, 120, 70, 115, 109, 70,
			108, 111, 97, 116, 73, 110, 100, 101, 120, 0,
			0, 0, 0, 61, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 83, 101, 110, 100, 69, 118, 101,
			110, 116, 84, 111, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 115, 0, 0, 0, 0, 67,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 83,
			101, 110, 100, 83, 116, 114, 105, 110, 103, 69,
			118, 101, 110, 116, 84, 111, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 115, 0, 0, 0,
			0, 63, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 76, 105, 115,
			116, 83, 111, 114, 116, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 66, 121, 68, 105, 115,
			116, 97, 110, 99, 101, 0, 0, 0, 0, 54,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 83,
			111, 114, 116, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 115, 0, 0, 0, 0, 73, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 46, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 83, 111,
			114, 116, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 115, 124, 109, 121, 71, 97, 109, 101,
			79, 98, 106, 101, 99, 116, 83, 111, 114, 116,
			101, 114, 0, 0, 0, 0, 54, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 71, 101, 116, 65,
			118, 101, 114, 97, 103, 101, 86, 97, 108, 117,
			101, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 71, 101, 116, 77, 97,
			120, 86, 97, 108, 117, 101, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 114, 114, 97, 121, 76, 105, 115, 116,
			71, 101, 116, 77, 105, 110, 86, 97, 108, 117,
			101, 0, 0, 0, 0, 59, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 114, 114, 97,
			121, 76, 105, 115, 116, 71, 101, 116, 78, 101,
			97, 114, 101, 115, 116, 70, 108, 111, 97, 116,
			86, 97, 108, 117, 101, 0, 0, 0, 0, 46,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 84, 97, 98, 108, 101,
			65, 100, 100, 82, 111, 119, 0, 0, 0, 0,
			48, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 114, 114, 97, 121, 84, 97, 98, 108,
			101, 67, 111, 110, 116, 97, 105, 110, 115, 0,
			0, 0, 0, 47, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 114, 114, 97, 121, 84,
			97, 98, 108, 101, 71, 101, 116, 73, 116, 101,
			109, 0, 0, 0, 0, 57, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 114, 114, 97,
			121, 84, 97, 98, 108, 101, 71, 101, 116, 82,
			111, 119, 84, 111, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 0, 0, 0, 0, 57, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 114,
			114, 97, 121, 84, 97, 98, 108, 101, 71, 101,
			116, 82, 111, 119, 84, 111, 72, 97, 115, 104,
			116, 97, 98, 108, 101, 0, 0, 0, 0, 51,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 84, 97, 98, 108, 101,
			82, 101, 109, 111, 118, 101, 82, 111, 119, 65,
			116, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 114, 114, 97,
			121, 84, 97, 98, 108, 101, 83, 101, 116, 73,
			116, 101, 109, 0, 0, 0, 0, 15, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 84, 97,
			98, 108, 101, 0, 0, 0, 0, 54, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 71, 101, 116,
			86, 101, 114, 116, 101, 120, 67, 111, 108, 111,
			114, 115, 0, 0, 0, 0, 57, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 114, 114,
			97, 121, 76, 105, 115, 116, 71, 101, 116, 86,
			101, 114, 116, 101, 120, 80, 111, 115, 105, 116,
			105, 111, 110, 115, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 76, 105, 115, 116, 83, 101,
			116, 86, 101, 114, 116, 101, 120, 67, 111, 108,
			111, 114, 115, 0, 0, 0, 0, 57, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 83, 101, 116,
			86, 101, 114, 116, 101, 120, 80, 111, 115, 105,
			116, 105, 111, 110, 115, 0, 0, 0, 0, 59,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 76, 105, 115, 116, 71,
			101, 116, 83, 99, 114, 101, 101, 110, 82, 101,
			115, 111, 108, 117, 116, 105, 111, 110, 115, 0,
			0, 0, 0, 50, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 67, 117, 114,
			114, 101, 110, 116, 82, 101, 115, 111, 108, 117,
			116, 105, 111, 110, 0, 0, 0, 0, 49, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			99, 114, 101, 101, 110, 83, 101, 116, 82, 101,
			115, 111, 108, 117, 116, 105, 111, 110, 0, 0,
			0, 0, 50, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 112, 108, 105, 116, 84, 101,
			120, 116, 84, 111, 65, 114, 114, 97, 121, 76,
			105, 115, 116, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 114,
			114, 97, 121, 76, 105, 115, 116, 65, 99, 116,
			105, 111, 110, 115, 0, 0, 0, 0, 48, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 67,
			111, 108, 108, 101, 99, 116, 105, 111, 110, 115,
			65, 99, 116, 105, 111, 110, 115, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 72, 97, 115, 104, 84, 97, 98, 108,
			101, 65, 99, 116, 105, 111, 110, 115, 0, 0,
			0, 0, 24, 124, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 65, 114, 114, 97, 121, 76, 105,
			115, 116, 80, 114, 111, 120, 121, 0, 0, 0,
			0, 25, 124, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 67, 111, 108, 108, 101, 99, 116, 105,
			111, 110, 80, 114, 111, 120, 121, 0, 0, 0,
			0, 24, 124, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 72, 97, 115, 104, 84, 97, 98, 108,
			101, 80, 114, 111, 120, 121, 0, 0, 0, 0,
			58, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 82, 117, 110, 116, 105, 109,
			101, 65, 110, 105, 109, 97, 116, 111, 114, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 0,
			0, 0, 0, 58, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 112, 112, 108, 105, 99,
			97, 116, 105, 111, 110, 71, 101, 116, 83, 121,
			115, 116, 101, 109, 76, 97, 110, 103, 117, 97,
			103, 101, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 117, 100,
			105, 111, 71, 101, 116, 84, 105, 109, 101, 0,
			0, 0, 0, 42, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 117, 100, 105, 111, 83,
			101, 116, 84, 105, 109, 101, 0, 0, 0, 0,
			48, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 65, 117, 100, 105, 111, 67,
			108, 105, 112, 76, 101, 110, 103, 116, 104, 0,
			0, 0, 0, 50, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 67, 111, 110, 118, 101, 114,
			116, 83, 116, 114, 105, 110, 103, 84, 111, 70,
			108, 111, 97, 116, 0, 0, 0, 0, 52, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 67,
			111, 110, 118, 101, 114, 116, 86, 101, 99, 116,
			111, 114, 51, 84, 111, 83, 116, 114, 105, 110,
			103, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 99, 116, 105,
			118, 97, 116, 101, 67, 104, 105, 108, 100, 114,
			101, 110, 0, 0, 0, 0, 45, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 68, 101, 115,
			116, 114, 111, 121, 67, 104, 105, 108, 100, 114,
			101, 110, 0, 0, 0, 0, 48, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			83, 112, 101, 101, 100, 0, 0, 0, 0, 39,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 76, 97, 121, 101, 114, 50, 0,
			0, 0, 0, 43, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 80, 97, 114,
			101, 110, 116, 77, 111, 114, 101, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 87, 111, 114, 108, 100,
			68, 105, 115, 116, 97, 110, 99, 101, 0, 0,
			0, 0, 38, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 73, 115, 65, 99, 116, 105, 118,
			101, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 80, 111, 115, 105,
			116, 105, 111, 110, 83, 109, 111, 111, 116, 104,
			68, 97, 109, 112, 0, 0, 0, 0, 48, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 66,
			111, 111, 108, 77, 117, 108, 116, 105, 67, 111,
			110, 100, 105, 116, 105, 111, 110, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 70, 108, 111, 97, 116, 65, 100, 100,
			82, 101, 97, 108, 116, 105, 109, 101, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 70, 108, 111, 97, 116, 83, 109,
			111, 111, 116, 104, 68, 97, 109, 112, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 70, 108, 111, 97, 116, 82, 111,
			117, 110, 100, 68, 101, 99, 105, 109, 97, 108,
			0, 0, 0, 0, 37, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 66, 111, 120, 67, 97,
			115, 116, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 82, 105, 103,
			105, 100, 66, 111, 100, 121, 77, 111, 118, 101,
			80, 111, 115, 105, 116, 105, 111, 110, 0, 0,
			0, 0, 41, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 112, 104, 101, 114, 101, 67,
			97, 115, 116, 50, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 81, 117, 97, 108, 105, 116, 121, 76,
			101, 118, 101, 108, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 82,
			101, 115, 111, 117, 114, 99, 101, 115, 76, 111,
			97, 100, 0, 0, 0, 0, 47, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 67, 104, 101,
			99, 107, 73, 102, 70, 117, 108, 108, 83, 99,
			114, 101, 101, 110, 0, 0, 0, 0, 48, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 67, 117, 114, 115, 111, 114, 76, 111,
			99, 107, 83, 116, 97, 116, 101, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 67, 117, 114, 115, 111,
			114, 86, 105, 115, 105, 98, 108, 101, 0, 0,
			0, 0, 51, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 78, 101, 120, 116, 70, 114, 97,
			109, 101, 69, 118, 101, 110, 116, 65, 100, 118,
			97, 110, 99, 101, 0, 0, 0, 0, 55, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			116, 101, 97, 109, 95, 65, 99, 116, 105, 118,
			97, 116, 101, 71, 97, 109, 101, 79, 118, 101,
			114, 108, 97, 121, 0, 0, 0, 0, 62, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			116, 101, 97, 109, 95, 65, 99, 116, 105, 118,
			97, 116, 101, 71, 97, 109, 101, 79, 118, 101,
			114, 108, 97, 121, 84, 111, 83, 116, 111, 114,
			101, 0, 0, 0, 0, 61, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 116, 101, 97,
			109, 95, 65, 99, 116, 105, 118, 97, 116, 101,
			71, 97, 109, 101, 79, 118, 101, 114, 108, 97,
			121, 84, 111, 85, 115, 101, 114, 0, 0, 0,
			0, 64, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 116, 101, 97, 109, 95, 65, 99,
			116, 105, 118, 97, 116, 101, 71, 97, 109, 101,
			79, 118, 101, 114, 108, 97, 121, 84, 111, 87,
			101, 98, 80, 97, 103, 101, 0, 0, 0, 0,
			49, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 116, 101, 97, 109, 95, 71, 101, 116,
			65, 112, 112, 66, 117, 105, 108, 100, 73, 68,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 101, 97, 109,
			95, 71, 101, 116, 65, 112, 112, 73, 68, 0,
			0, 0, 0, 47, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 116, 101, 97, 109, 95,
			71, 101, 116, 65, 112, 112, 79, 119, 110, 101,
			114, 0, 0, 0, 0, 61, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 116, 101, 97,
			109, 95, 71, 101, 116, 65, 118, 97, 105, 108,
			97, 98, 108, 101, 71, 97, 109, 101, 76, 97,
			110, 103, 117, 97, 103, 101, 115, 0, 0, 0,
			0, 47, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 116, 101, 97, 109, 95, 71, 101,
			116, 66, 101, 116, 97, 73, 110, 102, 111, 0,
			0, 0, 0, 58, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 116, 101, 97, 109, 95,
			71, 101, 116, 67, 117, 114, 114, 101, 110, 116,
			66, 97, 116, 116, 101, 114, 121, 80, 111, 119,
			101, 114, 0, 0, 0, 0, 58, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 116, 101,
			97, 109, 95, 71, 101, 116, 67, 117, 114, 114,
			101, 110, 116, 71, 97, 109, 101, 76, 97, 110,
			103, 117, 97, 103, 101, 0, 0, 0, 0, 63,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 116, 101, 97, 109, 95, 71, 101, 116, 69,
			97, 114, 108, 105, 101, 115, 116, 80, 117, 114,
			99, 104, 97, 115, 101, 85, 110, 105, 120, 84,
			105, 109, 101, 0, 0, 0, 0, 57, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 116,
			101, 97, 109, 95, 71, 101, 116, 73, 110, 115,
			116, 97, 108, 108, 101, 100, 65, 112, 112, 115,
			67, 111, 117, 110, 116, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 116, 101, 97, 109, 95, 71, 101, 116, 73,
			80, 67, 111, 117, 110, 116, 114, 121, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 101, 97, 109, 95, 71,
			101, 116, 83, 116, 101, 97, 109, 73, 68, 0,
			0, 0, 0, 54, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 116, 101, 97, 109, 95,
			71, 101, 116, 83, 116, 101, 97, 109, 85, 73,
			76, 97, 110, 103, 117, 97, 103, 101, 0, 0,
			0, 0, 40, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 101, 97, 109, 95, 73,
			110, 105, 116, 0, 0, 0, 0, 50, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 116,
			101, 97, 109, 95, 73, 115, 65, 112, 112, 73,
			110, 115, 116, 97, 108, 108, 101, 100, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 101, 97, 109, 95, 73,
			115, 67, 121, 98, 101, 114, 99, 97, 102, 101,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 101, 97, 109,
			95, 73, 115, 73, 110, 105, 116, 105, 97, 108,
			105, 122, 101, 100, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			116, 101, 97, 109, 95, 73, 115, 76, 111, 103,
			103, 101, 100, 79, 110, 0, 0, 0, 0, 59,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 116, 101, 97, 109, 95, 73, 115, 83, 116,
			101, 97, 109, 73, 110, 66, 105, 103, 80, 105,
			99, 116, 117, 114, 101, 77, 111, 100, 101, 0,
			0, 0, 0, 50, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 116, 101, 97, 109, 95,
			73, 115, 83, 116, 101, 97, 109, 82, 117, 110,
			110, 105, 110, 103, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			116, 101, 97, 109, 95, 73, 115, 83, 116, 101,
			97, 109, 82, 117, 110, 110, 105, 110, 103, 73,
			110, 86, 82, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 116,
			101, 97, 109, 95, 73, 115, 83, 117, 98, 115,
			99, 114, 105, 98, 101, 100, 0, 0, 0, 0,
			51, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 116, 101, 97, 109, 95, 73, 115, 83,
			117, 98, 115, 99, 114, 105, 98, 101, 100, 65,
			112, 112, 0, 0, 0, 0, 63, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 116, 101,
			97, 109, 95, 73, 115, 83, 117, 98, 115, 99,
			114, 105, 98, 101, 100, 70, 114, 111, 109, 70,
			114, 101, 101, 87, 101, 101, 107, 101, 110, 100,
			0, 0, 0, 0, 47, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 101, 97, 109,
			95, 73, 115, 86, 65, 67, 66, 97, 110, 110,
			101, 100, 0, 0, 0, 0, 63, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 116, 101,
			97, 109, 95, 73, 115, 86, 82, 72, 101, 97,
			100, 115, 101, 116, 83, 116, 114, 101, 97, 109,
			105, 110, 103, 69, 110, 97, 98, 108, 101, 100,
			0, 0, 0, 0, 52, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 101, 97, 109,
			95, 76, 111, 119, 86, 105, 111, 108, 101, 110,
			99, 101, 67, 104, 101, 99, 107, 0, 0, 0,
			0, 49, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 116, 101, 97, 109, 95, 79, 118,
			101, 114, 108, 97, 121, 65, 99, 116, 105, 118,
			101, 0, 0, 0, 0, 55, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 116, 101, 97,
			109, 95, 80, 101, 114, 115, 111, 110, 97, 83,
			116, 97, 116, 101, 67, 104, 97, 110, 103, 101,
			100, 0, 0, 0, 0, 62, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 116, 101, 97,
			109, 95, 83, 101, 99, 111, 110, 100, 115, 83,
			105, 110, 99, 101, 67, 111, 109, 112, 117, 116,
			101, 114, 65, 99, 116, 105, 118, 101, 0, 0,
			0, 0, 51, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 101, 97, 109, 95, 83,
			116, 101, 97, 109, 83, 101, 114, 118, 101, 114,
			84, 105, 109, 101, 0, 0, 0, 0, 52, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			116, 101, 97, 109, 95, 71, 101, 116, 80, 101,
			114, 115, 111, 110, 97, 65, 118, 97, 116, 97,
			114, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 116, 101, 97,
			109, 95, 71, 101, 116, 80, 101, 114, 115, 111,
			110, 97, 78, 97, 109, 101, 0, 0, 0, 0,
			51, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 116, 101, 97, 109, 95, 71, 101, 116,
			80, 101, 114, 115, 111, 110, 97, 83, 116, 97,
			116, 101, 0, 0, 0, 0, 53, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 116, 101,
			97, 109, 95, 71, 101, 116, 80, 108, 97, 121,
			101, 114, 78, 105, 99, 107, 110, 97, 109, 101,
			0, 0, 0, 0, 55, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 101, 97, 109,
			95, 71, 101, 116, 85, 115, 101, 114, 82, 101,
			115, 116, 114, 105, 99, 116, 105, 111, 110, 115,
			0, 0, 0, 0, 50, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 101, 97, 109,
			95, 83, 101, 116, 80, 101, 114, 115, 111, 110,
			97, 78, 97, 109, 101, 0, 0, 0, 0, 46,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 116, 101, 97, 109, 95, 65, 112, 112, 66,
			108, 111, 99, 107, 101, 100, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 116, 101, 97, 109, 95, 70, 101, 97,
			116, 117, 114, 101, 66, 108, 111, 99, 107, 101,
			100, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 116, 101, 97,
			109, 95, 80, 97, 114, 101, 110, 116, 97, 108,
			76, 111, 99, 107, 0, 0, 0, 0, 52, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			116, 101, 97, 109, 95, 67, 108, 101, 97, 114,
			65, 99, 104, 105, 101, 118, 101, 109, 101, 110,
			116, 0, 0, 0, 0, 53, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 116, 101, 97,
			109, 95, 67, 114, 101, 97, 116, 101, 76, 101,
			97, 100, 101, 114, 98, 111, 97, 114, 100, 0,
			0, 0, 0, 54, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 116, 101, 97, 109, 95,
			71, 101, 116, 65, 99, 104, 105, 101, 118, 101,
			109, 101, 110, 116, 73, 99, 111, 110, 0, 0,
			0, 0, 54, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 101, 97, 109, 95, 71,
			101, 116, 65, 99, 104, 105, 101, 118, 101, 109,
			101, 110, 116, 73, 110, 102, 111, 0, 0, 0,
			0, 48, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 116, 101, 97, 109, 95, 71, 101,
			116, 83, 116, 97, 116, 70, 108, 111, 97, 116,
			0, 0, 0, 0, 46, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 101, 97, 109,
			95, 71, 101, 116, 83, 116, 97, 116, 73, 110,
			116, 0, 0, 0, 0, 58, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 116, 101, 97,
			109, 95, 71, 101, 116, 85, 115, 101, 114, 65,
			99, 104, 105, 101, 118, 101, 109, 101, 110, 116,
			73, 110, 102, 111, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			116, 101, 97, 109, 95, 71, 101, 116, 85, 115,
			101, 114, 78, 97, 109, 101, 0, 0, 0, 0,
			52, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 116, 101, 97, 109, 95, 71, 101, 116,
			85, 115, 101, 114, 83, 116, 97, 116, 70, 108,
			111, 97, 116, 0, 0, 0, 0, 50, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 116,
			101, 97, 109, 95, 71, 101, 116, 85, 115, 101,
			114, 83, 116, 97, 116, 73, 110, 116, 0, 0,
			0, 0, 63, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 101, 97, 109, 95, 73,
			110, 100, 105, 99, 97, 116, 101, 65, 99, 104,
			105, 101, 118, 101, 109, 101, 110, 116, 80, 114,
			111, 103, 114, 101, 115, 115, 0, 0, 0, 0,
			55, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 116, 101, 97, 109, 95, 82, 101, 113,
			117, 101, 115, 116, 67, 117, 114, 114, 101, 110,
			116, 83, 116, 97, 116, 115, 0, 0, 0, 0,
			49, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 116, 101, 97, 109, 95, 82, 101, 115,
			101, 116, 65, 108, 108, 83, 116, 97, 116, 115,
			0, 0, 0, 0, 50, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 101, 97, 109,
			95, 83, 101, 116, 65, 99, 104, 105, 101, 118,
			101, 109, 101, 110, 116, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 116, 101, 97, 109, 95, 83, 101, 116, 83,
			116, 97, 116, 70, 108, 111, 97, 116, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 101, 97, 109, 95, 83,
			101, 116, 83, 116, 97, 116, 73, 110, 116, 0,
			0, 0, 0, 46, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 116, 114, 105, 110, 103,
			84, 121, 112, 101, 119, 114, 105, 116, 101, 114,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 70, 111,
			114, 119, 97, 114, 100, 68, 105, 114, 101, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 83, 105, 98, 108, 105, 110, 103, 73, 110,
			100, 101, 120, 0, 0, 0, 0, 42, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 82, 111,
			116, 97, 116, 101, 65, 114, 111, 117, 110, 100,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 80, 97, 114,
			101, 110, 116, 0, 0, 0, 0, 43, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 82, 97,
			110, 100, 111, 109, 86, 101, 99, 116, 111, 114,
			51, 0, 0, 0, 0, 53, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 101, 99, 116,
			111, 114, 51, 79, 112, 101, 114, 97, 116, 111,
			114, 65, 100, 118, 97, 110, 99, 101, 100, 0,
			0, 0, 0, 47, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 101, 99, 116, 111, 114,
			51, 83, 109, 111, 111, 116, 104, 68, 97, 109,
			112, 0, 0, 0, 0, 22, 124, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 65, 99, 116, 105,
			111, 110, 115, 85, 116, 105, 108, 115, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 67, 115, 118, 67,
			111, 108, 117, 109, 110, 67, 111, 117, 110, 116,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 67, 115,
			118, 70, 105, 101, 108, 100, 66, 121, 73, 110,
			100, 101, 120, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 67, 115, 118, 70, 105, 101, 108, 100, 66,
			121, 75, 101, 121, 0, 0, 0, 0, 55, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 67, 115, 118, 70, 105, 101, 108, 100,
			115, 66, 121, 67, 111, 108, 117, 109, 110, 73,
			110, 100, 101, 120, 0, 0, 0, 0, 53, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 67, 115, 118, 70, 105, 101, 108, 100,
			115, 66, 121, 67, 111, 108, 117, 109, 110, 75,
			101, 121, 0, 0, 0, 0, 50, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			67, 115, 118, 70, 105, 101, 108, 100, 115, 66,
			121, 82, 101, 99, 111, 114, 100, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 67, 115, 118, 72, 101,
			97, 100, 101, 114, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 67, 115, 118, 82, 101, 99, 111, 114,
			100, 67, 111, 117, 110, 116, 0, 0, 0, 0,
			37, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 82, 101, 97, 100, 67, 115, 118, 0, 0,
			0, 0, 51, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 82, 101, 109, 111, 118, 101, 65,
			108, 108, 67, 115, 118, 82, 101, 102, 101, 114,
			101, 110, 99, 101, 0, 0, 0, 0, 48, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 82,
			101, 109, 111, 118, 101, 67, 115, 118, 82, 101,
			102, 101, 114, 101, 110, 99, 101, 0, 0, 0,
			0, 53, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 69, 99, 111, 115, 121, 115,
			116, 101, 109, 46, 68, 97, 116, 97, 77, 97,
			107, 101, 114, 46, 67, 83, 86, 124, 67, 115,
			118, 68, 97, 116, 97, 0, 0, 0, 0, 55,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 69, 99, 111, 115, 121, 115, 116, 101,
			109, 46, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 46, 67, 83, 86, 124, 67, 115, 118, 82,
			101, 97, 100, 101, 114, 0, 0, 0, 0, 55,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			67, 111, 110, 118, 101, 114, 116, 67, 115, 118,
			83, 116, 114, 105, 110, 103, 84, 111, 88, 109,
			108, 78, 111, 100, 101, 0, 0, 0, 0, 43,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			88, 109, 108, 78, 111, 100, 101, 68, 101, 108,
			101, 116, 101, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 88, 109,
			108, 78, 111, 100, 101, 82, 101, 109, 111, 118,
			101, 65, 108, 108, 0, 0, 0, 0, 52, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 88,
			109, 108, 78, 111, 100, 101, 82, 101, 109, 111,
			118, 101, 65, 116, 116, 114, 105, 98, 117, 116,
			101, 0, 0, 0, 0, 58, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 88, 109, 108, 71,
			101, 116, 78, 101, 120, 116, 78, 111, 100, 101,
			76, 105, 115, 116, 80, 114, 111, 112, 101, 114,
			116, 105, 101, 115, 0, 0, 0, 0, 50, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 88,
			109, 108, 71, 101, 116, 78, 111, 100, 101, 80,
			114, 111, 112, 101, 114, 116, 105, 101, 115, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 88, 109, 108, 83, 101, 108,
			101, 99, 116, 78, 111, 100, 101, 115, 0, 0,
			0, 0, 49, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 88, 109, 108, 83, 101, 108, 101,
			99, 116, 83, 105, 110, 103, 108, 101, 78, 111,
			100, 101, 0, 0, 0, 0, 50, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 88, 109, 108,
			78, 111, 100, 101, 115, 77, 97, 116, 104, 79,
			112, 101, 114, 97, 116, 111, 114, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 88, 109, 108, 67, 108, 111, 110, 101,
			78, 111, 100, 101, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 88,
			109, 108, 67, 114, 101, 97, 116, 101, 78, 111,
			100, 101, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 88, 109, 108,
			73, 110, 115, 101, 114, 116, 78, 111, 100, 101,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 88, 109, 108, 80, 97,
			114, 101, 110, 116, 78, 111, 100, 101, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 88, 109, 108, 82, 101, 112, 108,
			97, 99, 101, 78, 111, 100, 101, 0, 0, 0,
			0, 44, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 88, 109, 108, 83, 97, 118, 101, 73,
			110, 80, 114, 111, 120, 121, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 88, 109, 108, 83, 101, 116, 78, 111, 100,
			101, 80, 114, 111, 112, 101, 114, 116, 105, 101,
			115, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 88, 109, 108, 76,
			111, 97, 100, 70, 114, 111, 109, 84, 101, 120,
			116, 65, 115, 115, 101, 116, 0, 0, 0, 0,
			52, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 88, 109, 108, 80, 114, 111, 120, 121, 71,
			101, 116, 88, 109, 108, 65, 115, 83, 116, 114,
			105, 110, 103, 0, 0, 0, 0, 58, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 88, 109,
			108, 80, 114, 111, 120, 121, 82, 101, 102, 114,
			101, 115, 104, 83, 116, 114, 105, 110, 103, 86,
			101, 114, 115, 105, 111, 110, 0, 0, 0, 0,
			24, 124, 70, 115, 109, 88, 109, 108, 80, 114,
			111, 112, 101, 114, 116, 105, 101, 115, 83, 116,
			111, 114, 97, 103, 101, 0, 0, 0, 0, 22,
			124, 70, 115, 109, 88, 109, 108, 80, 114, 111,
			112, 101, 114, 116, 105, 101, 115, 84, 121, 112,
			101, 115, 0, 0, 0, 0, 15, 124, 70, 115,
			109, 88, 109, 108, 80, 114, 111, 112, 101, 114,
			116, 121, 0, 0, 0, 0, 13, 124, 70, 115,
			109, 88, 109, 108, 83, 111, 117, 114, 99, 101,
			0, 0, 0, 0, 14, 124, 70, 115, 109, 88,
			112, 97, 116, 104, 81, 117, 101, 114, 121, 0,
			0, 0, 0, 59, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 72, 97, 115, 104, 84, 97,
			98, 108, 101, 71, 101, 116, 88, 109, 108, 78,
			111, 100, 101, 80, 114, 111, 112, 101, 114, 116,
			105, 101, 115, 0, 0, 0, 0, 49, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 68, 97,
			116, 97, 77, 97, 107, 101, 114, 88, 109, 108,
			65, 99, 116, 105, 111, 110, 115, 0, 0, 0,
			0, 53, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 88, 109, 108, 78, 111, 100, 101, 65, 99,
			116, 105, 111, 110, 115, 0, 0, 0, 0, 57,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			68, 97, 116, 97, 77, 97, 107, 101, 114, 88,
			109, 108, 78, 111, 100, 101, 76, 105, 115, 116,
			65, 99, 116, 105, 111, 110, 115, 0, 0, 0,
			0, 26, 124, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 88, 109, 108, 78, 111, 100, 101, 76,
			105, 115, 116, 80, 114, 111, 120, 121, 0, 0,
			0, 0, 22, 124, 68, 97, 116, 97, 77, 97,
			107, 101, 114, 88, 109, 108, 78, 111, 100, 101,
			80, 114, 111, 120, 121, 0, 0, 0, 0, 18,
			124, 68, 97, 116, 97, 77, 97, 107, 101, 114,
			88, 109, 108, 80, 114, 111, 120, 121, 0, 0,
			0, 0, 18, 124, 68, 97, 116, 97, 77, 97,
			107, 101, 114, 88, 109, 108, 85, 116, 105, 108,
			115, 0, 0, 0, 0, 11, 124, 70, 115, 109,
			88, 109, 108, 78, 111, 100, 101, 0, 0, 0,
			0, 15, 124, 70, 115, 109, 88, 109, 108, 78,
			111, 100, 101, 76, 105, 115, 116, 0, 0, 0,
			0, 14, 124, 68, 97, 116, 97, 77, 97, 107,
			101, 114, 67, 111, 114, 101, 0, 0, 0, 0,
			19, 124, 68, 97, 116, 97, 77, 97, 107, 101,
			114, 80, 114, 111, 120, 121, 66, 97, 115, 101,
			0, 0, 0, 0, 61, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 103, 101, 110, 116,
			65, 99, 116, 105, 118, 97, 116, 101, 67, 117,
			114, 114, 101, 110, 116, 79, 102, 102, 77, 101,
			115, 104, 76, 105, 110, 107, 0, 0, 0, 0,
			54, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 103, 101, 110, 116, 67, 111, 109, 112,
			108, 101, 116, 101, 79, 102, 102, 77, 101, 115,
			104, 76, 105, 110, 107, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 103, 101, 110, 116, 70, 105, 110, 100, 67,
			108, 111, 115, 101, 115, 116, 69, 100, 103, 101,
			0, 0, 0, 0, 39, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 103, 101, 110, 116,
			77, 111, 118, 101, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			103, 101, 110, 116, 82, 97, 121, 67, 97, 115,
			116, 0, 0, 0, 0, 44, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 103, 101, 110,
			116, 82, 101, 115, 101, 116, 80, 97, 116, 104,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 103, 101, 110, 116,
			82, 101, 115, 117, 109, 101, 0, 0, 0, 0,
			53, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 103, 101, 110, 116, 83, 97, 109, 112,
			108, 101, 80, 97, 116, 104, 80, 111, 115, 105,
			116, 105, 111, 110, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			103, 101, 110, 116, 83, 101, 116, 80, 97, 116,
			104, 0, 0, 0, 0, 39, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 103, 101, 110,
			116, 83, 116, 111, 112, 0, 0, 0, 0, 39,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 103, 101, 110, 116, 87, 97, 114, 112, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 65, 103, 101,
			110, 116, 65, 117, 116, 111, 66, 114, 97, 107,
			105, 110, 103, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 103, 101, 110, 116, 65, 117, 116, 111,
			82, 101, 112, 97, 116, 104, 0, 0, 0, 0,
			61, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 65, 103, 101, 110, 116, 65,
			117, 116, 111, 84, 114, 97, 118, 101, 114, 115,
			101, 79, 102, 102, 77, 101, 115, 104, 76, 105,
			110, 107, 0, 0, 0, 0, 55, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			65, 103, 101, 110, 116, 65, 118, 111, 105, 100,
			97, 110, 99, 101, 80, 114, 105, 111, 114, 105,
			116, 121, 0, 0, 0, 0, 48, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			65, 103, 101, 110, 116, 66, 97, 115, 101, 79,
			102, 102, 115, 101, 116, 0, 0, 0, 0, 60,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 65, 103, 101, 110, 116, 67, 117,
			114, 114, 101, 110, 116, 79, 102, 102, 77, 101,
			115, 104, 76, 105, 110, 107, 68, 97, 116, 97,
			0, 0, 0, 0, 66, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 65, 103,
			101, 110, 116, 67, 117, 114, 114, 101, 110, 116,
			79, 102, 102, 77, 101, 115, 104, 76, 105, 110,
			107, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 0, 0, 0, 0, 53, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			103, 101, 110, 116, 68, 101, 115, 105, 114, 101,
			100, 86, 101, 108, 111, 99, 105, 116, 121, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 65, 103, 101,
			110, 116, 68, 101, 115, 116, 105, 110, 97, 116,
			105, 111, 110, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 103, 101, 110, 116, 72, 97, 115, 80,
			97, 116, 104, 0, 0, 0, 0, 44, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 103, 101, 110, 116, 72, 101, 105, 103,
			104, 116, 0, 0, 0, 0, 53, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			65, 103, 101, 110, 116, 73, 115, 79, 110, 79,
			102, 102, 77, 101, 115, 104, 76, 105, 110, 107,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 65, 103,
			101, 110, 116, 73, 115, 80, 97, 116, 104, 83,
			116, 97, 108, 101, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 65, 103, 101, 110, 116, 73, 115, 83,
			116, 111, 112, 112, 101, 100, 0, 0, 0, 0,
			46, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 65, 103, 101, 110, 116, 65,
			114, 101, 97, 67, 111, 115, 116, 0, 0, 0,
			0, 57, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 65, 103, 101, 110, 116,
			77, 97, 120, 105, 109, 117, 109, 65, 99, 99,
			101, 108, 101, 114, 97, 116, 105, 111, 110, 0,
			0, 0, 0, 57, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 65, 103, 101,
			110, 116, 77, 97, 120, 105, 109, 117, 109, 65,
			110, 103, 117, 108, 97, 114, 83, 112, 101, 101,
			100, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			103, 101, 110, 116, 77, 97, 120, 105, 109, 117,
			109, 83, 112, 101, 101, 100, 0, 0, 0, 0,
			57, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 65, 103, 101, 110, 116, 78,
			101, 120, 116, 79, 102, 102, 77, 101, 115, 104,
			76, 105, 110, 107, 68, 97, 116, 97, 0, 0,
			0, 0, 50, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 103, 101, 110,
			116, 78, 101, 120, 116, 80, 111, 115, 105, 116,
			105, 111, 110, 0, 0, 0, 0, 59, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 103, 101, 110, 116, 79, 98, 115, 116,
			97, 99, 108, 101, 65, 118, 111, 105, 100, 97,
			110, 99, 101, 84, 121, 112, 101, 0, 0, 0,
			0, 49, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 65, 103, 101, 110, 116,
			80, 97, 116, 104, 80, 101, 110, 100, 105, 110,
			103, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			103, 101, 110, 116, 80, 97, 116, 104, 83, 116,
			97, 116, 117, 115, 0, 0, 0, 0, 44, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 65, 103, 101, 110, 116, 82, 97, 100,
			105, 117, 115, 0, 0, 0, 0, 55, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 103, 101, 110, 116, 82, 101, 109, 97,
			105, 110, 105, 110, 103, 68, 105, 115, 116, 97,
			110, 99, 101, 0, 0, 0, 0, 52, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 103, 101, 110, 116, 83, 116, 101, 101,
			114, 105, 110, 103, 84, 97, 114, 103, 101, 116,
			0, 0, 0, 0, 54, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 65, 103,
			101, 110, 116, 83, 116, 111, 112, 112, 105, 110,
			103, 68, 105, 115, 116, 97, 110, 99, 101, 0,
			0, 0, 0, 52, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 65, 103, 101,
			110, 116, 85, 112, 100, 97, 116, 101, 80, 111,
			115, 105, 116, 105, 111, 110, 0, 0, 0, 0,
			52, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 65, 103, 101, 110, 116, 85,
			112, 100, 97, 116, 101, 82, 111, 116, 97, 116,
			105, 111, 110, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 103, 101, 110, 116, 86, 101, 108, 111,
			99, 105, 116, 121, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 65, 103, 101, 110, 116, 65, 114, 101,
			97, 77, 97, 115, 107, 0, 0, 0, 0, 46,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 65, 103, 101, 110, 116, 65, 114,
			101, 97, 77, 97, 115, 107, 0, 0, 0, 0,
			49, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 65, 103, 101, 110, 116, 65,
			117, 116, 111, 66, 114, 97, 107, 105, 110, 103,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 65, 103,
			101, 110, 116, 65, 117, 116, 111, 82, 101, 112,
			97, 116, 104, 0, 0, 0, 0, 61, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 65, 103, 101, 110, 116, 65, 117, 116, 111,
			84, 114, 97, 118, 101, 114, 115, 101, 79, 102,
			102, 77, 101, 115, 104, 76, 105, 110, 107, 0,
			0, 0, 0, 55, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 103, 101,
			110, 116, 65, 118, 111, 105, 100, 97, 110, 99,
			101, 80, 114, 105, 111, 114, 105, 116, 121, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 103, 101,
			110, 116, 68, 101, 115, 116, 105, 110, 97, 116,
			105, 111, 110, 0, 0, 0, 0, 61, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 65, 103, 101, 110, 116, 68, 101, 115, 116,
			105, 110, 97, 116, 105, 111, 110, 65, 115, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 103, 101,
			110, 116, 72, 101, 105, 103, 104, 116, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 65, 103, 101, 110,
			116, 73, 115, 83, 116, 111, 112, 112, 101, 100,
			0, 0, 0, 0, 47, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 65, 103,
			101, 110, 116, 76, 97, 121, 101, 114, 67, 111,
			115, 116, 0, 0, 0, 0, 57, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			65, 103, 101, 110, 116, 77, 97, 120, 105, 109,
			117, 109, 65, 99, 99, 101, 108, 101, 114, 97,
			116, 105, 111, 110, 0, 0, 0, 0, 57, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 65, 103, 101, 110, 116, 77, 97, 120,
			105, 109, 117, 109, 65, 110, 103, 117, 108, 97,
			114, 83, 112, 101, 101, 100, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 65, 103, 101, 110, 116, 77,
			97, 120, 105, 109, 117, 109, 83, 112, 101, 101,
			100, 0, 0, 0, 0, 59, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 65,
			103, 101, 110, 116, 79, 98, 115, 116, 97, 99,
			108, 101, 65, 118, 111, 105, 100, 97, 110, 99,
			101, 84, 121, 112, 101, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 65, 103, 101, 110, 116, 80, 97,
			116, 104, 0, 0, 0, 0, 44, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			65, 103, 101, 110, 116, 82, 97, 100, 105, 117,
			115, 0, 0, 0, 0, 54, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 65,
			103, 101, 110, 116, 83, 116, 111, 112, 112, 105,
			110, 103, 68, 105, 115, 116, 97, 110, 99, 101,
			0, 0, 0, 0, 52, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 65, 103,
			101, 110, 116, 85, 112, 100, 97, 116, 101, 80,
			111, 115, 105, 116, 105, 111, 110, 0, 0, 0,
			0, 52, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 65, 103, 101, 110, 116,
			85, 112, 100, 97, 116, 101, 82, 111, 116, 97,
			116, 105, 111, 110, 0, 0, 0, 0, 55, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 87,
			97, 116, 99, 104, 65, 103, 101, 110, 116, 73,
			115, 79, 110, 79, 102, 102, 77, 101, 115, 104,
			76, 105, 110, 107, 0, 0, 0, 0, 15, 124,
			70, 115, 109, 78, 97, 118, 77, 101, 115, 104,
			80, 97, 116, 104, 0, 0, 0, 0, 50, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 78,
			97, 118, 77, 101, 115, 104, 67, 97, 108, 99,
			117, 108, 97, 116, 101, 80, 97, 116, 104, 0,
			0, 0, 0, 68, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 78, 97, 118, 77, 101, 115,
			104, 67, 97, 108, 99, 117, 108, 97, 116, 101,
			80, 97, 116, 104, 66, 101, 116, 119, 101, 101,
			110, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 115, 0, 0, 0, 0, 52, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 78, 97, 118,
			77, 101, 115, 104, 70, 105, 110, 100, 67, 108,
			111, 115, 101, 115, 116, 69, 100, 103, 101, 0,
			0, 0, 0, 48, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 78, 97, 118, 77, 101, 115,
			104, 71, 101, 116, 65, 114, 101, 97, 67, 111,
			115, 116, 0, 0, 0, 0, 53, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 78, 97, 118,
			77, 101, 115, 104, 71, 101, 116, 76, 97, 121,
			101, 114, 70, 114, 111, 109, 78, 97, 109, 101,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 78, 97, 118, 77, 101,
			115, 104, 82, 97, 121, 99, 97, 115, 116, 0,
			0, 0, 0, 51, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 78, 97, 118, 77, 101, 115,
			104, 83, 97, 109, 112, 108, 101, 80, 111, 115,
			105, 116, 105, 111, 110, 0, 0, 0, 0, 49,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			78, 97, 118, 77, 101, 115, 104, 83, 101, 116,
			76, 97, 121, 101, 114, 67, 111, 115, 116, 0,
			0, 0, 0, 53, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 79, 102, 102,
			77, 101, 115, 104, 76, 105, 110, 107, 65, 99,
			116, 105, 118, 97, 116, 101, 100, 0, 0, 0,
			0, 57, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 79, 102, 102, 77, 101,
			115, 104, 76, 105, 110, 107, 66, 105, 68, 105,
			114, 101, 99, 116, 105, 111, 110, 97, 108, 0,
			0, 0, 0, 52, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 79, 102, 102,
			77, 101, 115, 104, 67, 111, 115, 116, 79, 118,
			101, 114, 114, 105, 100, 101, 0, 0, 0, 0,
			52, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 79, 102, 102, 77, 101, 115,
			104, 76, 105, 110, 107, 79, 99, 99, 117, 112,
			105, 101, 100, 0, 0, 0, 0, 63, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 79, 102, 102, 77, 101, 115, 104, 76, 105,
			110, 107, 65, 117, 116, 111, 85, 112, 100, 97,
			116, 101, 80, 111, 115, 105, 116, 105, 111, 110,
			115, 0, 0, 0, 0, 55, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 79,
			102, 102, 77, 101, 115, 104, 76, 105, 110, 107,
			78, 97, 118, 77, 101, 115, 104, 65, 114, 101,
			97, 0, 0, 0, 0, 59, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 69, 99,
			111, 115, 121, 115, 116, 101, 109, 46, 85, 116,
			105, 108, 115, 124, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 69, 118, 101, 110, 116, 115, 66,
			114, 105, 100, 103, 101, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 69, 99, 111, 115, 121, 115, 116, 101,
			109, 46, 117, 116, 105, 108, 115, 124, 67, 111,
			109, 109, 101, 110, 116, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 69, 118, 101, 110, 116, 80, 114,
			111, 112, 101, 114, 116, 105, 101, 115, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 69, 118, 101, 110,
			116, 80, 114, 111, 112, 101, 114, 116, 105, 101,
			115, 0, 0, 0, 0, 26, 124, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 85, 116, 105, 108,
			115, 95, 69, 120, 116, 101, 110, 115, 105, 111,
			110, 115, 0, 0, 0, 0, 21, 124, 69, 118,
			101, 110, 116, 68, 97, 116, 97, 83, 101, 110,
			100, 101, 114, 80, 114, 111, 120, 121, 0, 0,
			0, 0, 31, 124, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 85, 116, 105, 108, 115, 68, 111,
			116, 78, 101, 116, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 115, 1, 0, 0, 0, 15, 124,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 85,
			116, 105, 108, 115, 1, 0, 0, 0, 15, 124,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 85,
			116, 105, 108, 115, 1, 0, 0, 0, 15, 124,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 85,
			116, 105, 108, 115, 1, 0, 0, 0, 15, 124,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 85,
			116, 105, 108, 115, 1, 0, 0, 0, 15, 124,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 85,
			116, 105, 108, 115, 1, 0, 0, 0, 15, 124,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 85,
			116, 105, 108, 115, 0, 0, 0, 0, 53, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 69, 99, 111, 115, 121, 115, 116, 101, 109,
			46, 85, 116, 105, 108, 115, 124, 66, 117, 116,
			116, 111, 110, 65, 116, 116, 114, 105, 98, 117,
			116, 101, 0, 0, 0, 0, 57, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 69,
			99, 111, 115, 121, 115, 116, 101, 109, 46, 85,
			116, 105, 108, 115, 124, 69, 118, 101, 110, 116,
			84, 97, 114, 103, 101, 116, 86, 97, 114, 105,
			97, 98, 108, 101, 0, 0, 0, 0, 53, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 69, 99, 111, 115, 121, 115, 116, 101, 109,
			46, 85, 116, 105, 108, 115, 124, 69, 120, 112,
			101, 99, 116, 67, 111, 109, 112, 111, 110, 101,
			110, 116, 0, 0, 0, 0, 63, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 69,
			99, 111, 115, 121, 115, 116, 101, 109, 46, 85,
			116, 105, 108, 115, 124, 70, 115, 109, 86, 97,
			114, 105, 97, 98, 108, 101, 84, 97, 114, 103,
			101, 116, 86, 97, 114, 105, 97, 98, 108, 101,
			0, 0, 0, 0, 53, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 69, 99, 111,
			115, 121, 115, 116, 101, 109, 46, 85, 116, 105,
			108, 115, 124, 70, 115, 109, 86, 97, 114, 105,
			97, 98, 108, 101, 84, 121, 112, 101, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 69, 99, 111, 115, 121,
			115, 116, 101, 109, 46, 85, 116, 105, 108, 115,
			124, 82, 101, 113, 117, 105, 114, 101, 100, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 69, 99, 111, 115,
			121, 115, 116, 101, 109, 46, 85, 116, 105, 108,
			115, 124, 83, 104, 111, 119, 79, 112, 116, 105,
			111, 110, 115, 0, 0, 0, 0, 54, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			69, 99, 111, 115, 121, 115, 116, 101, 109, 46,
			85, 116, 105, 108, 115, 124, 77, 97, 105, 110,
			67, 97, 109, 101, 114, 97, 84, 97, 114, 103,
			101, 116, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 69,
			99, 111, 115, 121, 115, 116, 101, 109, 46, 85,
			116, 105, 108, 115, 124, 79, 119, 110, 101, 114,
			0, 0, 0, 0, 52, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 69, 99, 111,
			115, 121, 115, 116, 101, 109, 46, 85, 116, 105,
			108, 115, 124, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 58, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 69, 99, 111, 115, 121, 115,
			116, 101, 109, 46, 85, 116, 105, 108, 115, 124,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 69,
			118, 101, 110, 116, 84, 97, 114, 103, 101, 116,
			0, 0, 0, 0, 56, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 69, 99, 111,
			115, 121, 115, 116, 101, 109, 46, 85, 116, 105,
			108, 115, 124, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 70, 115, 109, 84, 97, 114, 103, 101,
			116, 0, 0, 0, 0, 58, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 69, 99,
			111, 115, 121, 115, 116, 101, 109, 46, 85, 116,
			105, 108, 115, 124, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 70, 115, 109, 86, 97, 114, 105,
			97, 98, 108, 101, 0, 0, 0, 0, 64, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 69, 99, 111, 115, 121, 115, 116, 101, 109,
			46, 85, 116, 105, 108, 115, 124, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 70, 115, 109, 86,
			97, 114, 105, 97, 98, 108, 101, 84, 97, 114,
			103, 101, 116, 0, 0, 0, 0, 66, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			69, 99, 111, 115, 121, 115, 116, 101, 109, 46,
			85, 116, 105, 108, 115, 124, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 84, 105, 109, 101, 108,
			105, 110, 101, 69, 118, 101, 110, 116, 84, 97,
			114, 103, 101, 116, 0, 0, 0, 0, 49, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 69, 99, 111, 115, 121, 115, 116, 101, 109,
			46, 117, 116, 105, 108, 115, 124, 86, 101, 114,
			115, 105, 111, 110, 73, 110, 102, 111, 0, 0,
			0, 0, 57, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 69, 99, 111, 115, 121,
			115, 116, 101, 109, 46, 85, 116, 105, 108, 115,
			124, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			69, 118, 101, 110, 116, 80, 114, 111, 120, 121,
			0, 0, 0, 0, 35, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 65, 99, 116,
			105, 111, 110, 72, 101, 108, 112, 101, 114, 115,
			0, 0, 0, 0, 42, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 110, 105, 109, 97,
			116, 101, 67, 111, 108, 111, 114, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 110, 105, 109, 97, 116, 101, 70,
			108, 111, 97, 116, 0, 0, 0, 0, 44, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			110, 105, 109, 97, 116, 101, 70, 108, 111, 97,
			116, 86, 50, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 110,
			105, 109, 97, 116, 101, 70, 115, 109, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 41, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			110, 105, 109, 97, 116, 101, 82, 101, 99, 116,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 110, 105, 109, 97,
			116, 101, 86, 101, 99, 116, 111, 114, 51, 0,
			0, 0, 0, 40, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 67, 117, 114, 118, 101, 67,
			111, 108, 111, 114, 0, 0, 0, 0, 40, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 67,
			117, 114, 118, 101, 70, 108, 111, 97, 116, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 67, 117, 114, 118, 101, 70,
			115, 109, 65, 99, 116, 105, 111, 110, 0, 0,
			0, 0, 39, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 67, 117, 114, 118, 101, 82, 101,
			99, 116, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 67, 117, 114,
			118, 101, 86, 101, 99, 116, 111, 114, 51, 0,
			0, 0, 0, 39, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 69, 97, 115, 101, 67, 111,
			108, 111, 114, 0, 0, 0, 0, 39, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 69, 97,
			115, 101, 70, 108, 111, 97, 116, 0, 0, 0,
			0, 43, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 69, 97, 115, 101, 70, 115, 109, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 38,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			69, 97, 115, 101, 82, 101, 99, 116, 0, 0,
			0, 0, 41, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 69, 97, 115, 101, 86, 101, 99,
			116, 111, 114, 51, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			100, 100, 65, 110, 105, 109, 97, 116, 105, 111,
			110, 67, 108, 105, 112, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 100, 100, 77, 105, 120, 105, 110, 103, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 110, 105, 109, 97, 116, 105,
			111, 110, 83, 101, 116, 116, 105, 110, 103, 115,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 66, 97, 115, 101, 65,
			110, 105, 109, 97, 116, 105, 111, 110, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 44, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 66,
			108, 101, 110, 100, 65, 110, 105, 109, 97, 116,
			105, 111, 110, 0, 0, 0, 0, 56, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 67, 97,
			112, 116, 117, 114, 101, 80, 111, 115, 101, 65,
			115, 65, 110, 105, 109, 97, 116, 105, 111, 110,
			67, 108, 105, 112, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 69,
			110, 97, 98, 108, 101, 65, 110, 105, 109, 97,
			116, 105, 111, 110, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 80,
			108, 97, 121, 65, 110, 105, 109, 97, 116, 105,
			111, 110, 0, 0, 0, 0, 49, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 80, 108, 97,
			121, 82, 97, 110, 100, 111, 109, 65, 110, 105,
			109, 97, 116, 105, 111, 110, 0, 0, 0, 0,
			51, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 82, 101, 109, 111, 118, 101, 77, 105, 120,
			105, 110, 103, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 0, 0, 0, 0, 45, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 82, 101, 119,
			105, 110, 100, 65, 110, 105, 109, 97, 116, 105,
			111, 110, 0, 0, 0, 0, 47, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			65, 110, 105, 109, 97, 116, 105, 111, 110, 83,
			112, 101, 101, 100, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 65, 110, 105, 109, 97, 116, 105, 111,
			110, 84, 105, 109, 101, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 65, 110, 105, 109, 97, 116, 105,
			111, 110, 87, 101, 105, 103, 104, 116, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 111, 112, 65, 110, 105,
			109, 97, 116, 105, 111, 110, 0, 0, 0, 0,
			47, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 110, 105, 109, 97, 116, 111, 114, 67,
			114, 111, 115, 115, 70, 97, 100, 101, 0, 0,
			0, 0, 58, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 110, 105, 109, 97, 116, 111,
			114, 73, 110, 116, 101, 114, 114, 117, 112, 116,
			77, 97, 116, 99, 104, 84, 97, 114, 103, 101,
			116, 0, 0, 0, 0, 49, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 110, 105, 109,
			97, 116, 111, 114, 77, 97, 116, 99, 104, 84,
			97, 114, 103, 101, 116, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 110, 105, 109, 97, 116, 111, 114, 80, 108,
			97, 121, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 110, 105,
			109, 97, 116, 111, 114, 83, 116, 97, 114, 116,
			80, 108, 97, 121, 98, 97, 99, 107, 0, 0,
			0, 0, 52, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 110, 105, 109, 97, 116, 111,
			114, 83, 116, 97, 114, 116, 82, 101, 99, 111,
			114, 100, 105, 110, 103, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 110, 105, 109, 97, 116, 111, 114, 83, 116,
			111, 112, 80, 108, 97, 121, 98, 97, 99, 107,
			0, 0, 0, 0, 51, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 110, 105, 109, 97,
			116, 111, 114, 83, 116, 111, 112, 82, 101, 99,
			111, 114, 100, 105, 110, 103, 0, 0, 0, 0,
			56, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 70, 115, 109, 83, 116, 97, 116, 101, 65,
			99, 116, 105, 111, 110, 65, 110, 105, 109, 97,
			116, 111, 114, 66, 97, 115, 101, 0, 0, 0,
			0, 56, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 65, 112, 112, 108, 121, 82, 111,
			111, 116, 77, 111, 116, 105, 111, 110, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 66, 111, 100, 121, 0, 0,
			0, 0, 55, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 66, 111, 110, 101, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 66, 111, 111, 108, 0, 0,
			0, 0, 52, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 67, 117, 108, 108, 105, 110,
			103, 77, 111, 100, 101, 0, 0, 0, 0, 57,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 65, 110, 105, 109, 97, 116, 111,
			114, 67, 117, 114, 114, 101, 110, 116, 83, 116,
			97, 116, 101, 73, 110, 102, 111, 0, 0, 0,
			0, 63, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 67, 117, 114, 114, 101, 110, 116,
			83, 116, 97, 116, 101, 73, 110, 102, 111, 73,
			115, 78, 97, 109, 101, 0, 0, 0, 0, 62,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 65, 110, 105, 109, 97, 116, 111,
			114, 67, 117, 114, 114, 101, 110, 116, 83, 116,
			97, 116, 101, 73, 110, 102, 111, 73, 115, 84,
			97, 103, 0, 0, 0, 0, 62, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 67, 117,
			114, 114, 101, 110, 116, 84, 114, 97, 110, 115,
			105, 116, 105, 111, 110, 73, 110, 102, 111, 0,
			0, 0, 0, 68, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 67, 117, 114, 114, 101,
			110, 116, 84, 114, 97, 110, 115, 105, 116, 105,
			111, 110, 73, 110, 102, 111, 73, 115, 78, 97,
			109, 101, 0, 0, 0, 0, 72, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 67, 117,
			114, 114, 101, 110, 116, 84, 114, 97, 110, 115,
			105, 116, 105, 111, 110, 73, 110, 102, 111, 73,
			115, 85, 115, 101, 114, 78, 97, 109, 101, 0,
			0, 0, 0, 46, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 68, 101, 108, 116, 97,
			0, 0, 0, 0, 56, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 70, 101, 101, 116,
			80, 105, 118, 111, 116, 65, 99, 116, 105, 118,
			101, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 70, 108, 111,
			97, 116, 0, 0, 0, 0, 54, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 71, 114,
			97, 118, 105, 116, 121, 87, 101, 105, 103, 104,
			116, 0, 0, 0, 0, 51, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 72, 117, 109,
			97, 110, 83, 99, 97, 108, 101, 0, 0, 0,
			0, 47, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 73, 75, 71, 111, 97, 108, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 73, 110, 116, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 73, 115, 72, 117, 109, 97,
			110, 0, 0, 0, 0, 60, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 73, 115, 76,
			97, 121, 101, 114, 73, 110, 84, 114, 97, 110,
			115, 105, 116, 105, 111, 110, 0, 0, 0, 0,
			57, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 73, 115, 77, 97, 116, 99, 104, 105,
			110, 103, 84, 97, 114, 103, 101, 116, 0, 0,
			0, 0, 69, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 73, 115, 80, 97, 114, 97,
			109, 101, 116, 101, 114, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 100, 66, 121, 67, 117, 114,
			118, 101, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			65, 110, 105, 109, 97, 116, 111, 114, 76, 97,
			121, 101, 114, 67, 111, 117, 110, 116, 0, 0,
			0, 0, 50, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 76, 97, 121, 101, 114, 78,
			97, 109, 101, 0, 0, 0, 0, 63, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 76,
			97, 121, 101, 114, 115, 65, 102, 102, 101, 99,
			116, 77, 97, 115, 115, 67, 101, 110, 116, 101,
			114, 0, 0, 0, 0, 52, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 76, 97, 121,
			101, 114, 87, 101, 105, 103, 104, 116, 0, 0,
			0, 0, 61, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 76, 101, 102, 116, 70, 111,
			111, 116, 66, 111, 116, 116, 111, 109, 72, 101,
			105, 103, 104, 116, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			78, 101, 120, 116, 83, 116, 97, 116, 101, 73,
			110, 102, 111, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 80,
			105, 118, 111, 116, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			80, 108, 97, 121, 66, 97, 99, 107, 83, 112,
			101, 101, 100, 0, 0, 0, 0, 53, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 80,
			108, 97, 121, 66, 97, 99, 107, 84, 105, 109,
			101, 0, 0, 0, 0, 62, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			110, 105, 109, 97, 116, 111, 114, 82, 105, 103,
			104, 116, 70, 111, 111, 116, 66, 111, 116, 116,
			111, 109, 72, 101, 105, 103, 104, 116, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 82, 111, 111, 116, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 83, 112, 101, 101, 100, 0,
			0, 0, 0, 47, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 84, 97, 114, 103, 101,
			116, 0, 0, 0, 0, 62, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 78, 97, 118, 77,
			101, 115, 104, 65, 103, 101, 110, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 83, 121, 110, 99,
			104, 114, 111, 110, 105, 122, 101, 114, 0, 0,
			0, 0, 56, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 65, 112, 112, 108, 121, 82,
			111, 111, 116, 77, 111, 116, 105, 111, 110, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 66, 111, 100, 121, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 66, 111, 111, 108, 0,
			0, 0, 0, 52, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 67, 117, 108, 108, 105,
			110, 103, 77, 111, 100, 101, 0, 0, 0, 0,
			56, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 70, 101, 101, 116, 80, 105, 118, 111,
			116, 65, 99, 116, 105, 118, 101, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 70, 108, 111, 97, 116, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 65, 110, 105, 109,
			97, 116, 111, 114, 73, 75, 71, 111, 97, 108,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 65, 110,
			105, 109, 97, 116, 111, 114, 73, 110, 116, 0,
			0, 0, 0, 63, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 110, 105,
			109, 97, 116, 111, 114, 76, 97, 121, 101, 114,
			115, 65, 102, 102, 101, 99, 116, 77, 97, 115,
			115, 67, 101, 110, 116, 101, 114, 0, 0, 0,
			0, 52, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 65, 110, 105, 109, 97,
			116, 111, 114, 76, 97, 121, 101, 114, 87, 101,
			105, 103, 104, 116, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			76, 111, 111, 107, 65, 116, 0, 0, 0, 0,
			54, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 65, 110, 105, 109, 97, 116,
			111, 114, 80, 108, 97, 121, 66, 97, 99, 107,
			83, 112, 101, 101, 100, 0, 0, 0, 0, 53,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 65, 110, 105, 109, 97, 116, 111,
			114, 80, 108, 97, 121, 66, 97, 99, 107, 84,
			105, 109, 101, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 83,
			112, 101, 101, 100, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 65, 110, 105, 109, 97, 116, 111, 114,
			83, 116, 97, 98, 105, 108, 105, 122, 101, 70,
			101, 101, 116, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 65, 110, 105, 109, 97, 116, 111, 114, 84,
			97, 114, 103, 101, 116, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 65, 110, 105, 109, 97, 116, 111,
			114, 84, 114, 105, 103, 103, 101, 114, 0, 0,
			0, 0, 53, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 121, 110, 99, 65, 110, 105,
			109, 97, 116, 111, 114, 66, 111, 111, 108, 84,
			111, 83, 116, 97, 116, 101, 0, 0, 0, 0,
			45, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 112, 112, 108, 105, 99, 97, 116, 105,
			111, 110, 81, 117, 105, 116, 0, 0, 0, 0,
			56, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 112, 112, 108, 105, 99, 97, 116, 105,
			111, 110, 82, 117, 110, 73, 110, 66, 97, 99,
			107, 103, 114, 111, 117, 110, 100, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 83, 99, 114, 101, 101,
			110, 72, 101, 105, 103, 104, 116, 0, 0, 0,
			0, 44, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 83, 99, 114, 101, 101,
			110, 87, 105, 100, 116, 104, 0, 0, 0, 0,
			49, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 83, 99, 114, 101, 101, 110,
			82, 101, 115, 111, 108, 117, 116, 105, 111, 110,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 84, 97, 107, 101, 83,
			99, 114, 101, 101, 110, 115, 104, 111, 116, 0,
			0, 0, 0, 38, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 114, 114, 97, 121, 65,
			100, 100, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 114, 114,
			97, 121, 65, 100, 100, 82, 97, 110, 103, 101,
			0, 0, 0, 0, 40, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 114, 114, 97, 121,
			67, 108, 101, 97, 114, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 67, 111, 109, 112, 97,
			114, 101, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 114, 114,
			97, 121, 67, 111, 110, 116, 97, 105, 110, 115,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 114, 114, 97, 121,
			68, 101, 108, 101, 116, 101, 65, 116, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 70, 111,
			114, 69, 97, 99, 104, 0, 0, 0, 0, 38,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 71, 101, 116, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 71, 101,
			116, 78, 101, 120, 116, 0, 0, 0, 0, 44,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 114, 114, 97, 121, 71, 101, 116, 82, 97,
			110, 100, 111, 109, 0, 0, 0, 0, 41, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 73, 110, 115, 101, 114, 116,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 114, 114, 97, 121,
			76, 101, 110, 103, 116, 104, 0, 0, 0, 0,
			41, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 65, 114, 114, 97, 121, 82, 101, 109, 111,
			118, 101, 0, 0, 0, 0, 44, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 114, 114,
			97, 121, 82, 101, 109, 111, 118, 101, 65, 108,
			108, 0, 0, 0, 0, 41, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 114, 114, 97,
			121, 82, 101, 115, 105, 122, 101, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 82, 101, 118,
			101, 114, 115, 101, 0, 0, 0, 0, 38, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 83, 101, 116, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 114, 114, 97, 121, 83, 104, 117,
			102, 102, 108, 101, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 65,
			114, 114, 97, 121, 83, 111, 114, 116, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 114, 114, 97, 121, 84, 114,
			97, 110, 115, 102, 101, 114, 86, 97, 108, 117,
			101, 0, 0, 0, 0, 41, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 70, 115, 109, 65,
			114, 114, 97, 121, 83, 101, 116, 0, 0, 0,
			0, 41, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 70, 115, 109, 65, 114,
			114, 97, 121, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 70, 115, 109, 65, 114, 114, 97, 121, 73,
			116, 101, 109, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 70, 115, 109, 65, 114, 114, 97, 121, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 70, 115, 109,
			65, 114, 114, 97, 121, 73, 116, 101, 109, 0,
			0, 0, 0, 39, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 65, 117, 100, 105, 111, 77,
			117, 116, 101, 0, 0, 0, 0, 40, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 117,
			100, 105, 111, 80, 97, 117, 115, 101, 0, 0,
			0, 0, 39, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 117, 100, 105, 111, 80, 108,
			97, 121, 0, 0, 0, 0, 39, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 117, 100,
			105, 111, 83, 116, 111, 112, 0, 0, 0, 0,
			45, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 80, 108, 97, 121, 82, 97, 110, 100, 111,
			109, 83, 111, 117, 110, 100, 0, 0, 0, 0,
			39, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 80, 108, 97, 121, 83, 111, 117, 110, 100,
			0, 0, 0, 0, 42, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 65, 117,
			100, 105, 111, 67, 108, 105, 112, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 65, 117, 100, 105, 111,
			76, 111, 111, 112, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 65, 117, 100, 105, 111, 80, 105, 116,
			99, 104, 0, 0, 0, 0, 44, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			65, 117, 100, 105, 111, 86, 111, 108, 117, 109,
			101, 0, 0, 0, 0, 43, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 71,
			97, 109, 101, 86, 111, 108, 117, 109, 101, 0,
			0, 0, 0, 46, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 66, 97, 115, 101, 85, 112,
			100, 97, 116, 101, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 42, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 67, 97, 109, 101, 114,
			97, 70, 97, 100, 101, 73, 110, 0, 0, 0,
			0, 43, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 67, 97, 109, 101, 114, 97, 70, 97,
			100, 101, 79, 117, 116, 0, 0, 0, 0, 51,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			67, 108, 97, 109, 112, 79, 114, 116, 104, 111,
			103, 114, 97, 112, 104, 105, 99, 86, 105, 101,
			119, 0, 0, 0, 0, 41, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 67, 117, 116, 84,
			111, 67, 97, 109, 101, 114, 97, 0, 0, 0,
			0, 43, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 77, 97, 105, 110, 67,
			97, 109, 101, 114, 97, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 99, 114, 101, 101, 110, 84, 111, 87, 111,
			114, 108, 100, 80, 111, 105, 110, 116, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 66, 97, 99, 107,
			103, 114, 111, 117, 110, 100, 67, 111, 108, 111,
			114, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 67,
			97, 109, 101, 114, 97, 67, 117, 108, 108, 105,
			110, 103, 77, 97, 115, 107, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 67, 97, 109, 101, 114, 97,
			70, 79, 86, 0, 0, 0, 0, 43, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 77, 97, 105, 110, 67, 97, 109, 101, 114,
			97, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 87, 111, 114, 108,
			100, 84, 111, 83, 99, 114, 101, 101, 110, 80,
			111, 105, 110, 116, 0, 0, 0, 0, 51, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 67,
			104, 101, 99, 107, 72, 101, 105, 103, 104, 116,
			0, 0, 0, 0, 46, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 67, 114, 111, 117, 99,
			104, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 73, 115, 71, 114,
			111, 117, 110, 100, 101, 100, 0, 0, 0, 0,
			44, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 74, 117, 109, 112, 0, 0, 0, 0, 44,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			77, 111, 118, 101, 0, 0, 0, 0, 49, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 77,
			111, 118, 101, 73, 110, 65, 105, 114, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 83, 101, 116, 116, 105, 110, 103,
			115, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 83, 105, 109, 112,
			108, 101, 77, 111, 118, 101, 0, 0, 0, 0,
			57, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 67, 111, 108, 108, 105, 115,
			105, 111, 110, 70, 108, 97, 103, 115, 0, 0,
			0, 0, 50, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 72, 105, 116, 73,
			110, 102, 111, 0, 0, 0, 0, 51, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 86, 101, 108, 111, 99, 105, 116, 121, 0,
			0, 0, 0, 46, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 67, 111, 108, 111, 114, 73,
			110, 116, 101, 114, 112, 111, 108, 97, 116, 101,
			0, 0, 0, 0, 39, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 67, 111, 108, 111, 114,
			82, 97, 109, 112, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 67, 111, 108, 111, 114, 82, 71, 66,
			65, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 108, 101,
			99, 116, 82, 97, 110, 100, 111, 109, 67, 111,
			108, 111, 114, 0, 0, 0, 0, 42, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 67, 111, 108, 111, 114, 82, 71, 66, 65,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 67, 111,
			108, 111, 114, 86, 97, 108, 117, 101, 1, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 67, 111, 109, 112, 111, 110, 101,
			110, 116, 65, 99, 116, 105, 111, 110, 1, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 67, 111, 109, 112, 111, 110, 101,
			110, 116, 65, 99, 116, 105, 111, 110, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 67, 111, 110, 118, 101, 114, 116,
			66, 111, 111, 108, 84, 111, 67, 111, 108, 111,
			114, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 67, 111, 110, 118,
			101, 114, 116, 66, 111, 111, 108, 84, 111, 70,
			108, 111, 97, 116, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 67,
			111, 110, 118, 101, 114, 116, 66, 111, 111, 108,
			84, 111, 73, 110, 116, 0, 0, 0, 0, 49,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			67, 111, 110, 118, 101, 114, 116, 66, 111, 111,
			108, 84, 111, 83, 116, 114, 105, 110, 103, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 67, 111, 110, 118, 101, 114,
			116, 69, 110, 117, 109, 84, 111, 83, 116, 114,
			105, 110, 103, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 67, 111,
			110, 118, 101, 114, 116, 70, 108, 111, 97, 116,
			84, 111, 73, 110, 116, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			67, 111, 110, 118, 101, 114, 116, 70, 108, 111,
			97, 116, 84, 111, 83, 116, 114, 105, 110, 103,
			0, 0, 0, 0, 47, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 67, 111, 110, 118, 101,
			114, 116, 73, 110, 116, 84, 111, 70, 108, 111,
			97, 116, 0, 0, 0, 0, 48, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 67, 111, 110,
			118, 101, 114, 116, 73, 110, 116, 84, 111, 83,
			116, 114, 105, 110, 103, 0, 0, 0, 0, 53,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			67, 111, 110, 118, 101, 114, 116, 77, 97, 116,
			101, 114, 105, 97, 108, 84, 111, 79, 98, 106,
			101, 99, 116, 0, 0, 0, 0, 52, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 67, 111,
			110, 118, 101, 114, 116, 83, 101, 99, 111, 110,
			100, 115, 84, 111, 83, 116, 114, 105, 110, 103,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 67, 111, 110, 118, 101,
			114, 116, 83, 116, 114, 105, 110, 103, 84, 111,
			73, 110, 116, 0, 0, 0, 0, 53, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 67, 111,
			110, 118, 101, 114, 116, 86, 101, 99, 116, 111,
			114, 50, 84, 111, 86, 101, 99, 116, 111, 114,
			51, 0, 0, 0, 0, 36, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 115, 115, 101,
			114, 116, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 66, 97, 115,
			101, 76, 111, 103, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 37, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 67, 111, 109, 109, 101,
			110, 116, 0, 0, 0, 0, 39, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 68, 101, 98,
			117, 103, 66, 111, 111, 108, 0, 0, 0, 0,
			44, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 68, 101, 98, 117, 103, 68, 114, 97, 119,
			83, 104, 97, 112, 101, 0, 0, 0, 0, 39,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			68, 101, 98, 117, 103, 69, 110, 117, 109, 0,
			0, 0, 0, 40, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 68, 101, 98, 117, 103, 70,
			108, 111, 97, 116, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 68,
			101, 98, 117, 103, 70, 115, 109, 86, 97, 114,
			105, 97, 98, 108, 101, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			68, 101, 98, 117, 103, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 0, 0, 0, 0, 38,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			68, 101, 98, 117, 103, 73, 110, 116, 0, 0,
			0, 0, 38, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 68, 101, 98, 117, 103, 76, 111,
			103, 0, 0, 0, 0, 41, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 68, 101, 98, 117,
			103, 79, 98, 106, 101, 99, 116, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 68, 101, 98, 117, 103, 86, 101, 99,
			116, 111, 114, 51, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 68,
			114, 97, 119, 68, 101, 98, 117, 103, 76, 105,
			110, 101, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 68, 114, 97,
			119, 68, 101, 98, 117, 103, 82, 97, 121, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 68, 114, 97, 119, 83, 116,
			97, 116, 101, 76, 97, 98, 101, 108, 0, 0,
			0, 0, 52, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 68, 101, 118, 105, 99, 101, 79,
			114, 105, 101, 110, 116, 97, 116, 105, 111, 110,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 46,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			68, 101, 118, 105, 99, 101, 83, 104, 97, 107,
			101, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			43, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 68, 101, 118, 105, 99, 101, 86, 105, 98,
			114, 97, 116, 101, 0, 0, 0, 0, 51, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 68, 101, 118, 105, 99, 101, 65, 99,
			99, 101, 108, 101, 114, 97, 116, 105, 111, 110,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 68, 101,
			118, 105, 99, 101, 82, 111, 108, 108, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 73, 80, 104, 111,
			110, 101, 83, 101, 116, 116, 105, 110, 103, 115,
			0, 0, 0, 0, 45, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 76, 111,
			99, 97, 116, 105, 111, 110, 73, 110, 102, 111,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 84, 111,
			117, 99, 104, 67, 111, 117, 110, 116, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 84, 111, 117, 99,
			104, 73, 110, 102, 111, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			80, 114, 111, 106, 101, 99, 116, 76, 111, 99,
			97, 116, 105, 111, 110, 84, 111, 77, 97, 112,
			0, 0, 0, 0, 57, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 97, 114, 116,
			76, 111, 99, 97, 116, 105, 111, 110, 83, 101,
			114, 118, 105, 99, 101, 85, 112, 100, 97, 116,
			101, 115, 0, 0, 0, 0, 56, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 116, 111,
			112, 76, 111, 99, 97, 116, 105, 111, 110, 83,
			101, 114, 118, 105, 99, 101, 85, 112, 100, 97,
			116, 101, 115, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 119,
			105, 112, 101, 71, 101, 115, 116, 117, 114, 101,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 40,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			84, 111, 117, 99, 104, 69, 118, 101, 110, 116,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 84, 111, 117, 99, 104,
			71, 85, 73, 69, 118, 101, 110, 116, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 84, 111, 117, 99, 104, 79, 98,
			106, 101, 99, 116, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 26, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 124, 69, 97, 115, 105,
			110, 103, 70, 117, 110, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 35, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 66, 108, 105, 110, 107,
			0, 0, 0, 0, 37, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 70, 108, 105, 99, 107,
			101, 114, 0, 0, 0, 0, 48, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 80, 97, 114,
			116, 105, 99, 108, 101, 83, 121, 115, 116, 101,
			109, 80, 108, 97, 121, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 69, 110, 117, 109, 86, 97, 108,
			117, 101, 0, 0, 0, 0, 48, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 99, 116,
			105, 118, 97, 116, 101, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 99, 116, 105, 118, 97, 116, 101, 83, 111,
			108, 111, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 100, 100,
			67, 111, 109, 112, 111, 110, 101, 110, 116, 0,
			0, 0, 0, 47, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 67, 114, 101, 97, 116, 101,
			69, 109, 112, 116, 121, 79, 98, 106, 101, 99,
			116, 0, 0, 0, 0, 49, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 67, 114, 101, 97,
			116, 101, 78, 101, 119, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			67, 114, 101, 97, 116, 101, 79, 98, 106, 101,
			99, 116, 0, 0, 0, 0, 44, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 68, 101, 97,
			99, 116, 105, 118, 97, 116, 101, 83, 101, 108,
			102, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 68, 101, 115, 116,
			114, 111, 121, 67, 111, 109, 112, 111, 110, 101,
			110, 116, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 68, 101, 115,
			116, 114, 111, 121, 79, 98, 106, 101, 99, 116,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 68, 101, 115, 116, 114,
			111, 121, 79, 98, 106, 101, 99, 116, 115, 0,
			0, 0, 0, 41, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 68, 101, 115, 116, 114, 111,
			121, 83, 101, 108, 102, 0, 0, 0, 0, 44,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			68, 101, 116, 97, 99, 104, 67, 104, 105, 108,
			100, 114, 101, 110, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 70,
			105, 110, 100, 67, 104, 105, 108, 100, 0, 0,
			0, 0, 41, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 70, 105, 110, 100, 67, 108, 111,
			115, 101, 115, 116, 0, 0, 0, 0, 44, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 70,
			105, 110, 100, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 0, 0, 0, 0, 38, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 67, 104, 105, 108, 100, 0, 0, 0, 0,
			43, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 67, 104, 105, 108, 100, 67,
			111, 117, 110, 116, 0, 0, 0, 0, 41, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 67, 104, 105, 108, 100, 78, 117, 109,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 68, 105,
			115, 116, 97, 110, 99, 101, 0, 0, 0, 0,
			44, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 68, 105, 115, 116, 97, 110,
			99, 101, 88, 89, 90, 0, 0, 0, 0, 38,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 76, 97, 121, 101, 114, 0, 0,
			0, 0, 37, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 78, 97, 109, 101,
			0, 0, 0, 0, 42, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 78, 101,
			120, 116, 67, 104, 105, 108, 100, 0, 0, 0,
			0, 38, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 79, 119, 110, 101, 114,
			0, 0, 0, 0, 39, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 80, 97,
			114, 101, 110, 116, 0, 0, 0, 0, 44, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 82, 97, 110, 100, 111, 109, 67, 104,
			105, 108, 100, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 82, 97, 110, 100, 111, 109, 79, 98, 106,
			101, 99, 116, 0, 0, 0, 0, 37, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 82, 111, 111, 116, 0, 0, 0, 0, 36,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 84, 97, 103, 0, 0, 0, 0,
			41, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 84, 97, 103, 67, 111, 117,
			110, 116, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 0,
			0, 0, 0, 42, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 72, 97, 115, 67, 111, 109,
			112, 111, 110, 101, 110, 116, 0, 0, 0, 0,
			52, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 108, 101, 99, 116, 82, 97, 110,
			100, 111, 109, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 0, 0, 0, 0, 43, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 0, 0, 0, 0, 38, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 76,
			97, 121, 101, 114, 0, 0, 0, 0, 37, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 78, 97, 109, 101, 0, 0, 0, 0,
			39, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 80, 97, 114, 101, 110, 116,
			0, 0, 0, 0, 36, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 84, 97,
			103, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 84,
			97, 103, 115, 79, 110, 67, 104, 105, 108, 100,
			114, 101, 110, 0, 0, 0, 0, 49, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 68, 114,
			97, 119, 70, 117, 108, 108, 115, 99, 114, 101,
			101, 110, 67, 111, 108, 111, 114, 0, 0, 0,
			0, 41, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 68, 114, 97, 119, 84, 101, 120, 116,
			117, 114, 101, 0, 0, 0, 0, 39, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 69, 110,
			97, 98, 108, 101, 71, 85, 73, 0, 0, 0,
			0, 39, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 85, 73, 65, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 36, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 85, 73, 66,
			111, 120, 0, 0, 0, 0, 39, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 85, 73,
			66, 117, 116, 116, 111, 110, 0, 0, 0, 0,
			46, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 85, 73, 67, 111, 110, 116, 101, 110,
			116, 65, 99, 116, 105, 111, 110, 0, 0, 0,
			0, 47, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 85, 73, 69, 108, 101, 109, 101,
			110, 116, 72, 105, 116, 84, 101, 115, 116, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 85, 73, 72, 111, 114,
			105, 122, 111, 110, 116, 97, 108, 83, 108, 105,
			100, 101, 114, 0, 0, 0, 0, 38, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 85,
			73, 76, 97, 98, 101, 108, 0, 0, 0, 0,
			40, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 85, 73, 84, 111, 111, 108, 116, 105,
			112, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 85, 73, 86,
			101, 114, 116, 105, 99, 97, 108, 83, 108, 105,
			100, 101, 114, 0, 0, 0, 0, 44, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 82, 101,
			115, 101, 116, 71, 85, 73, 77, 97, 116, 114,
			105, 120, 0, 0, 0, 0, 39, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 82, 111, 116,
			97, 116, 101, 71, 85, 73, 0, 0, 0, 0,
			38, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 99, 97, 108, 101, 71, 85, 73, 0,
			0, 0, 0, 41, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 71, 85, 73,
			65, 108, 112, 104, 97, 0, 0, 0, 0, 51,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 71, 85, 73, 66, 97, 99, 107,
			103, 114, 111, 117, 110, 100, 67, 111, 108, 111,
			114, 0, 0, 0, 0, 41, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 71,
			85, 73, 67, 111, 108, 111, 114, 0, 0, 0,
			0, 48, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 71, 85, 73, 67, 111,
			110, 116, 101, 110, 116, 67, 111, 108, 111, 114,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 71, 85,
			73, 68, 101, 112, 116, 104, 0, 0, 0, 0,
			40, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 71, 85, 73, 83, 107, 105,
			110, 0, 0, 0, 0, 44, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 77,
			111, 117, 115, 101, 67, 117, 114, 115, 111, 114,
			0, 0, 0, 0, 40, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 71, 85,
			73, 84, 101, 120, 116, 0, 0, 0, 0, 43,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 71, 85, 73, 84, 101, 120, 116,
			117, 114, 101, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 71, 85, 73, 84, 101, 120, 116, 117, 114,
			101, 65, 108, 112, 104, 97, 0, 0, 0, 0,
			48, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 71, 85, 73, 84, 101, 120,
			116, 117, 114, 101, 67, 111, 108, 111, 114, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 48, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 66, 101, 103, 105, 110, 65, 114,
			101, 97, 0, 0, 0, 0, 60, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 66, 101, 103, 105,
			110, 65, 114, 101, 97, 70, 111, 108, 108, 111,
			119, 79, 98, 106, 101, 99, 116, 0, 0, 0,
			0, 52, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 85, 73, 76, 97, 121, 111, 117,
			116, 66, 101, 103, 105, 110, 67, 101, 110, 116,
			101, 114, 101, 100, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 66, 101,
			103, 105, 110, 72, 111, 114, 105, 122, 111, 110,
			116, 97, 108, 0, 0, 0, 0, 54, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 85,
			73, 76, 97, 121, 111, 117, 116, 66, 101, 103,
			105, 110, 83, 99, 114, 111, 108, 108, 86, 105,
			101, 119, 0, 0, 0, 0, 52, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 66, 101, 103, 105,
			110, 86, 101, 114, 116, 105, 99, 97, 108, 0,
			0, 0, 0, 42, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 66, 111, 120, 0, 0, 0, 0,
			45, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			66, 117, 116, 116, 111, 110, 0, 0, 0, 0,
			59, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			67, 111, 110, 102, 105, 114, 109, 80, 97, 115,
			115, 119, 111, 114, 100, 70, 105, 101, 108, 100,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 69, 109, 97, 105, 108, 70,
			105, 101, 108, 100, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 69, 110,
			100, 65, 114, 101, 97, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 85, 73, 76, 97, 121, 111, 117, 116, 69,
			110, 100, 67, 101, 110, 116, 101, 114, 101, 100,
			0, 0, 0, 0, 52, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 69, 110, 100, 72, 111, 114,
			105, 122, 111, 110, 116, 97, 108, 0, 0, 0,
			0, 52, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 85, 73, 76, 97, 121, 111, 117,
			116, 69, 110, 100, 83, 99, 114, 111, 108, 108,
			86, 105, 101, 119, 0, 0, 0, 0, 50, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 69, 110,
			100, 86, 101, 114, 116, 105, 99, 97, 108, 0,
			0, 0, 0, 52, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 70, 108, 101, 120, 105, 98, 108,
			101, 83, 112, 97, 99, 101, 0, 0, 0, 0,
			49, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			70, 108, 111, 97, 116, 70, 105, 101, 108, 100,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 70, 108, 111, 97, 116, 76,
			97, 98, 101, 108, 0, 0, 0, 0, 55, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 72, 111,
			114, 105, 122, 111, 110, 116, 97, 108, 83, 108,
			105, 100, 101, 114, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 73, 110,
			116, 70, 105, 101, 108, 100, 0, 0, 0, 0,
			47, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			73, 110, 116, 76, 97, 98, 101, 108, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 85, 73, 76, 97, 121, 111,
			117, 116, 76, 97, 98, 101, 108, 0, 0, 0,
			0, 52, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 85, 73, 76, 97, 121, 111, 117,
			116, 80, 97, 115, 115, 119, 111, 114, 100, 70,
			105, 101, 108, 100, 0, 0, 0, 0, 51, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			85, 73, 76, 97, 121, 111, 117, 116, 82, 101,
			112, 101, 97, 116, 66, 117, 116, 116, 111, 110,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 85, 73, 76, 97,
			121, 111, 117, 116, 83, 112, 97, 99, 101, 0,
			0, 0, 0, 48, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 85, 73, 76, 97, 121,
			111, 117, 116, 84, 101, 120, 116, 70, 105, 101,
			108, 100, 0, 0, 0, 0, 48, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 85, 73,
			76, 97, 121, 111, 117, 116, 84, 101, 120, 116,
			76, 97, 98, 101, 108, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 85, 73, 76, 97, 121, 111, 117, 116, 84,
			111, 103, 103, 108, 101, 0, 0, 0, 0, 46,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 85, 73, 76, 97, 121, 111, 117, 116, 84,
			111, 111, 108, 98, 97, 114, 0, 0, 0, 0,
			53, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 85, 73, 76, 97, 121, 111, 117, 116,
			86, 101, 114, 116, 105, 99, 97, 108, 83, 108,
			105, 100, 101, 114, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			115, 101, 71, 85, 73, 76, 97, 121, 111, 117,
			116, 0, 0, 0, 0, 36, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 110, 121, 75,
			101, 121, 0, 0, 0, 0, 37, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			65, 120, 105, 115, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 65, 120, 105, 115, 86, 101, 99, 116,
			111, 114, 0, 0, 0, 0, 39, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			66, 117, 116, 116, 111, 110, 0, 0, 0, 0,
			43, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 66, 117, 116, 116, 111, 110,
			68, 111, 119, 110, 0, 0, 0, 0, 41, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 66, 117, 116, 116, 111, 110, 85, 112,
			0, 0, 0, 0, 36, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 75, 101,
			121, 0, 0, 0, 0, 40, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 75,
			101, 121, 68, 111, 119, 110, 0, 0, 0, 0,
			38, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 75, 101, 121, 85, 112, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 77, 111, 117,
			115, 101, 66, 117, 116, 116, 111, 110, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 77, 111, 117, 115,
			101, 66, 117, 116, 116, 111, 110, 68, 111, 119,
			110, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 77,
			111, 117, 115, 101, 66, 117, 116, 116, 111, 110,
			85, 112, 0, 0, 0, 0, 39, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			77, 111, 117, 115, 101, 88, 0, 0, 0, 0,
			39, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 77, 111, 117, 115, 101, 89,
			0, 0, 0, 0, 39, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 77, 111, 117, 115, 101,
			76, 111, 111, 107, 0, 0, 0, 0, 40, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 77,
			111, 117, 115, 101, 76, 111, 111, 107, 50, 0,
			0, 0, 0, 39, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 77, 111, 117, 115, 101, 80,
			105, 99, 107, 0, 0, 0, 0, 44, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 77, 111,
			117, 115, 101, 80, 105, 99, 107, 69, 118, 101,
			110, 116, 0, 0, 0, 0, 44, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 82, 101, 115,
			101, 116, 73, 110, 112, 117, 116, 65, 120, 101,
			115, 0, 0, 0, 0, 40, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 99, 114, 101,
			101, 110, 80, 105, 99, 107, 0, 0, 0, 0,
			56, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			73, 110, 112, 117, 116, 84, 111, 87, 111, 114,
			108, 100, 83, 112, 97, 99, 101, 0, 0, 0,
			0, 40, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 87, 97, 105, 116, 65, 110, 121, 75,
			101, 121, 0, 0, 0, 0, 47, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 68, 111, 110,
			116, 68, 101, 115, 116, 114, 111, 121, 79, 110,
			76, 111, 97, 100, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 76,
			111, 97, 100, 76, 101, 118, 101, 108, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 76, 111, 97, 100, 76, 101, 118,
			101, 108, 78, 117, 109, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			82, 101, 115, 116, 97, 114, 116, 76, 101, 118,
			101, 108, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			76, 105, 103, 104, 116, 67, 111, 108, 111, 114,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 76, 105,
			103, 104, 116, 67, 111, 111, 107, 105, 101, 0,
			0, 0, 0, 43, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 76, 105, 103,
			104, 116, 70, 108, 97, 114, 101, 0, 0, 0,
			0, 47, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 76, 105, 103, 104, 116,
			73, 110, 116, 101, 110, 115, 105, 116, 121, 0,
			0, 0, 0, 43, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 76, 105, 103,
			104, 116, 82, 97, 110, 103, 101, 0, 0, 0,
			0, 47, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 76, 105, 103, 104, 116,
			83, 112, 111, 116, 65, 110, 103, 108, 101, 0,
			0, 0, 0, 42, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 76, 105, 103,
			104, 116, 84, 121, 112, 101, 0, 0, 0, 0,
			47, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 83, 104, 97, 100, 111, 119,
			83, 116, 114, 101, 110, 103, 116, 104, 0, 0,
			0, 0, 41, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 66, 111, 111, 108, 65, 108, 108,
			84, 114, 117, 101, 0, 0, 0, 0, 41, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 66,
			111, 111, 108, 65, 110, 121, 84, 114, 117, 101,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 66, 111, 111, 108, 67,
			104, 97, 110, 103, 101, 100, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 66, 111, 111, 108, 78, 111, 110, 101, 84,
			114, 117, 101, 0, 0, 0, 0, 42, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 66, 111,
			111, 108, 79, 112, 101, 114, 97, 116, 111, 114,
			0, 0, 0, 0, 38, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 66, 111, 111, 108, 84,
			101, 115, 116, 0, 0, 0, 0, 42, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 67, 111,
			108, 111, 114, 67, 111, 109, 112, 97, 114, 101,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 69, 110, 117, 109, 67,
			111, 109, 112, 97, 114, 101, 0, 0, 0, 0,
			40, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 69, 110, 117, 109, 83, 119, 105, 116, 99,
			104, 0, 0, 0, 0, 42, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 70, 108, 111, 97,
			116, 67, 104, 97, 110, 103, 101, 100, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 70, 108, 111, 97, 116, 67, 111,
			109, 112, 97, 114, 101, 0, 0, 0, 0, 43,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			70, 108, 111, 97, 116, 83, 105, 103, 110, 84,
			101, 115, 116, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 70, 108,
			111, 97, 116, 83, 119, 105, 116, 99, 104, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 70, 115, 109, 72, 97, 115,
			86, 97, 114, 105, 97, 98, 108, 101, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 70, 115, 109, 83, 116, 97, 116,
			101, 83, 119, 105, 116, 99, 104, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 70, 115, 109, 83, 116, 97, 116, 101,
			84, 101, 115, 116, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 67,
			104, 97, 110, 103, 101, 100, 0, 0, 0, 0,
			47, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 97, 109, 101, 79, 98, 106, 101, 99,
			116, 67, 111, 109, 112, 97, 114, 101, 0, 0,
			0, 0, 50, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 67, 111, 109, 112, 97, 114, 101,
			84, 97, 103, 0, 0, 0, 0, 51, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 72, 97,
			115, 67, 104, 105, 108, 100, 114, 101, 110, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 73, 115, 67, 104, 105, 108,
			100, 79, 102, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 73, 115,
			78, 117, 108, 108, 0, 0, 0, 0, 49, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			97, 109, 101, 79, 98, 106, 101, 99, 116, 73,
			115, 86, 105, 115, 105, 98, 108, 101, 0, 0,
			0, 0, 57, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 73, 115, 86, 105, 115, 105, 98,
			108, 101, 84, 111, 67, 97, 109, 101, 114, 97,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 84, 97, 103, 83, 119,
			105, 116, 99, 104, 0, 0, 0, 0, 40, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 73,
			110, 116, 67, 104, 97, 110, 103, 101, 100, 0,
			0, 0, 0, 40, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 73, 110, 116, 67, 111, 109,
			112, 97, 114, 101, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 73,
			110, 116, 83, 119, 105, 116, 99, 104, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 79, 98, 106, 101, 99, 116, 67,
			111, 109, 112, 97, 114, 101, 0, 0, 0, 0,
			41, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 82, 101, 99, 116, 67, 111, 109, 112, 97,
			114, 101, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 116, 114,
			105, 110, 103, 67, 104, 97, 110, 103, 101, 100,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 116, 114, 105, 110,
			103, 67, 111, 109, 112, 97, 114, 101, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 114, 105, 110, 103, 67,
			111, 110, 116, 97, 105, 110, 115, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 116, 114, 105, 110, 103, 83, 119,
			105, 116, 99, 104, 0, 0, 0, 0, 44, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			101, 99, 116, 111, 114, 50, 67, 111, 109, 112,
			97, 114, 101, 0, 0, 0, 0, 44, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 101,
			99, 116, 111, 114, 51, 67, 111, 109, 112, 97,
			114, 101, 0, 0, 0, 0, 41, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			77, 97, 116, 101, 114, 105, 97, 108, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 77, 97, 116, 101,
			114, 105, 97, 108, 84, 101, 120, 116, 117, 114,
			101, 0, 0, 0, 0, 41, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 77,
			97, 116, 101, 114, 105, 97, 108, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 77, 97, 116, 101, 114,
			105, 97, 108, 67, 111, 108, 111, 114, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 77, 97, 116, 101,
			114, 105, 97, 108, 70, 108, 111, 97, 116, 0,
			0, 0, 0, 53, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 77, 97, 116,
			101, 114, 105, 97, 108, 77, 111, 118, 105, 101,
			84, 101, 120, 116, 117, 114, 101, 0, 0, 0,
			0, 48, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 77, 97, 116, 101, 114,
			105, 97, 108, 84, 101, 120, 116, 117, 114, 101,
			0, 0, 0, 0, 46, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 77, 97,
			116, 101, 114, 105, 97, 108, 86, 97, 108, 117,
			101, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 82,
			97, 110, 100, 111, 109, 77, 97, 116, 101, 114,
			105, 97, 108, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 84, 101, 120, 116, 117, 114, 101, 79, 102,
			102, 115, 101, 116, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 84, 101, 120, 116, 117, 114, 101, 83,
			99, 97, 108, 101, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 84, 101, 120, 116, 117, 114, 101, 86,
			97, 108, 117, 101, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 86, 105, 115, 105, 98, 105, 108, 105,
			116, 121, 0, 0, 0, 0, 38, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 66, 111, 111,
			108, 70, 108, 105, 112, 0, 0, 0, 0, 38,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			70, 108, 111, 97, 116, 65, 98, 115, 0, 0,
			0, 0, 38, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 70, 108, 111, 97, 116, 65, 100,
			100, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 70, 108, 111, 97,
			116, 65, 100, 100, 77, 117, 108, 116, 105, 112,
			108, 101, 0, 0, 0, 0, 40, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 70, 108, 111,
			97, 116, 67, 108, 97, 109, 112, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 70, 108, 111, 97, 116, 68, 101, 108,
			116, 97, 65, 110, 103, 108, 101, 0, 0, 0,
			0, 41, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 70, 108, 111, 97, 116, 68, 105, 118,
			105, 100, 101, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 70, 108,
			111, 97, 116, 73, 110, 116, 101, 114, 112, 111,
			108, 97, 116, 101, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 70,
			108, 111, 97, 116, 77, 117, 108, 116, 105, 112,
			108, 121, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 70, 108, 111,
			97, 116, 79, 112, 101, 114, 97, 116, 111, 114,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 70, 108, 111, 97, 116,
			83, 117, 98, 116, 114, 97, 99, 116, 0, 0,
			0, 0, 39, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 70, 108, 111, 97, 116, 87, 114,
			97, 112, 0, 0, 0, 0, 36, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 73, 110, 116,
			65, 100, 100, 0, 0, 0, 0, 38, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 73, 110,
			116, 67, 108, 97, 109, 112, 0, 0, 0, 0,
			41, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 73, 110, 116, 79, 112, 101, 114, 97, 116,
			111, 114, 0, 0, 0, 0, 41, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 73, 110, 116,
			83, 117, 98, 116, 114, 97, 99, 116, 0, 0,
			0, 0, 37, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 73, 110, 116, 87, 114, 97, 112,
			0, 0, 0, 0, 40, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 82, 97, 110, 100, 111,
			109, 66, 111, 111, 108, 0, 0, 0, 0, 41,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			82, 97, 110, 100, 111, 109, 70, 108, 111, 97,
			116, 0, 0, 0, 0, 39, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 97, 110, 100,
			111, 109, 73, 110, 116, 0, 0, 0, 0, 41,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 97, 109, 112, 108, 101, 67, 117, 114, 118,
			101, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 108, 101,
			99, 116, 82, 97, 110, 100, 111, 109, 70, 108,
			111, 97, 116, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			108, 101, 99, 116, 82, 97, 110, 100, 111, 109,
			73, 110, 116, 0, 0, 0, 0, 42, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 66, 111, 111, 108, 86, 97, 108, 117, 101,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 70, 108,
			111, 97, 116, 86, 97, 108, 117, 101, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 73, 110, 116, 70,
			114, 111, 109, 70, 108, 111, 97, 116, 0, 0,
			0, 0, 41, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 73, 110, 116, 86,
			97, 108, 117, 101, 0, 0, 0, 0, 48, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			101, 99, 116, 111, 114, 50, 82, 97, 110, 100,
			111, 109, 86, 97, 108, 117, 101, 0, 0, 0,
			0, 44, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 77, 97, 116, 104, 69, 120, 112, 114,
			101, 115, 115, 105, 111, 110, 0, 0, 0, 0,
			53, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			46, 77, 97, 116, 104, 69, 120, 112, 114, 101,
			115, 115, 105, 111, 110, 124, 80, 114, 111, 112,
			101, 114, 116, 121, 0, 0, 0, 0, 24, 77,
			97, 116, 104, 111, 115, 46, 80, 97, 114, 115,
			101, 114, 124, 77, 97, 116, 104, 80, 97, 114,
			115, 101, 114, 0, 0, 0, 0, 44, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 86, 101, 114, 116, 101, 120, 67, 111, 117,
			110, 116, 0, 0, 0, 0, 47, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			86, 101, 114, 116, 101, 120, 80, 111, 115, 105,
			116, 105, 111, 110, 0, 0, 0, 0, 55, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 77,
			111, 118, 105, 101, 84, 101, 120, 116, 117, 114,
			101, 65, 117, 100, 105, 111, 83, 101, 116, 116,
			105, 110, 103, 115, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 80,
			97, 117, 115, 101, 77, 111, 118, 105, 101, 84,
			101, 120, 116, 117, 114, 101, 0, 0, 0, 0,
			46, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 80, 108, 97, 121, 77, 111, 118, 105, 101,
			84, 101, 120, 116, 117, 114, 101, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 116, 111, 112, 77, 111, 118, 105,
			101, 84, 101, 120, 116, 117, 114, 101, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 100, 100, 69, 120, 112, 108,
			111, 115, 105, 111, 110, 70, 111, 114, 99, 101,
			0, 0, 0, 0, 38, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 100, 100, 70, 111,
			114, 99, 101, 0, 0, 0, 0, 39, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 65, 100,
			100, 84, 111, 114, 113, 117, 101, 0, 0, 0,
			0, 44, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 67, 111, 108, 108, 105, 115, 105, 111,
			110, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			39, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 69, 120, 112, 108, 111, 115, 105, 111, 110,
			0, 0, 0, 0, 42, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 70, 105, 110, 100, 79,
			118, 101, 114, 108, 97, 112, 115, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 67, 111, 108, 108, 105,
			115, 105, 111, 110, 73, 110, 102, 111, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 74, 111, 105, 110,
			116, 66, 114, 101, 97, 107, 73, 110, 102, 111,
			0, 0, 0, 0, 37, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 77, 97,
			115, 115, 0, 0, 0, 0, 54, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			80, 97, 114, 116, 105, 99, 108, 101, 67, 111,
			108, 108, 105, 115, 105, 111, 110, 73, 110, 102,
			111, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 82,
			97, 121, 99, 97, 115, 116, 65, 108, 108, 73,
			110, 102, 111, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 82, 97, 121, 99, 97, 115, 116, 72, 105,
			116, 73, 110, 102, 111, 0, 0, 0, 0, 38,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 83, 112, 101, 101, 100, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 84, 114, 105, 103,
			103, 101, 114, 73, 110, 102, 111, 0, 0, 0,
			0, 41, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 86, 101, 108, 111, 99,
			105, 116, 121, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 73, 115,
			75, 105, 110, 101, 109, 97, 116, 105, 99, 0,
			0, 0, 0, 40, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 73, 115, 83, 108, 101, 101,
			112, 105, 110, 103, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 77,
			111, 118, 101, 80, 111, 115, 105, 116, 105, 111,
			110, 0, 0, 0, 0, 37, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 97, 121, 99,
			97, 115, 116, 0, 0, 0, 0, 40, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 82, 97,
			121, 99, 97, 115, 116, 65, 108, 108, 0, 0,
			0, 0, 51, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 86, 101, 108, 111,
			99, 105, 116, 121, 0, 0, 0, 0, 37, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 68, 114, 97, 103, 0, 0, 0, 0,
			40, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 71, 114, 97, 118, 105, 116,
			121, 0, 0, 0, 0, 44, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 73,
			115, 75, 105, 110, 101, 109, 97, 116, 105, 99,
			0, 0, 0, 0, 51, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 74, 111,
			105, 110, 116, 67, 111, 110, 110, 101, 99, 116,
			101, 100, 66, 111, 100, 121, 0, 0, 0, 0,
			37, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 77, 97, 115, 115, 0, 0,
			0, 0, 41, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 86, 101, 108, 111,
			99, 105, 116, 121, 0, 0, 0, 0, 35, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			108, 101, 101, 112, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 84,
			114, 97, 110, 115, 108, 97, 116, 101, 80, 111,
			115, 105, 116, 105, 111, 110, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 84, 114, 105, 103, 103, 101, 114, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 40, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 115,
			101, 71, 114, 97, 118, 105, 116, 121, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 87, 97, 107, 101, 65, 108, 108,
			82, 105, 103, 105, 100, 66, 111, 100, 105, 101,
			115, 0, 0, 0, 0, 36, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 87, 97, 107, 101,
			85, 112, 0, 0, 0, 0, 40, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 65, 100, 100,
			70, 111, 114, 99, 101, 50, 100, 0, 0, 0,
			0, 48, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 65, 100, 100, 82, 101, 108, 97, 116,
			105, 118, 101, 70, 111, 114, 99, 101, 50, 100,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 65, 100, 100, 84, 111,
			114, 113, 117, 101, 50, 100, 0, 0, 0, 0,
			46, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 67, 111, 108, 108, 105, 115, 105, 111, 110,
			50, 100, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 48, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 67, 111, 108, 108, 105,
			115, 105, 111, 110, 50, 100, 73, 110, 102, 111,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 74, 111,
			105, 110, 116, 66, 114, 101, 97, 107, 50, 100,
			73, 110, 102, 111, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 77, 97, 115, 115, 50, 100, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 78, 101, 120, 116,
			76, 105, 110, 101, 67, 97, 115, 116, 50, 100,
			0, 0, 0, 0, 50, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 78, 101,
			120, 116, 79, 118, 101, 114, 108, 97, 112, 65,
			114, 101, 97, 50, 100, 0, 0, 0, 0, 52,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 78, 101, 120, 116, 79, 118, 101,
			114, 108, 97, 112, 67, 105, 114, 99, 108, 101,
			50, 100, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			78, 101, 120, 116, 79, 118, 101, 114, 108, 97,
			112, 80, 111, 105, 110, 116, 50, 100, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 78, 101, 120, 116,
			82, 97, 121, 67, 97, 115, 116, 50, 100, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 82, 97, 121,
			67, 97, 115, 116, 72, 105, 116, 50, 100, 73,
			110, 102, 111, 0, 0, 0, 0, 40, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 83, 112, 101, 101, 100, 50, 100, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 84, 114, 105, 103,
			103, 101, 114, 50, 100, 73, 110, 102, 111, 0,
			0, 0, 0, 43, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 86, 101, 108,
			111, 99, 105, 116, 121, 50, 100, 0, 0, 0,
			0, 44, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 73, 115, 70, 105, 120, 101, 100, 65,
			110, 103, 108, 101, 50, 100, 0, 0, 0, 0,
			43, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 73, 115, 75, 105, 110, 101, 109, 97, 116,
			105, 99, 50, 100, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 73,
			115, 83, 108, 101, 101, 112, 105, 110, 103, 50,
			100, 0, 0, 0, 0, 40, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 76, 105, 110, 101,
			67, 97, 115, 116, 50, 100, 0, 0, 0, 0,
			38, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 76, 111, 111, 107, 65, 116, 50, 100, 0,
			0, 0, 0, 48, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 76, 111, 111, 107, 65, 116,
			50, 100, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 0, 0, 0, 0, 41, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 77, 111, 117,
			115, 101, 80, 105, 99, 107, 50, 100, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 77, 111, 117, 115, 101, 80, 105,
			99, 107, 50, 100, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 77, 111, 118, 101, 80, 111,
			115, 105, 116, 105, 111, 110, 50, 100, 0, 0,
			0, 0, 39, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 82, 97, 121, 67, 97, 115, 116,
			50, 100, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 99, 114,
			101, 101, 110, 80, 105, 99, 107, 50, 100, 0,
			0, 0, 0, 52, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 67, 111, 108,
			108, 105, 100, 101, 114, 50, 100, 73, 115, 84,
			114, 105, 103, 103, 101, 114, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 71, 114, 97, 118, 105, 116,
			121, 50, 100, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 71, 114, 97, 118, 105, 116, 121, 50, 100,
			83, 99, 97, 108, 101, 0, 0, 0, 0, 55,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 72, 105, 110, 103, 101, 74, 111,
			105, 110, 116, 50, 100, 80, 114, 111, 112, 101,
			114, 116, 105, 101, 115, 0, 0, 0, 0, 47,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 73, 115, 70, 105, 120, 101, 100,
			65, 110, 103, 108, 101, 50, 100, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 73, 115, 75, 105, 110,
			101, 109, 97, 116, 105, 99, 50, 100, 0, 0,
			0, 0, 39, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 77, 97, 115, 115,
			50, 100, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			86, 101, 108, 111, 99, 105, 116, 121, 50, 100,
			0, 0, 0, 0, 55, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 87, 104,
			101, 101, 108, 74, 111, 105, 110, 116, 50, 100,
			80, 114, 111, 112, 101, 114, 116, 105, 101, 115,
			0, 0, 0, 0, 37, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 108, 101, 101, 112,
			50, 100, 0, 0, 0, 0, 44, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 109, 111,
			111, 116, 104, 76, 111, 111, 107, 65, 116, 50,
			100, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 84, 111, 117, 99,
			104, 79, 98, 106, 101, 99, 116, 50, 100, 69,
			118, 101, 110, 116, 0, 0, 0, 0, 49, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 84,
			114, 97, 110, 115, 108, 97, 116, 101, 80, 111,
			115, 105, 116, 105, 111, 110, 50, 100, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 84, 114, 105, 103, 103, 101, 114,
			50, 100, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 50, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 87, 97, 107, 101, 65, 108, 108, 82,
			105, 103, 105, 100, 66, 111, 100, 105, 101, 115,
			50, 100, 0, 0, 0, 0, 38, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 87, 97, 107,
			101, 85, 112, 50, 100, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			80, 108, 97, 121, 101, 114, 80, 114, 101, 102,
			115, 68, 101, 108, 101, 116, 101, 65, 108, 108,
			0, 0, 0, 0, 50, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 80, 108, 97, 121, 101,
			114, 80, 114, 101, 102, 115, 68, 101, 108, 101,
			116, 101, 75, 101, 121, 0, 0, 0, 0, 49,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			80, 108, 97, 121, 101, 114, 80, 114, 101, 102,
			115, 71, 101, 116, 70, 108, 111, 97, 116, 0,
			0, 0, 0, 47, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 80, 108, 97, 121, 101, 114,
			80, 114, 101, 102, 115, 71, 101, 116, 73, 110,
			116, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 80, 108, 97, 121,
			101, 114, 80, 114, 101, 102, 115, 71, 101, 116,
			83, 116, 114, 105, 110, 103, 0, 0, 0, 0,
			47, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 80, 108, 97, 121, 101, 114, 80, 114, 101,
			102, 115, 72, 97, 115, 75, 101, 121, 0, 0,
			0, 0, 53, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 76, 111, 97, 100, 86, 97,
			114, 105, 97, 98, 108, 101, 0, 0, 0, 0,
			53, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 80, 108, 97, 121, 101, 114, 80, 114, 101,
			102, 115, 83, 97, 118, 101, 86, 97, 114, 105,
			97, 98, 108, 101, 0, 0, 0, 0, 49, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 80,
			108, 97, 121, 101, 114, 80, 114, 101, 102, 115,
			83, 101, 116, 70, 108, 111, 97, 116, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 83, 101, 116, 73, 110, 116,
			0, 0, 0, 0, 50, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 80, 108, 97, 121, 101,
			114, 80, 114, 101, 102, 115, 83, 101, 116, 83,
			116, 114, 105, 110, 103, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			82, 101, 98, 117, 105, 108, 100, 84, 101, 120,
			116, 117, 114, 101, 115, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 80, 114, 111, 99, 101, 100, 117,
			114, 97, 108, 66, 111, 111, 108, 101, 97, 110,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 80, 114,
			111, 99, 101, 100, 117, 114, 97, 108, 67, 111,
			108, 111, 114, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 80, 114, 111, 99, 101, 100, 117, 114, 97,
			108, 70, 108, 111, 97, 116, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 80, 114, 111, 99, 101, 100,
			117, 114, 97, 108, 86, 101, 99, 116, 111, 114,
			50, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 80,
			114, 111, 99, 101, 100, 117, 114, 97, 108, 86,
			101, 99, 116, 111, 114, 51, 0, 0, 0, 0,
			54, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 81, 117, 97, 116, 101, 114,
			110, 105, 111, 110, 69, 117, 108, 101, 114, 65,
			110, 103, 108, 101, 115, 0, 0, 0, 0, 55,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 70, 114, 111, 109, 82, 111, 116,
			97, 116, 105, 111, 110, 0, 0, 0, 0, 65,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 77, 117, 108, 116, 105, 112, 108,
			105, 101, 100, 66, 121, 81, 117, 97, 116, 101,
			114, 110, 105, 111, 110, 0, 0, 0, 0, 61,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 77, 117, 108, 116, 105, 112, 108,
			105, 101, 100, 66, 121, 86, 101, 99, 116, 111,
			114, 0, 0, 0, 0, 49, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 81, 117, 97, 116,
			101, 114, 110, 105, 111, 110, 65, 110, 103, 108,
			101, 65, 120, 105, 115, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			81, 117, 97, 116, 101, 114, 110, 105, 111, 110,
			66, 97, 115, 101, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 47, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 81, 117, 97, 116, 101,
			114, 110, 105, 111, 110, 67, 111, 109, 112, 97,
			114, 101, 0, 0, 0, 0, 45, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 81, 117, 97,
			116, 101, 114, 110, 105, 111, 110, 69, 117, 108,
			101, 114, 0, 0, 0, 0, 47, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 81, 117, 97,
			116, 101, 114, 110, 105, 111, 110, 73, 110, 118,
			101, 114, 115, 101, 0, 0, 0, 0, 44, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 81,
			117, 97, 116, 101, 114, 110, 105, 111, 110, 76,
			101, 114, 112, 0, 0, 0, 0, 52, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 81, 117,
			97, 116, 101, 114, 110, 105, 111, 110, 76, 111,
			111, 107, 82, 111, 116, 97, 116, 105, 111, 110,
			0, 0, 0, 0, 53, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 81, 117, 97, 116, 101,
			114, 110, 105, 111, 110, 76, 111, 119, 80, 97,
			115, 115, 70, 105, 108, 116, 101, 114, 0, 0,
			0, 0, 53, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 82, 111, 116, 97, 116, 101, 84,
			111, 119, 97, 114, 100, 115, 0, 0, 0, 0,
			45, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 81, 117, 97, 116, 101, 114, 110, 105, 111,
			110, 83, 108, 101, 114, 112, 0, 0, 0, 0,
			43, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 82, 101, 99, 116, 70, 105,
			101, 108, 100, 115, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 82,
			101, 99, 116, 67, 111, 110, 116, 97, 105, 110,
			115, 0, 0, 0, 0, 42, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 101, 99, 116,
			79, 118, 101, 114, 108, 97, 112, 115, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 82, 101, 99, 116,
			70, 105, 101, 108, 100, 115, 0, 0, 0, 0,
			47, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 82, 101, 99, 116, 70, 114,
			111, 109, 80, 111, 105, 110, 116, 115, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 82, 101, 99, 116,
			86, 97, 108, 117, 101, 0, 0, 0, 0, 62,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 67, 111, 110, 116, 97, 105, 110,
			115, 83, 99, 114, 101, 101, 110, 80, 111, 105,
			110, 116, 0, 0, 0, 0, 57, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 82, 101, 99,
			116, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			70, 108, 105, 112, 76, 97, 121, 111, 117, 116,
			65, 120, 105, 115, 0, 0, 0, 0, 62, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 71, 101, 116, 65, 110, 99, 104, 111,
			114, 101, 100, 80, 111, 115, 105, 116, 105, 111,
			110, 0, 0, 0, 0, 55, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 71,
			101, 116, 65, 110, 99, 104, 111, 114, 77, 97,
			120, 0, 0, 0, 0, 55, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 71,
			101, 116, 65, 110, 99, 104, 111, 114, 77, 105,
			110, 0, 0, 0, 0, 61, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 71,
			101, 116, 65, 110, 99, 104, 111, 114, 77, 105,
			110, 65, 110, 100, 77, 97, 120, 0, 0, 0,
			0, 59, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 71, 101, 116, 76, 111,
			99, 97, 108, 80, 111, 115, 105, 116, 105, 111,
			110, 0, 0, 0, 0, 59, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 71,
			101, 116, 76, 111, 99, 97, 108, 82, 111, 116,
			97, 116, 105, 111, 110, 0, 0, 0, 0, 55,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 71, 101, 116, 79, 102, 102, 115,
			101, 116, 77, 97, 120, 0, 0, 0, 0, 55,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 71, 101, 116, 79, 102, 102, 115,
			101, 116, 77, 105, 110, 0, 0, 0, 0, 51,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 71, 101, 116, 80, 105, 118, 111,
			116, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 101, 99, 116,
			84, 114, 97, 110, 115, 102, 111, 114, 109, 71,
			101, 116, 82, 101, 99, 116, 0, 0, 0, 0,
			55, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 82, 101, 99, 116, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 71, 101, 116, 83, 105, 122,
			101, 68, 101, 108, 116, 97, 0, 0, 0, 0,
			59, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 82, 101, 99, 116, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 80, 105, 120, 101, 108, 65,
			100, 106, 117, 115, 116, 80, 111, 105, 110, 116,
			0, 0, 0, 0, 58, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 82, 101, 99, 116, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 80, 105,
			120, 101, 108, 65, 100, 106, 117, 115, 116, 82,
			101, 99, 116, 0, 0, 0, 0, 77, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 83, 99, 114, 101, 101, 110, 80, 111, 105,
			110, 116, 84, 111, 76, 111, 99, 97, 108, 80,
			111, 105, 110, 116, 73, 110, 82, 101, 99, 116,
			97, 110, 103, 108, 101, 0, 0, 0, 0, 77,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			82, 101, 99, 116, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 83, 99, 114, 101, 101, 110, 80,
			111, 105, 110, 116, 84, 111, 87, 111, 114, 108,
			100, 80, 111, 105, 110, 116, 73, 110, 82, 101,
			99, 116, 97, 110, 103, 108, 101, 0, 0, 0,
			0, 62, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 83, 101, 116, 65, 110,
			99, 104, 111, 114, 101, 100, 80, 111, 115, 105,
			116, 105, 111, 110, 0, 0, 0, 0, 55, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 83, 101, 116, 65, 110, 99, 104, 111,
			114, 77, 97, 120, 0, 0, 0, 0, 55, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 83, 101, 116, 65, 110, 99, 104, 111,
			114, 77, 105, 110, 0, 0, 0, 0, 61, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 82,
			101, 99, 116, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 83, 101, 116, 65, 110, 99, 104, 111,
			114, 77, 105, 110, 65, 110, 100, 77, 97, 120,
			0, 0, 0, 0, 64, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 82, 101, 99, 116, 84,
			114, 97, 110, 115, 102, 111, 114, 109, 83, 101,
			116, 65, 110, 99, 104, 111, 114, 82, 101, 99,
			116, 80, 111, 115, 105, 116, 105, 111, 110, 0,
			0, 0, 0, 59, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 83, 101, 116,
			76, 111, 99, 97, 108, 80, 111, 115, 105, 116,
			105, 111, 110, 0, 0, 0, 0, 59, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 83, 101, 116, 76, 111, 99, 97, 108, 82,
			111, 116, 97, 116, 105, 111, 110, 0, 0, 0,
			0, 55, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 83, 101, 116, 79, 102,
			102, 115, 101, 116, 77, 97, 120, 0, 0, 0,
			0, 55, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 83, 101, 116, 79, 102,
			102, 115, 101, 116, 77, 105, 110, 0, 0, 0,
			0, 51, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 82, 101, 99, 116, 84, 114, 97, 110,
			115, 102, 111, 114, 109, 83, 101, 116, 80, 105,
			118, 111, 116, 0, 0, 0, 0, 60, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 82, 101,
			99, 116, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 83, 101, 116, 83, 99, 114, 101, 101, 110,
			80, 111, 115, 105, 116, 105, 111, 110, 0, 0,
			0, 0, 66, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 82, 101, 99, 116, 84, 114, 97,
			110, 115, 102, 111, 114, 109, 83, 101, 116, 83,
			99, 114, 101, 101, 110, 82, 101, 99, 116, 70,
			114, 111, 109, 80, 111, 105, 110, 116, 115, 0,
			0, 0, 0, 55, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 83, 101, 116,
			83, 105, 122, 101, 68, 101, 108, 116, 97, 0,
			0, 0, 0, 61, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 82, 101, 99, 116, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 87, 111, 114,
			108, 100, 84, 111, 83, 99, 114, 101, 101, 110,
			80, 111, 105, 110, 116, 0, 0, 0, 0, 39,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			69, 110, 97, 98, 108, 101, 70, 111, 103, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 109, 98,
			105, 101, 110, 116, 76, 105, 103, 104, 116, 0,
			0, 0, 0, 46, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 70, 108, 97,
			114, 101, 83, 116, 114, 101, 110, 103, 116, 104,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 70, 111,
			103, 67, 111, 108, 111, 114, 0, 0, 0, 0,
			43, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 70, 111, 103, 68, 101, 110,
			115, 105, 116, 121, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 72, 97, 108, 111, 83, 116, 114, 101,
			110, 103, 116, 104, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 83, 107, 121, 98, 111, 120, 0, 0,
			0, 0, 50, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 65, 108, 108, 111, 119, 83, 99,
			101, 110, 101, 65, 99, 116, 105, 118, 97, 116,
			105, 111, 110, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 67, 114,
			101, 97, 116, 101, 83, 99, 101, 110, 101, 0,
			0, 0, 0, 62, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 83, 99, 101,
			110, 101, 65, 99, 116, 105, 118, 97, 116, 101,
			67, 104, 97, 110, 103, 101, 100, 69, 118, 101,
			110, 116, 68, 97, 116, 97, 0, 0, 0, 0,
			48, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 83, 99, 101, 110, 101, 66,
			117, 105, 108, 100, 73, 110, 100, 101, 120, 0,
			0, 0, 0, 43, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 83, 99, 101,
			110, 101, 67, 111, 117, 110, 116, 0, 0, 0,
			0, 58, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 83, 99, 101, 110, 101,
			67, 111, 117, 110, 116, 73, 110, 66, 117, 105,
			108, 100, 83, 101, 116, 116, 105, 110, 103, 115,
			0, 0, 0, 0, 45, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 83, 99,
			101, 110, 101, 73, 115, 68, 105, 114, 116, 121,
			0, 0, 0, 0, 46, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 83, 99,
			101, 110, 101, 73, 115, 76, 111, 97, 100, 101,
			100, 0, 0, 0, 0, 45, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 83,
			99, 101, 110, 101, 73, 115, 86, 97, 108, 105,
			100, 0, 0, 0, 0, 53, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 83,
			99, 101, 110, 101, 76, 111, 97, 100, 101, 100,
			69, 118, 101, 110, 116, 68, 97, 116, 97, 0,
			0, 0, 0, 42, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 83, 99, 101,
			110, 101, 78, 97, 109, 101, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 83, 99, 101, 110, 101, 80,
			97, 116, 104, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 83, 99, 101, 110, 101, 80, 114, 111, 112,
			101, 114, 116, 105, 101, 115, 0, 0, 0, 0,
			47, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 83, 99, 101, 110, 101, 82,
			111, 111, 116, 67, 111, 117, 110, 116, 0, 0,
			0, 0, 53, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 83, 99, 101, 110,
			101, 82, 111, 111, 116, 71, 97, 109, 101, 79,
			98, 106, 101, 99, 116, 115, 0, 0, 0, 0,
			55, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 83, 99, 101, 110, 101, 85,
			110, 108, 111, 97, 100, 101, 100, 69, 118, 101,
			110, 116, 68, 97, 116, 97, 0, 0, 0, 0,
			48, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 83, 99, 101, 110, 101, 65,
			99, 116, 105, 111, 110, 66, 97, 115, 101, 0,
			0, 0, 0, 39, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 76, 111, 97, 100, 83, 99,
			101, 110, 101, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 76, 111,
			97, 100, 83, 99, 101, 110, 101, 65, 115, 121,
			110, 99, 104, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 77, 101,
			114, 103, 101, 83, 99, 101, 110, 101, 115, 0,
			0, 0, 0, 51, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 77, 111, 118, 101, 71, 97,
			109, 101, 79, 98, 106, 101, 99, 116, 84, 111,
			83, 99, 101, 110, 101, 0, 0, 0, 0, 57,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 110, 100, 65, 99, 116, 105, 118, 101,
			83, 99, 101, 110, 101, 67, 104, 97, 110, 103,
			101, 100, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 50, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 110, 100, 83, 99, 101, 110,
			101, 76, 111, 97, 100, 101, 100, 69, 118, 101,
			110, 116, 0, 0, 0, 0, 52, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 110,
			100, 83, 99, 101, 110, 101, 85, 110, 108, 111,
			97, 100, 101, 100, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 65, 99, 116,
			105, 118, 101, 83, 99, 101, 110, 101, 0, 0,
			0, 0, 41, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 110, 108, 111, 97, 100, 83,
			99, 101, 110, 101, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			110, 108, 111, 97, 100, 83, 99, 101, 110, 101,
			65, 115, 121, 110, 99, 104, 0, 0, 0, 0,
			40, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 99, 114, 101, 101, 110, 87, 114, 97,
			112, 0, 0, 0, 0, 39, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 100, 100, 83,
			99, 114, 105, 112, 116, 0, 0, 0, 0, 39,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			65, 120, 105, 115, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 40, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 67, 97, 108, 108, 77, 101,
			116, 104, 111, 100, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 67,
			97, 108, 108, 83, 116, 97, 116, 105, 99, 77,
			101, 116, 104, 111, 100, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			69, 110, 97, 98, 108, 101, 66, 101, 104, 97,
			118, 105, 111, 117, 114, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			73, 110, 118, 111, 107, 101, 77, 101, 116, 104,
			111, 100, 0, 0, 0, 0, 41, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 110,
			100, 77, 101, 115, 115, 97, 103, 101, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 116, 97, 114, 116, 67, 111,
			114, 111, 117, 116, 105, 110, 101, 0, 0, 0,
			0, 39, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 83, 112, 114, 105, 116,
			101, 0, 0, 0, 0, 44, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 83,
			112, 114, 105, 116, 101, 67, 111, 108, 111, 114,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 83, 112,
			114, 105, 116, 101, 70, 108, 105, 112, 0, 0,
			0, 0, 54, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 83, 112, 114, 105,
			116, 101, 77, 97, 115, 107, 73, 110, 116, 101,
			114, 97, 99, 116, 105, 111, 110, 0, 0, 0,
			0, 51, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 83, 112, 114, 105, 116,
			101, 79, 114, 100, 101, 114, 73, 110, 76, 97,
			121, 101, 114, 0, 0, 0, 0, 51, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 83, 112, 114, 105, 116, 101, 83, 111, 114,
			116, 105, 110, 103, 76, 97, 121, 101, 114, 0,
			0, 0, 0, 48, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 115, 112, 114,
			105, 116, 101, 83, 111, 114, 116, 80, 111, 105,
			110, 116, 0, 0, 0, 0, 39, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			83, 112, 114, 105, 116, 101, 0, 0, 0, 0,
			44, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 83, 112, 114, 105, 116, 101,
			67, 111, 108, 111, 114, 0, 0, 0, 0, 43,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 83, 112, 114, 105, 116, 101, 70,
			108, 105, 112, 0, 0, 0, 0, 54, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 83, 112, 114, 105, 116, 101, 77, 97, 115,
			107, 73, 110, 116, 101, 114, 97, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			83, 112, 114, 105, 116, 101, 79, 114, 100, 101,
			114, 73, 110, 76, 97, 121, 101, 114, 0, 0,
			0, 0, 55, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 83, 112, 114, 105,
			116, 101, 83, 111, 114, 116, 105, 110, 103, 76,
			97, 121, 101, 114, 66, 121, 73, 100, 0, 0,
			0, 0, 57, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 83, 112, 114, 105,
			116, 101, 83, 111, 114, 116, 105, 110, 103, 76,
			97, 121, 101, 114, 66, 121, 78, 97, 109, 101,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 83, 112,
			114, 105, 116, 101, 83, 111, 114, 116, 80, 111,
			105, 110, 116, 0, 0, 0, 0, 51, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 66, 97,
			115, 101, 70, 115, 109, 86, 97, 114, 105, 97,
			98, 108, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 56, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 66, 97, 115, 101, 70, 115,
			109, 86, 97, 114, 105, 97, 98, 108, 101, 73,
			110, 100, 101, 120, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 66, 108, 111, 99, 107,
			69, 118, 101, 110, 116, 115, 0, 0, 0, 0,
			44, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 66, 114, 111, 97, 100, 99, 97, 115, 116,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 39,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			69, 110, 97, 98, 108, 101, 70, 83, 77, 0,
			0, 0, 0, 39, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 70, 105, 110, 105, 115, 104,
			70, 83, 77, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 70, 111,
			114, 119, 97, 114, 100, 65, 108, 108, 69, 118,
			101, 110, 116, 115, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 70,
			111, 114, 119, 97, 114, 100, 69, 118, 101, 110,
			116, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 69,
			118, 101, 110, 116, 66, 111, 111, 108, 68, 97,
			116, 97, 0, 0, 0, 0, 47, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			69, 118, 101, 110, 116, 70, 108, 111, 97, 116,
			68, 97, 116, 97, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 69, 118, 101, 110, 116, 73, 110, 102,
			111, 0, 0, 0, 0, 45, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 69,
			118, 101, 110, 116, 73, 110, 116, 68, 97, 116,
			97, 0, 0, 0, 0, 44, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 69,
			118, 101, 110, 116, 83, 101, 110, 116, 66, 121,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 69, 118,
			101, 110, 116, 83, 116, 114, 105, 110, 103, 68,
			97, 116, 97, 0, 0, 0, 0, 49, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 69, 118, 101, 110, 116, 86, 101, 99, 116,
			111, 114, 50, 68, 97, 116, 97, 0, 0, 0,
			0, 49, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 69, 118, 101, 110, 116,
			86, 101, 99, 116, 111, 114, 51, 68, 97, 116,
			97, 0, 0, 0, 0, 40, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 70,
			115, 109, 66, 111, 111, 108, 0, 0, 0, 0,
			41, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 70, 115, 109, 67, 111, 108,
			111, 114, 0, 0, 0, 0, 40, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 71, 101, 116,
			70, 115, 109, 69, 110, 117, 109, 0, 0, 0,
			0, 41, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 70, 115, 109, 70, 108,
			111, 97, 116, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 70, 115, 109, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 70, 115, 109, 73, 110, 116, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 70, 115, 109, 77,
			97, 116, 101, 114, 105, 97, 108, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 70, 115, 109, 79, 98,
			106, 101, 99, 116, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 70, 115, 109, 81, 117, 97, 116, 101,
			114, 110, 105, 111, 110, 0, 0, 0, 0, 40,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 70, 115, 109, 82, 101, 99, 116,
			0, 0, 0, 0, 41, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 70, 115,
			109, 83, 116, 97, 116, 101, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 70, 115, 109, 83, 116, 114,
			105, 110, 103, 0, 0, 0, 0, 43, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 70, 115, 109, 84, 101, 120, 116, 117, 114,
			101, 0, 0, 0, 0, 44, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 70,
			115, 109, 86, 97, 114, 105, 97, 98, 108, 101,
			0, 0, 0, 0, 45, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 70, 115,
			109, 86, 97, 114, 105, 97, 98, 108, 101, 115,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 70, 115,
			109, 86, 101, 99, 116, 111, 114, 50, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 70, 115, 109, 86,
			101, 99, 116, 111, 114, 51, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 76, 97, 115, 116, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 50, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 80, 114, 101, 118, 105, 111, 117, 115, 83,
			116, 97, 116, 101, 78, 97, 109, 101, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 111, 116, 111, 80, 114, 101,
			118, 105, 111, 117, 115, 83, 116, 97, 116, 101,
			0, 0, 0, 0, 42, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 73, 103, 110, 111, 114,
			101, 69, 118, 101, 110, 116, 115, 0, 0, 0,
			0, 47, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 75, 105, 108, 108, 68, 101, 108, 97,
			121, 101, 100, 69, 118, 101, 110, 116, 115, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 76, 97, 116, 101, 85, 112,
			100, 97, 116, 101, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 34, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 76, 111, 111, 112, 0, 0,
			0, 0, 39, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 76, 111, 111, 112, 83, 116, 97,
			116, 101, 0, 0, 0, 0, 44, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 78, 101, 120,
			116, 70, 114, 97, 109, 101, 69, 118, 101, 110,
			116, 0, 0, 0, 0, 41, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 82, 97, 110, 100,
			111, 109, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 36, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 82, 117, 110, 70, 83, 77, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 82, 117, 110, 70, 83, 77, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 39,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 110, 100, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 110, 100, 69, 118,
			101, 110, 116, 66, 121, 78, 97, 109, 101, 0,
			0, 0, 0, 44, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 110, 100, 69, 118,
			101, 110, 116, 84, 111, 70, 115, 109, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 110, 100, 82, 97, 110,
			100, 111, 109, 69, 118, 101, 110, 116, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 113, 117, 101, 110, 99,
			101, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 69, 118, 101, 110, 116, 68,
			97, 116, 97, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 69, 118, 101, 110, 116, 70, 108, 111, 97,
			116, 68, 97, 116, 97, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 69, 118, 101, 110, 116, 73, 110,
			116, 68, 97, 116, 97, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 69, 118, 101, 110, 116, 83, 116,
			114, 105, 110, 103, 68, 97, 116, 97, 0, 0,
			0, 0, 44, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 69, 118, 101, 110,
			116, 84, 97, 114, 103, 101, 116, 0, 0, 0,
			0, 40, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 70, 115, 109, 66, 111,
			111, 108, 0, 0, 0, 0, 41, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			70, 115, 109, 67, 111, 108, 111, 114, 0, 0,
			0, 0, 40, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 70, 115, 109, 69,
			110, 117, 109, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 70, 115, 109, 70, 108, 111, 97, 116, 0,
			0, 0, 0, 46, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 83, 101, 116, 70, 115, 109,
			71, 97, 109, 101, 79, 98, 106, 101, 99, 116,
			0, 0, 0, 0, 39, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 70, 115,
			109, 73, 110, 116, 0, 0, 0, 0, 44, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			101, 116, 70, 115, 109, 77, 97, 116, 101, 114,
			105, 97, 108, 0, 0, 0, 0, 42, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 70, 115, 109, 79, 98, 106, 101, 99, 116,
			0, 0, 0, 0, 46, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 70, 115,
			109, 81, 117, 97, 116, 101, 114, 110, 105, 111,
			110, 0, 0, 0, 0, 40, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 70,
			115, 109, 82, 101, 99, 116, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 70, 115, 109, 83, 116, 114,
			105, 110, 103, 0, 0, 0, 0, 43, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 70, 115, 109, 84, 101, 120, 116, 117, 114,
			101, 0, 0, 0, 0, 44, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 70,
			115, 109, 86, 97, 114, 105, 97, 98, 108, 101,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 83, 101, 116, 70, 115,
			109, 86, 101, 99, 116, 111, 114, 50, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 101, 116, 70, 115, 109, 86,
			101, 99, 116, 111, 114, 51, 0, 0, 0, 0,
			41, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 66, 117, 105, 108, 100, 83, 116, 114, 105,
			110, 103, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 70, 111, 114,
			109, 97, 116, 83, 116, 114, 105, 110, 103, 0,
			0, 0, 0, 43, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 83, 116, 114,
			105, 110, 103, 76, 101, 102, 116, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 83, 116, 114, 105, 110,
			103, 76, 101, 110, 103, 116, 104, 0, 0, 0,
			0, 44, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 83, 116, 114, 105, 110,
			103, 82, 105, 103, 104, 116, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 83, 117, 98, 115, 116, 114,
			105, 110, 103, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			108, 101, 99, 116, 82, 97, 110, 100, 111, 109,
			83, 116, 114, 105, 110, 103, 0, 0, 0, 0,
			44, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 101, 116, 83, 116, 114, 105, 110, 103,
			86, 97, 108, 117, 101, 0, 0, 0, 0, 42,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 116, 114, 105, 110, 103, 65, 112, 112, 101,
			110, 100, 0, 0, 0, 0, 40, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 116, 114,
			105, 110, 103, 74, 111, 105, 110, 0, 0, 0,
			0, 43, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 116, 114, 105, 110, 103, 82, 101,
			112, 108, 97, 99, 101, 0, 0, 0, 0, 41,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 116, 114, 105, 110, 103, 83, 112, 108, 105,
			116, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 83,
			121, 115, 116, 101, 109, 68, 97, 116, 101, 84,
			105, 109, 101, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 84, 105, 109, 101, 73, 110, 102, 111, 0,
			0, 0, 0, 39, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 80, 101, 114, 83, 101, 99,
			111, 110, 100, 0, 0, 0, 0, 40, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 82, 97,
			110, 100, 111, 109, 87, 97, 105, 116, 0, 0,
			0, 0, 39, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 83, 99, 97, 108, 101, 84, 105,
			109, 101, 0, 0, 0, 0, 34, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 87, 97, 105,
			116, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 65, 108, 105, 103,
			110, 84, 111, 68, 105, 114, 101, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 67, 108, 97,
			109, 112, 80, 111, 115, 105, 116, 105, 111, 110,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 67, 108, 97, 109, 112,
			82, 111, 116, 97, 116, 105, 111, 110, 0, 0,
			0, 0, 46, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 110, 103, 108,
			101, 84, 111, 84, 97, 114, 103, 101, 116, 0,
			0, 0, 0, 41, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 80, 111, 115,
			105, 116, 105, 111, 110, 0, 0, 0, 0, 43,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 80, 111, 115, 105, 116, 105, 111,
			110, 50, 100, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 82, 111, 116, 97, 116, 105, 111, 110, 0,
			0, 0, 0, 38, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 71, 101, 116, 83, 99, 97,
			108, 101, 0, 0, 0, 0, 55, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 73, 110, 118,
			101, 114, 115, 101, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 68, 105, 114, 101, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 73, 110, 118,
			101, 114, 115, 101, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 80, 111, 105, 110, 116, 0, 0,
			0, 0, 36, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 76, 111, 111, 107, 65, 116, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 76, 111, 111, 107, 65, 116,
			68, 105, 114, 101, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 40, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 77, 111, 118, 101, 79, 98,
			106, 101, 99, 116, 0, 0, 0, 0, 41, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 77,
			111, 118, 101, 84, 111, 119, 97, 114, 100, 115,
			0, 0, 0, 0, 36, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 82, 111, 116, 97, 116,
			101, 0, 0, 0, 0, 41, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 101, 116, 80,
			111, 115, 105, 116, 105, 111, 110, 0, 0, 0,
			0, 43, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 80, 111, 115, 105, 116,
			105, 111, 110, 50, 100, 0, 0, 0, 0, 47,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			83, 101, 116, 82, 97, 110, 100, 111, 109, 82,
			111, 116, 97, 116, 105, 111, 110, 0, 0, 0,
			0, 41, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 82, 111, 116, 97, 116,
			105, 111, 110, 0, 0, 0, 0, 38, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 83, 99, 97, 108, 101, 0, 0, 0, 0,
			40, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 83, 105, 109, 112, 108, 101, 76, 111, 111,
			107, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 109, 111, 111,
			116, 104, 70, 111, 108, 108, 111, 119, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 42, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 83,
			109, 111, 111, 116, 104, 76, 111, 111, 107, 65,
			116, 0, 0, 0, 0, 51, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 83, 109, 111, 111,
			116, 104, 76, 111, 111, 107, 65, 116, 68, 105,
			114, 101, 99, 116, 105, 111, 110, 0, 0, 0,
			0, 48, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 84, 114, 97, 110, 115, 102, 111, 114,
			109, 68, 105, 114, 101, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 44, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 84, 114, 97, 110, 115,
			102, 111, 114, 109, 80, 111, 105, 110, 116, 0,
			0, 0, 0, 39, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 84, 114, 97, 110, 115, 108,
			97, 116, 101, 0, 0, 0, 0, 40, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 67, 111, 115, 105, 110, 101, 0, 0,
			0, 0, 38, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 65, 83, 105, 110,
			101, 0, 0, 0, 0, 37, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 71, 101, 116, 65,
			116, 97, 110, 0, 0, 0, 0, 38, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 65, 116, 97, 110, 50, 0, 0, 0, 0,
			49, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 65, 116, 97, 110, 50, 70,
			114, 111, 109, 86, 101, 99, 116, 111, 114, 50,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 65, 116,
			97, 110, 50, 70, 114, 111, 109, 86, 101, 99,
			116, 111, 114, 51, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 71,
			101, 116, 67, 111, 115, 105, 110, 101, 0, 0,
			0, 0, 37, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 71, 101, 116, 83, 105, 110, 101,
			0, 0, 0, 0, 36, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 84, 97,
			110, 0, 0, 0, 0, 45, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 84, 119, 101, 101,
			110, 65, 99, 116, 105, 111, 110, 66, 97, 115,
			101, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 84, 119, 101, 101,
			110, 67, 111, 109, 112, 111, 110, 101, 110, 116,
			66, 97, 115, 101, 0, 0, 0, 0, 38, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			115, 124, 84, 119, 101, 101, 110, 69, 120, 116,
			101, 110, 115, 105, 111, 110, 115, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 84, 119, 101, 101, 110, 72, 101, 108,
			112, 101, 114, 115, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 84,
			119, 101, 101, 110, 80, 114, 111, 112, 101, 114,
			116, 121, 66, 97, 115, 101, 0, 0, 0, 0,
			47, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 84, 119, 101, 101, 110, 86, 97, 114, 105,
			97, 98, 108, 101, 66, 97, 115, 101, 0, 0,
			0, 0, 40, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 84, 119, 101, 101, 110, 65, 117,
			100, 105, 111, 0, 0, 0, 0, 41, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 84, 119,
			101, 101, 110, 67, 97, 109, 101, 114, 97, 0,
			0, 0, 0, 40, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 84, 119, 101, 101, 110, 67,
			111, 108, 111, 114, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 84,
			119, 101, 101, 110, 70, 97, 100, 101, 0, 0,
			0, 0, 40, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 84, 119, 101, 101, 110, 70, 108,
			111, 97, 116, 0, 0, 0, 0, 38, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 84, 119,
			101, 101, 110, 73, 110, 116, 0, 0, 0, 0,
			43, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 84, 119, 101, 101, 110, 80, 111, 115, 105,
			116, 105, 111, 110, 0, 0, 0, 0, 40, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 84,
			119, 101, 101, 110, 80, 117, 110, 99, 104, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 84, 119, 101, 101, 110, 81,
			117, 97, 116, 101, 114, 110, 105, 111, 110, 0,
			0, 0, 0, 39, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 84, 119, 101, 101, 110, 82,
			101, 99, 116, 0, 0, 0, 0, 43, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 84, 119,
			101, 101, 110, 82, 111, 116, 97, 116, 105, 111,
			110, 0, 0, 0, 0, 40, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 84, 119, 101, 101,
			110, 83, 99, 97, 108, 101, 0, 0, 0, 0,
			45, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 84, 119, 101, 101, 110, 85, 105, 80, 111,
			115, 105, 116, 105, 111, 110, 0, 0, 0, 0,
			41, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 84, 119, 101, 101, 110, 85, 105, 83, 105,
			122, 101, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 84, 119, 101,
			101, 110, 86, 101, 99, 116, 111, 114, 50, 0,
			0, 0, 0, 42, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 84, 119, 101, 101, 110, 86,
			101, 99, 116, 111, 114, 51, 0, 0, 0, 0,
			51, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 67, 97, 110, 118, 97, 115, 69,
			110, 97, 98, 108, 101, 82, 97, 121, 99, 97,
			115, 116, 0, 0, 0, 0, 57, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 67,
			97, 110, 118, 97, 115, 70, 111, 114, 99, 101,
			85, 112, 100, 97, 116, 101, 67, 97, 110, 118,
			97, 115, 101, 115, 0, 0, 0, 0, 51, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 67, 97, 110, 118, 97, 115, 71, 114, 111,
			117, 112, 83, 101, 116, 65, 108, 112, 104, 97,
			0, 0, 0, 0, 56, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 67, 97, 110,
			118, 97, 115, 71, 114, 111, 117, 112, 83, 101,
			116, 80, 114, 111, 112, 101, 114, 116, 105, 101,
			115, 0, 0, 0, 0, 58, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 67, 97,
			110, 118, 97, 115, 83, 99, 97, 108, 101, 114,
			71, 101, 116, 83, 99, 97, 108, 101, 70, 97,
			99, 116, 111, 114, 0, 0, 0, 0, 58, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 67, 97, 110, 118, 97, 115, 83, 99, 97,
			108, 101, 114, 83, 101, 116, 83, 99, 97, 108,
			101, 70, 97, 99, 116, 111, 114, 0, 0, 0,
			0, 55, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 67, 97, 110, 118, 97, 115, 82,
			97, 121, 99, 97, 115, 116, 70, 105, 108, 116,
			101, 114, 80, 114, 111, 120, 121, 0, 0, 0,
			0, 54, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 85, 105, 66, 111, 111, 108, 86,
			97, 108, 117, 101, 67, 104, 97, 110, 103, 101,
			100, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			43, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 85, 105, 67, 108, 105, 99, 107, 69,
			118, 101, 110, 116, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			85, 105, 68, 114, 97, 103, 69, 118, 101, 110,
			116, 115, 0, 0, 0, 0, 42, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 85, 105,
			68, 114, 111, 112, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 85, 105, 69, 110, 100,
			69, 100, 105, 116, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 42, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 85, 105, 69, 118, 101,
			110, 116, 66, 97, 115, 101, 0, 0, 0, 0,
			55, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 85, 105, 70, 108, 111, 97, 116, 86,
			97, 108, 117, 101, 67, 104, 97, 110, 103, 101,
			100, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			53, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 85, 105, 73, 110, 116, 86, 97, 108,
			117, 101, 67, 104, 97, 110, 103, 101, 100, 69,
			118, 101, 110, 116, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			85, 105, 80, 111, 105, 110, 116, 101, 114, 69,
			118, 101, 110, 116, 115, 0, 0, 0, 0, 57,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 85, 105, 86, 101, 99, 116, 111, 114, 50,
			86, 97, 108, 117, 101, 67, 104, 97, 110, 103,
			101, 100, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 52, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 69, 118, 101, 110, 116, 84, 114, 105,
			103, 103, 101, 114, 65, 99, 116, 105, 111, 110,
			66, 97, 115, 101, 0, 0, 0, 0, 60, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 69, 118, 101, 110, 116, 83, 121, 115, 116,
			101, 109, 67, 117, 114, 114, 101, 110, 116, 82,
			97, 121, 67, 97, 115, 116, 65, 108, 108, 0,
			0, 0, 0, 55, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 69, 118, 101, 110,
			116, 83, 121, 115, 116, 101, 109, 69, 120, 101,
			99, 117, 116, 101, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 54, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 71, 101, 116, 76,
			97, 115, 116, 80, 111, 105, 110, 116, 101, 114,
			68, 97, 116, 97, 73, 110, 102, 111, 0, 0,
			0, 0, 66, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 71, 101, 116, 76, 97,
			115, 116, 80, 111, 105, 110, 116, 101, 114, 69,
			118, 101, 110, 116, 68, 97, 116, 97, 73, 110,
			112, 117, 116, 66, 117, 116, 116, 111, 110, 0,
			0, 0, 0, 53, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 71, 101, 116, 83,
			101, 108, 101, 99, 116, 101, 100, 71, 97, 109,
			101, 79, 98, 106, 101, 99, 116, 0, 0, 0,
			0, 53, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 73, 115, 80, 111, 105, 110,
			116, 101, 114, 79, 118, 101, 114, 85, 105, 79,
			98, 106, 101, 99, 116, 0, 0, 0, 0, 48,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			85, 105, 79, 110, 66, 101, 103, 105, 110, 68,
			114, 97, 103, 69, 118, 101, 110, 116, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 79, 110, 67, 97, 110,
			99, 101, 108, 69, 118, 101, 110, 116, 0, 0,
			0, 0, 47, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 79, 110, 68, 101, 115,
			101, 108, 101, 99, 116, 69, 118, 101, 110, 116,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 79, 110, 68,
			114, 97, 103, 69, 118, 101, 110, 116, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 79, 110, 68, 114, 111,
			112, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			46, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 79, 110, 69, 110, 100, 68, 114,
			97, 103, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 62, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 79, 110, 73, 110, 105, 116,
			105, 97, 108, 105, 122, 101, 80, 111, 116, 101,
			110, 116, 105, 97, 108, 68, 114, 97, 103, 69,
			118, 101, 110, 116, 0, 0, 0, 0, 43, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 79, 110, 77, 111, 118, 101, 69, 118, 101,
			110, 116, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 79,
			110, 80, 111, 105, 110, 116, 101, 114, 67, 108,
			105, 99, 107, 69, 118, 101, 110, 116, 0, 0,
			0, 0, 50, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 79, 110, 80, 111, 105,
			110, 116, 101, 114, 68, 111, 119, 110, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 51, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			79, 110, 80, 111, 105, 110, 116, 101, 114, 69,
			110, 116, 101, 114, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 50, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 79, 110, 80, 111,
			105, 110, 116, 101, 114, 69, 120, 105, 116, 69,
			118, 101, 110, 116, 0, 0, 0, 0, 48, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 79, 110, 80, 111, 105, 110, 116, 101, 114,
			85, 112, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 79, 110, 83, 99, 114, 111,
			108, 108, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 79, 110, 83, 101, 108, 101,
			99, 116, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 79, 110, 83, 117, 98, 109,
			105, 116, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 53, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 79, 110, 85, 112, 100, 97,
			116, 101, 83, 101, 108, 101, 99, 116, 101, 100,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 53,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			85, 105, 83, 101, 116, 83, 101, 108, 101, 99,
			116, 101, 100, 71, 97, 109, 101, 79, 98, 106,
			101, 99, 116, 0, 0, 0, 0, 54, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			76, 97, 121, 111, 117, 116, 69, 108, 101, 109,
			101, 110, 116, 71, 101, 116, 86, 97, 108, 117,
			101, 115, 0, 0, 0, 0, 54, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 76,
			97, 121, 111, 117, 116, 69, 108, 101, 109, 101,
			110, 116, 83, 101, 116, 86, 97, 108, 117, 101,
			115, 0, 0, 0, 0, 63, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 78, 97,
			118, 105, 103, 97, 116, 105, 111, 110, 69, 120,
			112, 108, 105, 99, 105, 116, 71, 101, 116, 80,
			114, 111, 112, 101, 114, 116, 105, 101, 115, 0,
			0, 0, 0, 63, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 78, 97, 118, 105,
			103, 97, 116, 105, 111, 110, 69, 120, 112, 108,
			105, 99, 105, 116, 83, 101, 116, 80, 114, 111,
			112, 101, 114, 116, 105, 101, 115, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 71, 101, 116, 67, 111, 108,
			111, 114, 66, 108, 111, 99, 107, 0, 0, 0,
			0, 49, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 71, 101, 116, 73, 115, 73,
			110, 116, 101, 114, 97, 99, 116, 97, 98, 108,
			101, 0, 0, 0, 0, 49, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 78, 97,
			118, 105, 103, 97, 116, 105, 111, 110, 71, 101,
			116, 77, 111, 100, 101, 0, 0, 0, 0, 49,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			85, 105, 78, 97, 118, 105, 103, 97, 116, 105,
			111, 110, 83, 101, 116, 77, 111, 100, 101, 0,
			0, 0, 0, 52, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 83, 101, 116, 65,
			110, 105, 109, 97, 116, 105, 111, 110, 84, 114,
			105, 103, 103, 101, 114, 115, 0, 0, 0, 0,
			45, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 83, 101, 116, 67, 111, 108, 111,
			114, 66, 108, 111, 99, 107, 0, 0, 0, 0,
			49, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 83, 101, 116, 73, 115, 73, 110,
			116, 101, 114, 97, 99, 116, 97, 98, 108, 101,
			0, 0, 0, 0, 49, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 84, 114, 97,
			110, 115, 105, 116, 105, 111, 110, 71, 101, 116,
			84, 121, 112, 101, 0, 0, 0, 0, 49, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 84, 114, 97, 110, 115, 105, 116, 105, 111,
			110, 83, 101, 116, 84, 121, 112, 101, 0, 0,
			0, 0, 43, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 66, 117, 116, 116, 111,
			110, 65, 114, 114, 97, 121, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 66, 117, 116, 116, 111, 110, 79,
			110, 67, 108, 105, 99, 107, 69, 118, 101, 110,
			116, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 68, 114,
			111, 112, 68, 111, 119, 110, 65, 100, 100, 79,
			112, 116, 105, 111, 110, 115, 0, 0, 0, 0,
			52, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 68, 114, 111, 112, 68, 111, 119,
			110, 67, 108, 101, 97, 114, 79, 112, 116, 105,
			111, 110, 115, 0, 0, 0, 0, 55, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			68, 114, 111, 112, 68, 111, 119, 110, 71, 101,
			116, 83, 101, 108, 101, 99, 116, 101, 100, 68,
			97, 116, 97, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			68, 114, 111, 112, 68, 111, 119, 110, 83, 101,
			116, 86, 97, 108, 117, 101, 0, 0, 0, 0,
			53, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 71, 114, 97, 112, 104, 105, 99,
			67, 114, 111, 115, 115, 70, 97, 100, 101, 65,
			108, 112, 104, 97, 0, 0, 0, 0, 53, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 71, 114, 97, 112, 104, 105, 99, 67, 114,
			111, 115, 115, 70, 97, 100, 101, 67, 111, 108,
			111, 114, 0, 0, 0, 0, 47, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 71,
			114, 97, 112, 104, 105, 99, 71, 101, 116, 67,
			111, 108, 111, 114, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 71, 114, 97, 112, 104, 105, 99, 83, 101,
			116, 67, 111, 108, 111, 114, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 73, 109, 97, 103, 101, 71, 101,
			116, 70, 105, 108, 108, 65, 109, 111, 117, 110,
			116, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 73, 109,
			97, 103, 101, 71, 101, 116, 83, 112, 114, 105,
			116, 101, 0, 0, 0, 0, 50, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 73,
			109, 97, 103, 101, 83, 101, 116, 70, 105, 108,
			108, 65, 109, 111, 117, 110, 116, 0, 0, 0,
			0, 53, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 73, 109, 97, 103, 101, 83,
			101, 116, 82, 97, 121, 99, 97, 115, 116, 84,
			97, 114, 103, 101, 116, 0, 0, 0, 0, 46,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			85, 105, 73, 109, 97, 103, 101, 83, 101, 116,
			83, 112, 114, 105, 116, 101, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 65, 99, 116, 105, 118, 97, 116,
			101, 0, 0, 0, 0, 52, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 73, 110,
			112, 117, 116, 70, 105, 101, 108, 100, 68, 101,
			97, 99, 116, 105, 118, 97, 116, 101, 0, 0,
			0, 0, 59, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 73, 110, 112, 117, 116,
			70, 105, 101, 108, 100, 71, 101, 116, 67, 97,
			114, 101, 116, 66, 108, 105, 110, 107, 82, 97,
			116, 101, 0, 0, 0, 0, 59, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 73,
			110, 112, 117, 116, 70, 105, 101, 108, 100, 71,
			101, 116, 67, 104, 97, 114, 97, 99, 116, 101,
			114, 76, 105, 109, 105, 116, 0, 0, 0, 0,
			60, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 71, 101, 116, 72, 105, 100, 101,
			77, 111, 98, 105, 108, 101, 73, 110, 112, 117,
			116, 0, 0, 0, 0, 54, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 73, 110,
			112, 117, 116, 70, 105, 101, 108, 100, 71, 101,
			116, 73, 115, 70, 111, 99, 117, 115, 101, 100,
			0, 0, 0, 0, 56, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 73, 110, 112,
			117, 116, 70, 105, 101, 108, 100, 71, 101, 116,
			80, 108, 97, 99, 101, 72, 111, 108, 100, 101,
			114, 0, 0, 0, 0, 59, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 73, 110,
			112, 117, 116, 70, 105, 101, 108, 100, 71, 101,
			116, 83, 101, 108, 101, 99, 116, 105, 111, 110,
			67, 111, 108, 111, 114, 0, 0, 0, 0, 49,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			85, 105, 73, 110, 112, 117, 116, 70, 105, 101,
			108, 100, 71, 101, 116, 84, 101, 120, 116, 0,
			0, 0, 0, 56, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 73, 110, 112, 117,
			116, 70, 105, 101, 108, 100, 71, 101, 116, 84,
			101, 120, 116, 65, 115, 70, 108, 111, 97, 116,
			0, 0, 0, 0, 54, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 73, 110, 112,
			117, 116, 70, 105, 101, 108, 100, 71, 101, 116,
			84, 101, 120, 116, 65, 115, 73, 110, 116, 0,
			0, 0, 0, 56, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 73, 110, 112, 117,
			116, 70, 105, 101, 108, 100, 71, 101, 116, 87,
			97, 115, 67, 97, 110, 99, 101, 108, 101, 100,
			0, 0, 0, 0, 60, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 73, 110, 112,
			117, 116, 70, 105, 101, 108, 100, 77, 111, 118,
			101, 67, 97, 114, 101, 116, 84, 111, 84, 101,
			120, 116, 69, 110, 100, 0, 0, 0, 0, 62,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			85, 105, 73, 110, 112, 117, 116, 70, 105, 101,
			108, 100, 77, 111, 118, 101, 67, 97, 114, 101,
			116, 84, 111, 84, 101, 120, 116, 83, 116, 97,
			114, 116, 0, 0, 0, 0, 56, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 73,
			110, 112, 117, 116, 70, 105, 101, 108, 100, 79,
			110, 69, 110, 100, 69, 100, 105, 116, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 55, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			73, 110, 112, 117, 116, 70, 105, 101, 108, 100,
			79, 110, 83, 117, 98, 109, 105, 116, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 60, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			73, 110, 112, 117, 116, 70, 105, 101, 108, 100,
			79, 110, 86, 97, 108, 117, 101, 67, 104, 97,
			110, 103, 101, 69, 118, 101, 110, 116, 0, 0,
			0, 0, 56, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 73, 110, 112, 117, 116,
			70, 105, 101, 108, 100, 83, 101, 116, 65, 115,
			116, 101, 114, 105, 120, 67, 104, 97, 114, 0,
			0, 0, 0, 59, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 73, 110, 112, 117,
			116, 70, 105, 101, 108, 100, 83, 101, 116, 67,
			97, 114, 101, 116, 66, 108, 105, 110, 107, 82,
			97, 116, 101, 0, 0, 0, 0, 59, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			73, 110, 112, 117, 116, 70, 105, 101, 108, 100,
			83, 101, 116, 67, 104, 97, 114, 97, 99, 116,
			101, 114, 76, 105, 109, 105, 116, 0, 0, 0,
			0, 60, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 73, 110, 112, 117, 116, 70,
			105, 101, 108, 100, 83, 101, 116, 72, 105, 100,
			101, 77, 111, 98, 105, 108, 101, 73, 110, 112,
			117, 116, 0, 0, 0, 0, 56, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 73,
			110, 112, 117, 116, 70, 105, 101, 108, 100, 83,
			101, 116, 80, 108, 97, 99, 101, 72, 111, 108,
			100, 101, 114, 0, 0, 0, 0, 59, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			73, 110, 112, 117, 116, 70, 105, 101, 108, 100,
			83, 101, 116, 83, 101, 108, 101, 99, 116, 105,
			111, 110, 67, 111, 108, 111, 114, 0, 0, 0,
			0, 49, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 73, 110, 112, 117, 116, 70,
			105, 101, 108, 100, 83, 101, 116, 84, 101, 120,
			116, 0, 0, 0, 0, 56, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 82, 97,
			119, 73, 109, 97, 103, 101, 83, 101, 116, 82,
			97, 121, 99, 97, 115, 116, 84, 97, 114, 103,
			101, 116, 0, 0, 0, 0, 50, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 82,
			97, 119, 73, 109, 97, 103, 101, 83, 101, 116,
			84, 101, 120, 116, 117, 114, 101, 0, 0, 0,
			0, 39, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 85, 105, 82, 101, 98, 117, 105, 108,
			100, 0, 0, 0, 0, 53, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 83, 99,
			114, 111, 108, 108, 98, 97, 114, 71, 101, 116,
			68, 105, 114, 101, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 49, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 85, 105, 83, 99, 114, 111,
			108, 108, 98, 97, 114, 71, 101, 116, 86, 97,
			108, 117, 101, 0, 0, 0, 0, 55, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			83, 99, 114, 111, 108, 108, 98, 97, 114, 79,
			110, 86, 97, 108, 117, 101, 67, 104, 97, 110,
			103, 101, 100, 0, 0, 0, 0, 53, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			83, 99, 114, 111, 108, 108, 98, 97, 114, 83,
			101, 116, 68, 105, 114, 101, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 57, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 83, 99,
			114, 111, 108, 108, 98, 97, 114, 83, 101, 116,
			78, 117, 109, 98, 101, 114, 79, 102, 83, 116,
			101, 112, 115, 0, 0, 0, 0, 48, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			83, 99, 114, 111, 108, 108, 98, 97, 114, 83,
			101, 116, 83, 105, 122, 101, 0, 0, 0, 0,
			49, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 83, 99, 114, 111, 108, 108, 98,
			97, 114, 83, 101, 116, 86, 97, 108, 117, 101,
			0, 0, 0, 0, 55, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 83, 99, 114,
			111, 108, 108, 82, 101, 99, 116, 83, 101, 116,
			72, 111, 114, 105, 122, 111, 110, 116, 97, 108,
			0, 0, 0, 0, 63, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 83, 99, 114,
			111, 108, 108, 82, 101, 99, 116, 83, 101, 116,
			78, 111, 114, 109, 97, 108, 105, 122, 101, 100,
			80, 111, 115, 105, 116, 105, 111, 110, 0, 0,
			0, 0, 53, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 83, 99, 114, 111, 108,
			108, 82, 101, 99, 116, 83, 101, 116, 86, 101,
			114, 116, 105, 99, 97, 108, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 85, 105, 83, 108, 105, 100, 101, 114, 71,
			101, 116, 68, 105, 114, 101, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 47, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 85, 105, 83, 108,
			105, 100, 101, 114, 71, 101, 116, 77, 105, 110,
			77, 97, 120, 0, 0, 0, 0, 56, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			83, 108, 105, 100, 101, 114, 71, 101, 116, 78,
			111, 114, 109, 97, 108, 105, 122, 101, 100, 86,
			97, 108, 117, 101, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 83, 108, 105, 100, 101, 114, 71, 101, 116,
			86, 97, 108, 117, 101, 0, 0, 0, 0, 53,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			85, 105, 83, 108, 105, 100, 101, 114, 71, 101,
			116, 87, 104, 111, 108, 101, 78, 117, 109, 98,
			101, 114, 115, 0, 0, 0, 0, 57, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			83, 108, 105, 100, 101, 114, 79, 110, 86, 97,
			108, 117, 101, 67, 104, 97, 110, 103, 101, 100,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			85, 105, 83, 108, 105, 100, 101, 114, 83, 101,
			116, 68, 105, 114, 101, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 47, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 83, 108, 105,
			100, 101, 114, 83, 101, 116, 77, 105, 110, 77,
			97, 120, 0, 0, 0, 0, 56, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 83,
			108, 105, 100, 101, 114, 83, 101, 116, 78, 111,
			114, 109, 97, 108, 105, 122, 101, 100, 86, 97,
			108, 117, 101, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 85, 105,
			83, 108, 105, 100, 101, 114, 83, 101, 116, 86,
			97, 108, 117, 101, 0, 0, 0, 0, 53, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 85,
			105, 83, 108, 105, 100, 101, 114, 83, 101, 116,
			87, 104, 111, 108, 101, 78, 117, 109, 98, 101,
			114, 115, 0, 0, 0, 0, 43, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 85, 105, 84,
			101, 120, 116, 71, 101, 116, 84, 101, 120, 116,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 84, 101, 120,
			116, 83, 101, 116, 84, 101, 120, 116, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 84, 111, 103, 103, 108,
			101, 71, 101, 116, 73, 115, 79, 110, 0, 0,
			0, 0, 57, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 85, 105, 84, 111, 103, 103, 108,
			101, 79, 110, 86, 97, 108, 117, 101, 67, 104,
			97, 110, 103, 101, 100, 69, 118, 101, 110, 116,
			0, 0, 0, 0, 45, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 85, 105, 84, 111, 103,
			103, 108, 101, 83, 101, 116, 73, 115, 79, 110,
			0, 0, 0, 0, 42, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 71, 101, 116, 67, 111,
			109, 112, 111, 110, 101, 110, 116, 0, 0, 0,
			0, 41, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 71, 101, 116, 80, 114, 111, 112, 101,
			114, 116, 121, 0, 0, 0, 0, 44, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			116, 79, 98, 106, 101, 99, 116, 86, 97, 108,
			117, 101, 0, 0, 0, 0, 41, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 83, 101, 116,
			80, 114, 111, 112, 101, 114, 116, 121, 0, 0,
			0, 0, 42, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 68, 101, 98, 117, 103, 86, 101,
			99, 116, 111, 114, 50, 0, 0, 0, 0, 46,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 86, 101, 99, 116, 111, 114, 50,
			76, 101, 110, 103, 116, 104, 0, 0, 0, 0,
			42, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 71, 101, 116, 86, 101, 99, 116, 111, 114,
			50, 88, 89, 0, 0, 0, 0, 49, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			108, 101, 99, 116, 82, 97, 110, 100, 111, 109,
			86, 101, 99, 116, 111, 114, 50, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 86, 101, 99, 116, 111,
			114, 50, 86, 97, 108, 117, 101, 0, 0, 0,
			0, 42, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 86, 101, 99, 116, 111,
			114, 50, 88, 89, 0, 0, 0, 0, 40, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			101, 99, 116, 111, 114, 50, 65, 100, 100, 0,
			0, 0, 0, 42, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 101, 99, 116, 111, 114,
			50, 65, 100, 100, 88, 89, 0, 0, 0, 0,
			51, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 86, 101, 99, 116, 111, 114, 50, 67, 108,
			97, 109, 112, 77, 97, 103, 110, 105, 116, 117,
			100, 101, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 86, 101, 99,
			116, 111, 114, 50, 72, 105, 103, 104, 80, 97,
			115, 115, 70, 105, 108, 116, 101, 114, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 86, 101, 99, 116, 111, 114, 50,
			73, 110, 116, 101, 114, 112, 111, 108, 97, 116,
			101, 0, 0, 0, 0, 43, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 101, 99, 116,
			111, 114, 50, 73, 110, 118, 101, 114, 116, 0,
			0, 0, 0, 41, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 101, 99, 116, 111, 114,
			50, 76, 101, 114, 112, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 101, 99, 116, 111, 114, 50, 76, 111, 119,
			80, 97, 115, 115, 70, 105, 108, 116, 101, 114,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 86, 101, 99, 116, 111,
			114, 50, 77, 111, 118, 101, 84, 111, 119, 97,
			114, 100, 115, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 101,
			99, 116, 111, 114, 50, 77, 117, 108, 116, 105,
			112, 108, 121, 0, 0, 0, 0, 46, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 101,
			99, 116, 111, 114, 50, 78, 111, 114, 109, 97,
			108, 105, 122, 101, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			101, 99, 116, 111, 114, 50, 79, 112, 101, 114,
			97, 116, 111, 114, 0, 0, 0, 0, 46, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			101, 99, 116, 111, 114, 50, 80, 101, 114, 83,
			101, 99, 111, 110, 100, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 101, 99, 116, 111, 114, 50, 82, 111, 116,
			97, 116, 101, 84, 111, 119, 97, 114, 100, 115,
			0, 0, 0, 0, 48, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 86, 101, 99, 116, 111,
			114, 50, 83, 110, 97, 112, 84, 111, 65, 110,
			103, 108, 101, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 101,
			99, 116, 111, 114, 50, 83, 110, 97, 112, 84,
			111, 71, 114, 105, 100, 0, 0, 0, 0, 45,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 101, 99, 116, 111, 114, 50, 83, 117, 98,
			116, 114, 97, 99, 116, 0, 0, 0, 0, 43,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			71, 101, 116, 86, 101, 99, 116, 111, 114, 51,
			88, 89, 90, 0, 0, 0, 0, 45, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 71, 101,
			116, 86, 101, 99, 116, 111, 114, 76, 101, 110,
			103, 116, 104, 0, 0, 0, 0, 49, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 83, 101,
			108, 101, 99, 116, 82, 97, 110, 100, 111, 109,
			86, 101, 99, 116, 111, 114, 51, 0, 0, 0,
			0, 45, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 86, 101, 99, 116, 111,
			114, 51, 86, 97, 108, 117, 101, 0, 0, 0,
			0, 43, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 83, 101, 116, 86, 101, 99, 116, 111,
			114, 51, 88, 89, 90, 0, 0, 0, 0, 40,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 101, 99, 116, 111, 114, 51, 65, 100, 100,
			0, 0, 0, 0, 43, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 86, 101, 99, 116, 111,
			114, 51, 65, 100, 100, 88, 89, 90, 0, 0,
			0, 0, 51, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 86, 101, 99, 116, 111, 114, 51,
			67, 108, 97, 109, 112, 77, 97, 103, 110, 105,
			116, 117, 100, 101, 0, 0, 0, 0, 53, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			101, 99, 116, 111, 114, 51, 67, 108, 97, 109,
			112, 77, 97, 103, 110, 105, 116, 117, 100, 101,
			88, 90, 0, 0, 0, 0, 51, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 86, 101, 99,
			116, 111, 114, 51, 72, 105, 103, 104, 80, 97,
			115, 115, 70, 105, 108, 116, 101, 114, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 86, 101, 99, 116, 111, 114, 51,
			73, 110, 116, 101, 114, 112, 111, 108, 97, 116,
			101, 0, 0, 0, 0, 43, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 101, 99, 116,
			111, 114, 51, 73, 110, 118, 101, 114, 116, 0,
			0, 0, 0, 41, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 101, 99, 116, 111, 114,
			51, 76, 101, 114, 112, 0, 0, 0, 0, 50,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 101, 99, 116, 111, 114, 51, 76, 111, 119,
			80, 97, 115, 115, 70, 105, 108, 116, 101, 114,
			0, 0, 0, 0, 45, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 86, 101, 99, 116, 111,
			114, 51, 77, 117, 108, 116, 105, 112, 108, 121,
			0, 0, 0, 0, 46, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 86, 101, 99, 116, 111,
			114, 51, 78, 111, 114, 109, 97, 108, 105, 122,
			101, 0, 0, 0, 0, 45, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 101, 99, 116,
			111, 114, 51, 79, 112, 101, 114, 97, 116, 111,
			114, 0, 0, 0, 0, 46, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 101, 99, 116,
			111, 114, 51, 80, 101, 114, 83, 101, 99, 111,
			110, 100, 0, 0, 0, 0, 50, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 86, 101, 99,
			116, 111, 114, 51, 82, 111, 116, 97, 116, 101,
			84, 111, 119, 97, 114, 100, 115, 0, 0, 0,
			0, 47, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 101, 99, 116, 111, 114, 51, 83,
			110, 97, 112, 84, 111, 71, 114, 105, 100, 0,
			0, 0, 0, 45, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 101, 99, 116, 111, 114,
			51, 83, 117, 98, 116, 114, 97, 99, 116, 0,
			0, 0, 0, 57, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 105, 100, 101, 111, 67,
			108, 105, 112, 71, 101, 116, 65, 117, 100, 105,
			111, 84, 114, 97, 99, 107, 67, 111, 117, 110,
			116, 0, 0, 0, 0, 52, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 105, 100, 101,
			111, 67, 108, 105, 112, 71, 101, 116, 70, 114,
			97, 109, 101, 67, 111, 117, 110, 116, 0, 0,
			0, 0, 51, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 86, 105, 100, 101, 111, 67, 108,
			105, 112, 71, 101, 116, 70, 114, 97, 109, 101,
			82, 97, 116, 101, 0, 0, 0, 0, 48, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 67, 108, 105, 112, 71, 101,
			116, 76, 101, 110, 103, 116, 104, 0, 0, 0,
			0, 54, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 67, 108, 105,
			112, 71, 101, 116, 79, 114, 105, 103, 105, 110,
			97, 108, 80, 97, 116, 104, 0, 0, 0, 0,
			46, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 86, 105, 100, 101, 111, 67, 108, 105, 112,
			71, 101, 116, 83, 105, 122, 101, 0, 0, 0,
			0, 51, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 69, 114, 114, 111, 114, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 58, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 70,
			114, 97, 109, 101, 68, 114, 111, 112, 112, 101,
			100, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			56, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 70, 114, 97, 109, 101, 82, 101, 97,
			100, 121, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 55, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 65, 115, 112, 101,
			99, 116, 82, 97, 116, 105, 111, 0, 0, 0,
			0, 59, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 65, 117, 100, 105,
			111, 79, 117, 116, 112, 117, 116, 77, 111, 100,
			101, 0, 0, 0, 0, 59, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			65, 117, 100, 105, 111, 84, 114, 97, 99, 107,
			67, 111, 117, 110, 116, 0, 0, 0, 0, 67,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 67, 97, 110, 83, 101, 116,
			68, 105, 114, 101, 99, 116, 65, 117, 100, 105,
			111, 86, 111, 108, 117, 109, 101, 0, 0, 0,
			0, 63, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 67, 97, 110, 83,
			101, 116, 80, 108, 97, 121, 98, 97, 99, 107,
			83, 112, 101, 101, 100, 0, 0, 0, 0, 57,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 67, 97, 110, 83, 107, 105,
			112, 79, 110, 68, 114, 111, 112, 0, 0, 0,
			0, 54, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 67, 97, 110, 83,
			101, 116, 84, 105, 109, 101, 0, 0, 0, 0,
			60, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 67, 97, 110, 83, 101,
			116, 84, 105, 109, 101, 83, 111, 117, 114, 99,
			101, 0, 0, 0, 0, 51, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			67, 97, 110, 83, 116, 101, 112, 0, 0, 0,
			0, 72, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 100, 65, 117, 100, 105,
			111, 84, 114, 97, 99, 107, 77, 97, 120, 67,
			111, 117, 110, 116, 0, 0, 0, 0, 61, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 67, 117, 114, 114, 101, 110, 116,
			70, 114, 97, 109, 101, 73, 110, 100, 101, 120,
			0, 0, 0, 0, 54, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 70,
			114, 97, 109, 101, 67, 111, 117, 110, 116, 0,
			0, 0, 0, 53, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 70, 114,
			97, 109, 101, 82, 97, 116, 101, 0, 0, 0,
			0, 53, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 73, 115, 76, 111,
			111, 112, 105, 110, 103, 0, 0, 0, 0, 53,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 73, 115, 80, 108, 97, 121,
			105, 110, 103, 0, 0, 0, 0, 54, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 73, 115, 80, 114, 101, 112, 97, 114,
			101, 100, 0, 0, 0, 0, 57, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 80, 108, 97, 121, 98, 97, 99, 107, 83,
			112, 101, 101, 100, 0, 0, 0, 0, 55, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 80, 108, 97, 121, 79, 110, 65,
			119, 97, 107, 101, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 82, 101, 110, 100, 101, 114, 77,
			111, 100, 101, 0, 0, 0, 0, 64, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 83, 101, 110, 100, 70, 114, 97, 109,
			101, 82, 101, 97, 100, 121, 69, 118, 101, 110,
			116, 115, 0, 0, 0, 0, 54, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 83, 107, 105, 112, 79, 110, 68, 114, 111,
			112, 0, 0, 0, 0, 50, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			83, 111, 117, 114, 99, 101, 0, 0, 0, 0,
			56, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 84, 97, 114, 103, 101,
			116, 67, 97, 109, 101, 114, 97, 0, 0, 0,
			0, 61, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 84, 97, 114, 103,
			101, 116, 67, 97, 109, 101, 114, 97, 65, 108,
			112, 104, 97, 0, 0, 0, 0, 66, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 84, 97, 114, 103, 101, 116, 77, 97,
			116, 101, 114, 105, 97, 108, 80, 114, 111, 112,
			101, 114, 116, 121, 0, 0, 0, 0, 57, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 84, 97, 114, 103, 101, 116, 84,
			101, 120, 116, 117, 114, 101, 0, 0, 0, 0,
			51, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 84, 101, 120, 116, 117,
			114, 101, 0, 0, 0, 0, 48, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 84, 105, 109, 101, 0, 0, 0, 0, 54,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 84, 105, 109, 101, 83, 111,
			117, 114, 99, 101, 0, 0, 0, 0, 47, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 85, 114, 108, 0, 0, 0, 0,
			53, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 86, 105, 100, 101, 111,
			67, 108, 105, 112, 0, 0, 0, 0, 61, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 87, 97, 105, 116, 70, 111, 114,
			70, 105, 114, 115, 116, 70, 114, 97, 109, 101,
			0, 0, 0, 0, 62, 72, 117, 116, 111, 110,
			103, 71, 97, 109, 101, 115, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 46, 65, 99, 116,
			105, 111, 110, 115, 124, 86, 105, 100, 101, 111,
			80, 108, 97, 121, 101, 114, 76, 111, 111, 112,
			80, 111, 105, 110, 116, 82, 101, 97, 99, 104,
			101, 100, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 46, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 80, 97, 117, 115, 101, 0, 0,
			0, 0, 45, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 80, 108, 97, 121, 0, 0,
			0, 0, 48, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 80, 114, 101, 112, 97, 114,
			101, 0, 0, 0, 0, 63, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 80, 114, 101,
			112, 97, 114, 101, 100, 67, 111, 109, 112, 108,
			101, 116, 101, 100, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 59, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 83, 101, 101, 107, 67,
			111, 109, 112, 108, 101, 116, 101, 100, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 55, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 65, 115, 112, 101, 99, 116, 82, 97,
			116, 105, 111, 0, 0, 0, 0, 59, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 65, 117, 100, 105, 111, 79, 117, 116,
			112, 117, 116, 77, 111, 100, 101, 0, 0, 0,
			0, 57, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 83, 101, 116, 80, 108, 97, 121,
			98, 97, 99, 107, 83, 112, 101, 101, 100, 0,
			0, 0, 0, 55, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 83, 101, 116, 80, 108,
			97, 121, 79, 110, 65, 119, 97, 107, 101, 0,
			0, 0, 0, 54, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 83, 101, 116, 82, 101,
			110, 100, 101, 114, 77, 111, 100, 101, 0, 0,
			0, 0, 64, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 83, 101, 116, 83, 101, 110,
			100, 70, 114, 97, 109, 101, 82, 101, 97, 100,
			121, 69, 118, 101, 110, 116, 115, 0, 0, 0,
			0, 54, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 83, 101, 116, 83, 107, 105, 112,
			79, 110, 68, 114, 111, 112, 0, 0, 0, 0,
			50, 72, 117, 116, 111, 110, 103, 71, 97, 109,
			101, 115, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 46, 65, 99, 116, 105, 111, 110, 115,
			124, 86, 105, 100, 101, 111, 80, 108, 97, 121,
			101, 114, 83, 101, 116, 83, 111, 117, 114, 99,
			101, 0, 0, 0, 0, 56, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 83, 101, 116,
			84, 97, 114, 103, 101, 116, 67, 97, 109, 101,
			114, 97, 0, 0, 0, 0, 61, 72, 117, 116,
			111, 110, 103, 71, 97, 109, 101, 115, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 46, 65,
			99, 116, 105, 111, 110, 115, 124, 86, 105, 100,
			101, 111, 80, 108, 97, 121, 101, 114, 83, 101,
			116, 84, 97, 114, 103, 101, 116, 67, 97, 109,
			101, 114, 97, 65, 108, 112, 104, 97, 0, 0,
			0, 0, 66, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 46, 65, 99, 116, 105, 111,
			110, 115, 124, 86, 105, 100, 101, 111, 80, 108,
			97, 121, 101, 114, 83, 101, 116, 84, 97, 114,
			103, 101, 116, 77, 97, 116, 101, 114, 105, 97,
			108, 80, 114, 111, 112, 101, 114, 116, 121, 0,
			0, 0, 0, 57, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 83, 101, 116, 84, 97,
			114, 103, 101, 116, 84, 101, 120, 116, 117, 114,
			101, 0, 0, 0, 0, 48, 72, 117, 116, 111,
			110, 103, 71, 97, 109, 101, 115, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 46, 65, 99,
			116, 105, 111, 110, 115, 124, 86, 105, 100, 101,
			111, 80, 108, 97, 121, 101, 114, 83, 101, 116,
			84, 105, 109, 101, 0, 0, 0, 0, 54, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			83, 101, 116, 84, 105, 109, 101, 83, 111, 117,
			114, 99, 101, 0, 0, 0, 0, 47, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 85, 114, 108, 0, 0, 0, 0, 53,
			72, 117, 116, 111, 110, 103, 71, 97, 109, 101,
			115, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 46, 65, 99, 116, 105, 111, 110, 115, 124,
			86, 105, 100, 101, 111, 80, 108, 97, 121, 101,
			114, 83, 101, 116, 86, 105, 100, 101, 111, 67,
			108, 105, 112, 0, 0, 0, 0, 61, 72, 117,
			116, 111, 110, 103, 71, 97, 109, 101, 115, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 46,
			65, 99, 116, 105, 111, 110, 115, 124, 86, 105,
			100, 101, 111, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 87, 97, 105, 116, 70, 111, 114, 70,
			105, 114, 115, 116, 70, 114, 97, 109, 101, 0,
			0, 0, 0, 53, 72, 117, 116, 111, 110, 103,
			71, 97, 109, 101, 115, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 46, 65, 99, 116, 105,
			111, 110, 115, 124, 86, 105, 100, 101, 111, 80,
			108, 97, 121, 101, 114, 83, 116, 97, 114, 116,
			101, 100, 69, 118, 101, 110, 116, 0, 0, 0,
			0, 52, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 46, 65, 99, 116, 105, 111, 110,
			115, 124, 86, 105, 100, 101, 111, 80, 108, 97,
			121, 101, 114, 83, 116, 101, 112, 70, 111, 114,
			119, 97, 114, 100, 0, 0, 0, 0, 45, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 86,
			105, 100, 101, 111, 80, 108, 97, 121, 101, 114,
			83, 116, 111, 112, 0, 0, 0, 0, 39, 72,
			117, 116, 111, 110, 103, 71, 97, 109, 101, 115,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			46, 65, 99, 116, 105, 111, 110, 115, 124, 87,
			87, 87, 79, 98, 106, 101, 99, 116, 0, 0,
			0, 0, 34, 72, 117, 116, 111, 110, 103, 71,
			97, 109, 101, 115, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 70, 115, 109, 80, 114,
			111, 99, 101, 115, 115, 111, 114, 0, 0, 0,
			0, 34, 72, 117, 116, 111, 110, 103, 71, 97,
			109, 101, 115, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 85, 112, 100, 97, 116, 101,
			72, 101, 108, 112, 101, 114, 0, 0, 0, 0,
			35, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			101, 109, 111, 115, 124, 67, 111, 110, 116, 114,
			111, 108, 82, 101, 109, 97, 112, 112, 105, 110,
			103, 68, 101, 109, 111, 49, 0, 0, 0, 0,
			55, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			101, 109, 111, 115, 46, 67, 111, 110, 116, 114,
			111, 108, 82, 101, 109, 97, 112, 112, 105, 110,
			103, 68, 101, 109, 111, 49, 124, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 83, 101, 108,
			101, 99, 116, 105, 111, 110, 0, 0, 0, 0,
			48, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			101, 109, 111, 115, 46, 67, 111, 110, 116, 114,
			111, 108, 82, 101, 109, 97, 112, 112, 105, 110,
			103, 68, 101, 109, 111, 49, 124, 68, 105, 97,
			108, 111, 103, 72, 101, 108, 112, 101, 114, 0,
			0, 0, 0, 46, 82, 101, 119, 105, 114, 101,
			100, 46, 68, 101, 109, 111, 115, 46, 67, 111,
			110, 116, 114, 111, 108, 82, 101, 109, 97, 112,
			112, 105, 110, 103, 68, 101, 109, 111, 49, 124,
			81, 117, 101, 117, 101, 69, 110, 116, 114, 121,
			0, 0, 0, 0, 60, 82, 101, 119, 105, 114,
			101, 100, 46, 68, 101, 109, 111, 115, 46, 67,
			111, 110, 116, 114, 111, 108, 82, 101, 109, 97,
			112, 112, 105, 110, 103, 68, 101, 109, 111, 49,
			124, 74, 111, 121, 115, 116, 105, 99, 107, 65,
			115, 115, 105, 103, 110, 109, 101, 110, 116, 67,
			104, 97, 110, 103, 101, 0, 0, 0, 0, 59,
			82, 101, 119, 105, 114, 101, 100, 46, 68, 101,
			109, 111, 115, 46, 67, 111, 110, 116, 114, 111,
			108, 82, 101, 109, 97, 112, 112, 105, 110, 103,
			68, 101, 109, 111, 49, 124, 69, 108, 101, 109,
			101, 110, 116, 65, 115, 115, 105, 103, 110, 109,
			101, 110, 116, 67, 104, 97, 110, 103, 101, 0,
			0, 0, 0, 66, 82, 101, 119, 105, 114, 101,
			100, 46, 68, 101, 109, 111, 115, 46, 67, 111,
			110, 116, 114, 111, 108, 82, 101, 109, 97, 112,
			112, 105, 110, 103, 68, 101, 109, 111, 49, 124,
			70, 97, 108, 108, 98, 97, 99, 107, 74, 111,
			121, 115, 116, 105, 99, 107, 73, 100, 101, 110,
			116, 105, 102, 105, 99, 97, 116, 105, 111, 110,
			0, 0, 0, 0, 47, 82, 101, 119, 105, 114,
			101, 100, 46, 68, 101, 109, 111, 115, 46, 67,
			111, 110, 116, 114, 111, 108, 82, 101, 109, 97,
			112, 112, 105, 110, 103, 68, 101, 109, 111, 49,
			124, 67, 97, 108, 105, 98, 114, 97, 116, 105,
			111, 110, 0, 0, 0, 0, 52, 82, 101, 119,
			105, 114, 101, 100, 46, 68, 101, 109, 111, 115,
			46, 67, 111, 110, 116, 114, 111, 108, 82, 101,
			109, 97, 112, 112, 105, 110, 103, 68, 101, 109,
			111, 49, 124, 87, 105, 110, 100, 111, 119, 80,
			114, 111, 112, 101, 114, 116, 105, 101, 115, 0,
			0, 0, 0, 39, 82, 101, 119, 105, 114, 101,
			100, 46, 68, 101, 109, 111, 115, 124, 67, 117,
			115, 116, 111, 109, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 115, 84, 105, 108, 116, 68,
			101, 109, 111, 0, 0, 0, 0, 34, 82, 101,
			119, 105, 114, 101, 100, 46, 68, 101, 109, 111,
			115, 124, 67, 117, 115, 116, 111, 109, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 68, 101,
			109, 111, 0, 0, 0, 0, 41, 82, 101, 119,
			105, 114, 101, 100, 46, 68, 101, 109, 111, 115,
			124, 67, 117, 115, 116, 111, 109, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 68, 101, 109,
			111, 95, 80, 108, 97, 121, 101, 114, 0, 0,
			0, 0, 32, 82, 101, 119, 105, 114, 101, 100,
			46, 68, 101, 109, 111, 115, 124, 84, 111, 117,
			99, 104, 66, 117, 116, 116, 111, 110, 69, 120,
			97, 109, 112, 108, 101, 0, 0, 0, 0, 34,
			82, 101, 119, 105, 114, 101, 100, 46, 68, 101,
			109, 111, 115, 124, 84, 111, 117, 99, 104, 74,
			111, 121, 115, 116, 105, 99, 107, 69, 120, 97,
			109, 112, 108, 101, 0, 0, 0, 0, 77, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 46, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 124, 67, 117,
			115, 116, 111, 109, 80, 108, 97, 116, 102, 111,
			114, 109, 72, 97, 114, 100, 119, 97, 114, 101,
			74, 111, 121, 115, 116, 105, 99, 107, 77, 97,
			112, 80, 108, 97, 116, 102, 111, 114, 109, 68,
			97, 116, 97, 83, 101, 116, 0, 0, 0, 0,
			70, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			101, 109, 111, 115, 46, 67, 117, 115, 116, 111,
			109, 80, 108, 97, 116, 102, 111, 114, 109, 124,
			67, 117, 115, 116, 111, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 72, 97, 114, 100, 119, 97,
			114, 101, 74, 111, 121, 115, 116, 105, 99, 107,
			77, 97, 112, 80, 114, 111, 118, 105, 100, 101,
			114, 0, 0, 0, 0, 86, 82, 101, 119, 105,
			114, 101, 100, 46, 68, 101, 109, 111, 115, 46,
			67, 117, 115, 116, 111, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 67, 117, 115, 116, 111,
			109, 80, 108, 97, 116, 102, 111, 114, 109, 72,
			97, 114, 100, 119, 97, 114, 101, 74, 111, 121,
			115, 116, 105, 99, 107, 77, 97, 112, 80, 114,
			111, 118, 105, 100, 101, 114, 124, 80, 108, 97,
			116, 102, 111, 114, 109, 68, 97, 116, 97, 83,
			101, 116, 0, 0, 0, 0, 50, 82, 101, 119,
			105, 114, 101, 100, 46, 68, 101, 109, 111, 115,
			46, 67, 117, 115, 116, 111, 109, 80, 108, 97,
			116, 102, 111, 114, 109, 124, 67, 117, 115, 116,
			111, 109, 80, 108, 97, 116, 102, 111, 114, 109,
			77, 97, 110, 97, 103, 101, 114, 0, 0, 0,
			0, 58, 82, 101, 119, 105, 114, 101, 100, 46,
			68, 101, 109, 111, 115, 46, 67, 117, 115, 116,
			111, 109, 80, 108, 97, 116, 102, 111, 114, 109,
			124, 77, 121, 80, 108, 97, 116, 102, 111, 114,
			109, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			0, 0, 0, 0, 65, 82, 101, 119, 105, 114,
			101, 100, 46, 68, 101, 109, 111, 115, 46, 67,
			117, 115, 116, 111, 109, 80, 108, 97, 116, 102,
			111, 114, 109, 46, 77, 121, 80, 108, 97, 116,
			102, 111, 114, 109, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 124, 83, 111, 117, 114, 99, 101,
			0, 0, 0, 0, 59, 82, 101, 119, 105, 114,
			101, 100, 46, 68, 101, 109, 111, 115, 46, 67,
			117, 115, 116, 111, 109, 80, 108, 97, 116, 102,
			111, 114, 109, 124, 77, 121, 80, 108, 97, 116,
			102, 111, 114, 109, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 73, 100, 101, 110, 116, 105,
			102, 105, 101, 114, 0, 0, 0, 0, 69, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 46, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 124, 77, 121,
			80, 108, 97, 116, 102, 111, 114, 109, 72, 97,
			114, 100, 119, 97, 114, 101, 74, 111, 121, 115,
			116, 105, 99, 107, 77, 97, 112, 80, 108, 97,
			116, 102, 111, 114, 109, 77, 97, 112, 0, 0,
			0, 0, 85, 82, 101, 119, 105, 114, 101, 100,
			46, 68, 101, 109, 111, 115, 46, 67, 117, 115,
			116, 111, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 77, 121, 80, 108, 97, 116, 102, 111,
			114, 109, 72, 97, 114, 100, 119, 97, 114, 101,
			74, 111, 121, 115, 116, 105, 99, 107, 77, 97,
			112, 80, 108, 97, 116, 102, 111, 114, 109, 77,
			97, 112, 124, 80, 108, 97, 116, 102, 111, 114,
			109, 77, 97, 112, 66, 97, 115, 101, 0, 0,
			0, 0, 81, 82, 101, 119, 105, 114, 101, 100,
			46, 68, 101, 109, 111, 115, 46, 67, 117, 115,
			116, 111, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 77, 121, 80, 108, 97, 116, 102, 111,
			114, 109, 72, 97, 114, 100, 119, 97, 114, 101,
			74, 111, 121, 115, 116, 105, 99, 107, 77, 97,
			112, 80, 108, 97, 116, 102, 111, 114, 109, 77,
			97, 112, 124, 80, 108, 97, 116, 102, 111, 114,
			109, 77, 97, 112, 0, 0, 0, 0, 86, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 46, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 77, 121,
			80, 108, 97, 116, 102, 111, 114, 109, 72, 97,
			114, 100, 119, 97, 114, 101, 74, 111, 121, 115,
			116, 105, 99, 107, 77, 97, 112, 80, 108, 97,
			116, 102, 111, 114, 109, 77, 97, 112, 124, 77,
			97, 116, 99, 104, 105, 110, 103, 67, 114, 105,
			116, 101, 114, 105, 97, 0, 0, 0, 0, 50,
			82, 101, 119, 105, 114, 101, 100, 46, 68, 101,
			109, 111, 115, 46, 67, 117, 115, 116, 111, 109,
			80, 108, 97, 116, 102, 111, 114, 109, 124, 77,
			121, 80, 108, 97, 116, 102, 111, 114, 109, 73,
			110, 112, 117, 116, 83, 111, 117, 114, 99, 101,
			0, 0, 0, 0, 59, 82, 101, 119, 105, 114,
			101, 100, 46, 68, 101, 109, 111, 115, 46, 67,
			117, 115, 116, 111, 109, 80, 108, 97, 116, 102,
			111, 114, 109, 46, 77, 121, 80, 108, 97, 116,
			102, 111, 114, 109, 73, 110, 112, 117, 116, 83,
			111, 117, 114, 99, 101, 124, 74, 111, 121, 115,
			116, 105, 99, 107, 0, 0, 0, 0, 60, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 46, 67, 117, 115, 116, 111, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 124, 77, 121,
			80, 108, 97, 116, 102, 111, 114, 109, 85, 110,
			105, 102, 105, 101, 100, 75, 101, 121, 98, 111,
			97, 114, 100, 83, 111, 117, 114, 99, 101, 0,
			0, 0, 0, 57, 82, 101, 119, 105, 114, 101,
			100, 46, 68, 101, 109, 111, 115, 46, 67, 117,
			115, 116, 111, 109, 80, 108, 97, 116, 102, 111,
			114, 109, 124, 77, 121, 80, 108, 97, 116, 102,
			111, 114, 109, 85, 110, 105, 102, 105, 101, 100,
			77, 111, 117, 115, 101, 83, 111, 117, 114, 99,
			101, 0, 0, 0, 0, 53, 82, 101, 119, 105,
			114, 101, 100, 46, 68, 101, 109, 111, 115, 46,
			67, 117, 115, 116, 111, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 124, 85, 110, 105, 116, 121,
			73, 110, 112, 117, 116, 74, 111, 121, 115, 116,
			105, 99, 107, 83, 111, 117, 114, 99, 101, 0,
			0, 0, 0, 62, 82, 101, 119, 105, 114, 101,
			100, 46, 68, 101, 109, 111, 115, 46, 67, 117,
			115, 116, 111, 109, 80, 108, 97, 116, 102, 111,
			114, 109, 46, 85, 110, 105, 116, 121, 73, 110,
			112, 117, 116, 74, 111, 121, 115, 116, 105, 99,
			107, 83, 111, 117, 114, 99, 101, 124, 74, 111,
			121, 115, 116, 105, 99, 107, 0, 0, 0, 0,
			42, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			101, 109, 111, 115, 46, 67, 117, 115, 116, 111,
			109, 80, 108, 97, 116, 102, 111, 114, 109, 124,
			86, 105, 98, 114, 97, 116, 105, 111, 110, 84,
			101, 115, 116, 0, 0, 0, 0, 46, 82, 101,
			119, 105, 114, 101, 100, 46, 68, 101, 109, 111,
			115, 124, 68, 117, 97, 108, 83, 104, 111, 99,
			107, 52, 83, 112, 101, 99, 105, 97, 108, 70,
			101, 97, 116, 117, 114, 101, 115, 69, 120, 97,
			109, 112, 108, 101, 0, 0, 0, 0, 52, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 46, 68, 117, 97, 108, 83, 104, 111,
			99, 107, 52, 83, 112, 101, 99, 105, 97, 108,
			70, 101, 97, 116, 117, 114, 101, 115, 69, 120,
			97, 109, 112, 108, 101, 124, 84, 111, 117, 99,
			104, 0, 0, 0, 0, 40, 82, 101, 119, 105,
			114, 101, 100, 46, 68, 101, 109, 111, 115, 124,
			69, 105, 103, 104, 116, 80, 108, 97, 121, 101,
			114, 115, 69, 120, 97, 109, 112, 108, 101, 95,
			80, 108, 97, 121, 101, 114, 0, 0, 0, 0,
			48, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			101, 109, 111, 115, 124, 70, 97, 108, 108, 98,
			97, 99, 107, 74, 111, 121, 115, 116, 105, 99,
			107, 73, 100, 101, 110, 116, 105, 102, 105, 99,
			97, 116, 105, 111, 110, 68, 101, 109, 111, 0,
			0, 0, 0, 50, 82, 101, 119, 105, 114, 101,
			100, 46, 68, 101, 109, 111, 115, 46, 71, 97,
			109, 101, 112, 97, 100, 84, 101, 109, 112, 108,
			97, 116, 101, 85, 73, 124, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 85, 73, 69, 102,
			102, 101, 99, 116, 0, 0, 0, 0, 51, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 46, 71, 97, 109, 101, 112, 97, 100,
			84, 101, 109, 112, 108, 97, 116, 101, 85, 73,
			124, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 85, 73, 69, 108, 101, 109, 101, 110, 116,
			0, 0, 0, 0, 49, 82, 101, 119, 105, 114,
			101, 100, 46, 68, 101, 109, 111, 115, 46, 71,
			97, 109, 101, 112, 97, 100, 84, 101, 109, 112,
			108, 97, 116, 101, 85, 73, 124, 71, 97, 109,
			101, 112, 97, 100, 84, 101, 109, 112, 108, 97,
			116, 101, 85, 73, 0, 0, 0, 0, 55, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 46, 71, 97, 109, 101, 112, 97, 100,
			84, 101, 109, 112, 108, 97, 116, 101, 85, 73,
			46, 71, 97, 109, 101, 112, 97, 100, 84, 101,
			109, 112, 108, 97, 116, 101, 85, 73, 124, 83,
			116, 105, 99, 107, 0, 0, 0, 0, 59, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 46, 71, 97, 109, 101, 112, 97, 100,
			84, 101, 109, 112, 108, 97, 116, 101, 85, 73,
			46, 71, 97, 109, 101, 112, 97, 100, 84, 101,
			109, 112, 108, 97, 116, 101, 85, 73, 124, 85,
			73, 69, 108, 101, 109, 101, 110, 116, 0, 0,
			0, 0, 38, 82, 101, 119, 105, 114, 101, 100,
			46, 68, 101, 109, 111, 115, 124, 80, 108, 97,
			121, 101, 114, 77, 111, 117, 115, 101, 83, 112,
			114, 105, 116, 101, 69, 120, 97, 109, 112, 108,
			101, 0, 0, 0, 0, 46, 82, 101, 119, 105,
			114, 101, 100, 46, 68, 101, 109, 111, 115, 124,
			80, 108, 97, 121, 101, 114, 80, 111, 105, 110,
			116, 101, 114, 69, 118, 101, 110, 116, 72, 97,
			110, 100, 108, 101, 114, 69, 120, 97, 109, 112,
			108, 101, 0, 0, 0, 0, 23, 82, 101, 119,
			105, 114, 101, 100, 46, 68, 101, 109, 111, 115,
			124, 85, 73, 80, 111, 105, 110, 116, 101, 114,
			0, 0, 0, 0, 50, 82, 101, 119, 105, 114,
			101, 100, 46, 68, 101, 109, 111, 115, 124, 80,
			114, 101, 115, 115, 65, 110, 121, 66, 117, 116,
			116, 111, 110, 84, 111, 74, 111, 105, 110, 69,
			120, 97, 109, 112, 108, 101, 95, 65, 115, 115,
			105, 103, 110, 101, 114, 0, 0, 0, 0, 52,
			82, 101, 119, 105, 114, 101, 100, 46, 68, 101,
			109, 111, 115, 124, 80, 114, 101, 115, 115, 65,
			110, 121, 66, 117, 116, 116, 111, 110, 84, 111,
			74, 111, 105, 110, 69, 120, 97, 109, 112, 108,
			101, 95, 71, 97, 109, 101, 80, 108, 97, 121,
			101, 114, 0, 0, 0, 0, 46, 82, 101, 119,
			105, 114, 101, 100, 46, 68, 101, 109, 111, 115,
			124, 80, 114, 101, 115, 115, 83, 116, 97, 114,
			116, 84, 111, 74, 111, 105, 110, 69, 120, 97,
			109, 112, 108, 101, 95, 65, 115, 115, 105, 103,
			110, 101, 114, 0, 0, 0, 0, 56, 82, 101,
			119, 105, 114, 101, 100, 46, 68, 101, 109, 111,
			115, 46, 80, 114, 101, 115, 115, 83, 116, 97,
			114, 116, 84, 111, 74, 111, 105, 110, 69, 120,
			97, 109, 112, 108, 101, 95, 65, 115, 115, 105,
			103, 110, 101, 114, 124, 80, 108, 97, 121, 101,
			114, 77, 97, 112, 0, 0, 0, 0, 48, 82,
			101, 119, 105, 114, 101, 100, 46, 68, 101, 109,
			111, 115, 124, 80, 114, 101, 115, 115, 83, 116,
			97, 114, 116, 84, 111, 74, 111, 105, 110, 69,
			120, 97, 109, 112, 108, 101, 95, 71, 97, 109,
			101, 80, 108, 97, 121, 101, 114, 0, 0, 0,
			0, 20, 82, 101, 119, 105, 114, 101, 100, 46,
			68, 101, 109, 111, 115, 124, 66, 117, 108, 108,
			101, 116, 0, 0, 0, 0, 50, 82, 101, 119,
			105, 114, 101, 100, 46, 68, 101, 109, 111, 115,
			124, 83, 105, 109, 112, 108, 101, 67, 111, 109,
			98, 105, 110, 101, 100, 75, 101, 121, 98, 111,
			97, 114, 100, 77, 111, 117, 115, 101, 82, 101,
			109, 97, 112, 112, 105, 110, 103, 0, 0, 0,
			0, 54, 82, 101, 119, 105, 114, 101, 100, 46,
			68, 101, 109, 111, 115, 46, 83, 105, 109, 112,
			108, 101, 67, 111, 109, 98, 105, 110, 101, 100,
			75, 101, 121, 98, 111, 97, 114, 100, 77, 111,
			117, 115, 101, 82, 101, 109, 97, 112, 112, 105,
			110, 103, 124, 82, 111, 119, 0, 0, 0, 0,
			64, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			101, 109, 111, 115, 46, 83, 105, 109, 112, 108,
			101, 67, 111, 109, 98, 105, 110, 101, 100, 75,
			101, 121, 98, 111, 97, 114, 100, 77, 111, 117,
			115, 101, 82, 101, 109, 97, 112, 112, 105, 110,
			103, 124, 84, 97, 114, 103, 101, 116, 77, 97,
			112, 112, 105, 110, 103, 0, 0, 0, 0, 36,
			82, 101, 119, 105, 114, 101, 100, 46, 68, 101,
			109, 111, 115, 124, 83, 105, 109, 112, 108, 101,
			67, 111, 110, 116, 114, 111, 108, 82, 101, 109,
			97, 112, 112, 105, 110, 103, 0, 0, 0, 0,
			40, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			101, 109, 111, 115, 46, 83, 105, 109, 112, 108,
			101, 67, 111, 110, 116, 114, 111, 108, 82, 101,
			109, 97, 112, 112, 105, 110, 103, 124, 82, 111,
			119, 0, 0, 0, 0, 38, 82, 101, 119, 105,
			114, 101, 100, 46, 68, 101, 109, 111, 115, 124,
			67, 111, 110, 116, 114, 111, 108, 77, 97, 112,
			112, 101, 114, 68, 101, 109, 111, 77, 101, 115,
			115, 97, 103, 101, 0, 0, 0, 0, 35, 82,
			101, 119, 105, 114, 101, 100, 46, 85, 73, 46,
			67, 111, 110, 116, 114, 111, 108, 77, 97, 112,
			112, 101, 114, 124, 66, 117, 116, 116, 111, 110,
			73, 110, 102, 111, 0, 0, 0, 0, 42, 82,
			101, 119, 105, 114, 101, 100, 46, 85, 73, 46,
			67, 111, 110, 116, 114, 111, 108, 77, 97, 112,
			112, 101, 114, 124, 67, 97, 108, 105, 98, 114,
			97, 116, 105, 111, 110, 87, 105, 110, 100, 111,
			119, 0, 0, 0, 0, 40, 82, 101, 119, 105,
			114, 101, 100, 46, 85, 73, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			124, 67, 97, 110, 118, 97, 115, 83, 99, 97,
			108, 101, 114, 69, 120, 116, 0, 0, 0, 0,
			43, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 124, 67, 97, 110, 118,
			97, 115, 83, 99, 97, 108, 101, 114, 70, 105,
			116, 116, 101, 114, 0, 0, 0, 0, 54, 82,
			101, 119, 105, 114, 101, 100, 46, 85, 73, 46,
			67, 111, 110, 116, 114, 111, 108, 77, 97, 112,
			112, 101, 114, 46, 67, 97, 110, 118, 97, 115,
			83, 99, 97, 108, 101, 114, 70, 105, 116, 116,
			101, 114, 124, 66, 114, 101, 97, 107, 80, 111,
			105, 110, 116, 1, 0, 0, 0, 38, 82, 101,
			119, 105, 114, 101, 100, 46, 85, 73, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 124, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 1, 0, 0, 0,
			38, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 124, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 0,
			0, 0, 0, 49, 82, 101, 119, 105, 114, 101,
			100, 46, 85, 73, 46, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 124, 71, 85, 73, 69, 108, 101, 109,
			101, 110, 116, 0, 0, 0, 0, 48, 82, 101,
			119, 105, 114, 101, 100, 46, 85, 73, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 124, 71, 85, 73,
			66, 117, 116, 116, 111, 110, 0, 0, 0, 0,
			52, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 124,
			71, 85, 73, 73, 110, 112, 117, 116, 70, 105,
			101, 108, 100, 0, 0, 0, 0, 48, 82, 101,
			119, 105, 114, 101, 100, 46, 85, 73, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 124, 71, 85, 73,
			84, 111, 103, 103, 108, 101, 0, 0, 0, 0,
			47, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 124,
			71, 85, 73, 76, 97, 98, 101, 108, 0, 0,
			0, 0, 49, 82, 101, 119, 105, 114, 101, 100,
			46, 85, 73, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 124, 77, 97, 112, 112, 105, 110, 103, 83,
			101, 116, 0, 0, 0, 0, 60, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 124, 73, 110, 112, 117,
			116, 66, 101, 104, 97, 118, 105, 111, 114, 83,
			101, 116, 116, 105, 110, 103, 115, 0, 0, 0,
			0, 46, 82, 101, 119, 105, 114, 101, 100, 46,
			85, 73, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			124, 80, 114, 101, 102, 97, 98, 115, 0, 0,
			0, 0, 49, 82, 101, 119, 105, 114, 101, 100,
			46, 85, 73, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 124, 82, 101, 102, 101, 114, 101, 110, 99,
			101, 115, 0, 0, 0, 0, 53, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 124, 73, 110, 112, 117,
			116, 65, 99, 116, 105, 111, 110, 83, 101, 116,
			0, 0, 0, 0, 51, 82, 101, 119, 105, 114,
			101, 100, 46, 85, 73, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 46,
			67, 111, 110, 116, 114, 111, 108, 77, 97, 112,
			112, 101, 114, 124, 73, 110, 112, 117, 116, 77,
			97, 112, 112, 105, 110, 103, 0, 0, 0, 0,
			53, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 124,
			65, 120, 105, 115, 67, 97, 108, 105, 98, 114,
			97, 116, 111, 114, 0, 0, 0, 0, 56, 82,
			101, 119, 105, 114, 101, 100, 46, 85, 73, 46,
			67, 111, 110, 116, 114, 111, 108, 77, 97, 112,
			112, 101, 114, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 124, 73, 110,
			100, 101, 120, 101, 100, 68, 105, 99, 116, 105,
			111, 110, 97, 114, 121, 0, 0, 0, 0, 62,
			82, 101, 119, 105, 114, 101, 100, 46, 85, 73,
			46, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 46, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 43, 73,
			110, 100, 101, 120, 101, 100, 68, 105, 99, 116,
			105, 111, 110, 97, 114, 121, 124, 69, 110, 116,
			114, 121, 1, 0, 0, 0, 38, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 124, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 1, 0, 0, 0, 38,
			82, 101, 119, 105, 114, 101, 100, 46, 85, 73,
			46, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 124, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 0, 0,
			0, 0, 48, 82, 101, 119, 105, 114, 101, 100,
			46, 85, 73, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 124, 73, 110, 112, 117, 116, 71, 114, 105,
			100, 0, 0, 0, 0, 57, 82, 101, 119, 105,
			114, 101, 100, 46, 85, 73, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			46, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 124, 73, 110, 112, 117, 116,
			71, 114, 105, 100, 69, 110, 116, 114, 121, 76,
			105, 115, 116, 0, 0, 0, 0, 74, 82, 101,
			119, 105, 114, 101, 100, 46, 85, 73, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 43, 73, 110, 112,
			117, 116, 71, 114, 105, 100, 69, 110, 116, 114,
			121, 76, 105, 115, 116, 124, 77, 97, 112, 67,
			97, 116, 101, 103, 111, 114, 121, 69, 110, 116,
			114, 121, 0, 0, 0, 0, 69, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 43, 73, 110, 112, 117,
			116, 71, 114, 105, 100, 69, 110, 116, 114, 121,
			76, 105, 115, 116, 124, 65, 99, 116, 105, 111,
			110, 69, 110, 116, 114, 121, 0, 0, 0, 0,
			66, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 43,
			73, 110, 112, 117, 116, 71, 114, 105, 100, 69,
			110, 116, 114, 121, 76, 105, 115, 116, 124, 70,
			105, 101, 108, 100, 83, 101, 116, 0, 0, 0,
			0, 77, 82, 101, 119, 105, 114, 101, 100, 46,
			85, 73, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			43, 73, 110, 112, 117, 116, 71, 114, 105, 100,
			69, 110, 116, 114, 121, 76, 105, 115, 116, 124,
			65, 99, 116, 105, 111, 110, 67, 97, 116, 101,
			103, 111, 114, 121, 69, 110, 116, 114, 121, 1,
			0, 0, 0, 38, 82, 101, 119, 105, 114, 101,
			100, 46, 85, 73, 46, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 124, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 0, 0, 0, 0, 52, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 124, 87, 105, 110, 100,
			111, 119, 77, 97, 110, 97, 103, 101, 114, 0,
			0, 0, 0, 37, 82, 101, 119, 105, 114, 101,
			100, 46, 85, 73, 46, 67, 111, 110, 116, 114,
			111, 108, 77, 97, 112, 112, 101, 114, 124, 67,
			117, 115, 116, 111, 109, 66, 117, 116, 116, 111,
			110, 0, 0, 0, 0, 37, 82, 101, 119, 105,
			114, 101, 100, 46, 85, 73, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			124, 67, 117, 115, 116, 111, 109, 83, 108, 105,
			100, 101, 114, 0, 0, 0, 0, 37, 82, 101,
			119, 105, 114, 101, 100, 46, 85, 73, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 124, 67, 117, 115, 116, 111, 109, 84,
			111, 103, 103, 108, 101, 0, 0, 0, 0, 42,
			82, 101, 119, 105, 114, 101, 100, 46, 85, 73,
			46, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 124, 73, 67, 117, 115, 116,
			111, 109, 83, 101, 108, 101, 99, 116, 97, 98,
			108, 101, 0, 0, 0, 0, 44, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 124, 73, 110, 112, 117, 116, 66, 101, 104,
			97, 118, 105, 111, 114, 87, 105, 110, 100, 111,
			119, 0, 0, 0, 0, 62, 82, 101, 119, 105,
			114, 101, 100, 46, 85, 73, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			46, 73, 110, 112, 117, 116, 66, 101, 104, 97,
			118, 105, 111, 114, 87, 105, 110, 100, 111, 119,
			124, 73, 110, 112, 117, 116, 66, 101, 104, 97,
			118, 105, 111, 114, 73, 110, 102, 111, 0, 0,
			0, 0, 39, 82, 101, 119, 105, 114, 101, 100,
			46, 85, 73, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 124, 73, 110,
			112, 117, 116, 70, 105, 101, 108, 100, 73, 110,
			102, 111, 0, 0, 0, 0, 33, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 124, 73, 110, 112, 117, 116, 82, 111, 119,
			0, 0, 0, 0, 37, 82, 101, 119, 105, 114,
			101, 100, 46, 85, 73, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 124,
			76, 97, 110, 103, 117, 97, 103, 101, 68, 97,
			116, 97, 0, 0, 0, 0, 49, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 46, 76, 97, 110, 103, 117, 97, 103, 101,
			68, 97, 116, 97, 124, 67, 117, 115, 116, 111,
			109, 69, 110, 116, 114, 121, 0, 0, 0, 0,
			50, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 46, 76, 97, 110, 103,
			117, 97, 103, 101, 68, 97, 116, 97, 124, 77,
			111, 100, 105, 102, 105, 101, 114, 75, 101, 121,
			115, 0, 0, 0, 0, 41, 82, 101, 119, 105,
			114, 101, 100, 46, 85, 73, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			124, 76, 97, 110, 103, 117, 97, 103, 101, 68,
			97, 116, 97, 66, 97, 115, 101, 0, 0, 0,
			0, 50, 82, 101, 119, 105, 114, 101, 100, 46,
			85, 73, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 124, 83, 99, 114,
			111, 108, 108, 98, 97, 114, 86, 105, 115, 105,
			98, 105, 108, 105, 116, 121, 72, 101, 108, 112,
			101, 114, 0, 0, 0, 0, 50, 82, 101, 119,
			105, 114, 101, 100, 46, 85, 73, 46, 67, 111,
			110, 116, 114, 111, 108, 77, 97, 112, 112, 101,
			114, 124, 83, 99, 114, 111, 108, 108, 82, 101,
			99, 116, 83, 101, 108, 101, 99, 116, 97, 98,
			108, 101, 67, 104, 105, 108, 100, 0, 0, 0,
			0, 38, 82, 101, 119, 105, 114, 101, 100, 46,
			85, 73, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 124, 84, 104, 101,
			109, 101, 100, 69, 108, 101, 109, 101, 110, 116,
			0, 0, 0, 0, 50, 82, 101, 119, 105, 114,
			101, 100, 46, 85, 73, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 46,
			84, 104, 101, 109, 101, 100, 69, 108, 101, 109,
			101, 110, 116, 124, 69, 108, 101, 109, 101, 110,
			116, 73, 110, 102, 111, 0, 0, 0, 0, 38,
			82, 101, 119, 105, 114, 101, 100, 46, 85, 73,
			46, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 124, 84, 104, 101, 109, 101,
			83, 101, 116, 116, 105, 110, 103, 115, 0, 0,
			0, 0, 62, 82, 101, 119, 105, 114, 101, 100,
			46, 85, 73, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 46, 84, 104,
			101, 109, 101, 83, 101, 116, 116, 105, 110, 103,
			115, 124, 83, 101, 108, 101, 99, 116, 97, 98,
			108, 101, 83, 101, 116, 116, 105, 110, 103, 115,
			95, 66, 97, 115, 101, 0, 0, 0, 0, 57,
			82, 101, 119, 105, 114, 101, 100, 46, 85, 73,
			46, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 46, 84, 104, 101, 109, 101,
			83, 101, 116, 116, 105, 110, 103, 115, 124, 83,
			101, 108, 101, 99, 116, 97, 98, 108, 101, 83,
			101, 116, 116, 105, 110, 103, 115, 0, 0, 0,
			0, 53, 82, 101, 119, 105, 114, 101, 100, 46,
			85, 73, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 46, 84, 104, 101,
			109, 101, 83, 101, 116, 116, 105, 110, 103, 115,
			124, 83, 108, 105, 100, 101, 114, 83, 101, 116,
			116, 105, 110, 103, 115, 0, 0, 0, 0, 56,
			82, 101, 119, 105, 114, 101, 100, 46, 85, 73,
			46, 67, 111, 110, 116, 114, 111, 108, 77, 97,
			112, 112, 101, 114, 46, 84, 104, 101, 109, 101,
			83, 101, 116, 116, 105, 110, 103, 115, 124, 83,
			99, 114, 111, 108, 108, 98, 97, 114, 83, 101,
			116, 116, 105, 110, 103, 115, 0, 0, 0, 0,
			52, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 46, 84, 104, 101, 109,
			101, 83, 101, 116, 116, 105, 110, 103, 115, 124,
			73, 109, 97, 103, 101, 83, 101, 116, 116, 105,
			110, 103, 115, 0, 0, 0, 0, 55, 82, 101,
			119, 105, 114, 101, 100, 46, 85, 73, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 46, 84, 104, 101, 109, 101, 83, 101,
			116, 116, 105, 110, 103, 115, 124, 67, 117, 115,
			116, 111, 109, 67, 111, 108, 111, 114, 66, 108,
			111, 99, 107, 0, 0, 0, 0, 56, 82, 101,
			119, 105, 114, 101, 100, 46, 85, 73, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 46, 84, 104, 101, 109, 101, 83, 101,
			116, 116, 105, 110, 103, 115, 124, 67, 117, 115,
			116, 111, 109, 83, 112, 114, 105, 116, 101, 83,
			116, 97, 116, 101, 0, 0, 0, 0, 62, 82,
			101, 119, 105, 114, 101, 100, 46, 85, 73, 46,
			67, 111, 110, 116, 114, 111, 108, 77, 97, 112,
			112, 101, 114, 46, 84, 104, 101, 109, 101, 83,
			101, 116, 116, 105, 110, 103, 115, 124, 67, 117,
			115, 116, 111, 109, 65, 110, 105, 109, 97, 116,
			105, 111, 110, 84, 114, 105, 103, 103, 101, 114,
			115, 0, 0, 0, 0, 51, 82, 101, 119, 105,
			114, 101, 100, 46, 85, 73, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			46, 84, 104, 101, 109, 101, 83, 101, 116, 116,
			105, 110, 103, 115, 124, 84, 101, 120, 116, 83,
			101, 116, 116, 105, 110, 103, 115, 0, 0, 0,
			0, 35, 82, 101, 119, 105, 114, 101, 100, 46,
			85, 73, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 124, 84, 111, 103,
			103, 108, 101, 73, 110, 102, 111, 0, 0, 0,
			0, 34, 82, 101, 119, 105, 114, 101, 100, 46,
			85, 73, 46, 67, 111, 110, 116, 114, 111, 108,
			77, 97, 112, 112, 101, 114, 124, 85, 73, 67,
			111, 110, 116, 114, 111, 108, 0, 0, 0, 0,
			37, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 124, 85, 73, 67, 111,
			110, 116, 114, 111, 108, 83, 101, 116, 0, 0,
			0, 0, 38, 82, 101, 119, 105, 114, 101, 100,
			46, 85, 73, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 124, 85, 73,
			69, 108, 101, 109, 101, 110, 116, 73, 110, 102,
			111, 0, 0, 0, 0, 32, 82, 101, 119, 105,
			114, 101, 100, 46, 85, 73, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			124, 85, 73, 71, 114, 111, 117, 112, 0, 0,
			0, 0, 38, 82, 101, 119, 105, 114, 101, 100,
			46, 85, 73, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 124, 85, 73,
			73, 109, 97, 103, 101, 72, 101, 108, 112, 101,
			114, 0, 0, 0, 0, 44, 82, 101, 119, 105,
			114, 101, 100, 46, 85, 73, 46, 67, 111, 110,
			116, 114, 111, 108, 77, 97, 112, 112, 101, 114,
			46, 85, 73, 73, 109, 97, 103, 101, 72, 101,
			108, 112, 101, 114, 124, 83, 116, 97, 116, 101,
			0, 0, 0, 0, 43, 82, 101, 119, 105, 114,
			101, 100, 46, 85, 73, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 124,
			85, 73, 83, 101, 108, 101, 99, 116, 105, 111,
			110, 85, 116, 105, 108, 105, 116, 121, 0, 0,
			0, 0, 40, 82, 101, 119, 105, 114, 101, 100,
			46, 85, 73, 46, 67, 111, 110, 116, 114, 111,
			108, 77, 97, 112, 112, 101, 114, 124, 85, 73,
			83, 108, 105, 100, 101, 114, 67, 111, 110, 116,
			114, 111, 108, 0, 0, 0, 0, 32, 82, 101,
			119, 105, 114, 101, 100, 46, 85, 73, 46, 67,
			111, 110, 116, 114, 111, 108, 77, 97, 112, 112,
			101, 114, 124, 85, 73, 84, 111, 111, 108, 115,
			0, 0, 0, 0, 31, 82, 101, 119, 105, 114,
			101, 100, 46, 85, 73, 46, 67, 111, 110, 116,
			114, 111, 108, 77, 97, 112, 112, 101, 114, 124,
			87, 105, 110, 100, 111, 119, 0, 0, 0, 0,
			37, 82, 101, 119, 105, 114, 101, 100, 46, 85,
			73, 46, 67, 111, 110, 116, 114, 111, 108, 77,
			97, 112, 112, 101, 114, 46, 87, 105, 110, 100,
			111, 119, 124, 84, 105, 109, 101, 114, 0, 0,
			0, 0, 63, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			65, 99, 116, 105, 111, 110, 69, 108, 101, 109,
			101, 110, 116, 77, 97, 112, 71, 101, 116, 69,
			110, 97, 98, 108, 101, 100, 0, 0, 0, 0,
			64, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 65, 99,
			116, 105, 111, 110, 69, 108, 101, 109, 101, 110,
			116, 77, 97, 112, 71, 101, 116, 65, 99, 116,
			105, 111, 110, 73, 100, 0, 0, 0, 0, 67,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 65, 99, 116,
			105, 111, 110, 69, 108, 101, 109, 101, 110, 116,
			77, 97, 112, 71, 101, 116, 69, 108, 101, 109,
			101, 110, 116, 84, 121, 112, 101, 0, 0, 0,
			0, 75, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 65,
			99, 116, 105, 111, 110, 69, 108, 101, 109, 101,
			110, 116, 77, 97, 112, 71, 101, 116, 69, 108,
			101, 109, 101, 110, 116, 73, 100, 101, 110, 116,
			105, 102, 105, 101, 114, 73, 100, 0, 0, 0,
			0, 65, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 65,
			99, 116, 105, 111, 110, 69, 108, 101, 109, 101,
			110, 116, 77, 97, 112, 71, 101, 116, 65, 120,
			105, 115, 82, 97, 110, 103, 101, 0, 0, 0,
			0, 62, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 65,
			99, 116, 105, 111, 110, 69, 108, 101, 109, 101,
			110, 116, 77, 97, 112, 71, 101, 116, 73, 110,
			118, 101, 114, 116, 0, 0, 0, 0, 72, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 65, 99, 116, 105,
			111, 110, 69, 108, 101, 109, 101, 110, 116, 77,
			97, 112, 71, 101, 116, 65, 120, 105, 115, 67,
			111, 110, 116, 114, 105, 98, 117, 116, 105, 111,
			110, 0, 0, 0, 0, 71, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 65, 99, 116, 105, 111, 110, 69,
			108, 101, 109, 101, 110, 116, 77, 97, 112, 71,
			101, 116, 75, 101, 121, 98, 111, 97, 114, 100,
			75, 101, 121, 67, 111, 100, 101, 0, 0, 0,
			0, 68, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 65,
			99, 116, 105, 111, 110, 69, 108, 101, 109, 101,
			110, 116, 77, 97, 112, 71, 101, 116, 77, 111,
			100, 105, 102, 105, 101, 114, 75, 101, 121, 49,
			0, 0, 0, 0, 68, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 65, 99, 116, 105, 111, 110, 69, 108,
			101, 109, 101, 110, 116, 77, 97, 112, 71, 101,
			116, 77, 111, 100, 105, 102, 105, 101, 114, 75,
			101, 121, 50, 0, 0, 0, 0, 68, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 65, 99, 116, 105, 111,
			110, 69, 108, 101, 109, 101, 110, 116, 77, 97,
			112, 71, 101, 116, 77, 111, 100, 105, 102, 105,
			101, 114, 75, 101, 121, 51, 0, 0, 0, 0,
			64, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 65, 99,
			116, 105, 111, 110, 69, 108, 101, 109, 101, 110,
			116, 77, 97, 112, 71, 101, 116, 65, 120, 105,
			115, 84, 121, 112, 101, 0, 0, 0, 0, 72,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 65, 99, 116,
			105, 111, 110, 69, 108, 101, 109, 101, 110, 116,
			77, 97, 112, 71, 101, 116, 77, 111, 100, 105,
			102, 105, 101, 114, 75, 101, 121, 70, 108, 97,
			103, 115, 0, 0, 0, 0, 63, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 65, 99, 116, 105, 111, 110,
			69, 108, 101, 109, 101, 110, 116, 77, 97, 112,
			71, 101, 116, 75, 101, 121, 67, 111, 100, 101,
			0, 0, 0, 0, 68, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 65, 99, 116, 105, 111, 110, 69, 108,
			101, 109, 101, 110, 116, 77, 97, 112, 71, 101,
			116, 72, 97, 115, 77, 111, 100, 105, 102, 105,
			101, 114, 115, 0, 0, 0, 0, 77, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 65, 99, 116, 105, 111,
			110, 69, 108, 101, 109, 101, 110, 116, 77, 97,
			112, 71, 101, 116, 69, 108, 101, 109, 101, 110,
			116, 73, 100, 101, 110, 116, 105, 102, 105, 101,
			114, 78, 97, 109, 101, 0, 0, 0, 0, 68,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 65, 99, 116,
			105, 111, 110, 69, 108, 101, 109, 101, 110, 116,
			77, 97, 112, 71, 101, 116, 69, 108, 101, 109,
			101, 110, 116, 73, 110, 100, 101, 120, 0, 0,
			0, 0, 58, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			65, 99, 116, 105, 111, 110, 69, 108, 101, 109,
			101, 110, 116, 77, 97, 112, 71, 101, 116, 73,
			100, 0, 0, 0, 0, 77, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 65, 99, 116, 105, 111, 110, 69,
			108, 101, 109, 101, 110, 116, 77, 97, 112, 71,
			101, 116, 65, 99, 116, 105, 111, 110, 68, 101,
			115, 99, 114, 105, 112, 116, 105, 118, 101, 78,
			97, 109, 101, 0, 0, 0, 0, 63, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 65, 99, 116, 105, 111,
			110, 69, 108, 101, 109, 101, 110, 116, 77, 97,
			112, 83, 101, 116, 69, 110, 97, 98, 108, 101,
			100, 0, 0, 0, 0, 64, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 65, 99, 116, 105, 111, 110, 69,
			108, 101, 109, 101, 110, 116, 77, 97, 112, 83,
			101, 116, 65, 99, 116, 105, 111, 110, 73, 100,
			0, 0, 0, 0, 75, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 65, 99, 116, 105, 111, 110, 69, 108,
			101, 109, 101, 110, 116, 77, 97, 112, 83, 101,
			116, 69, 108, 101, 109, 101, 110, 116, 73, 100,
			101, 110, 116, 105, 102, 105, 101, 114, 73, 100,
			0, 0, 0, 0, 65, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 65, 99, 116, 105, 111, 110, 69, 108,
			101, 109, 101, 110, 116, 77, 97, 112, 83, 101,
			116, 65, 120, 105, 115, 82, 97, 110, 103, 101,
			0, 0, 0, 0, 62, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 65, 99, 116, 105, 111, 110, 69, 108,
			101, 109, 101, 110, 116, 77, 97, 112, 83, 101,
			116, 73, 110, 118, 101, 114, 116, 0, 0, 0,
			0, 72, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 65,
			99, 116, 105, 111, 110, 69, 108, 101, 109, 101,
			110, 116, 77, 97, 112, 83, 101, 116, 65, 120,
			105, 115, 67, 111, 110, 116, 114, 105, 98, 117,
			116, 105, 111, 110, 0, 0, 0, 0, 71, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 65, 99, 116, 105,
			111, 110, 69, 108, 101, 109, 101, 110, 116, 77,
			97, 112, 83, 101, 116, 75, 101, 121, 98, 111,
			97, 114, 100, 75, 101, 121, 67, 111, 100, 101,
			0, 0, 0, 0, 68, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 65, 99, 116, 105, 111, 110, 69, 108,
			101, 109, 101, 110, 116, 77, 97, 112, 83, 101,
			116, 77, 111, 100, 105, 102, 105, 101, 114, 75,
			101, 121, 49, 0, 0, 0, 0, 68, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 65, 99, 116, 105, 111,
			110, 69, 108, 101, 109, 101, 110, 116, 77, 97,
			112, 83, 101, 116, 77, 111, 100, 105, 102, 105,
			101, 114, 75, 101, 121, 50, 0, 0, 0, 0,
			68, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 65, 99,
			116, 105, 111, 110, 69, 108, 101, 109, 101, 110,
			116, 77, 97, 112, 83, 101, 116, 77, 111, 100,
			105, 102, 105, 101, 114, 75, 101, 121, 51, 0,
			0, 0, 0, 63, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 65, 99, 116, 105, 111, 110, 69, 108, 101,
			109, 101, 110, 116, 77, 97, 112, 83, 101, 116,
			75, 101, 121, 67, 111, 100, 101, 0, 0, 0,
			0, 35, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 84, 111, 111, 108, 115, 0, 0, 0,
			0, 48, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 66, 97, 115, 101, 70, 115, 109, 83,
			116, 97, 116, 101, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 50, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 71, 101, 116, 73, 110,
			116, 70, 115, 109, 83, 116, 97, 116, 101, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 52,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			71, 101, 116, 70, 108, 111, 97, 116, 70, 115,
			109, 83, 116, 97, 116, 101, 65, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 51, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 71, 101, 116,
			66, 111, 111, 108, 70, 115, 109, 83, 116, 97,
			116, 101, 65, 99, 116, 105, 111, 110, 0, 0,
			0, 0, 53, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 71, 101, 116, 83, 116, 114, 105,
			110, 103, 70, 115, 109, 83, 116, 97, 116, 101,
			65, 99, 116, 105, 111, 110, 0, 0, 0, 0,
			51, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 71, 101, 116, 69, 110, 117, 109, 70, 115,
			109, 83, 116, 97, 116, 101, 65, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 55, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 71, 101, 116,
			73, 110, 116, 65, 114, 114, 97, 121, 70, 115,
			109, 83, 116, 97, 116, 101, 65, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 57, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 71, 101, 116,
			70, 108, 111, 97, 116, 65, 114, 114, 97, 121,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 56, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 71,
			101, 116, 66, 111, 111, 108, 65, 114, 114, 97,
			121, 70, 115, 109, 83, 116, 97, 116, 101, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 58,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			71, 101, 116, 83, 116, 114, 105, 110, 103, 65,
			114, 114, 97, 121, 70, 115, 109, 83, 116, 97,
			116, 101, 65, 99, 116, 105, 111, 110, 0, 0,
			0, 0, 51, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 83, 101, 116, 66, 111, 111, 108,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 50, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 83,
			101, 116, 73, 110, 116, 70, 115, 109, 83, 116,
			97, 116, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 52, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 83, 101, 116, 70, 108, 111,
			97, 116, 70, 115, 109, 83, 116, 97, 116, 101,
			65, 99, 116, 105, 111, 110, 0, 0, 0, 0,
			53, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 83, 101, 116, 83, 116, 114, 105, 110, 103,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 51, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 83,
			101, 116, 69, 110, 117, 109, 70, 115, 109, 83,
			116, 97, 116, 101, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 57, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 70, 115,
			109, 83, 116, 97, 116, 101, 65, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 68, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 73, 110, 116, 65, 114, 114, 97,
			121, 70, 115, 109, 83, 116, 97, 116, 101, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 63,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 65, 99, 116, 105, 111, 110, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 71, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 65, 99, 116, 105, 111, 110, 71, 101, 116,
			70, 108, 111, 97, 116, 70, 115, 109, 83, 116,
			97, 116, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 70, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 65, 99, 116,
			105, 111, 110, 71, 101, 116, 66, 111, 111, 108,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 64, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 66, 111, 111, 108, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 72, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 65, 99, 116, 105, 111, 110, 71, 101, 116,
			65, 120, 105, 115, 50, 68, 70, 115, 109, 83,
			116, 97, 116, 101, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 70, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 73, 110,
			112, 117, 116, 66, 101, 104, 97, 118, 105, 111,
			114, 70, 115, 109, 83, 116, 97, 116, 101, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 64,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 83, 101, 116, 66, 111, 111, 108,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 70, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 76, 97, 121, 111, 117, 116, 77, 97,
			110, 97, 103, 101, 114, 70, 115, 109, 83, 116,
			97, 116, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 77, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 76, 97, 121,
			111, 117, 116, 77, 97, 110, 97, 103, 101, 114,
			71, 101, 116, 66, 111, 111, 108, 70, 115, 109,
			83, 116, 97, 116, 101, 65, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 77, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 76,
			97, 121, 111, 117, 116, 77, 97, 110, 97, 103,
			101, 114, 83, 101, 116, 66, 111, 111, 108, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 77, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 76, 97, 121, 111, 117, 116, 77, 97, 110,
			97, 103, 101, 114, 82, 117, 108, 101, 83, 101,
			116, 70, 115, 109, 83, 116, 97, 116, 101, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 84,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 76, 97, 121, 111, 117, 116, 77,
			97, 110, 97, 103, 101, 114, 82, 117, 108, 101,
			83, 101, 116, 71, 101, 116, 66, 111, 111, 108,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 84, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 76, 97, 121, 111, 117, 116, 77, 97,
			110, 97, 103, 101, 114, 82, 117, 108, 101, 83,
			101, 116, 83, 101, 116, 66, 111, 111, 108, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 67, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 77, 97, 112, 69, 110, 97, 98, 108, 101,
			114, 70, 115, 109, 83, 116, 97, 116, 101, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 74,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 77, 97, 112, 69, 110, 97, 98,
			108, 101, 114, 71, 101, 116, 66, 111, 111, 108,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 74, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 77, 97, 112, 69, 110, 97, 98, 108,
			101, 114, 83, 101, 116, 66, 111, 111, 108, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 74, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 77, 97, 112, 69, 110, 97, 98, 108, 101,
			114, 82, 117, 108, 101, 83, 101, 116, 70, 115,
			109, 83, 116, 97, 116, 101, 65, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 81, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			77, 97, 112, 69, 110, 97, 98, 108, 101, 114,
			82, 117, 108, 101, 83, 101, 116, 71, 101, 116,
			66, 111, 111, 108, 70, 115, 109, 83, 116, 97,
			116, 101, 65, 99, 116, 105, 111, 110, 0, 0,
			0, 0, 81, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 77, 97, 112, 69,
			110, 97, 98, 108, 101, 114, 82, 117, 108, 101,
			83, 101, 116, 83, 101, 116, 66, 111, 111, 108,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 61, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 70, 115, 109, 83,
			116, 97, 116, 101, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 67, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 73, 110, 116, 70, 115,
			109, 83, 116, 97, 116, 101, 65, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 69, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 70, 108, 111,
			97, 116, 70, 115, 109, 83, 116, 97, 116, 101,
			65, 99, 116, 105, 111, 110, 0, 0, 0, 0,
			68, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 66, 111, 111, 108, 70, 115, 109, 83, 116,
			97, 116, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 70, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 71, 101, 116, 83, 116, 114, 105, 110, 103,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 68, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 83, 101, 116, 66,
			111, 111, 108, 70, 115, 109, 83, 116, 97, 116,
			101, 65, 99, 116, 105, 111, 110, 0, 0, 0,
			0, 71, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 71,
			101, 116, 86, 101, 99, 116, 111, 114, 50, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 59, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 74, 111, 121, 115, 116,
			105, 99, 107, 70, 115, 109, 83, 116, 97, 116,
			101, 65, 99, 116, 105, 111, 110, 0, 0, 0,
			0, 65, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 74,
			111, 121, 115, 116, 105, 99, 107, 71, 101, 116,
			73, 110, 116, 70, 115, 109, 83, 116, 97, 116,
			101, 65, 99, 116, 105, 111, 110, 0, 0, 0,
			0, 67, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 74,
			111, 121, 115, 116, 105, 99, 107, 71, 101, 116,
			70, 108, 111, 97, 116, 70, 115, 109, 83, 116,
			97, 116, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 66, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 74, 111, 121, 115, 116, 105, 99, 107, 71,
			101, 116, 66, 111, 111, 108, 70, 115, 109, 83,
			116, 97, 116, 101, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 68, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 74, 111, 121, 115, 116, 105, 99, 107,
			71, 101, 116, 83, 116, 114, 105, 110, 103, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 68, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 74, 111, 121, 115, 116,
			105, 99, 107, 83, 101, 116, 83, 116, 114, 105,
			110, 103, 70, 115, 109, 83, 116, 97, 116, 101,
			65, 99, 116, 105, 111, 110, 0, 0, 0, 0,
			68, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 74, 111,
			121, 115, 116, 105, 99, 107, 69, 120, 116, 101,
			110, 115, 105, 111, 110, 70, 115, 109, 83, 116,
			97, 116, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 74, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 74, 111, 121, 115, 116, 105, 99, 107, 69,
			120, 116, 101, 110, 115, 105, 111, 110, 71, 101,
			116, 73, 110, 116, 70, 115, 109, 83, 116, 97,
			116, 101, 65, 99, 116, 105, 111, 110, 0, 0,
			0, 0, 76, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			74, 111, 121, 115, 116, 105, 99, 107, 69, 120,
			116, 101, 110, 115, 105, 111, 110, 71, 101, 116,
			70, 108, 111, 97, 116, 70, 115, 109, 83, 116,
			97, 116, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 75, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 74, 111, 121, 115, 116, 105, 99, 107, 69,
			120, 116, 101, 110, 115, 105, 111, 110, 71, 101,
			116, 66, 111, 111, 108, 70, 115, 109, 83, 116,
			97, 116, 101, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 77, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 74, 111, 121, 115, 116, 105, 99, 107, 69,
			120, 116, 101, 110, 115, 105, 111, 110, 71, 101,
			116, 83, 116, 114, 105, 110, 103, 70, 115, 109,
			83, 116, 97, 116, 101, 65, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 75, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 74, 111, 121, 115, 116, 105, 99,
			107, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			71, 101, 116, 69, 110, 117, 109, 70, 115, 109,
			83, 116, 97, 116, 101, 65, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 76, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 74, 111, 121, 115, 116, 105, 99,
			107, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			71, 101, 116, 67, 111, 108, 111, 114, 70, 115,
			109, 83, 116, 97, 116, 101, 65, 99, 116, 105,
			111, 110, 0, 0, 0, 0, 78, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 74, 111, 121, 115, 116, 105,
			99, 107, 69, 120, 116, 101, 110, 115, 105, 111,
			110, 71, 101, 116, 86, 101, 99, 116, 111, 114,
			51, 70, 115, 109, 83, 116, 97, 116, 101, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 81,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 74, 111, 121,
			115, 116, 105, 99, 107, 69, 120, 116, 101, 110,
			115, 105, 111, 110, 71, 101, 116, 81, 117, 97,
			116, 101, 114, 110, 105, 111, 110, 70, 115, 109,
			83, 116, 97, 116, 101, 65, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 74, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 74, 111, 121, 115, 116, 105, 99,
			107, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			83, 101, 116, 73, 110, 116, 70, 115, 109, 83,
			116, 97, 116, 101, 65, 99, 116, 105, 111, 110,
			0, 0, 0, 0, 76, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 74, 111, 121, 115, 116, 105, 99, 107,
			69, 120, 116, 101, 110, 115, 105, 111, 110, 83,
			101, 116, 70, 108, 111, 97, 116, 70, 115, 109,
			83, 116, 97, 116, 101, 65, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 75, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 74, 111, 121, 115, 116, 105, 99,
			107, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			83, 101, 116, 66, 111, 111, 108, 70, 115, 109,
			83, 116, 97, 116, 101, 65, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 77, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 74, 111, 121, 115, 116, 105, 99,
			107, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			83, 101, 116, 83, 116, 114, 105, 110, 103, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 75, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 74, 111, 121, 115, 116,
			105, 99, 107, 69, 120, 116, 101, 110, 115, 105,
			111, 110, 83, 101, 116, 69, 110, 117, 109, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 76, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 74, 111, 121, 115, 116,
			105, 99, 107, 69, 120, 116, 101, 110, 115, 105,
			111, 110, 83, 101, 116, 67, 111, 108, 111, 114,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 67, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 65, 99, 116, 105,
			111, 110, 69, 108, 101, 109, 101, 110, 116, 77,
			97, 112, 70, 115, 109, 83, 116, 97, 116, 101,
			65, 99, 116, 105, 111, 110, 0, 0, 0, 0,
			73, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 65, 99,
			116, 105, 111, 110, 69, 108, 101, 109, 101, 110,
			116, 77, 97, 112, 71, 101, 116, 73, 110, 116,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 75, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 65, 99, 116, 105,
			111, 110, 69, 108, 101, 109, 101, 110, 116, 77,
			97, 112, 71, 101, 116, 70, 108, 111, 97, 116,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 74, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 65, 99, 116, 105,
			111, 110, 69, 108, 101, 109, 101, 110, 116, 77,
			97, 112, 71, 101, 116, 66, 111, 111, 108, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 76, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 65, 99, 116, 105, 111,
			110, 69, 108, 101, 109, 101, 110, 116, 77, 97,
			112, 71, 101, 116, 83, 116, 114, 105, 110, 103,
			70, 115, 109, 83, 116, 97, 116, 101, 65, 99,
			116, 105, 111, 110, 0, 0, 0, 0, 74, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 65, 99, 116, 105,
			111, 110, 69, 108, 101, 109, 101, 110, 116, 77,
			97, 112, 83, 101, 116, 66, 111, 111, 108, 70,
			115, 109, 83, 116, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 0, 0, 0, 0, 73, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 65, 99, 116, 105, 111,
			110, 69, 108, 101, 109, 101, 110, 116, 77, 97,
			112, 83, 101, 116, 73, 110, 116, 70, 115, 109,
			83, 116, 97, 116, 101, 65, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 57, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 71, 101, 116, 69, 110, 97, 98,
			108, 101, 100, 0, 0, 0, 0, 57, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 83, 101, 116, 69, 110,
			97, 98, 108, 101, 100, 0, 0, 0, 0, 52,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 71, 101, 116,
			73, 100, 0, 0, 0, 0, 54, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 78, 97, 109,
			101, 0, 0, 0, 0, 53, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 71, 101, 116, 84, 97, 103, 0,
			0, 0, 0, 53, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 83, 101, 116, 84, 97, 103, 0, 0, 0,
			0, 62, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 71,
			101, 116, 72, 97, 114, 100, 119, 97, 114, 101,
			78, 97, 109, 101, 0, 0, 0, 0, 54, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 84,
			121, 112, 101, 0, 0, 0, 0, 61, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 71, 101, 116, 73, 115,
			67, 111, 110, 110, 101, 99, 116, 101, 100, 0,
			0, 0, 0, 61, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 71, 101, 116, 66, 117, 116, 116, 111, 110,
			67, 111, 117, 110, 116, 0, 0, 0, 0, 68,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 71, 101, 116,
			72, 97, 114, 100, 119, 97, 114, 101, 73, 100,
			101, 110, 116, 105, 102, 105, 101, 114, 0, 0,
			0, 0, 63, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 77, 97, 112, 84, 121, 112, 101,
			83, 116, 114, 105, 110, 103, 0, 0, 0, 0,
			64, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 76, 97, 115, 116, 84, 105, 109, 101, 65,
			99, 116, 105, 118, 101, 0, 0, 0, 0, 74,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 71, 101, 116,
			76, 97, 115, 116, 84, 105, 109, 101, 65, 110,
			121, 66, 117, 116, 116, 111, 110, 80, 114, 101,
			115, 115, 101, 100, 0, 0, 0, 0, 74, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 76,
			97, 115, 116, 84, 105, 109, 101, 65, 110, 121,
			66, 117, 116, 116, 111, 110, 67, 104, 97, 110,
			103, 101, 100, 0, 0, 0, 0, 75, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 71, 101, 116, 76, 97,
			115, 116, 84, 105, 109, 101, 65, 110, 121, 69,
			108, 101, 109, 101, 110, 116, 67, 104, 97, 110,
			103, 101, 100, 0, 0, 0, 0, 59, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 71, 101, 116, 65, 110,
			121, 66, 117, 116, 116, 111, 110, 0, 0, 0,
			0, 63, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 71,
			101, 116, 65, 110, 121, 66, 117, 116, 116, 111,
			110, 68, 111, 119, 110, 0, 0, 0, 0, 61,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 71, 101, 116,
			65, 110, 121, 66, 117, 116, 116, 111, 110, 85,
			112, 0, 0, 0, 0, 63, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 71, 101, 116, 65, 110, 121, 66,
			117, 116, 116, 111, 110, 80, 114, 101, 118, 0,
			0, 0, 0, 66, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 71, 101, 116, 65, 110, 121, 66, 117, 116,
			116, 111, 110, 67, 104, 97, 110, 103, 101, 100,
			0, 0, 0, 0, 56, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 66, 117, 116, 116, 111,
			110, 0, 0, 0, 0, 60, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 71, 101, 116, 66, 117, 116, 116,
			111, 110, 68, 111, 119, 110, 0, 0, 0, 0,
			58, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 66, 117, 116, 116, 111, 110, 85, 112, 0,
			0, 0, 0, 60, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 71, 101, 116, 66, 117, 116, 116, 111, 110,
			80, 114, 101, 118, 0, 0, 0, 0, 63, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 67, 104, 97, 110, 103,
			101, 100, 0, 0, 0, 0, 60, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 66, 117, 116,
			116, 111, 110, 66, 121, 73, 100, 0, 0, 0,
			0, 64, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 71,
			101, 116, 66, 117, 116, 116, 111, 110, 68, 111,
			119, 110, 66, 121, 73, 100, 0, 0, 0, 0,
			62, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 66, 117, 116, 116, 111, 110, 85, 112, 66,
			121, 73, 100, 0, 0, 0, 0, 64, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 71, 101, 116, 66, 117,
			116, 116, 111, 110, 80, 114, 101, 118, 66, 121,
			73, 100, 0, 0, 0, 0, 71, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 66, 117, 116,
			116, 111, 110, 68, 111, 117, 98, 108, 101, 80,
			114, 101, 115, 115, 72, 111, 108, 100, 0, 0,
			0, 0, 71, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 66, 117, 116, 116, 111, 110, 68,
			111, 117, 98, 108, 101, 80, 114, 101, 115, 115,
			68, 111, 119, 110, 0, 0, 0, 0, 75, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 68, 111, 117, 98, 108,
			101, 80, 114, 101, 115, 115, 72, 111, 108, 100,
			66, 121, 73, 100, 0, 0, 0, 0, 75, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 68, 111, 117, 98, 108,
			101, 80, 114, 101, 115, 115, 68, 111, 119, 110,
			66, 121, 73, 100, 0, 0, 0, 0, 67, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 84, 105, 109, 101, 80,
			114, 101, 115, 115, 101, 100, 0, 0, 0, 0,
			69, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 66, 117, 116, 116, 111, 110, 84, 105, 109,
			101, 85, 110, 112, 114, 101, 115, 115, 101, 100,
			0, 0, 0, 0, 71, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 66, 117, 116, 116, 111,
			110, 76, 97, 115, 116, 84, 105, 109, 101, 80,
			114, 101, 115, 115, 101, 100, 0, 0, 0, 0,
			73, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 66, 117, 116, 116, 111, 110, 76, 97, 115,
			116, 84, 105, 109, 101, 85, 110, 112, 114, 101,
			115, 115, 101, 100, 0, 0, 0, 0, 71, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 84, 105, 109, 101, 80,
			114, 101, 115, 115, 101, 100, 66, 121, 73, 100,
			0, 0, 0, 0, 73, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 66, 117, 116, 116, 111,
			110, 84, 105, 109, 101, 85, 110, 112, 114, 101,
			115, 115, 101, 100, 66, 121, 73, 100, 0, 0,
			0, 0, 75, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 66, 117, 116, 116, 111, 110, 76,
			97, 115, 116, 84, 105, 109, 101, 80, 114, 101,
			115, 115, 101, 100, 66, 121, 73, 100, 0, 0,
			0, 0, 77, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 66, 117, 116, 116, 111, 110, 76,
			97, 115, 116, 84, 105, 109, 101, 85, 110, 112,
			114, 101, 115, 115, 101, 100, 66, 121, 73, 100,
			0, 0, 0, 0, 65, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 66, 117, 116, 116, 111,
			110, 73, 110, 100, 101, 120, 66, 121, 73, 100,
			0, 0, 0, 0, 66, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 73, 109, 112, 101, 108, 101, 109, 101,
			110, 116, 115, 84, 101, 109, 112, 108, 97, 116,
			101, 0, 0, 0, 0, 72, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 71, 101, 116, 72, 97, 114, 100,
			119, 97, 114, 101, 84, 121, 112, 101, 71, 117,
			105, 100, 83, 116, 114, 105, 110, 103, 0, 0,
			0, 0, 74, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 68, 101, 118, 105, 99, 101, 73,
			110, 115, 116, 97, 110, 99, 101, 71, 117, 105,
			100, 83, 116, 114, 105, 110, 103, 0, 0, 0,
			0, 59, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 71,
			101, 116, 65, 120, 105, 115, 67, 111, 117, 110,
			116, 0, 0, 0, 0, 61, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 71, 101, 116, 65, 120, 105, 115,
			50, 68, 67, 111, 117, 110, 116, 0, 0, 0,
			0, 71, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 71,
			101, 116, 76, 97, 115, 116, 84, 105, 109, 101,
			65, 110, 121, 65, 120, 105, 115, 65, 99, 116,
			105, 118, 101, 0, 0, 0, 0, 72, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 71, 101, 116, 76, 97,
			115, 116, 84, 105, 109, 101, 65, 110, 121, 65,
			120, 105, 115, 67, 104, 97, 110, 103, 101, 100,
			0, 0, 0, 0, 54, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 65, 120, 105, 115, 0,
			0, 0, 0, 58, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 71, 101, 116, 65, 120, 105, 115, 80, 114,
			101, 118, 0, 0, 0, 0, 57, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 82, 97, 119, 0, 0, 0, 0, 61, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 65,
			120, 105, 115, 82, 97, 119, 80, 114, 101, 118,
			0, 0, 0, 0, 58, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 65, 120, 105, 115, 66,
			121, 73, 100, 0, 0, 0, 0, 62, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 71, 101, 116, 65, 120,
			105, 115, 80, 114, 101, 118, 66, 121, 73, 100,
			0, 0, 0, 0, 61, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 65, 120, 105, 115, 82,
			97, 119, 66, 121, 73, 100, 0, 0, 0, 0,
			65, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 65, 120, 105, 115, 82, 97, 119, 80, 114,
			101, 118, 66, 121, 73, 100, 0, 0, 0, 0,
			56, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 65, 120, 105, 115, 50, 68, 0, 0, 0,
			0, 60, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 71,
			101, 116, 65, 120, 105, 115, 50, 68, 80, 114,
			101, 118, 0, 0, 0, 0, 59, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 50, 68, 82, 97, 119, 0, 0, 0, 0,
			63, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 65, 120, 105, 115, 50, 68, 82, 97, 119,
			80, 114, 101, 118, 0, 0, 0, 0, 68, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 65,
			120, 105, 115, 76, 97, 115, 116, 84, 105, 109,
			101, 65, 99, 116, 105, 118, 101, 0, 0, 0,
			0, 70, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 71,
			101, 116, 65, 120, 105, 115, 76, 97, 115, 116,
			84, 105, 109, 101, 73, 110, 97, 99, 116, 105,
			118, 101, 0, 0, 0, 0, 71, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 82, 97, 119, 76, 97, 115, 116, 84, 105,
			109, 101, 65, 99, 116, 105, 118, 101, 0, 0,
			0, 0, 73, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 65, 120, 105, 115, 82, 97, 119,
			76, 97, 115, 116, 84, 105, 109, 101, 73, 110,
			97, 99, 116, 105, 118, 101, 0, 0, 0, 0,
			64, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 65, 120, 105, 115, 84, 105, 109, 101, 65,
			99, 116, 105, 118, 101, 0, 0, 0, 0, 66,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 71, 101, 116,
			65, 120, 105, 115, 84, 105, 109, 101, 73, 110,
			97, 99, 116, 105, 118, 101, 0, 0, 0, 0,
			67, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 71, 101,
			116, 65, 120, 105, 115, 82, 97, 119, 84, 105,
			109, 101, 65, 99, 116, 105, 118, 101, 0, 0,
			0, 0, 69, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 65, 120, 105, 115, 82, 97, 119,
			84, 105, 109, 101, 73, 110, 97, 99, 116, 105,
			118, 101, 0, 0, 0, 0, 72, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 76, 97, 115, 116, 84, 105, 109, 101, 65,
			99, 116, 105, 118, 101, 66, 121, 73, 100, 0,
			0, 0, 0, 74, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 71, 101, 116, 65, 120, 105, 115, 76, 97,
			115, 116, 84, 105, 109, 101, 73, 110, 97, 99,
			116, 105, 118, 101, 66, 121, 73, 100, 0, 0,
			0, 0, 75, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 65, 120, 105, 115, 82, 97, 119,
			76, 97, 115, 116, 84, 105, 109, 101, 65, 99,
			116, 105, 118, 101, 66, 121, 73, 100, 0, 0,
			0, 0, 77, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 65, 120, 105, 115, 82, 97, 119,
			76, 97, 115, 116, 84, 105, 109, 101, 73, 110,
			97, 99, 116, 105, 118, 101, 66, 121, 73, 100,
			0, 0, 0, 0, 68, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 71, 101, 116, 65, 120, 105, 115, 84,
			105, 109, 101, 65, 99, 116, 105, 118, 101, 66,
			121, 73, 100, 0, 0, 0, 0, 70, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 71, 101, 116, 65, 120,
			105, 115, 84, 105, 109, 101, 73, 110, 97, 99,
			116, 105, 118, 101, 66, 121, 73, 100, 0, 0,
			0, 0, 71, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			71, 101, 116, 65, 120, 105, 115, 82, 97, 119,
			84, 105, 109, 101, 65, 99, 116, 105, 118, 101,
			66, 121, 73, 100, 0, 0, 0, 0, 73, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 71, 101, 116, 65,
			120, 105, 115, 82, 97, 119, 84, 105, 109, 101,
			73, 110, 97, 99, 116, 105, 118, 101, 66, 121,
			73, 100, 0, 0, 0, 0, 63, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 73, 110, 100, 101, 120, 66, 121, 73, 100,
			0, 0, 0, 0, 55, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 74, 111, 121, 115, 116, 105, 99, 107,
			71, 101, 116, 85, 110, 105, 116, 121, 73, 100,
			0, 0, 0, 0, 70, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 74, 111, 121, 115, 116, 105, 99, 107,
			71, 101, 116, 72, 97, 114, 100, 119, 97, 114,
			101, 84, 121, 112, 101, 71, 117, 105, 100, 83,
			116, 114, 105, 110, 103, 0, 0, 0, 0, 65,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 74, 111, 121,
			115, 116, 105, 99, 107, 71, 101, 116, 83, 117,
			112, 112, 111, 114, 116, 115, 86, 105, 98, 114,
			97, 116, 105, 111, 110, 0, 0, 0, 0, 67,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 74, 111, 121,
			115, 116, 105, 99, 107, 71, 101, 116, 86, 105,
			98, 114, 97, 116, 105, 111, 110, 77, 111, 116,
			111, 114, 67, 111, 117, 110, 116, 0, 0, 0,
			0, 57, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 74,
			111, 121, 115, 116, 105, 99, 107, 83, 101, 116,
			86, 105, 98, 114, 97, 116, 105, 111, 110, 0,
			0, 0, 0, 64, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 83, 116, 111,
			112, 74, 111, 121, 115, 116, 105, 99, 107, 86,
			105, 98, 114, 97, 116, 105, 111, 110, 0, 0,
			0, 0, 52, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 0, 0, 0, 0, 56,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 66, 117, 116, 116,
			111, 110, 68, 111, 119, 110, 0, 0, 0, 0,
			54, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 66, 117, 116,
			116, 111, 110, 85, 112, 0, 0, 0, 0, 56,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 66, 117, 116, 116,
			111, 110, 80, 114, 101, 118, 0, 0, 0, 0,
			67, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 66, 117, 116,
			116, 111, 110, 83, 105, 110, 103, 108, 101, 80,
			114, 101, 115, 115, 72, 111, 108, 100, 0, 0,
			0, 0, 67, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 83, 105, 110, 103, 108,
			101, 80, 114, 101, 115, 115, 68, 111, 119, 110,
			0, 0, 0, 0, 65, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 66, 117, 116, 116, 111, 110, 83, 105, 110,
			103, 108, 101, 80, 114, 101, 115, 115, 85, 112,
			0, 0, 0, 0, 67, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 66, 117, 116, 116, 111, 110, 68, 111, 117,
			98, 108, 101, 80, 114, 101, 115, 115, 72, 111,
			108, 100, 0, 0, 0, 0, 67, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 66, 117, 116, 116, 111, 110, 68,
			111, 117, 98, 108, 101, 80, 114, 101, 115, 115,
			68, 111, 119, 110, 0, 0, 0, 0, 65, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 66, 117, 116, 116, 111,
			110, 68, 111, 117, 98, 108, 101, 80, 114, 101,
			115, 115, 85, 112, 0, 0, 0, 0, 62, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 66, 117, 116, 116, 111,
			110, 84, 105, 109, 101, 100, 80, 114, 101, 115,
			115, 0, 0, 0, 0, 66, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 66, 117, 116, 116, 111, 110, 84, 105,
			109, 101, 100, 80, 114, 101, 115, 115, 68, 111,
			119, 110, 0, 0, 0, 0, 64, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 66, 117, 116, 116, 111, 110, 84,
			105, 109, 101, 100, 80, 114, 101, 115, 115, 85,
			112, 0, 0, 0, 0, 62, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 66, 117, 116, 116, 111, 110, 83, 104,
			111, 114, 116, 80, 114, 101, 115, 115, 0, 0,
			0, 0, 66, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 83, 104, 111, 114, 116,
			80, 114, 101, 115, 115, 68, 111, 119, 110, 0,
			0, 0, 0, 64, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			66, 117, 116, 116, 111, 110, 83, 104, 111, 114,
			116, 80, 114, 101, 115, 115, 85, 112, 0, 0,
			0, 0, 61, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 76, 111, 110, 103, 80,
			114, 101, 115, 115, 0, 0, 0, 0, 65, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 66, 117, 116, 116, 111,
			110, 76, 111, 110, 103, 80, 114, 101, 115, 115,
			68, 111, 119, 110, 0, 0, 0, 0, 63, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 66, 117, 116, 116, 111,
			110, 76, 111, 110, 103, 80, 114, 101, 115, 115,
			85, 112, 0, 0, 0, 0, 61, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 66, 117, 116, 116, 111, 110, 82,
			101, 112, 101, 97, 116, 105, 110, 103, 0, 0,
			0, 0, 63, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 84, 105, 109, 101, 80,
			114, 101, 115, 115, 101, 100, 0, 0, 0, 0,
			65, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 66, 117, 116,
			116, 111, 110, 84, 105, 109, 101, 85, 110, 112,
			114, 101, 115, 115, 101, 100, 0, 0, 0, 0,
			55, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 65, 110, 121,
			66, 117, 116, 116, 111, 110, 0, 0, 0, 0,
			59, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 65, 110, 121,
			66, 117, 116, 116, 111, 110, 68, 111, 119, 110,
			0, 0, 0, 0, 57, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 65, 110, 121, 66, 117, 116, 116, 111, 110,
			85, 112, 0, 0, 0, 0, 59, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 65, 110, 121, 66, 117, 116, 116,
			111, 110, 80, 114, 101, 118, 0, 0, 0, 0,
			60, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 78, 101, 103,
			97, 116, 105, 118, 101, 66, 117, 116, 116, 111,
			110, 0, 0, 0, 0, 64, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 78, 101, 103, 97, 116, 105, 118, 101,
			66, 117, 116, 116, 111, 110, 68, 111, 119, 110,
			0, 0, 0, 0, 62, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 78, 101, 103, 97, 116, 105, 118, 101, 66,
			117, 116, 116, 111, 110, 85, 112, 0, 0, 0,
			0, 64, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 78, 101,
			103, 97, 116, 105, 118, 101, 66, 117, 116, 116,
			111, 110, 80, 114, 101, 118, 0, 0, 0, 0,
			75, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 78, 101, 103,
			97, 116, 105, 118, 101, 66, 117, 116, 116, 111,
			110, 83, 105, 110, 103, 108, 101, 80, 114, 101,
			115, 115, 72, 111, 108, 100, 0, 0, 0, 0,
			75, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 78, 101, 103,
			97, 116, 105, 118, 101, 66, 117, 116, 116, 111,
			110, 83, 105, 110, 103, 108, 101, 80, 114, 101,
			115, 115, 68, 111, 119, 110, 0, 0, 0, 0,
			73, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 78, 101, 103,
			97, 116, 105, 118, 101, 66, 117, 116, 116, 111,
			110, 83, 105, 110, 103, 108, 101, 80, 114, 101,
			115, 115, 85, 112, 0, 0, 0, 0, 75, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 78, 101, 103, 97, 116,
			105, 118, 101, 66, 117, 116, 116, 111, 110, 68,
			111, 117, 98, 108, 101, 80, 114, 101, 115, 115,
			68, 111, 119, 110, 0, 0, 0, 0, 75, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 78, 101, 103, 97, 116,
			105, 118, 101, 66, 117, 116, 116, 111, 110, 68,
			111, 117, 98, 108, 101, 80, 114, 101, 115, 115,
			72, 111, 108, 100, 0, 0, 0, 0, 73, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 78, 101, 103, 97, 116,
			105, 118, 101, 66, 117, 116, 116, 111, 110, 68,
			111, 117, 98, 108, 101, 80, 114, 101, 115, 115,
			85, 112, 0, 0, 0, 0, 70, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 78, 101, 103, 97, 116, 105, 118,
			101, 66, 117, 116, 116, 111, 110, 84, 105, 109,
			101, 100, 80, 114, 101, 115, 115, 0, 0, 0,
			0, 74, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 78, 101,
			103, 97, 116, 105, 118, 101, 66, 117, 116, 116,
			111, 110, 84, 105, 109, 101, 100, 80, 114, 101,
			115, 115, 68, 111, 119, 110, 0, 0, 0, 0,
			72, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 78, 101, 103,
			97, 116, 105, 118, 101, 66, 117, 116, 116, 111,
			110, 84, 105, 109, 101, 100, 80, 114, 101, 115,
			115, 85, 112, 0, 0, 0, 0, 70, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 78, 101, 103, 97, 116, 105,
			118, 101, 66, 117, 116, 116, 111, 110, 83, 104,
			111, 114, 116, 80, 114, 101, 115, 115, 0, 0,
			0, 0, 74, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 78,
			101, 103, 97, 116, 105, 118, 101, 66, 117, 116,
			116, 111, 110, 83, 104, 111, 114, 116, 80, 114,
			101, 115, 115, 68, 111, 119, 110, 0, 0, 0,
			0, 72, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 78, 101,
			103, 97, 116, 105, 118, 101, 66, 117, 116, 116,
			111, 110, 83, 104, 111, 114, 116, 80, 114, 101,
			115, 115, 85, 112, 0, 0, 0, 0, 69, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 78, 101, 103, 97, 116,
			105, 118, 101, 66, 117, 116, 116, 111, 110, 76,
			111, 110, 103, 80, 114, 101, 115, 115, 0, 0,
			0, 0, 73, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 78,
			101, 103, 97, 116, 105, 118, 101, 66, 117, 116,
			116, 111, 110, 76, 111, 110, 103, 80, 114, 101,
			115, 115, 68, 111, 119, 110, 0, 0, 0, 0,
			71, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 78, 101, 103,
			97, 116, 105, 118, 101, 66, 117, 116, 116, 111,
			110, 76, 111, 110, 103, 80, 114, 101, 115, 115,
			85, 112, 0, 0, 0, 0, 69, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 78, 101, 103, 97, 116, 105, 118,
			101, 66, 117, 116, 116, 111, 110, 82, 101, 112,
			101, 97, 116, 105, 110, 103, 0, 0, 0, 0,
			71, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 78, 101, 103,
			97, 116, 105, 118, 101, 66, 117, 116, 116, 111,
			110, 84, 105, 109, 101, 80, 114, 101, 115, 115,
			101, 100, 0, 0, 0, 0, 73, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 78, 101, 103, 97, 116, 105, 118,
			101, 66, 117, 116, 116, 111, 110, 84, 105, 109,
			101, 85, 110, 112, 114, 101, 115, 115, 101, 100,
			0, 0, 0, 0, 63, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 65, 110, 121, 78, 101, 103, 97, 116, 105,
			118, 101, 66, 117, 116, 116, 111, 110, 0, 0,
			0, 0, 67, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 65,
			110, 121, 78, 101, 103, 97, 116, 105, 118, 101,
			66, 117, 116, 116, 111, 110, 68, 111, 119, 110,
			0, 0, 0, 0, 65, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 65, 110, 121, 78, 101, 103, 97, 116, 105,
			118, 101, 66, 117, 116, 116, 111, 110, 85, 112,
			0, 0, 0, 0, 67, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 71, 101,
			116, 65, 110, 121, 78, 101, 103, 97, 116, 105,
			118, 101, 66, 117, 116, 116, 111, 110, 80, 114,
			101, 118, 0, 0, 0, 0, 50, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			71, 101, 116, 65, 120, 105, 115, 0, 0, 0,
			0, 54, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 65, 120,
			105, 115, 80, 114, 101, 118, 0, 0, 0, 0,
			55, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 68, 101, 108, 116, 97, 0, 0, 0, 0,
			53, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 82, 97, 119, 0, 0, 0, 0, 57, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 65, 120, 105, 115, 82,
			97, 119, 80, 114, 101, 118, 0, 0, 0, 0,
			58, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 82, 97, 119, 68, 101, 108, 116, 97, 0,
			0, 0, 0, 60, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			65, 120, 105, 115, 84, 105, 109, 101, 65, 99,
			116, 105, 118, 101, 0, 0, 0, 0, 62, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 71, 101, 116, 65, 120, 105, 115, 84,
			105, 109, 101, 73, 110, 97, 99, 116, 105, 118,
			101, 0, 0, 0, 0, 63, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 65, 120, 105, 115, 82, 97, 119, 84,
			105, 109, 101, 65, 99, 116, 105, 118, 101, 0,
			0, 0, 0, 65, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			65, 120, 105, 115, 82, 97, 119, 84, 105, 109,
			101, 73, 110, 97, 99, 116, 105, 118, 101, 0,
			0, 0, 0, 52, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			65, 120, 105, 115, 50, 100, 0, 0, 0, 0,
			56, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 71, 101, 116, 65, 120, 105,
			115, 50, 100, 80, 114, 101, 118, 0, 0, 0,
			0, 55, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 65, 120,
			105, 115, 50, 100, 82, 97, 119, 0, 0, 0,
			0, 59, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 65, 120,
			105, 115, 50, 100, 82, 97, 119, 80, 114, 101,
			118, 0, 0, 0, 0, 68, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 65, 108, 108, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 86, 105, 98, 114, 97,
			116, 105, 111, 110, 0, 0, 0, 0, 69, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 83, 116, 111, 112, 65, 108, 108, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 86,
			105, 98, 114, 97, 116, 105, 111, 110, 0, 0,
			0, 0, 50, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 71, 101, 116, 78,
			97, 109, 101, 0, 0, 0, 0, 61, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 68, 101, 115, 99, 114, 105,
			112, 116, 105, 118, 101, 78, 97, 109, 101, 0,
			0, 0, 0, 55, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			73, 115, 80, 108, 97, 121, 105, 110, 103, 0,
			0, 0, 0, 55, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 83, 101, 116,
			73, 115, 80, 108, 97, 121, 105, 110, 103, 0,
			0, 0, 0, 54, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 71, 101, 116,
			72, 97, 115, 77, 111, 117, 115, 101, 0, 0,
			0, 0, 54, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 83, 101, 116, 72,
			97, 115, 77, 111, 117, 115, 101, 0, 0, 0,
			0, 59, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 74, 111,
			121, 115, 116, 105, 99, 107, 67, 111, 117, 110,
			116, 0, 0, 0, 0, 57, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 71,
			101, 116, 74, 111, 121, 115, 116, 105, 99, 107,
			73, 100, 115, 0, 0, 0, 0, 67, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 67, 117, 115, 116, 111, 109,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			67, 111, 117, 110, 116, 0, 0, 0, 0, 65,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 67, 117, 115, 116,
			111, 109, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 73, 100, 115, 0, 0, 0, 0, 81,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 71, 101, 116, 69, 120, 99, 108,
			117, 100, 101, 70, 114, 111, 109, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 65, 117, 116,
			111, 65, 115, 115, 105, 103, 110, 109, 101, 110,
			116, 0, 0, 0, 0, 81, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 83,
			101, 116, 69, 120, 99, 108, 117, 100, 101, 70,
			114, 111, 109, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 65, 117, 116, 111, 65, 115, 115,
			105, 103, 110, 109, 101, 110, 116, 0, 0, 0,
			0, 56, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 65, 100, 100, 67, 111,
			110, 116, 114, 111, 108, 108, 101, 114, 0, 0,
			0, 0, 59, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 82, 101, 109, 111,
			118, 101, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 0, 0, 0, 0, 60, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			82, 101, 109, 111, 118, 101, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 115, 0, 0, 0,
			0, 61, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 67, 111, 110, 116, 97,
			105, 110, 115, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 0, 0, 0, 0, 70, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 71, 101, 116, 76, 97, 115, 116, 65, 99,
			116, 105, 118, 101, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 84, 121, 112, 101, 0, 0,
			0, 0, 62, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 67, 108, 101, 97,
			114, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 77, 97, 112, 115, 0, 0, 0, 0, 68,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 76, 111, 97, 100, 68, 101, 102,
			97, 117, 108, 116, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 77, 97, 112, 115, 0, 0,
			0, 0, 60, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 76, 111, 97, 100,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			77, 97, 112, 0, 0, 0, 0, 62, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 82, 101, 109, 111, 118, 101, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 77, 97, 112,
			0, 0, 0, 0, 67, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 83, 101,
			116, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 77, 97, 112, 115, 69, 110, 97, 98, 108,
			101, 100, 0, 0, 0, 0, 70, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			83, 101, 116, 65, 108, 108, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 77, 97, 112, 115,
			69, 110, 97, 98, 108, 101, 100, 0, 0, 0,
			0, 73, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 71, 101, 116, 70, 105,
			114, 115, 116, 69, 108, 101, 109, 101, 110, 116,
			77, 97, 112, 73, 100, 87, 105, 116, 104, 65,
			99, 116, 105, 111, 110, 0, 0, 0, 0, 80,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 73, 110, 112, 117, 116, 66, 101,
			104, 97, 118, 105, 111, 114, 71, 101, 116, 68,
			105, 103, 105, 116, 97, 108, 65, 120, 105, 115,
			83, 105, 109, 117, 108, 97, 116, 105, 111, 110,
			0, 0, 0, 0, 77, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 73, 110,
			112, 117, 116, 66, 101, 104, 97, 118, 105, 111,
			114, 71, 101, 116, 68, 105, 103, 105, 116, 97,
			108, 65, 120, 105, 115, 71, 114, 97, 118, 105,
			116, 121, 0, 0, 0, 0, 81, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			73, 110, 112, 117, 116, 66, 101, 104, 97, 118,
			105, 111, 114, 71, 101, 116, 68, 105, 103, 105,
			116, 97, 108, 65, 120, 105, 115, 83, 101, 110,
			115, 105, 116, 105, 118, 105, 116, 121, 0, 0,
			0, 0, 74, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 73, 110, 112, 117,
			116, 66, 101, 104, 97, 118, 105, 111, 114, 71,
			101, 116, 68, 105, 103, 105, 116, 97, 108, 65,
			120, 105, 115, 83, 110, 97, 112, 0, 0, 0,
			0, 84, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 73, 110, 112, 117, 116,
			66, 101, 104, 97, 118, 105, 111, 114, 71, 101,
			116, 68, 105, 103, 105, 116, 97, 108, 65, 120,
			105, 115, 73, 110, 115, 116, 97, 110, 116, 82,
			101, 118, 101, 114, 115, 101, 0, 0, 0, 0,
			82, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 73, 110, 112, 117, 116, 66,
			101, 104, 97, 118, 105, 111, 114, 71, 101, 116,
			74, 111, 121, 115, 116, 105, 99, 107, 65, 120,
			105, 115, 83, 101, 110, 115, 105, 116, 105, 118,
			105, 116, 121, 0, 0, 0, 0, 90, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 73, 110, 112, 117, 116, 66, 101, 104, 97,
			118, 105, 111, 114, 71, 101, 116, 67, 117, 115,
			116, 111, 109, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 65, 120, 105, 115, 83, 101, 110,
			115, 105, 116, 105, 118, 105, 116, 121, 0, 0,
			0, 0, 74, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 73, 110, 112, 117,
			116, 66, 101, 104, 97, 118, 105, 111, 114, 71,
			101, 116, 77, 111, 117, 115, 101, 88, 89, 65,
			120, 105, 115, 77, 111, 100, 101, 0, 0, 0,
			0, 81, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 73, 110, 112, 117, 116,
			66, 101, 104, 97, 118, 105, 111, 114, 71, 101,
			116, 77, 111, 117, 115, 101, 88, 89, 65, 120,
			105, 115, 83, 101, 110, 115, 105, 116, 105, 118,
			105, 116, 121, 0, 0, 0, 0, 79, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 73, 110, 112, 117, 116, 66, 101, 104, 97,
			118, 105, 111, 114, 71, 101, 116, 77, 111, 117,
			115, 101, 88, 89, 65, 120, 105, 115, 68, 101,
			108, 116, 97, 67, 97, 108, 99, 0, 0, 0,
			0, 77, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 73, 110, 112, 117, 116,
			66, 101, 104, 97, 118, 105, 111, 114, 71, 101,
			116, 77, 111, 117, 115, 101, 79, 116, 104, 101,
			114, 65, 120, 105, 115, 77, 111, 100, 101, 0,
			0, 0, 0, 84, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 73, 110, 112,
			117, 116, 66, 101, 104, 97, 118, 105, 111, 114,
			71, 101, 116, 77, 111, 117, 115, 101, 79, 116,
			104, 101, 114, 65, 120, 105, 115, 83, 101, 110,
			115, 105, 116, 105, 118, 105, 116, 121, 0, 0,
			0, 0, 73, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 73, 110, 112, 117,
			116, 66, 101, 104, 97, 118, 105, 111, 114, 71,
			101, 116, 66, 117, 116, 116, 111, 110, 68, 101,
			97, 100, 90, 111, 110, 101, 0, 0, 0, 0,
			81, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 73, 110, 112, 117, 116, 66,
			101, 104, 97, 118, 105, 111, 114, 71, 101, 116,
			66, 117, 116, 116, 111, 110, 68, 111, 117, 98,
			108, 101, 80, 114, 101, 115, 115, 83, 112, 101,
			101, 100, 0, 0, 0, 0, 79, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			73, 110, 112, 117, 116, 66, 101, 104, 97, 118,
			105, 111, 114, 71, 101, 116, 66, 117, 116, 116,
			111, 110, 83, 104, 111, 114, 116, 80, 114, 101,
			115, 115, 84, 105, 109, 101, 0, 0, 0, 0,
			84, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 73, 110, 112, 117, 116, 66,
			101, 104, 97, 118, 105, 111, 114, 71, 101, 116,
			66, 117, 116, 116, 111, 110, 83, 104, 111, 114,
			116, 80, 114, 101, 115, 115, 69, 120, 112, 105,
			114, 101, 115, 73, 110, 0, 0, 0, 0, 78,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 73, 110, 112, 117, 116, 66, 101,
			104, 97, 118, 105, 111, 114, 71, 101, 116, 66,
			117, 116, 116, 111, 110, 76, 111, 110, 103, 80,
			114, 101, 115, 115, 84, 105, 109, 101, 0, 0,
			0, 0, 83, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 73, 110, 112, 117,
			116, 66, 101, 104, 97, 118, 105, 111, 114, 71,
			101, 116, 66, 117, 116, 116, 111, 110, 76, 111,
			110, 103, 80, 114, 101, 115, 115, 69, 120, 112,
			105, 114, 101, 115, 73, 110, 0, 0, 0, 0,
			75, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 73, 110, 112, 117, 116, 66,
			101, 104, 97, 118, 105, 111, 114, 71, 101, 116,
			66, 117, 116, 116, 111, 110, 68, 111, 119, 110,
			66, 117, 102, 102, 101, 114, 0, 0, 0, 0,
			80, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 73, 110, 112, 117, 116, 66,
			101, 104, 97, 118, 105, 111, 114, 83, 101, 116,
			68, 105, 103, 105, 116, 97, 108, 65, 120, 105,
			115, 83, 105, 109, 117, 108, 97, 116, 105, 111,
			110, 0, 0, 0, 0, 77, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 73,
			110, 112, 117, 116, 66, 101, 104, 97, 118, 105,
			111, 114, 83, 101, 116, 68, 105, 103, 105, 116,
			97, 108, 65, 120, 105, 115, 71, 114, 97, 118,
			105, 116, 121, 0, 0, 0, 0, 81, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 73, 110, 112, 117, 116, 66, 101, 104, 97,
			118, 105, 111, 114, 83, 101, 116, 68, 105, 103,
			105, 116, 97, 108, 65, 120, 105, 115, 83, 101,
			110, 115, 105, 116, 105, 118, 105, 116, 121, 0,
			0, 0, 0, 74, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 73, 110, 112,
			117, 116, 66, 101, 104, 97, 118, 105, 111, 114,
			83, 101, 116, 68, 105, 103, 105, 116, 97, 108,
			65, 120, 105, 115, 83, 110, 97, 112, 0, 0,
			0, 0, 84, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 73, 110, 112, 117,
			116, 66, 101, 104, 97, 118, 105, 111, 114, 83,
			101, 116, 68, 105, 103, 105, 116, 97, 108, 65,
			120, 105, 115, 73, 110, 115, 116, 97, 110, 116,
			82, 101, 118, 101, 114, 115, 101, 0, 0, 0,
			0, 82, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 73, 110, 112, 117, 116,
			66, 101, 104, 97, 118, 105, 111, 114, 83, 101,
			116, 74, 111, 121, 115, 116, 105, 99, 107, 65,
			120, 105, 115, 83, 101, 110, 115, 105, 116, 105,
			118, 105, 116, 121, 0, 0, 0, 0, 90, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 73, 110, 112, 117, 116, 66, 101, 104,
			97, 118, 105, 111, 114, 83, 101, 116, 67, 117,
			115, 116, 111, 109, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 65, 120, 105, 115, 83, 101,
			110, 115, 105, 116, 105, 118, 105, 116, 121, 0,
			0, 0, 0, 74, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 73, 110, 112,
			117, 116, 66, 101, 104, 97, 118, 105, 111, 114,
			83, 101, 116, 77, 111, 117, 115, 101, 88, 89,
			65, 120, 105, 115, 77, 111, 100, 101, 0, 0,
			0, 0, 81, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 73, 110, 112, 117,
			116, 66, 101, 104, 97, 118, 105, 111, 114, 83,
			101, 116, 77, 111, 117, 115, 101, 88, 89, 65,
			120, 105, 115, 83, 101, 110, 115, 105, 116, 105,
			118, 105, 116, 121, 0, 0, 0, 0, 79, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 73, 110, 112, 117, 116, 66, 101, 104,
			97, 118, 105, 111, 114, 83, 101, 116, 77, 111,
			117, 115, 101, 88, 89, 65, 120, 105, 115, 68,
			101, 108, 116, 97, 67, 97, 108, 99, 0, 0,
			0, 0, 77, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 73, 110, 112, 117,
			116, 66, 101, 104, 97, 118, 105, 111, 114, 83,
			101, 116, 77, 111, 117, 115, 101, 79, 116, 104,
			101, 114, 65, 120, 105, 115, 77, 111, 100, 101,
			0, 0, 0, 0, 84, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 73, 110,
			112, 117, 116, 66, 101, 104, 97, 118, 105, 111,
			114, 83, 101, 116, 77, 111, 117, 115, 101, 79,
			116, 104, 101, 114, 65, 120, 105, 115, 83, 101,
			110, 115, 105, 116, 105, 118, 105, 116, 121, 0,
			0, 0, 0, 73, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 73, 110, 112,
			117, 116, 66, 101, 104, 97, 118, 105, 111, 114,
			83, 101, 116, 66, 117, 116, 116, 111, 110, 68,
			101, 97, 100, 90, 111, 110, 101, 0, 0, 0,
			0, 81, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 73, 110, 112, 117, 116,
			66, 101, 104, 97, 118, 105, 111, 114, 83, 101,
			116, 66, 117, 116, 116, 111, 110, 68, 111, 117,
			98, 108, 101, 80, 114, 101, 115, 115, 83, 112,
			101, 101, 100, 0, 0, 0, 0, 79, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 73, 110, 112, 117, 116, 66, 101, 104, 97,
			118, 105, 111, 114, 83, 101, 116, 66, 117, 116,
			116, 111, 110, 83, 104, 111, 114, 116, 80, 114,
			101, 115, 115, 84, 105, 109, 101, 0, 0, 0,
			0, 84, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 73, 110, 112, 117, 116,
			66, 101, 104, 97, 118, 105, 111, 114, 83, 101,
			116, 66, 117, 116, 116, 111, 110, 83, 104, 111,
			114, 116, 80, 114, 101, 115, 115, 69, 120, 112,
			105, 114, 101, 115, 73, 110, 0, 0, 0, 0,
			78, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 73, 110, 112, 117, 116, 66,
			101, 104, 97, 118, 105, 111, 114, 83, 101, 116,
			66, 117, 116, 116, 111, 110, 76, 111, 110, 103,
			80, 114, 101, 115, 115, 84, 105, 109, 101, 0,
			0, 0, 0, 83, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 73, 110, 112,
			117, 116, 66, 101, 104, 97, 118, 105, 111, 114,
			83, 101, 116, 66, 117, 116, 116, 111, 110, 76,
			111, 110, 103, 80, 114, 101, 115, 115, 69, 120,
			112, 105, 114, 101, 115, 73, 110, 0, 0, 0,
			0, 75, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 73, 110, 112, 117, 116,
			66, 101, 104, 97, 118, 105, 111, 114, 83, 101,
			116, 66, 117, 116, 116, 111, 110, 68, 111, 119,
			110, 66, 117, 102, 102, 101, 114, 0, 0, 0,
			0, 66, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 80,
			108, 97, 121, 101, 114, 76, 97, 121, 111, 117,
			116, 77, 97, 110, 97, 103, 101, 114, 71, 101,
			116, 69, 110, 97, 98, 108, 101, 100, 0, 0,
			0, 0, 66, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 76, 97, 121, 111,
			117, 116, 77, 97, 110, 97, 103, 101, 114, 83,
			101, 116, 69, 110, 97, 98, 108, 101, 100, 0,
			0, 0, 0, 80, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 76, 97, 121,
			111, 117, 116, 77, 97, 110, 97, 103, 101, 114,
			71, 101, 116, 76, 111, 97, 100, 70, 114, 111,
			109, 85, 115, 101, 114, 68, 97, 116, 97, 83,
			116, 111, 114, 101, 0, 0, 0, 0, 80, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 76, 97, 121, 111, 117, 116, 77, 97,
			110, 97, 103, 101, 114, 83, 101, 116, 76, 111,
			97, 100, 70, 114, 111, 109, 85, 115, 101, 114,
			68, 97, 116, 97, 83, 116, 111, 114, 101, 0,
			0, 0, 0, 61, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 80, 108, 97, 121, 101, 114, 76, 97, 121,
			111, 117, 116, 77, 97, 110, 97, 103, 101, 114,
			65, 112, 112, 108, 121, 0, 0, 0, 0, 68,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 80, 108, 97,
			121, 101, 114, 76, 97, 121, 111, 117, 116, 77,
			97, 110, 97, 103, 101, 114, 76, 111, 97, 100,
			68, 101, 102, 97, 117, 108, 116, 115, 0, 0,
			0, 0, 73, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 76, 97, 121, 111,
			117, 116, 77, 97, 110, 97, 103, 101, 114, 82,
			117, 108, 101, 83, 101, 116, 71, 101, 116, 69,
			110, 97, 98, 108, 101, 100, 0, 0, 0, 0,
			73, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 80, 108,
			97, 121, 101, 114, 76, 97, 121, 111, 117, 116,
			77, 97, 110, 97, 103, 101, 114, 82, 117, 108,
			101, 83, 101, 116, 83, 101, 116, 69, 110, 97,
			98, 108, 101, 100, 0, 0, 0, 0, 63, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 80, 108, 97, 121,
			101, 114, 77, 97, 112, 69, 110, 97, 98, 108,
			101, 114, 71, 101, 116, 69, 110, 97, 98, 108,
			101, 100, 0, 0, 0, 0, 63, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 108, 97, 121, 101, 114,
			77, 97, 112, 69, 110, 97, 98, 108, 101, 114,
			83, 101, 116, 69, 110, 97, 98, 108, 101, 100,
			0, 0, 0, 0, 58, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 80, 108, 97, 121, 101, 114, 77, 97,
			112, 69, 110, 97, 98, 108, 101, 114, 65, 112,
			112, 108, 121, 0, 0, 0, 0, 65, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 77, 97, 112, 69, 110, 97, 98, 108, 101,
			114, 76, 111, 97, 100, 68, 101, 102, 97, 117,
			108, 116, 115, 0, 0, 0, 0, 70, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 77, 97, 112, 69, 110, 97, 98, 108, 101,
			114, 82, 117, 108, 101, 83, 101, 116, 71, 101,
			116, 69, 110, 97, 98, 108, 101, 100, 0, 0,
			0, 0, 70, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			80, 108, 97, 121, 101, 114, 77, 97, 112, 69,
			110, 97, 98, 108, 101, 114, 82, 117, 108, 101,
			83, 101, 116, 83, 101, 116, 69, 110, 97, 98,
			108, 101, 100, 0, 0, 0, 0, 63, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 80, 108, 97, 121, 101,
			114, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 65, 100, 100, 101, 100, 69, 118, 101, 110,
			116, 0, 0, 0, 0, 65, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 80, 108, 97, 121, 101, 114, 67,
			111, 110, 116, 114, 111, 108, 108, 101, 114, 82,
			101, 109, 111, 118, 101, 100, 69, 118, 101, 110,
			116, 0, 0, 0, 0, 51, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 71, 101, 116, 80, 108, 97, 121,
			101, 114, 67, 111, 117, 110, 116, 0, 0, 0,
			0, 55, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 71,
			101, 116, 65, 108, 108, 80, 108, 97, 121, 101,
			114, 115, 67, 111, 117, 110, 116, 0, 0, 0,
			0, 49, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 71,
			101, 116, 80, 108, 97, 121, 101, 114, 73, 100,
			115, 0, 0, 0, 0, 52, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 71, 101, 116, 65, 108, 108, 80,
			108, 97, 121, 101, 114, 73, 100, 115, 0, 0,
			0, 0, 55, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			71, 101, 116, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 67, 111, 117, 110, 116, 0, 0,
			0, 0, 53, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			71, 101, 116, 74, 111, 121, 115, 116, 105, 99,
			107, 67, 111, 117, 110, 116, 0, 0, 0, 0,
			51, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 71, 101,
			116, 74, 111, 121, 115, 116, 105, 99, 107, 73,
			100, 115, 0, 0, 0, 0, 59, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 71, 101, 116, 67, 117, 115,
			116, 111, 109, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 73, 100, 115, 0, 0, 0, 0,
			61, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 71, 101,
			116, 67, 117, 115, 116, 111, 109, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 67, 111, 117,
			110, 116, 0, 0, 0, 0, 64, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 71, 101, 116, 76, 97, 115,
			116, 65, 99, 116, 105, 118, 101, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 84, 121, 112,
			101, 0, 0, 0, 0, 57, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 73, 115, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 65, 115, 115, 105, 103,
			110, 101, 100, 0, 0, 0, 0, 65, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 73, 115, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 65, 115, 115,
			105, 103, 110, 101, 100, 84, 111, 80, 108, 97,
			121, 101, 114, 0, 0, 0, 0, 67, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 82, 101, 109, 111, 118,
			101, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 70, 114, 111, 109, 65, 108, 108, 80, 108,
			97, 121, 101, 114, 115, 0, 0, 0, 0, 55,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 65, 117, 116,
			111, 65, 115, 115, 105, 103, 110, 74, 111, 121,
			115, 116, 105, 99, 107, 0, 0, 0, 0, 56,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 65, 117, 116,
			111, 65, 115, 115, 105, 103, 110, 74, 111, 121,
			115, 116, 105, 99, 107, 115, 0, 0, 0, 0,
			59, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 114,
			101, 97, 116, 101, 67, 117, 115, 116, 111, 109,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			0, 0, 0, 0, 60, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 68, 101, 115, 116, 114, 111, 121, 67,
			117, 115, 116, 111, 109, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 0, 0, 0, 0, 49,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 71, 101, 116,
			65, 110, 121, 66, 117, 116, 116, 111, 110, 0,
			0, 0, 0, 53, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 71, 101, 116, 65, 110, 121, 66, 117, 116,
			116, 111, 110, 68, 111, 119, 110, 0, 0, 0,
			0, 51, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 71,
			101, 116, 65, 110, 121, 66, 117, 116, 116, 111,
			110, 85, 112, 0, 0, 0, 0, 53, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 71, 101, 116, 65, 110,
			121, 66, 117, 116, 116, 111, 110, 80, 114, 101,
			118, 0, 0, 0, 0, 56, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 71, 101, 116, 65, 110, 121, 66,
			117, 116, 116, 111, 110, 67, 104, 97, 110, 103,
			101, 100, 0, 0, 0, 0, 52, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 71, 101, 116, 85, 110, 115,
			99, 97, 108, 101, 100, 84, 105, 109, 101, 0,
			0, 0, 0, 61, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 67, 111, 110, 110, 101, 99, 116, 101, 100,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 65,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 80, 114, 101,
			68, 105, 115, 99, 111, 110, 110, 101, 99, 116,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 64,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 68, 105, 115,
			99, 111, 110, 110, 101, 99, 116, 101, 100, 69,
			118, 101, 110, 116, 0, 0, 0, 0, 69, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 76, 97, 115, 116,
			65, 99, 116, 105, 118, 101, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 67, 104, 97, 110,
			103, 101, 100, 69, 118, 101, 110, 116, 0, 0,
			0, 0, 55, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 71, 101, 116, 85,
			115, 101, 88, 73, 110, 112, 117, 116, 0, 0,
			0, 0, 55, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 83, 101, 116, 85,
			115, 101, 88, 73, 110, 112, 117, 116, 0, 0,
			0, 0, 56, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 71, 101, 116, 85,
			112, 100, 97, 116, 101, 76, 111, 111, 112, 0,
			0, 0, 0, 56, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 102, 105, 103, 83, 101, 116,
			85, 112, 100, 97, 116, 101, 76, 111, 111, 112,
			0, 0, 0, 0, 81, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 71, 101,
			116, 87, 105, 110, 100, 111, 119, 115, 83, 116,
			97, 110, 100, 97, 108, 111, 110, 101, 80, 114,
			105, 109, 97, 114, 121, 73, 110, 112, 117, 116,
			83, 111, 117, 114, 99, 101, 0, 0, 0, 0,
			81, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 83, 101, 116, 87, 105, 110,
			100, 111, 119, 115, 83, 116, 97, 110, 100, 97,
			108, 111, 110, 101, 80, 114, 105, 109, 97, 114,
			121, 73, 110, 112, 117, 116, 83, 111, 117, 114,
			99, 101, 0, 0, 0, 0, 77, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			71, 101, 116, 79, 83, 88, 83, 116, 97, 110,
			100, 97, 108, 111, 110, 101, 80, 114, 105, 109,
			97, 114, 121, 73, 110, 112, 117, 116, 83, 111,
			117, 114, 99, 101, 0, 0, 0, 0, 77, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 83, 101, 116, 79, 83, 88, 83, 116,
			97, 110, 100, 97, 108, 111, 110, 101, 80, 114,
			105, 109, 97, 114, 121, 73, 110, 112, 117, 116,
			83, 111, 117, 114, 99, 101, 0, 0, 0, 0,
			79, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 71, 101, 116, 76, 105, 110,
			117, 120, 83, 116, 97, 110, 100, 97, 108, 111,
			110, 101, 80, 114, 105, 109, 97, 114, 121, 73,
			110, 112, 117, 116, 83, 111, 117, 114, 99, 101,
			0, 0, 0, 0, 79, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 83, 101,
			116, 76, 105, 110, 117, 120, 83, 116, 97, 110,
			100, 97, 108, 111, 110, 101, 80, 114, 105, 109,
			97, 114, 121, 73, 110, 112, 117, 116, 83, 111,
			117, 114, 99, 101, 0, 0, 0, 0, 74, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 71, 101, 116, 87, 105, 110, 100, 111,
			119, 115, 85, 87, 80, 80, 114, 105, 109, 97,
			114, 121, 73, 110, 112, 117, 116, 83, 111, 117,
			114, 99, 101, 0, 0, 0, 0, 74, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 102, 105,
			103, 83, 101, 116, 87, 105, 110, 100, 111, 119,
			115, 85, 87, 80, 80, 114, 105, 109, 97, 114,
			121, 73, 110, 112, 117, 116, 83, 111, 117, 114,
			99, 101, 0, 0, 0, 0, 73, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			71, 101, 116, 87, 105, 110, 100, 111, 119, 115,
			85, 87, 80, 83, 117, 112, 112, 111, 114, 116,
			72, 73, 68, 68, 101, 118, 105, 99, 101, 115,
			0, 0, 0, 0, 73, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 83, 101,
			116, 87, 105, 110, 100, 111, 119, 115, 85, 87,
			80, 83, 117, 112, 112, 111, 114, 116, 72, 73,
			68, 68, 101, 118, 105, 99, 101, 115, 0, 0,
			0, 0, 71, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 71, 101, 116, 88,
			98, 111, 120, 79, 110, 101, 80, 114, 105, 109,
			97, 114, 121, 73, 110, 112, 117, 116, 83, 111,
			117, 114, 99, 101, 0, 0, 0, 0, 71, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 83, 101, 116, 88, 98, 111, 120, 79,
			110, 101, 80, 114, 105, 109, 97, 114, 121, 73,
			110, 112, 117, 116, 83, 111, 117, 114, 99, 101,
			0, 0, 0, 0, 67, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 71, 101,
			116, 80, 83, 52, 80, 114, 105, 109, 97, 114,
			121, 73, 110, 112, 117, 116, 83, 111, 117, 114,
			99, 101, 0, 0, 0, 0, 67, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			83, 101, 116, 80, 83, 52, 80, 114, 105, 109,
			97, 114, 121, 73, 110, 112, 117, 116, 83, 111,
			117, 114, 99, 101, 0, 0, 0, 0, 69, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 71, 101, 116, 87, 101, 98, 71, 76,
			80, 114, 105, 109, 97, 114, 121, 73, 110, 112,
			117, 116, 83, 111, 117, 114, 99, 101, 0, 0,
			0, 0, 69, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 83, 101, 116, 87,
			101, 98, 71, 76, 80, 114, 105, 109, 97, 114,
			121, 73, 110, 112, 117, 116, 83, 111, 117, 114,
			99, 101, 0, 0, 0, 0, 65, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			71, 101, 116, 65, 108, 119, 97, 121, 115, 85,
			115, 101, 85, 110, 105, 116, 121, 73, 110, 112,
			117, 116, 0, 0, 0, 0, 65, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			83, 101, 116, 65, 108, 119, 97, 121, 115, 85,
			115, 101, 85, 110, 105, 116, 121, 73, 110, 112,
			117, 116, 0, 0, 0, 0, 64, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			71, 101, 116, 68, 105, 115, 97, 98, 108, 101,
			78, 97, 116, 105, 118, 101, 73, 110, 112, 117,
			116, 0, 0, 0, 0, 64, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 67, 111, 110, 102, 105, 103, 83,
			101, 116, 68, 105, 115, 97, 98, 108, 101, 78,
			97, 116, 105, 118, 101, 73, 110, 112, 117, 116,
			0, 0, 0, 0, 64, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 71, 101,
			116, 78, 97, 116, 105, 118, 101, 77, 111, 117,
			115, 101, 83, 117, 112, 112, 111, 114, 116, 0,
			0, 0, 0, 64, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 102, 105, 103, 83, 101, 116,
			78, 97, 116, 105, 118, 101, 77, 111, 117, 115,
			101, 83, 117, 112, 112, 111, 114, 116, 0, 0,
			0, 0, 67, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 71, 101, 116, 78,
			97, 116, 105, 118, 101, 75, 101, 121, 98, 111,
			97, 114, 100, 83, 117, 112, 112, 111, 114, 116,
			0, 0, 0, 0, 67, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 83, 101,
			116, 78, 97, 116, 105, 118, 101, 75, 101, 121,
			98, 111, 97, 114, 100, 83, 117, 112, 112, 111,
			114, 116, 0, 0, 0, 0, 67, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			71, 101, 116, 69, 110, 104, 97, 110, 99, 101,
			100, 68, 101, 118, 105, 99, 101, 83, 117, 112,
			112, 111, 114, 116, 0, 0, 0, 0, 67, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 83, 101, 116, 69, 110, 104, 97, 110,
			99, 101, 100, 68, 101, 118, 105, 99, 101, 83,
			117, 112, 112, 111, 114, 116, 0, 0, 0, 0,
			65, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 71, 101, 116, 74, 111, 121,
			115, 116, 105, 99, 107, 82, 101, 102, 114, 101,
			115, 104, 82, 97, 116, 101, 0, 0, 0, 0,
			65, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 83, 101, 116, 74, 111, 121,
			115, 116, 105, 99, 107, 82, 101, 102, 114, 101,
			115, 104, 82, 97, 116, 101, 0, 0, 0, 0,
			74, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 71, 101, 116, 73, 103, 110,
			111, 114, 101, 73, 110, 112, 117, 116, 87, 104,
			101, 110, 65, 112, 112, 78, 111, 116, 73, 110,
			70, 111, 99, 117, 115, 0, 0, 0, 0, 74,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			102, 105, 103, 83, 101, 116, 73, 103, 110, 111,
			114, 101, 73, 110, 112, 117, 116, 87, 104, 101,
			110, 65, 112, 112, 78, 111, 116, 73, 110, 70,
			111, 99, 117, 115, 0, 0, 0, 0, 75, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 71, 101, 116, 65, 110, 100, 114, 111,
			105, 100, 83, 117, 112, 112, 111, 114, 116, 85,
			110, 107, 110, 111, 119, 110, 71, 97, 109, 101,
			112, 97, 100, 115, 0, 0, 0, 0, 75, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 83, 101, 116, 65, 110, 100, 114, 111,
			105, 100, 83, 117, 112, 112, 111, 114, 116, 85,
			110, 107, 110, 111, 119, 110, 71, 97, 109, 101,
			112, 97, 100, 115, 0, 0, 0, 0, 72, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 71, 101, 116, 68, 101, 102, 97, 117,
			108, 116, 65, 120, 105, 115, 83, 101, 110, 115,
			105, 116, 105, 118, 105, 116, 121, 84, 121, 112,
			101, 0, 0, 0, 0, 72, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 80, 108, 97, 121,
			77, 97, 107, 101, 114, 124, 82, 101, 119, 105,
			114, 101, 100, 67, 111, 110, 102, 105, 103, 83,
			101, 116, 68, 101, 102, 97, 117, 108, 116, 65,
			120, 105, 115, 83, 101, 110, 115, 105, 116, 105,
			118, 105, 116, 121, 84, 121, 112, 101, 0, 0,
			0, 0, 79, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 71, 101, 116, 68,
			101, 102, 97, 117, 108, 116, 74, 111, 121, 115,
			116, 105, 99, 107, 65, 120, 105, 115, 50, 68,
			68, 101, 97, 100, 90, 111, 110, 101, 84, 121,
			112, 101, 0, 0, 0, 0, 79, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			83, 101, 116, 68, 101, 102, 97, 117, 108, 116,
			74, 111, 121, 115, 116, 105, 99, 107, 65, 120,
			105, 115, 50, 68, 68, 101, 97, 100, 90, 111,
			110, 101, 84, 121, 112, 101, 0, 0, 0, 0,
			82, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 71, 101, 116, 68, 101, 102,
			97, 117, 108, 116, 74, 111, 121, 115, 116, 105,
			99, 107, 65, 120, 105, 115, 50, 68, 83, 101,
			110, 115, 105, 116, 105, 118, 105, 116, 121, 84,
			121, 112, 101, 0, 0, 0, 0, 82, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 80, 108,
			97, 121, 77, 97, 107, 101, 114, 124, 82, 101,
			119, 105, 114, 101, 100, 67, 111, 110, 102, 105,
			103, 83, 101, 116, 68, 101, 102, 97, 117, 108,
			116, 74, 111, 121, 115, 116, 105, 99, 107, 65,
			120, 105, 115, 50, 68, 83, 101, 110, 115, 105,
			116, 105, 118, 105, 116, 121, 84, 121, 112, 101,
			0, 0, 0, 0, 59, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 71, 101,
			116, 70, 111, 114, 99, 101, 52, 87, 97, 121,
			72, 97, 116, 115, 0, 0, 0, 0, 59, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 83, 101, 116, 70, 111, 114, 99, 101,
			52, 87, 97, 121, 72, 97, 116, 115, 0, 0,
			0, 0, 82, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 71, 101, 116, 65,
			99, 116, 105, 118, 97, 116, 101, 65, 99, 116,
			105, 111, 110, 66, 117, 116, 116, 111, 110, 115,
			79, 110, 78, 101, 103, 97, 116, 105, 118, 101,
			86, 97, 108, 117, 101, 0, 0, 0, 0, 82,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			80, 108, 97, 121, 77, 97, 107, 101, 114, 124,
			82, 101, 119, 105, 114, 101, 100, 67, 111, 110,
			102, 105, 103, 83, 101, 116, 65, 99, 116, 105,
			118, 97, 116, 101, 65, 99, 116, 105, 111, 110,
			66, 117, 116, 116, 111, 110, 115, 79, 110, 78,
			101, 103, 97, 116, 105, 118, 101, 86, 97, 108,
			117, 101, 0, 0, 0, 0, 69, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			71, 101, 116, 84, 104, 114, 111, 116, 116, 108,
			101, 67, 97, 108, 105, 98, 114, 97, 116, 105,
			111, 110, 77, 111, 100, 101, 0, 0, 0, 0,
			69, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 83, 101, 116, 84, 104, 114,
			111, 116, 116, 108, 101, 67, 97, 108, 105, 98,
			114, 97, 116, 105, 111, 110, 77, 111, 100, 101,
			0, 0, 0, 0, 83, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 71, 101,
			116, 68, 101, 102, 101, 114, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 67, 111, 110, 110,
			101, 99, 116, 101, 100, 69, 118, 101, 110, 116,
			115, 79, 110, 83, 116, 97, 114, 116, 0, 0,
			0, 0, 83, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 83, 101, 116, 68,
			101, 102, 101, 114, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 67, 111, 110, 110, 101, 99,
			116, 101, 100, 69, 118, 101, 110, 116, 115, 79,
			110, 83, 116, 97, 114, 116, 0, 0, 0, 0,
			65, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 71, 101, 116, 65, 117, 116,
			111, 65, 115, 115, 105, 103, 110, 74, 111, 121,
			115, 116, 105, 99, 107, 115, 0, 0, 0, 0,
			65, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 83, 101, 116, 65, 117, 116,
			111, 65, 115, 115, 105, 103, 110, 74, 111, 121,
			115, 116, 105, 99, 107, 115, 0, 0, 0, 0,
			67, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 71, 101, 116, 77, 97, 120,
			74, 111, 121, 115, 116, 105, 99, 107, 115, 80,
			101, 114, 80, 108, 97, 121, 101, 114, 0, 0,
			0, 0, 67, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 83, 101, 116, 77,
			97, 120, 74, 111, 121, 115, 116, 105, 99, 107,
			115, 80, 101, 114, 80, 108, 97, 121, 101, 114,
			0, 0, 0, 0, 71, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 71, 101,
			116, 68, 105, 115, 116, 114, 105, 98, 117, 116,
			101, 74, 111, 121, 115, 116, 105, 99, 107, 115,
			69, 118, 101, 110, 108, 121, 0, 0, 0, 0,
			71, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 80, 108, 97, 121, 77, 97, 107, 101, 114,
			124, 82, 101, 119, 105, 114, 101, 100, 67, 111,
			110, 102, 105, 103, 83, 101, 116, 68, 105, 115,
			116, 114, 105, 98, 117, 116, 101, 74, 111, 121,
			115, 116, 105, 99, 107, 115, 69, 118, 101, 110,
			108, 121, 0, 0, 0, 0, 81, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 80, 108, 97,
			121, 77, 97, 107, 101, 114, 124, 82, 101, 119,
			105, 114, 101, 100, 67, 111, 110, 102, 105, 103,
			71, 101, 116, 65, 115, 115, 105, 103, 110, 74,
			111, 121, 115, 116, 105, 99, 107, 115, 84, 111,
			80, 108, 97, 121, 105, 110, 103, 80, 108, 97,
			121, 101, 114, 115, 79, 110, 108, 121, 0, 0,
			0, 0, 81, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 80, 108, 97, 121, 77, 97, 107,
			101, 114, 124, 82, 101, 119, 105, 114, 101, 100,
			67, 111, 110, 102, 105, 103, 83, 101, 116, 65,
			115, 115, 105, 103, 110, 74, 111, 121, 115, 116,
			105, 99, 107, 115, 84, 111, 80, 108, 97, 121,
			105, 110, 103, 80, 108, 97, 121, 101, 114, 115,
			79, 110, 108, 121, 0, 0, 0, 0, 88, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 80,
			108, 97, 121, 77, 97, 107, 101, 114, 124, 82,
			101, 119, 105, 114, 101, 100, 67, 111, 110, 102,
			105, 103, 71, 101, 116, 82, 101, 97, 115, 115,
			105, 103, 110, 74, 111, 121, 115, 116, 105, 99,
			107, 84, 111, 80, 114, 101, 118, 105, 111, 117,
			115, 79, 119, 110, 101, 114, 79, 110, 82, 101,
			99, 111, 110, 110, 101, 99, 116, 0, 0, 0,
			0, 88, 82, 101, 119, 105, 114, 101, 100, 46,
			73, 110, 116, 101, 103, 114, 97, 116, 105, 111,
			110, 46, 80, 108, 97, 121, 77, 97, 107, 101,
			114, 124, 82, 101, 119, 105, 114, 101, 100, 67,
			111, 110, 102, 105, 103, 83, 101, 116, 82, 101,
			97, 115, 115, 105, 103, 110, 74, 111, 121, 115,
			116, 105, 99, 107, 84, 111, 80, 114, 101, 118,
			105, 111, 117, 115, 79, 119, 110, 101, 114, 79,
			110, 82, 101, 99, 111, 110, 110, 101, 99, 116,
			0, 0, 0, 0, 54, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 80, 108, 97, 121, 77,
			97, 107, 101, 114, 124, 82, 101, 119, 105, 114,
			101, 100, 67, 111, 110, 102, 105, 103, 71, 101,
			116, 76, 111, 103, 76, 101, 118, 101, 108, 0,
			0, 0, 0, 54, 82, 101, 119, 105, 114, 101,
			100, 46, 73, 110, 116, 101, 103, 114, 97, 116,
			105, 111, 110, 46, 80, 108, 97, 121, 77, 97,
			107, 101, 114, 124, 82, 101, 119, 105, 114, 101,
			100, 67, 111, 110, 102, 105, 103, 83, 101, 116,
			76, 111, 103, 76, 101, 118, 101, 108, 0, 0,
			0, 0, 50, 82, 101, 119, 105, 114, 101, 100,
			46, 73, 110, 116, 101, 103, 114, 97, 116, 105,
			111, 110, 46, 85, 110, 105, 116, 121, 85, 73,
			124, 80, 108, 97, 121, 101, 114, 80, 111, 105,
			110, 116, 101, 114, 69, 118, 101, 110, 116, 68,
			97, 116, 97, 0, 0, 0, 0, 46, 82, 101,
			119, 105, 114, 101, 100, 46, 73, 110, 116, 101,
			103, 114, 97, 116, 105, 111, 110, 46, 85, 110,
			105, 116, 121, 85, 73, 124, 82, 101, 119, 105,
			114, 101, 100, 69, 118, 101, 110, 116, 83, 121,
			115, 116, 101, 109, 0, 0, 0, 0, 53, 82,
			101, 119, 105, 114, 101, 100, 46, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 46, 85,
			110, 105, 116, 121, 85, 73, 124, 82, 101, 119,
			105, 114, 101, 100, 80, 111, 105, 110, 116, 101,
			114, 73, 110, 112, 117, 116, 77, 111, 100, 117,
			108, 101, 0, 0, 0, 0, 64, 82, 101, 119,
			105, 114, 101, 100, 46, 73, 110, 116, 101, 103,
			114, 97, 116, 105, 111, 110, 46, 85, 110, 105,
			116, 121, 85, 73, 46, 82, 101, 119, 105, 114,
			101, 100, 80, 111, 105, 110, 116, 101, 114, 73,
			110, 112, 117, 116, 77, 111, 100, 117, 108, 101,
			124, 77, 111, 117, 115, 101, 83, 116, 97, 116,
			101, 0, 0, 0, 0, 74, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 103, 114,
			97, 116, 105, 111, 110, 46, 85, 110, 105, 116,
			121, 85, 73, 46, 82, 101, 119, 105, 114, 101,
			100, 80, 111, 105, 110, 116, 101, 114, 73, 110,
			112, 117, 116, 77, 111, 100, 117, 108, 101, 124,
			77, 111, 117, 115, 101, 66, 117, 116, 116, 111,
			110, 69, 118, 101, 110, 116, 68, 97, 116, 97,
			0, 0, 0, 0, 65, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 85, 110, 105, 116, 121,
			85, 73, 46, 82, 101, 119, 105, 114, 101, 100,
			80, 111, 105, 110, 116, 101, 114, 73, 110, 112,
			117, 116, 77, 111, 100, 117, 108, 101, 124, 66,
			117, 116, 116, 111, 110, 83, 116, 97, 116, 101,
			0, 0, 0, 0, 70, 82, 101, 119, 105, 114,
			101, 100, 46, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 85, 110, 105, 116, 121,
			85, 73, 46, 82, 101, 119, 105, 114, 101, 100,
			80, 111, 105, 110, 116, 101, 114, 73, 110, 112,
			117, 116, 77, 111, 100, 117, 108, 101, 124, 85,
			110, 105, 116, 121, 73, 110, 112, 117, 116, 83,
			111, 117, 114, 99, 101, 0, 0, 0, 0, 56,
			82, 101, 119, 105, 114, 101, 100, 46, 73, 110,
			116, 101, 103, 114, 97, 116, 105, 111, 110, 46,
			85, 110, 105, 116, 121, 85, 73, 124, 82, 101,
			119, 105, 114, 101, 100, 83, 116, 97, 110, 100,
			97, 108, 111, 110, 101, 73, 110, 112, 117, 116,
			77, 111, 100, 117, 108, 101, 0, 0, 0, 0,
			70, 82, 101, 119, 105, 114, 101, 100, 46, 73,
			110, 116, 101, 103, 114, 97, 116, 105, 111, 110,
			46, 85, 110, 105, 116, 121, 85, 73, 46, 82,
			101, 119, 105, 114, 101, 100, 83, 116, 97, 110,
			100, 97, 108, 111, 110, 101, 73, 110, 112, 117,
			116, 77, 111, 100, 117, 108, 101, 124, 80, 108,
			97, 121, 101, 114, 83, 101, 116, 116, 105, 110,
			103, 0, 0, 0, 0, 24, 82, 101, 119, 105,
			114, 101, 100, 124, 73, 71, 97, 109, 101, 112,
			97, 100, 84, 101, 109, 112, 108, 97, 116, 101,
			0, 0, 0, 0, 28, 82, 101, 119, 105, 114,
			101, 100, 124, 73, 82, 97, 99, 105, 110, 103,
			87, 104, 101, 101, 108, 84, 101, 109, 112, 108,
			97, 116, 101, 0, 0, 0, 0, 22, 82, 101,
			119, 105, 114, 101, 100, 124, 73, 72, 79, 84,
			65, 83, 84, 101, 109, 112, 108, 97, 116, 101,
			0, 0, 0, 0, 27, 82, 101, 119, 105, 114,
			101, 100, 124, 73, 70, 108, 105, 103, 104, 116,
			89, 111, 107, 101, 84, 101, 109, 112, 108, 97,
			116, 101, 0, 0, 0, 0, 29, 82, 101, 119,
			105, 114, 101, 100, 124, 73, 70, 108, 105, 103,
			104, 116, 80, 101, 100, 97, 108, 115, 84, 101,
			109, 112, 108, 97, 116, 101, 0, 0, 0, 0,
			33, 82, 101, 119, 105, 114, 101, 100, 124, 73,
			83, 105, 120, 68, 111, 102, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 84, 101, 109, 112,
			108, 97, 116, 101, 0, 0, 0, 0, 23, 82,
			101, 119, 105, 114, 101, 100, 124, 71, 97, 109,
			101, 112, 97, 100, 84, 101, 109, 112, 108, 97,
			116, 101, 0, 0, 0, 0, 27, 82, 101, 119,
			105, 114, 101, 100, 124, 82, 97, 99, 105, 110,
			103, 87, 104, 101, 101, 108, 84, 101, 109, 112,
			108, 97, 116, 101, 0, 0, 0, 0, 21, 82,
			101, 119, 105, 114, 101, 100, 124, 72, 79, 84,
			65, 83, 84, 101, 109, 112, 108, 97, 116, 101,
			0, 0, 0, 0, 26, 82, 101, 119, 105, 114,
			101, 100, 124, 70, 108, 105, 103, 104, 116, 89,
			111, 107, 101, 84, 101, 109, 112, 108, 97, 116,
			101, 0, 0, 0, 0, 28, 82, 101, 119, 105,
			114, 101, 100, 124, 70, 108, 105, 103, 104, 116,
			80, 101, 100, 97, 108, 115, 84, 101, 109, 112,
			108, 97, 116, 101, 0, 0, 0, 0, 32, 82,
			101, 119, 105, 114, 101, 100, 124, 83, 105, 120,
			68, 111, 102, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 84, 101, 109, 112, 108, 97, 116,
			101, 0, 0, 0, 0, 42, 82, 101, 119, 105,
			114, 101, 100, 46, 73, 110, 116, 101, 114, 110,
			97, 108, 124, 67, 111, 110, 116, 114, 111, 108,
			108, 101, 114, 84, 101, 109, 112, 108, 97, 116,
			101, 70, 97, 99, 116, 111, 114, 121, 0, 0,
			0, 0, 38, 82, 101, 119, 105, 114, 101, 100,
			46, 68, 97, 116, 97, 124, 85, 115, 101, 114,
			68, 97, 116, 97, 83, 116, 111, 114, 101, 95,
			80, 108, 97, 121, 101, 114, 80, 114, 101, 102,
			115, 0, 0, 0, 0, 67, 82, 101, 119, 105,
			114, 101, 100, 46, 68, 97, 116, 97, 46, 85,
			115, 101, 114, 68, 97, 116, 97, 83, 116, 111,
			114, 101, 95, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 124, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 65, 115, 115, 105, 103,
			110, 109, 101, 110, 116, 83, 97, 118, 101, 73,
			110, 102, 111, 0, 0, 0, 0, 78, 82, 101,
			119, 105, 114, 101, 100, 46, 68, 97, 116, 97,
			46, 85, 115, 101, 114, 68, 97, 116, 97, 83,
			116, 111, 114, 101, 95, 80, 108, 97, 121, 101,
			114, 80, 114, 101, 102, 115, 43, 67, 111, 110,
			116, 114, 111, 108, 108, 101, 114, 65, 115, 115,
			105, 103, 110, 109, 101, 110, 116, 83, 97, 118,
			101, 73, 110, 102, 111, 124, 80, 108, 97, 121,
			101, 114, 73, 110, 102, 111, 0, 0, 0, 0,
			80, 82, 101, 119, 105, 114, 101, 100, 46, 68,
			97, 116, 97, 46, 85, 115, 101, 114, 68, 97,
			116, 97, 83, 116, 111, 114, 101, 95, 80, 108,
			97, 121, 101, 114, 80, 114, 101, 102, 115, 43,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			65, 115, 115, 105, 103, 110, 109, 101, 110, 116,
			83, 97, 118, 101, 73, 110, 102, 111, 124, 74,
			111, 121, 115, 116, 105, 99, 107, 73, 110, 102,
			111, 0, 0, 0, 0, 68, 82, 101, 119, 105,
			114, 101, 100, 46, 68, 97, 116, 97, 46, 85,
			115, 101, 114, 68, 97, 116, 97, 83, 116, 111,
			114, 101, 95, 80, 108, 97, 121, 101, 114, 80,
			114, 101, 102, 115, 124, 74, 111, 121, 115, 116,
			105, 99, 107, 65, 115, 115, 105, 103, 110, 109,
			101, 110, 116, 72, 105, 115, 116, 111, 114, 121,
			73, 110, 102, 111, 0, 0, 0, 0, 20, 82,
			101, 119, 105, 114, 101, 100, 124, 73, 110, 112,
			117, 116, 77, 97, 110, 97, 103, 101, 114, 0,
			0, 0, 0, 27, 82, 101, 119, 105, 114, 101,
			100, 46, 85, 116, 105, 108, 115, 124, 69, 120,
			116, 101, 114, 110, 97, 108, 84, 111, 111, 108,
			115, 0, 0, 0, 0, 20, 124, 65, 99, 104,
			105, 101, 118, 101, 109, 101, 110, 116, 115, 77,
			97, 110, 97, 103, 101, 114, 0, 0, 0, 0,
			18, 124, 65, 110, 110, 111, 117, 110, 99, 101,
			109, 101, 110, 116, 115, 68, 101, 115, 107, 0,
			0, 0, 0, 20, 124, 65, 110, 110, 111, 117,
			110, 99, 101, 109, 101, 110, 116, 83, 112, 101,
			97, 107, 101, 114, 0, 0, 0, 0, 19, 124,
			65, 110, 116, 105, 84, 104, 101, 102, 116, 66,
			101, 104, 97, 118, 105, 111, 117, 114, 0, 0,
			0, 0, 18, 124, 65, 117, 120, 105, 108, 105,
			97, 114, 67, 104, 97, 110, 103, 101, 70, 79,
			86, 0, 0, 0, 0, 16, 124, 65, 117, 120,
			105, 108, 105, 97, 114, 77, 101, 116, 104, 111,
			100, 115, 0, 0, 0, 0, 15, 124, 66, 105,
			110, 80, 97, 99, 107, 105, 110, 103, 77, 97,
			105, 110, 0, 0, 0, 0, 16, 124, 77, 97,
			120, 82, 101, 99, 116, 115, 66, 105, 110, 80,
			97, 99, 107, 0, 0, 0, 0, 9, 124, 66,
			108, 111, 111, 109, 83, 101, 116, 0, 0, 0,
			0, 8, 124, 66, 111, 120, 68, 97, 116, 97,
			0, 0, 0, 0, 24, 124, 66, 114, 101, 97,
			107, 105, 110, 103, 68, 101, 115, 116, 114, 111,
			121, 76, 105, 115, 116, 101, 110, 101, 114, 0,
			0, 0, 0, 14, 124, 66, 117, 105, 108, 100,
			97, 98, 108, 101, 73, 110, 102, 111, 0, 0,
			0, 0, 19, 124, 66, 117, 105, 108, 100, 101,
			114, 95, 68, 101, 99, 111, 114, 97, 116, 105,
			111, 110, 0, 0, 0, 0, 13, 124, 66, 117,
			105, 108, 100, 101, 114, 95, 77, 97, 105, 110,
			0, 0, 0, 0, 19, 124, 66, 117, 105, 108,
			100, 101, 114, 95, 80, 97, 105, 110, 116, 97,
			98, 108, 101, 115, 0, 0, 0, 0, 27, 124,
			67, 97, 103, 101, 69, 118, 101, 110, 116, 67,
			114, 101, 97, 116, 101, 68, 117, 109, 109, 121,
			65, 110, 105, 109, 97, 108, 0, 0, 0, 0,
			15, 124, 67, 97, 114, 100, 98, 111, 97, 114,
			100, 66, 97, 108, 101, 114, 0, 0, 0, 0,
			12, 124, 67, 108, 101, 97, 110, 101, 114, 68,
			101, 115, 107, 0, 0, 0, 0, 13, 124, 67,
			108, 101, 97, 110, 101, 114, 82, 111, 98, 111,
			116, 0, 0, 0, 0, 17, 124, 67, 108, 101,
			97, 110, 101, 114, 83, 101, 116, 86, 111, 108,
			117, 109, 101, 0, 0, 0, 0, 12, 124, 67,
			108, 111, 99, 107, 82, 111, 116, 97, 116, 101,
			0, 0, 0, 0, 12, 124, 67, 111, 108, 111,
			114, 80, 105, 99, 107, 101, 114, 0, 0, 0,
			0, 19, 124, 67, 111, 112, 121, 80, 97, 115,
			116, 101, 67, 108, 105, 112, 98, 111, 97, 114,
			100, 0, 0, 0, 0, 17, 124, 67, 111, 114,
			110, 101, 114, 83, 104, 101, 108, 118, 101, 115,
			70, 105, 120, 0, 0, 0, 0, 15, 124, 68,
			97, 116, 97, 95, 67, 111, 110, 116, 97, 105,
			110, 101, 114, 0, 0, 0, 0, 13, 124, 68,
			97, 116, 97, 95, 80, 114, 111, 100, 117, 99,
			116, 0, 0, 0, 0, 14, 124, 68, 101, 98,
			116, 67, 111, 108, 108, 101, 99, 116, 111, 114,
			0, 0, 0, 0, 12, 124, 68, 101, 98, 116,
			77, 97, 110, 97, 103, 101, 114, 0, 0, 0,
			0, 15, 124, 68, 101, 98, 117, 103, 83, 97,
			118, 101, 83, 104, 97, 114, 101, 0, 0, 0,
			0, 15, 124, 68, 69, 66, 85, 71, 95, 65,
			117, 116, 111, 70, 105, 108, 108, 0, 0, 0,
			0, 20, 124, 68, 101, 99, 111, 114, 97, 116,
			105, 111, 110, 69, 120, 116, 114, 97, 68, 97,
			116, 97, 0, 0, 0, 0, 13, 124, 68, 101,
			108, 97, 121, 66, 111, 120, 77, 101, 115, 104,
			0, 0, 0, 0, 13, 124, 68, 101, 109, 111,
			108, 105, 115, 104, 97, 98, 108, 101, 0, 0,
			0, 0, 20, 124, 68, 101, 109, 111, 108, 105,
			115, 104, 97, 98, 108, 101, 77, 97, 110, 97,
			103, 101, 114, 0, 0, 0, 0, 22, 124, 68,
			101, 109, 111, 108, 105, 115, 104, 68, 101, 98,
			114, 105, 115, 67, 111, 110, 116, 114, 111, 108,
			0, 0, 0, 0, 17, 124, 68, 101, 109, 111,
			108, 105, 116, 105, 111, 110, 72, 97, 109, 109,
			101, 114, 0, 0, 0, 0, 20, 124, 68, 114,
			97, 119, 67, 111, 114, 114, 101, 99, 116, 76,
			105, 115, 116, 101, 110, 101, 114, 0, 0, 0,
			0, 19, 124, 68, 114, 97, 119, 84, 104, 101,
			87, 111, 114, 100, 77, 97, 110, 97, 103, 101,
			114, 0, 0, 0, 0, 11, 124, 68, 117, 109,
			109, 121, 83, 116, 117, 102, 102, 0, 0, 0,
			0, 16, 124, 69, 97, 115, 116, 101, 114, 66,
			101, 104, 97, 118, 105, 111, 117, 114, 0, 0,
			0, 0, 14, 124, 69, 97, 115, 116, 101, 114,
			67, 104, 101, 99, 107, 101, 114, 0, 0, 0,
			0, 24, 124, 69, 109, 112, 108, 111, 121, 101,
			101, 115, 68, 97, 116, 97, 71, 101, 110, 101,
			114, 97, 116, 105, 111, 110, 0, 0, 0, 0,
			19, 124, 69, 118, 101, 110, 116, 67, 97, 103,
			101, 83, 112, 97, 119, 110, 78, 101, 116, 115,
			0, 0, 0, 0, 18, 124, 69, 120, 112, 97,
			110, 115, 105, 111, 110, 65, 117, 120, 105, 108,
			105, 97, 114, 0, 0, 0, 0, 17, 124, 70,
			105, 114, 101, 69, 120, 116, 105, 110, 103, 117,
			105, 115, 104, 101, 114, 0, 0, 0, 0, 21,
			124, 70, 105, 114, 101, 69, 120, 116, 105, 110,
			103, 117, 105, 115, 104, 101, 114, 84, 97, 107,
			101, 0, 0, 0, 0, 16, 124, 71, 97, 99,
			104, 97, 112, 111, 110, 67, 97, 112, 115, 117,
			108, 101, 0, 0, 0, 0, 11, 124, 71, 97,
			109, 101, 67, 97, 110, 118, 97, 115, 0, 0,
			0, 0, 9, 124, 71, 97, 109, 101, 68, 97,
			116, 97, 0, 0, 0, 0, 14, 124, 71, 101,
			116, 80, 108, 97, 121, 101, 114, 76, 111, 103,
			115, 0, 0, 0, 0, 18, 124, 71, 101, 116,
			82, 101, 119, 105, 114, 101, 100, 75, 101, 121,
			78, 97, 109, 101, 0, 0, 0, 0, 15, 124,
			72, 97, 108, 108, 111, 119, 101, 101, 110, 71,
			104, 111, 115, 116, 0, 0, 0, 0, 8, 124,
			72, 97, 116, 73, 110, 102, 111, 0, 0, 0,
			0, 22, 124, 73, 110, 116, 101, 114, 97, 99,
			116, 97, 98, 108, 101, 67, 111, 110, 116, 97,
			105, 110, 101, 114, 0, 0, 0, 0, 17, 124,
			73, 110, 116, 101, 114, 97, 99, 116, 97, 98,
			108, 101, 68, 97, 116, 97, 0, 0, 0, 0,
			19, 124, 73, 110, 118, 111, 105, 99, 101, 115,
			83, 116, 97, 116, 105, 115, 116, 105, 99, 115,
			0, 0, 0, 0, 26, 124, 73, 110, 118, 111,
			105, 99, 101, 84, 101, 109, 112, 108, 97, 116,
			101, 82, 101, 102, 101, 114, 101, 110, 99, 101,
			115, 0, 0, 0, 0, 24, 124, 76, 111, 98,
			98, 121, 80, 97, 115, 115, 119, 111, 114, 100,
			67, 111, 110, 118, 101, 114, 116, 105, 111, 110,
			0, 0, 0, 0, 20, 124, 76, 111, 99, 97,
			108, 105, 122, 97, 116, 105, 111, 110, 77, 97,
			110, 97, 103, 101, 114, 0, 0, 0, 0, 10,
			124, 77, 97, 105, 110, 95, 68, 97, 116, 97,
			0, 0, 0, 0, 18, 124, 77, 97, 110, 97,
			103, 101, 114, 66, 108, 97, 99, 107, 98, 111,
			97, 114, 100, 0, 0, 0, 0, 18, 124, 77,
			97, 110, 117, 102, 97, 99, 116, 117, 114, 105,
			110, 103, 66, 97, 115, 101, 0, 0, 0, 0,
			23, 124, 77, 105, 110, 105, 84, 114, 97, 110,
			115, 112, 111, 114, 116, 66, 101, 104, 97, 118,
			105, 111, 117, 114, 0, 0, 0, 0, 22, 124,
			77, 105, 110, 105, 84, 114, 97, 110, 115, 112,
			111, 114, 116, 76, 105, 115, 116, 101, 110, 101,
			114, 0, 0, 0, 0, 11, 124, 77, 105, 115,
			116, 101, 114, 71, 105, 102, 116, 0, 0, 0,
			0, 13, 124, 77, 105, 115, 116, 101, 114, 71,
			114, 117, 115, 99, 104, 0, 0, 0, 0, 21,
			124, 67, 117, 115, 116, 111, 109, 78, 101, 116,
			119, 111, 114, 107, 77, 97, 110, 97, 103, 101,
			114, 0, 0, 0, 0, 19, 124, 76, 111, 98,
			98, 105, 101, 115, 76, 105, 115, 116, 77, 97,
			110, 97, 103, 101, 114, 0, 0, 0, 0, 16,
			124, 76, 111, 98, 98, 121, 67, 111, 110, 116,
			114, 111, 108, 108, 101, 114, 0, 0, 0, 0,
			15, 124, 76, 111, 98, 98, 121, 68, 97, 116,
			97, 69, 110, 116, 114, 121, 0, 0, 0, 0,
			16, 124, 77, 97, 115, 116, 101, 114, 76, 111,
			98, 98, 121, 68, 97, 116, 97, 0, 0, 0,
			0, 26, 124, 77, 117, 108, 116, 105, 112, 108,
			97, 121, 101, 114, 73, 110, 105, 116, 105, 97,
			108, 105, 122, 97, 116, 105, 111, 110, 0, 0,
			0, 0, 15, 124, 78, 101, 116, 119, 111, 114,
			107, 83, 112, 97, 119, 110, 101, 114, 0, 0,
			0, 0, 15, 124, 80, 108, 97, 121, 101, 114,
			76, 105, 115, 116, 73, 116, 101, 109, 0, 0,
			0, 0, 14, 124, 80, 108, 97, 121, 101, 114,
			78, 101, 116, 119, 111, 114, 107, 0, 0, 0,
			0, 23, 124, 80, 108, 97, 121, 101, 114, 79,
			98, 106, 101, 99, 116, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 0, 0, 0, 0, 20,
			124, 80, 108, 97, 121, 101, 114, 83, 121, 110,
			99, 67, 104, 97, 114, 97, 99, 116, 101, 114,
			0, 0, 0, 0, 11, 124, 83, 116, 101, 97,
			109, 76, 111, 98, 98, 121, 0, 0, 0, 0,
			21, 124, 78, 101, 116, 119, 111, 114, 107, 71,
			97, 109, 101, 66, 101, 104, 97, 118, 105, 111,
			114, 115, 0, 0, 0, 0, 16, 124, 78, 101,
			119, 66, 117, 102, 102, 101, 114, 83, 121, 115,
			116, 101, 109, 0, 0, 0, 0, 17, 124, 78,
			80, 67, 95, 67, 117, 115, 116, 111, 109, 101,
			114, 73, 110, 102, 111, 0, 0, 0, 0, 9,
			124, 78, 80, 67, 95, 73, 110, 102, 111, 0,
			0, 0, 0, 12, 124, 78, 80, 67, 95, 77,
			97, 110, 97, 103, 101, 114, 0, 0, 0, 0,
			10, 124, 78, 80, 67, 95, 83, 112, 101, 101,
			100, 0, 0, 0, 0, 18, 124, 79, 108, 100,
			66, 97, 99, 107, 117, 112, 115, 77, 97, 110,
			97, 103, 101, 114, 0, 0, 0, 0, 18, 124,
			79, 110, 69, 110, 97, 98, 108, 101, 83, 101,
			116, 80, 97, 114, 101, 110, 116, 0, 0, 0,
			0, 15, 124, 79, 112, 101, 110, 68, 105, 115,
			99, 111, 114, 100, 85, 82, 76, 0, 0, 0,
			0, 30, 124, 79, 112, 116, 105, 109, 105, 122,
			97, 116, 105, 111, 110, 76, 97, 121, 101, 114,
			67, 117, 108, 108, 68, 105, 115, 116, 97, 110,
			99, 101, 0, 0, 0, 0, 23, 124, 79, 114,
			100, 101, 114, 68, 117, 109, 109, 121, 66, 111,
			120, 66, 101, 104, 97, 118, 105, 111, 117, 114,
			0, 0, 0, 0, 15, 124, 79, 114, 100, 101,
			114, 105, 110, 103, 68, 101, 118, 105, 99, 101,
			0, 0, 0, 0, 13, 124, 79, 114, 100, 101,
			114, 105, 110, 103, 84, 114, 97, 121, 0, 0,
			0, 0, 15, 124, 79, 114, 100, 101, 114, 80,
			97, 99, 107, 97, 103, 105, 110, 103, 0, 0,
			0, 0, 18, 124, 79, 114, 100, 101, 114, 80,
			97, 99, 107, 97, 103, 105, 110, 103, 66, 111,
			120, 0, 0, 0, 0, 24, 124, 79, 114, 100,
			101, 114, 80, 97, 99, 107, 97, 103, 105, 110,
			103, 82, 101, 102, 101, 114, 101, 110, 99, 101,
			0, 0, 0, 0, 27, 124, 79, 114, 100, 101,
			114, 80, 97, 99, 107, 97, 103, 105, 110, 103,
			85, 73, 82, 101, 102, 101, 114, 101, 110, 99,
			101, 115, 0, 0, 0, 0, 17, 124, 79, 114,
			100, 101, 114, 80, 105, 99, 107, 117, 112, 80,
			111, 105, 110, 116, 0, 0, 0, 0, 20, 124,
			79, 116, 104, 101, 114, 80, 114, 111, 112, 115,
			66, 101, 104, 97, 118, 105, 111, 117, 114, 0,
			0, 0, 0, 10, 124, 80, 97, 105, 110, 116,
			97, 98, 108, 101, 0, 0, 0, 0, 27, 124,
			80, 97, 105, 110, 116, 97, 98, 108, 101, 65,
			117, 120, 105, 108, 105, 97, 114, 72, 105, 103,
			104, 108, 105, 103, 104, 116, 0, 0, 0, 0,
			14, 124, 80, 97, 105, 110, 116, 97, 98, 108,
			101, 68, 97, 116, 97, 0, 0, 0, 0, 20,
			124, 80, 97, 105, 110, 116, 97, 98, 108, 101,
			68, 101, 99, 111, 114, 97, 116, 105, 111, 110,
			0, 0, 0, 0, 18, 124, 80, 97, 105, 110,
			116, 97, 98, 108, 101, 115, 77, 97, 110, 97,
			103, 101, 114, 0, 0, 0, 0, 22, 124, 80,
			105, 99, 116, 117, 114, 101, 70, 114, 97, 109,
			101, 66, 101, 104, 97, 118, 105, 111, 117, 114,
			0, 0, 0, 0, 14, 124, 80, 105, 110, 112,
			111, 105, 110, 116, 83, 104, 101, 108, 102, 0,
			0, 0, 0, 22, 124, 80, 105, 110, 112, 111,
			105, 110, 116, 83, 104, 101, 108, 102, 70, 114,
			111, 109, 84, 114, 97, 121, 0, 0, 0, 0,
			23, 124, 67, 117, 115, 116, 111, 109, 67, 97,
			109, 101, 114, 97, 67, 111, 110, 116, 114, 111,
			108, 108, 101, 114, 0, 0, 0, 0, 21, 124,
			70, 105, 114, 115, 116, 80, 101, 114, 115, 111,
			110, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			0, 0, 0, 0, 13, 124, 80, 108, 97, 121,
			101, 114, 67, 114, 111, 117, 99, 104, 0, 0,
			0, 0, 18, 124, 80, 108, 97, 121, 101, 114,
			80, 101, 114, 109, 105, 115, 115, 105, 111, 110,
			115, 0, 0, 0, 0, 15, 124, 80, 114, 105,
			99, 105, 110, 103, 77, 97, 99, 104, 105, 110,
			101, 0, 0, 0, 0, 24, 124, 80, 114, 105,
			99, 105, 110, 103, 77, 97, 99, 104, 105, 110,
			101, 65, 117, 116, 111, 109, 97, 116, 105, 99,
			0, 0, 0, 0, 17, 124, 80, 114, 111, 100,
			117, 99, 116, 65, 110, 105, 109, 97, 116, 105,
			111, 110, 0, 0, 0, 0, 21, 124, 80, 114,
			111, 100, 117, 99, 116, 67, 104, 101, 99, 107,
			111, 117, 116, 83, 112, 97, 119, 110, 0, 0,
			0, 0, 15, 124, 80, 114, 111, 100, 117, 99,
			116, 76, 105, 115, 116, 105, 110, 103, 0, 0,
			0, 0, 15, 124, 82, 101, 102, 101, 114, 101,
			110, 99, 101, 76, 105, 103, 104, 116, 0, 0,
			0, 0, 23, 124, 79, 114, 100, 101, 114, 105,
			110, 103, 76, 105, 115, 116, 82, 101, 102, 101,
			114, 101, 110, 99, 101, 115, 0, 0, 0, 0,
			29, 124, 82, 101, 102, 101, 114, 101, 110, 99,
			101, 115, 95, 83, 116, 97, 116, 105, 115, 116,
			105, 99, 115, 80, 114, 111, 100, 117, 99, 116,
			0, 0, 0, 0, 24, 124, 82, 101, 102, 108,
			101, 99, 116, 105, 111, 110, 80, 114, 111, 98,
			101, 115, 77, 97, 110, 97, 103, 101, 114, 0,
			0, 0, 0, 12, 124, 83, 97, 108, 101, 115,
			68, 101, 118, 105, 99, 101, 0, 0, 0, 0,
			14, 124, 83, 97, 118, 101, 66, 101, 104, 97,
			118, 105, 111, 117, 114, 0, 0, 0, 0, 19,
			124, 83, 101, 97, 115, 111, 110, 97, 108, 65,
			108, 105, 101, 110, 69, 118, 101, 110, 116, 0,
			0, 0, 0, 18, 124, 83, 101, 97, 115, 111,
			110, 97, 108, 66, 101, 104, 97, 118, 105, 111,
			117, 114, 0, 0, 0, 0, 18, 124, 83, 101,
			97, 115, 111, 110, 97, 108, 67, 97, 103, 101,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 24,
			124, 83, 101, 97, 115, 111, 110, 97, 108, 67,
			97, 103, 101, 69, 118, 101, 110, 116, 65, 110,
			105, 109, 97, 108, 0, 0, 0, 0, 18, 124,
			83, 101, 97, 115, 111, 110, 97, 108, 67, 104,
			114, 105, 115, 116, 109, 97, 115, 0, 0, 0,
			0, 15, 124, 83, 101, 97, 115, 111, 110, 97,
			108, 95, 65, 108, 105, 101, 110, 0, 0, 0,
			0, 13, 124, 83, 101, 97, 115, 111, 110, 97,
			108, 95, 85, 70, 79, 0, 0, 0, 0, 18,
			124, 83, 101, 116, 67, 117, 108, 116, 117, 114,
			101, 68, 101, 99, 105, 109, 97, 108, 0, 0,
			0, 0, 22, 124, 83, 101, 116, 76, 111, 99,
			97, 108, 105, 122, 97, 116, 105, 111, 110, 83,
			116, 114, 105, 110, 103, 0, 0, 0, 0, 16,
			124, 83, 101, 116, 85, 73, 83, 116, 97, 116,
			105, 115, 116, 105, 99, 115, 0, 0, 0, 0,
			10, 124, 83, 101, 116, 86, 111, 108, 117, 109,
			101, 0, 0, 0, 0, 14, 124, 83, 101, 116,
			86, 115, 121, 110, 99, 67, 111, 117, 110, 116,
			0, 0, 0, 0, 22, 124, 83, 112, 97, 99,
			101, 65, 99, 113, 117, 105, 115, 105, 116, 105,
			111, 110, 66, 111, 97, 114, 100, 0, 0, 0,
			0, 53, 85, 110, 105, 116, 121, 69, 110, 103,
			105, 110, 101, 46, 69, 120, 112, 101, 114, 105,
			109, 101, 110, 116, 97, 108, 46, 82, 101, 110,
			100, 101, 114, 105, 110, 103, 124, 83, 82, 80,
			66, 97, 116, 99, 104, 101, 114, 80, 114, 111,
			102, 105, 108, 101, 114, 0, 0, 0, 0, 67,
			85, 110, 105, 116, 121, 69, 110, 103, 105, 110,
			101, 46, 69, 120, 112, 101, 114, 105, 109, 101,
			110, 116, 97, 108, 46, 82, 101, 110, 100, 101,
			114, 105, 110, 103, 46, 83, 82, 80, 66, 97,
			116, 99, 104, 101, 114, 80, 114, 111, 102, 105,
			108, 101, 114, 124, 82, 101, 99, 111, 114, 100,
			101, 114, 69, 110, 116, 114, 121, 0, 0, 0,
			0, 24, 124, 83, 116, 97, 116, 105, 115, 116,
			105, 99, 115, 71, 101, 110, 101, 114, 97, 116,
			101, 76, 105, 115, 116, 115, 0, 0, 0, 0,
			13, 124, 83, 116, 101, 97, 109, 77, 97, 110,
			97, 103, 101, 114, 0, 0, 0, 0, 13, 124,
			83, 116, 101, 97, 109, 79, 118, 101, 114, 108,
			97, 121, 0, 0, 0, 0, 19, 124, 83, 116,
			111, 108, 101, 110, 80, 114, 111, 100, 117, 99,
			116, 83, 112, 97, 119, 110, 0, 0, 0, 0,
			20, 124, 83, 117, 114, 118, 101, 105, 108, 108,
			97, 110, 99, 101, 67, 97, 109, 101, 114, 97,
			115, 0, 0, 0, 0, 17, 124, 83, 117, 114,
			118, 101, 105, 108, 108, 97, 110, 99, 101, 68,
			101, 115, 107, 0, 0, 0, 0, 12, 124, 84,
			104, 101, 67, 111, 111, 108, 82, 111, 111, 109,
			0, 0, 0, 0, 24, 124, 84, 105, 109, 101,
			65, 99, 99, 101, 108, 101, 114, 97, 116, 105,
			111, 110, 87, 97, 116, 99, 104, 101, 114, 0,
			0, 0, 0, 17, 124, 84, 111, 111, 108, 98,
			111, 120, 66, 101, 104, 97, 118, 105, 111, 117,
			114, 0, 0, 0, 0, 15, 124, 84, 111, 111,
			108, 115, 79, 114, 103, 97, 110, 105, 122, 101,
			114, 0, 0, 0, 0, 11, 124, 84, 114, 97,
			115, 104, 80, 108, 97, 99, 101, 0, 0, 0,
			0, 11, 124, 84, 114, 97, 115, 104, 83, 112,
			97, 119, 110, 0, 0, 0, 0, 9, 124, 84,
			114, 97, 121, 68, 97, 116, 97, 0, 0, 0,
			0, 16, 124, 84, 117, 116, 111, 114, 105, 97,
			108, 77, 97, 110, 97, 103, 101, 114, 0, 0,
			0, 0, 13, 124, 85, 73, 73, 110, 112, 117,
			116, 70, 105, 101, 108, 100, 0, 0, 0, 0,
			16, 124, 85, 112, 103, 114, 97, 100, 101, 115,
			77, 97, 110, 97, 103, 101, 114, 0, 0, 0,
			0, 10, 124, 87, 101, 98, 72, 101, 108, 112,
			101, 114, 0, 0, 0, 0, 13, 124, 87, 104,
			101, 101, 108, 67, 111, 110, 116, 114, 111, 108,
			0, 0, 0, 0, 12, 124, 90, 79, 114, 100,
			101, 114, 68, 117, 109, 109, 121, 0, 0, 0,
			0, 14, 124, 90, 95, 70, 80, 83, 95, 68,
			105, 115, 112, 108, 97, 121, 0, 0, 0, 0,
			25, 85, 110, 105, 116, 121, 84, 101, 120, 116,
			50, 83, 112, 101, 101, 99, 104, 124, 66, 116,
			110, 83, 112, 101, 97, 107, 0, 0, 0, 0,
			42, 85, 110, 105, 116, 121, 84, 101, 120, 116,
			50, 83, 112, 101, 101, 99, 104, 46, 66, 116,
			110, 83, 112, 101, 97, 107, 124, 84, 101, 120,
			116, 50, 83, 112, 101, 101, 99, 104, 69, 118,
			101, 110, 116, 0, 0, 0, 0, 21, 85, 110,
			105, 116, 121, 84, 101, 120, 116, 50, 83, 112,
			101, 101, 99, 104, 124, 85, 83, 103, 115, 0,
			0, 0, 0, 11, 83, 121, 115, 116, 101, 109,
			124, 72, 97, 108, 102, 0, 0, 0, 0, 17,
			83, 121, 115, 116, 101, 109, 124, 72, 97, 108,
			102, 72, 101, 108, 112, 101, 114, 0, 0, 0,
			0, 27, 83, 121, 115, 116, 101, 109, 46, 72,
			97, 108, 102, 72, 101, 108, 112, 101, 114, 124,
			85, 73, 110, 116, 70, 108, 111, 97, 116, 0,
			0, 0, 0, 14, 83, 109, 111, 111, 116, 104,
			124, 77, 115, 103, 84, 121, 112, 101, 0, 0,
			0, 0, 39, 124, 83, 101, 114, 118, 101, 114,
			65, 117, 116, 104, 111, 114, 105, 116, 121, 69,
			120, 97, 109, 112, 108, 101, 80, 108, 97, 121,
			101, 114, 67, 111, 110, 116, 114, 111, 108, 108,
			101, 114, 0, 0, 0, 0, 29, 83, 109, 111,
			111, 116, 104, 124, 83, 109, 111, 111, 116, 104,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			77, 105, 114, 114, 111, 114, 0, 0, 0, 0,
			23, 83, 109, 111, 111, 116, 104, 124, 83, 109,
			111, 111, 116, 104, 83, 121, 110, 99, 77, 105,
			114, 114, 111, 114, 0, 0, 0, 0, 18, 83,
			109, 111, 111, 116, 104, 124, 83, 116, 97, 116,
			101, 77, 105, 114, 114, 111, 114, 0, 0, 0,
			0, 25, 83, 109, 111, 111, 116, 104, 124, 78,
			101, 116, 119, 111, 114, 107, 83, 116, 97, 116,
			101, 77, 105, 114, 114, 111, 114, 0, 0, 0,
			0, 38, 83, 109, 111, 111, 116, 104, 124, 83,
			121, 110, 99, 80, 114, 111, 106, 101, 99, 116,
			105, 108, 101, 115, 77, 101, 115, 115, 97, 103,
			101, 70, 117, 110, 99, 116, 105, 111, 110, 115,
			0, 0, 0, 0, 40, 124, 83, 109, 111, 111,
			116, 104, 83, 121, 110, 99, 77, 105, 114, 114,
			111, 114, 69, 120, 97, 109, 112, 108, 101, 80,
			108, 97, 121, 101, 114, 67, 111, 110, 116, 114,
			111, 108, 108, 101, 114, 0, 0, 0, 0, 26,
			84, 77, 80, 114, 111, 46, 69, 120, 97, 109,
			112, 108, 101, 115, 124, 66, 101, 110, 99, 104,
			109, 97, 114, 107, 48, 49, 0, 0, 0, 0,
			31, 84, 77, 80, 114, 111, 46, 69, 120, 97,
			109, 112, 108, 101, 115, 124, 66, 101, 110, 99,
			104, 109, 97, 114, 107, 48, 49, 95, 85, 71,
			85, 73, 0, 0, 0, 0, 26, 84, 77, 80,
			114, 111, 46, 69, 120, 97, 109, 112, 108, 101,
			115, 124, 66, 101, 110, 99, 104, 109, 97, 114,
			107, 48, 50, 0, 0, 0, 0, 26, 84, 77,
			80, 114, 111, 46, 69, 120, 97, 109, 112, 108,
			101, 115, 124, 66, 101, 110, 99, 104, 109, 97,
			114, 107, 48, 51, 0, 0, 0, 0, 26, 84,
			77, 80, 114, 111, 46, 69, 120, 97, 109, 112,
			108, 101, 115, 124, 66, 101, 110, 99, 104, 109,
			97, 114, 107, 48, 52, 0, 0, 0, 0, 31,
			84, 77, 80, 114, 111, 46, 69, 120, 97, 109,
			112, 108, 101, 115, 124, 67, 97, 109, 101, 114,
			97, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 0, 0, 0, 0, 15, 124, 67, 104, 97,
			116, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 0, 0, 0, 0, 15, 124, 68, 114, 111,
			112, 100, 111, 119, 110, 83, 97, 109, 112, 108,
			101, 0, 0, 0, 0, 15, 124, 69, 110, 118,
			77, 97, 112, 65, 110, 105, 109, 97, 116, 111,
			114, 0, 0, 0, 0, 25, 84, 77, 80, 114,
			111, 46, 69, 120, 97, 109, 112, 108, 101, 115,
			124, 79, 98, 106, 101, 99, 116, 83, 112, 105,
			110, 0, 0, 0, 0, 33, 84, 77, 80, 114,
			111, 46, 69, 120, 97, 109, 112, 108, 101, 115,
			124, 83, 104, 97, 100, 101, 114, 80, 114, 111,
			112, 65, 110, 105, 109, 97, 116, 111, 114, 0,
			0, 0, 0, 27, 84, 77, 80, 114, 111, 46,
			69, 120, 97, 109, 112, 108, 101, 115, 124, 83,
			105, 109, 112, 108, 101, 83, 99, 114, 105, 112,
			116, 0, 0, 0, 0, 30, 84, 77, 80, 114,
			111, 46, 69, 120, 97, 109, 112, 108, 101, 115,
			124, 83, 107, 101, 119, 84, 101, 120, 116, 69,
			120, 97, 109, 112, 108, 101, 0, 0, 0, 0,
			23, 84, 77, 80, 114, 111, 46, 69, 120, 97,
			109, 112, 108, 101, 115, 124, 84, 101, 108, 101,
			84, 121, 112, 101, 0, 0, 0, 0, 35, 84,
			77, 80, 114, 111, 46, 69, 120, 97, 109, 112,
			108, 101, 115, 124, 84, 101, 120, 116, 67, 111,
			110, 115, 111, 108, 101, 83, 105, 109, 117, 108,
			97, 116, 111, 114, 0, 0, 0, 0, 38, 84,
			77, 80, 114, 111, 46, 69, 120, 97, 109, 112,
			108, 101, 115, 124, 84, 101, 120, 116, 77, 101,
			115, 104, 80, 114, 111, 70, 108, 111, 97, 116,
			105, 110, 103, 84, 101, 120, 116, 0, 0, 0,
			0, 30, 84, 77, 80, 114, 111, 46, 69, 120,
			97, 109, 112, 108, 101, 115, 124, 84, 101, 120,
			116, 77, 101, 115, 104, 83, 112, 97, 119, 110,
			101, 114, 0, 0, 0, 0, 39, 84, 77, 80,
			114, 111, 46, 69, 120, 97, 109, 112, 108, 101,
			115, 124, 84, 77, 80, 114, 111, 95, 73, 110,
			115, 116, 114, 117, 99, 116, 105, 111, 110, 79,
			118, 101, 114, 108, 97, 121, 0, 0, 0, 0,
			24, 84, 77, 80, 114, 111, 124, 84, 77, 80,
			95, 68, 105, 103, 105, 116, 86, 97, 108, 105,
			100, 97, 116, 111, 114, 0, 0, 0, 0, 35,
			84, 77, 80, 114, 111, 46, 69, 120, 97, 109,
			112, 108, 101, 115, 124, 84, 77, 80, 95, 69,
			120, 97, 109, 112, 108, 101, 83, 99, 114, 105,
			112, 116, 95, 48, 49, 0, 0, 0, 0, 35,
			84, 77, 80, 114, 111, 46, 69, 120, 97, 109,
			112, 108, 101, 115, 124, 84, 77, 80, 95, 70,
			114, 97, 109, 101, 82, 97, 116, 101, 67, 111,
			117, 110, 116, 101, 114, 0, 0, 0, 0, 30,
			84, 77, 80, 114, 111, 124, 84, 77, 80, 95,
			80, 104, 111, 110, 101, 78, 117, 109, 98, 101,
			114, 86, 97, 108, 105, 100, 97, 116, 111, 114,
			0, 0, 0, 0, 33, 84, 77, 80, 114, 111,
			46, 69, 120, 97, 109, 112, 108, 101, 115, 124,
			84, 77, 80, 95, 84, 101, 120, 116, 69, 118,
			101, 110, 116, 67, 104, 101, 99, 107, 0, 0,
			0, 0, 26, 84, 77, 80, 114, 111, 124, 84,
			77, 80, 95, 84, 101, 120, 116, 69, 118, 101,
			110, 116, 72, 97, 110, 100, 108, 101, 114, 0,
			0, 0, 0, 50, 84, 77, 80, 114, 111, 46,
			84, 77, 80, 95, 84, 101, 120, 116, 69, 118,
			101, 110, 116, 72, 97, 110, 100, 108, 101, 114,
			124, 67, 104, 97, 114, 97, 99, 116, 101, 114,
			83, 101, 108, 101, 99, 116, 105, 111, 110, 69,
			118, 101, 110, 116, 0, 0, 0, 0, 47, 84,
			77, 80, 114, 111, 46, 84, 77, 80, 95, 84,
			101, 120, 116, 69, 118, 101, 110, 116, 72, 97,
			110, 100, 108, 101, 114, 124, 83, 112, 114, 105,
			116, 101, 83, 101, 108, 101, 99, 116, 105, 111,
			110, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			45, 84, 77, 80, 114, 111, 46, 84, 77, 80,
			95, 84, 101, 120, 116, 69, 118, 101, 110, 116,
			72, 97, 110, 100, 108, 101, 114, 124, 87, 111,
			114, 100, 83, 101, 108, 101, 99, 116, 105, 111,
			110, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			45, 84, 77, 80, 114, 111, 46, 84, 77, 80,
			95, 84, 101, 120, 116, 69, 118, 101, 110, 116,
			72, 97, 110, 100, 108, 101, 114, 124, 76, 105,
			110, 101, 83, 101, 108, 101, 99, 116, 105, 111,
			110, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			45, 84, 77, 80, 114, 111, 46, 84, 77, 80,
			95, 84, 101, 120, 116, 69, 118, 101, 110, 116,
			72, 97, 110, 100, 108, 101, 114, 124, 76, 105,
			110, 107, 83, 101, 108, 101, 99, 116, 105, 111,
			110, 69, 118, 101, 110, 116, 0, 0, 0, 0,
			36, 84, 77, 80, 114, 111, 46, 69, 120, 97,
			109, 112, 108, 101, 115, 124, 84, 77, 80, 95,
			84, 101, 120, 116, 73, 110, 102, 111, 68, 101,
			98, 117, 103, 84, 111, 111, 108, 0, 0, 0,
			0, 33, 84, 77, 80, 114, 111, 46, 69, 120,
			97, 109, 112, 108, 101, 115, 124, 84, 77, 80,
			95, 84, 101, 120, 116, 83, 101, 108, 101, 99,
			116, 111, 114, 95, 65, 0, 0, 0, 0, 33,
			84, 77, 80, 114, 111, 46, 69, 120, 97, 109,
			112, 108, 101, 115, 124, 84, 77, 80, 95, 84,
			101, 120, 116, 83, 101, 108, 101, 99, 116, 111,
			114, 95, 66, 0, 0, 0, 0, 37, 84, 77,
			80, 114, 111, 46, 69, 120, 97, 109, 112, 108,
			101, 115, 124, 84, 77, 80, 95, 85, 105, 70,
			114, 97, 109, 101, 82, 97, 116, 101, 67, 111,
			117, 110, 116, 101, 114, 0, 0, 0, 0, 32,
			84, 77, 80, 114, 111, 46, 69, 120, 97, 109,
			112, 108, 101, 115, 124, 86, 101, 114, 116, 101,
			120, 67, 111, 108, 111, 114, 67, 121, 99, 108,
			101, 114, 0, 0, 0, 0, 27, 84, 77, 80,
			114, 111, 46, 69, 120, 97, 109, 112, 108, 101,
			115, 124, 86, 101, 114, 116, 101, 120, 74, 105,
			116, 116, 101, 114, 0, 0, 0, 0, 38, 84,
			77, 80, 114, 111, 46, 69, 120, 97, 109, 112,
			108, 101, 115, 46, 86, 101, 114, 116, 101, 120,
			74, 105, 116, 116, 101, 114, 124, 86, 101, 114,
			116, 101, 120, 65, 110, 105, 109, 0, 0, 0,
			0, 27, 84, 77, 80, 114, 111, 46, 69, 120,
			97, 109, 112, 108, 101, 115, 124, 86, 101, 114,
			116, 101, 120, 83, 104, 97, 107, 101, 65, 0,
			0, 0, 0, 27, 84, 77, 80, 114, 111, 46,
			69, 120, 97, 109, 112, 108, 101, 115, 124, 86,
			101, 114, 116, 101, 120, 83, 104, 97, 107, 101,
			66, 0, 0, 0, 0, 25, 84, 77, 80, 114,
			111, 46, 69, 120, 97, 109, 112, 108, 101, 115,
			124, 86, 101, 114, 116, 101, 120, 90, 111, 111,
			109, 0, 0, 0, 0, 30, 84, 77, 80, 114,
			111, 46, 69, 120, 97, 109, 112, 108, 101, 115,
			124, 87, 97, 114, 112, 84, 101, 120, 116, 69,
			120, 97, 109, 112, 108, 101, 0, 0, 0, 0,
			7, 124, 82, 101, 97, 100, 109, 101, 0, 0,
			0, 0, 14, 82, 101, 97, 100, 109, 101, 124,
			83, 101, 99, 116, 105, 111, 110, 0, 0, 0,
			0, 37, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 124, 65, 117, 116,
			104, 82, 101, 113, 117, 101, 115, 116, 101, 100,
			69, 118, 101, 110, 116, 65, 114, 103, 115, 0,
			0, 0, 0, 27, 86, 117, 112, 108, 101, 120,
			46, 87, 101, 98, 86, 105, 101, 119, 124, 66,
			97, 115, 101, 75, 101, 121, 98, 111, 97, 114,
			100, 0, 0, 0, 0, 32, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			124, 66, 97, 115, 101, 87, 101, 98, 86, 105,
			101, 119, 80, 114, 101, 102, 97, 98, 0, 0,
			0, 0, 29, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 124, 67, 97,
			110, 118, 97, 115, 75, 101, 121, 98, 111, 97,
			114, 100, 0, 0, 0, 0, 41, 86, 117, 112,
			108, 101, 120, 46, 87, 101, 98, 86, 105, 101,
			119, 124, 67, 97, 110, 118, 97, 115, 80, 111,
			105, 110, 116, 101, 114, 73, 110, 112, 117, 116,
			68, 101, 116, 101, 99, 116, 111, 114, 0, 0,
			0, 0, 34, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 124, 67, 97,
			110, 118, 97, 115, 87, 101, 98, 86, 105, 101,
			119, 80, 114, 101, 102, 97, 98, 0, 0, 0,
			0, 31, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 124, 67, 108, 105,
			99, 107, 101, 100, 69, 118, 101, 110, 116, 65,
			114, 103, 115, 0, 0, 0, 0, 38, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 67, 111, 110, 115, 111, 108, 101,
			77, 101, 115, 115, 97, 103, 101, 69, 118, 101,
			110, 116, 65, 114, 103, 115, 0, 0, 0, 0,
			21, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 124, 67, 111, 111, 107,
			105, 101, 0, 0, 0, 0, 42, 86, 117, 112,
			108, 101, 120, 46, 87, 101, 98, 86, 105, 101,
			119, 124, 68, 101, 102, 97, 117, 108, 116, 80,
			111, 105, 110, 116, 101, 114, 73, 110, 112, 117,
			116, 68, 101, 116, 101, 99, 116, 111, 114, 0,
			0, 0, 0, 39, 86, 117, 112, 108, 101, 120,
			46, 87, 101, 98, 86, 105, 101, 119, 124, 68,
			111, 119, 110, 108, 111, 97, 100, 67, 104, 97,
			110, 103, 101, 100, 69, 118, 101, 110, 116, 65,
			114, 103, 115, 0, 0, 0, 0, 24, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 69, 118, 101, 110, 116, 65, 114,
			103, 115, 0, 0, 0, 0, 37, 86, 117, 112,
			108, 101, 120, 46, 87, 101, 98, 86, 105, 101,
			119, 124, 70, 105, 108, 101, 83, 101, 108, 101,
			99, 116, 105, 111, 110, 69, 118, 101, 110, 116,
			65, 114, 103, 115, 0, 0, 0, 0, 48, 86,
			117, 112, 108, 101, 120, 46, 87, 101, 98, 86,
			105, 101, 119, 124, 70, 111, 99, 117, 115, 101,
			100, 73, 110, 112, 117, 116, 70, 105, 101, 108,
			100, 67, 104, 97, 110, 103, 101, 100, 69, 118,
			101, 110, 116, 65, 114, 103, 115, 0, 0, 0,
			0, 29, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 124, 73, 67, 111,
			111, 107, 105, 101, 77, 97, 110, 97, 103, 101,
			114, 0, 0, 0, 0, 35, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			46, 73, 110, 116, 101, 114, 110, 97, 108, 124,
			66, 97, 115, 101, 87, 101, 98, 86, 105, 101,
			119, 0, 0, 0, 0, 37, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			46, 73, 110, 116, 101, 114, 110, 97, 108, 124,
			66, 114, 105, 100, 103, 101, 77, 101, 115, 115,
			97, 103, 101, 0, 0, 0, 0, 37, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 46, 73, 110, 116, 101, 114, 110, 97,
			108, 124, 67, 97, 99, 104, 105, 110, 103, 71,
			101, 116, 116, 101, 114, 0, 0, 0, 0, 50,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 46, 73, 110, 116, 101, 114,
			110, 97, 108, 124, 67, 97, 110, 118, 97, 115,
			86, 105, 101, 119, 112, 111, 114, 116, 77, 97,
			116, 101, 114, 105, 97, 108, 86, 105, 101, 119,
			0, 0, 0, 0, 44, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 46,
			73, 110, 116, 101, 114, 110, 97, 108, 124, 67,
			111, 110, 115, 111, 108, 101, 66, 114, 105, 100,
			103, 101, 77, 101, 115, 115, 97, 103, 101, 0,
			0, 0, 0, 36, 86, 117, 112, 108, 101, 120,
			46, 87, 101, 98, 86, 105, 101, 119, 46, 73,
			110, 116, 101, 114, 110, 97, 108, 124, 67, 117,
			114, 115, 111, 114, 72, 101, 108, 112, 101, 114,
			0, 0, 0, 0, 47, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 46,
			73, 110, 116, 101, 114, 110, 97, 108, 46, 67,
			117, 114, 115, 111, 114, 72, 101, 108, 112, 101,
			114, 124, 67, 117, 114, 115, 111, 114, 73, 110,
			102, 111, 0, 0, 0, 0, 39, 86, 117, 112,
			108, 101, 120, 46, 87, 101, 98, 86, 105, 101,
			119, 46, 73, 110, 116, 101, 114, 110, 97, 108,
			124, 68, 111, 119, 110, 108, 111, 97, 100, 77,
			101, 115, 115, 97, 103, 101, 0, 0, 0, 0,
			44, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 46, 73, 110, 116, 101,
			114, 110, 97, 108, 124, 70, 105, 108, 101, 83,
			101, 108, 101, 99, 116, 105, 111, 110, 77, 101,
			115, 115, 97, 103, 101, 0, 0, 0, 0, 34,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 46, 73, 110, 116, 101, 114,
			110, 97, 108, 124, 73, 87, 101, 98, 80, 108,
			117, 103, 105, 110, 0, 0, 0, 0, 40, 86,
			117, 112, 108, 101, 120, 46, 87, 101, 98, 86,
			105, 101, 119, 46, 73, 110, 116, 101, 114, 110,
			97, 108, 124, 74, 115, 111, 110, 65, 114, 114,
			97, 121, 87, 114, 97, 112, 112, 101, 114, 0,
			0, 0, 0, 39, 86, 117, 112, 108, 101, 120,
			46, 87, 101, 98, 86, 105, 101, 119, 46, 73,
			110, 116, 101, 114, 110, 97, 108, 124, 75, 101,
			121, 98, 111, 97, 114, 100, 77, 97, 110, 97,
			103, 101, 114, 0, 0, 0, 0, 34, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 46, 73, 110, 116, 101, 114, 110, 97,
			108, 124, 75, 101, 121, 98, 111, 97, 114, 100,
			85, 73, 0, 0, 0, 0, 38, 86, 117, 112,
			108, 101, 120, 46, 87, 101, 98, 86, 105, 101,
			119, 46, 73, 110, 116, 101, 114, 110, 97, 108,
			124, 76, 97, 98, 101, 108, 65, 116, 116, 114,
			105, 98, 117, 116, 101, 0, 0, 0, 0, 41,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 46, 73, 110, 116, 101, 114,
			110, 97, 108, 124, 75, 101, 121, 98, 111, 97,
			114, 100, 69, 118, 101, 110, 116, 65, 114, 103,
			115, 0, 0, 0, 0, 46, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			46, 73, 110, 116, 101, 114, 110, 97, 108, 124,
			78, 97, 116, 105, 118, 101, 75, 101, 121, 98,
			111, 97, 114, 100, 76, 105, 115, 116, 101, 110,
			101, 114, 0, 0, 0, 0, 61, 86, 117, 112,
			108, 101, 120, 46, 87, 101, 98, 86, 105, 101,
			119, 46, 73, 110, 116, 101, 114, 110, 97, 108,
			46, 78, 97, 116, 105, 118, 101, 75, 101, 121,
			98, 111, 97, 114, 100, 76, 105, 115, 116, 101,
			110, 101, 114, 124, 75, 101, 121, 82, 101, 112,
			101, 97, 116, 83, 116, 97, 116, 101, 0, 0,
			0, 0, 43, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 46, 73, 110,
			116, 101, 114, 110, 97, 108, 124, 83, 116, 114,
			105, 110, 103, 66, 114, 105, 100, 103, 101, 77,
			101, 115, 115, 97, 103, 101, 0, 0, 0, 0,
			49, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 46, 73, 110, 116, 101,
			114, 110, 97, 108, 124, 83, 116, 114, 105, 110,
			103, 87, 105, 116, 104, 73, 100, 66, 114, 105,
			100, 103, 101, 77, 101, 115, 115, 97, 103, 101,
			0, 0, 0, 0, 40, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 46,
			73, 110, 116, 101, 114, 110, 97, 108, 124, 84,
			104, 114, 101, 97, 100, 68, 105, 115, 112, 97,
			116, 99, 104, 101, 114, 0, 0, 0, 0, 41,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 46, 73, 110, 116, 101, 114,
			110, 97, 108, 124, 85, 114, 108, 67, 104, 97,
			110, 103, 101, 100, 77, 101, 115, 115, 97, 103,
			101, 0, 0, 0, 0, 33, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			46, 73, 110, 116, 101, 114, 110, 97, 108, 124,
			85, 114, 108, 65, 99, 116, 105, 111, 110, 0,
			0, 0, 0, 44, 86, 117, 112, 108, 101, 120,
			46, 87, 101, 98, 86, 105, 101, 119, 46, 73,
			110, 116, 101, 114, 110, 97, 108, 124, 86, 105,
			101, 119, 112, 111, 114, 116, 77, 97, 116, 101,
			114, 105, 97, 108, 86, 105, 101, 119, 0, 0,
			0, 0, 53, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 46, 73, 110,
			116, 101, 114, 110, 97, 108, 124, 86, 117, 108,
			107, 97, 110, 68, 101, 108, 97, 121, 101, 100,
			84, 101, 120, 116, 117, 114, 101, 68, 101, 115,
			116, 114, 111, 121, 101, 114, 0, 0, 0, 0,
			31, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 46, 73, 110, 116, 101,
			114, 110, 97, 108, 124, 86, 88, 85, 116, 105,
			108, 115, 0, 0, 0, 0, 40, 86, 117, 112,
			108, 101, 120, 46, 87, 101, 98, 86, 105, 101,
			119, 46, 73, 110, 116, 101, 114, 110, 97, 108,
			124, 87, 101, 98, 80, 108, 117, 103, 105, 110,
			70, 97, 99, 116, 111, 114, 121, 0, 0, 0,
			0, 37, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 46, 73, 110, 116,
			101, 114, 110, 97, 108, 124, 87, 101, 98, 86,
			105, 101, 119, 76, 111, 103, 103, 101, 114, 0,
			0, 0, 0, 36, 86, 117, 112, 108, 101, 120,
			46, 87, 101, 98, 86, 105, 101, 119, 124, 73,
			80, 111, 105, 110, 116, 101, 114, 73, 110, 112,
			117, 116, 68, 101, 116, 101, 99, 116, 111, 114,
			0, 0, 0, 0, 23, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			73, 87, 101, 98, 86, 105, 101, 119, 0, 0,
			0, 0, 33, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 124, 79, 98,
			115, 111, 108, 101, 116, 105, 111, 110, 77, 101,
			115, 115, 97, 103, 101, 115, 0, 0, 0, 0,
			35, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 124, 73, 87, 105, 116,
			104, 67, 104, 97, 110, 103, 105, 110, 103, 84,
			101, 120, 116, 117, 114, 101, 0, 0, 0, 0,
			30, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 124, 73, 87, 105, 116,
			104, 67, 117, 114, 115, 111, 114, 84, 121, 112,
			101, 0, 0, 0, 0, 31, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			124, 73, 87, 105, 116, 104, 68, 101, 101, 112,
			76, 105, 110, 107, 105, 110, 103, 0, 0, 0,
			0, 29, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 124, 73, 87, 105,
			116, 104, 68, 111, 119, 110, 108, 111, 97, 100,
			115, 0, 0, 0, 0, 39, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			124, 73, 87, 105, 116, 104, 70, 97, 108, 108,
			98, 97, 99, 107, 84, 101, 120, 116, 117, 114,
			101, 68, 97, 116, 97, 0, 0, 0, 0, 33,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 124, 73, 87, 105, 116, 104,
			70, 97, 108, 108, 98, 97, 99, 107, 86, 105,
			100, 101, 111, 0, 0, 0, 0, 33, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 73, 87, 105, 116, 104, 70, 105,
			108, 101, 83, 101, 108, 101, 99, 116, 105, 111,
			110, 0, 0, 0, 0, 24, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			124, 73, 87, 105, 116, 104, 70, 105, 110, 100,
			0, 0, 0, 0, 25, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			70, 105, 110, 100, 82, 101, 115, 117, 108, 116,
			0, 0, 0, 0, 28, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			73, 87, 105, 116, 104, 72, 116, 116, 112, 65,
			117, 116, 104, 0, 0, 0, 0, 32, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 73, 87, 105, 116, 104, 75, 101,
			121, 68, 111, 119, 110, 65, 110, 100, 85, 112,
			0, 0, 0, 0, 34, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			73, 87, 105, 116, 104, 77, 111, 118, 97, 98,
			108, 101, 80, 111, 105, 110, 116, 101, 114, 0,
			0, 0, 0, 32, 86, 117, 112, 108, 101, 120,
			46, 87, 101, 98, 86, 105, 101, 119, 124, 73,
			87, 105, 116, 104, 77, 117, 116, 97, 98, 108,
			101, 65, 117, 100, 105, 111, 0, 0, 0, 0,
			32, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 124, 73, 87, 105, 116,
			104, 78, 97, 116, 105, 118, 101, 50, 68, 77,
			111, 100, 101, 0, 0, 0, 0, 43, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 73, 87, 105, 116, 104, 78, 97,
			116, 105, 118, 101, 74, 97, 118, 97, 83, 99,
			114, 105, 112, 116, 68, 105, 97, 108, 111, 103,
			115, 0, 0, 0, 0, 42, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			124, 73, 87, 105, 116, 104, 78, 97, 116, 105,
			118, 101, 79, 110, 83, 99, 114, 101, 101, 110,
			75, 101, 121, 98, 111, 97, 114, 100, 0, 0,
			0, 0, 31, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 124, 73, 87,
			105, 116, 104, 80, 100, 102, 67, 114, 101, 97,
			116, 105, 111, 110, 0, 0, 0, 0, 32, 86,
			117, 112, 108, 101, 120, 46, 87, 101, 98, 86,
			105, 101, 119, 124, 73, 87, 105, 116, 104, 80,
			105, 120, 101, 108, 68, 101, 110, 115, 105, 116,
			121, 0, 0, 0, 0, 36, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			124, 73, 87, 105, 116, 104, 80, 111, 105, 110,
			116, 101, 114, 68, 111, 119, 110, 65, 110, 100,
			85, 112, 0, 0, 0, 0, 26, 86, 117, 112,
			108, 101, 120, 46, 87, 101, 98, 86, 105, 101,
			119, 124, 73, 87, 105, 116, 104, 80, 111, 112,
			117, 112, 115, 0, 0, 0, 0, 37, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 73, 87, 105, 116, 104, 83, 101,
			116, 116, 97, 98, 108, 101, 85, 115, 101, 114,
			65, 103, 101, 110, 116, 0, 0, 0, 0, 25,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 124, 73, 87, 105, 116, 104,
			84, 111, 117, 99, 104, 0, 0, 0, 0, 23,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 124, 75, 101, 121, 98, 111,
			97, 114, 100, 0, 0, 0, 0, 32, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 77, 111, 99, 107, 67, 111, 111,
			107, 105, 101, 77, 97, 110, 97, 103, 101, 114,
			0, 0, 0, 0, 28, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			77, 111, 99, 107, 87, 101, 98, 80, 108, 117,
			103, 105, 110, 0, 0, 0, 0, 26, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 77, 111, 99, 107, 87, 101, 98,
			86, 105, 101, 119, 0, 0, 0, 0, 38, 86,
			117, 112, 108, 101, 120, 46, 87, 101, 98, 86,
			105, 101, 119, 124, 80, 97, 103, 101, 76, 111,
			97, 100, 70, 97, 105, 108, 101, 100, 69, 118,
			101, 110, 116, 65, 114, 103, 115, 0, 0, 0,
			0, 38, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 124, 80, 97, 103,
			101, 76, 111, 97, 100, 70, 97, 105, 108, 101,
			100, 69, 120, 99, 101, 112, 116, 105, 111, 110,
			0, 0, 0, 0, 31, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			80, 111, 105, 110, 116, 101, 114, 69, 118, 101,
			110, 116, 65, 114, 103, 115, 0, 0, 0, 0,
			29, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 124, 80, 111, 105, 110,
			116, 101, 114, 79, 112, 116, 105, 111, 110, 115,
			0, 0, 0, 0, 38, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			80, 111, 112, 117, 112, 82, 101, 113, 117, 101,
			115, 116, 101, 100, 69, 118, 101, 110, 116, 65,
			114, 103, 115, 0, 0, 0, 0, 39, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 80, 114, 111, 103, 114, 101, 115,
			115, 67, 104, 97, 110, 103, 101, 100, 69, 118,
			101, 110, 116, 65, 114, 103, 115, 1, 0, 0,
			0, 36, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 124, 83, 99, 114,
			105, 112, 116, 68, 105, 97, 108, 111, 103, 69,
			118, 101, 110, 116, 65, 114, 103, 115, 1, 0,
			0, 0, 36, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 124, 83, 99,
			114, 105, 112, 116, 68, 105, 97, 108, 111, 103,
			69, 118, 101, 110, 116, 65, 114, 103, 115, 0,
			0, 0, 0, 32, 86, 117, 112, 108, 101, 120,
			46, 87, 101, 98, 86, 105, 101, 119, 124, 83,
			99, 114, 111, 108, 108, 101, 100, 69, 118, 101,
			110, 116, 65, 114, 103, 115, 0, 0, 0, 0,
			34, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 124, 84, 101, 114, 109,
			105, 110, 97, 116, 101, 100, 69, 118, 101, 110,
			116, 65, 114, 103, 115, 0, 0, 0, 0, 25,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 124, 84, 111, 117, 99, 104,
			69, 118, 101, 110, 116, 0, 0, 0, 0, 28,
			86, 117, 112, 108, 101, 120, 46, 87, 101, 98,
			86, 105, 101, 119, 124, 85, 114, 108, 65, 99,
			116, 105, 111, 110, 84, 121, 112, 101, 0, 0,
			0, 0, 34, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 124, 85, 114,
			108, 67, 104, 97, 110, 103, 101, 100, 69, 118,
			101, 110, 116, 65, 114, 103, 115, 0, 0, 0,
			0, 18, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 124, 87, 101, 98,
			0, 0, 0, 0, 29, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			87, 101, 98, 86, 105, 101, 119, 79, 112, 116,
			105, 111, 110, 115, 0, 0, 0, 0, 28, 86,
			117, 112, 108, 101, 120, 46, 87, 101, 98, 86,
			105, 101, 119, 124, 87, 101, 98, 86, 105, 101,
			119, 80, 114, 101, 102, 97, 98, 0, 0, 0,
			0, 42, 86, 117, 112, 108, 101, 120, 46, 87,
			101, 98, 86, 105, 101, 119, 124, 87, 101, 98,
			86, 105, 101, 119, 85, 110, 97, 118, 97, 105,
			108, 97, 98, 108, 101, 69, 120, 99, 101, 112,
			116, 105, 111, 110, 0, 0, 0, 0, 32, 86,
			117, 112, 108, 101, 120, 46, 68, 101, 109, 111,
			115, 124, 65, 100, 118, 97, 110, 99, 101, 100,
			87, 101, 98, 86, 105, 101, 119, 68, 101, 109,
			111, 0, 0, 0, 0, 26, 86, 117, 112, 108,
			101, 120, 46, 68, 101, 109, 111, 115, 124, 67,
			97, 109, 101, 114, 97, 82, 111, 116, 97, 116,
			111, 114, 0, 0, 0, 0, 28, 86, 117, 112,
			108, 101, 120, 46, 68, 101, 109, 111, 115, 124,
			67, 97, 110, 118, 97, 115, 80, 111, 112, 117,
			112, 68, 101, 109, 111, 0, 0, 0, 0, 30,
			86, 117, 112, 108, 101, 120, 46, 68, 101, 109,
			111, 115, 124, 67, 97, 110, 118, 97, 115, 87,
			101, 98, 86, 105, 101, 119, 68, 101, 109, 111,
			0, 0, 0, 0, 33, 86, 117, 112, 108, 101,
			120, 46, 68, 101, 109, 111, 115, 124, 67, 97,
			110, 118, 97, 115, 87, 111, 114, 108, 100, 83,
			112, 97, 99, 101, 68, 101, 109, 111, 0, 0,
			0, 0, 45, 86, 117, 112, 108, 101, 120, 46,
			87, 101, 98, 86, 105, 101, 119, 46, 68, 101,
			109, 111, 115, 124, 72, 97, 114, 100, 119, 97,
			114, 101, 75, 101, 121, 98, 111, 97, 114, 100,
			76, 105, 115, 116, 101, 110, 101, 114, 0, 0,
			0, 0, 22, 86, 117, 112, 108, 101, 120, 46,
			68, 101, 109, 111, 115, 124, 80, 111, 112, 117,
			112, 68, 101, 109, 111, 0, 0, 0, 0, 30,
			86, 117, 112, 108, 101, 120, 46, 68, 101, 109,
			111, 115, 124, 83, 105, 109, 112, 108, 101, 87,
			101, 98, 86, 105, 101, 119, 68, 101, 109, 111,
			0, 0, 0, 0, 46, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 46,
			73, 110, 116, 101, 114, 110, 97, 108, 124, 77,
			97, 99, 87, 101, 98, 80, 108, 117, 103, 105,
			110, 82, 101, 103, 105, 115, 116, 114, 97, 110,
			116, 0, 0, 0, 0, 38, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			124, 83, 116, 97, 110, 100, 97, 108, 111, 110,
			101, 67, 111, 111, 107, 105, 101, 77, 97, 110,
			97, 103, 101, 114, 0, 0, 0, 0, 34, 86,
			117, 112, 108, 101, 120, 46, 87, 101, 98, 86,
			105, 101, 119, 124, 83, 116, 97, 110, 100, 97,
			108, 111, 110, 101, 87, 101, 98, 80, 108, 117,
			103, 105, 110, 0, 0, 0, 0, 32, 86, 117,
			112, 108, 101, 120, 46, 87, 101, 98, 86, 105,
			101, 119, 124, 83, 116, 97, 110, 100, 97, 108,
			111, 110, 101, 87, 101, 98, 86, 105, 101, 119,
			0, 0, 0, 0, 31, 86, 117, 112, 108, 101,
			120, 46, 87, 101, 98, 86, 105, 101, 119, 124,
			87, 105, 110, 100, 111, 119, 115, 87, 101, 98,
			80, 108, 117, 103, 105, 110, 0, 0, 0, 0,
			50, 86, 117, 112, 108, 101, 120, 46, 87, 101,
			98, 86, 105, 101, 119, 46, 73, 110, 116, 101,
			114, 110, 97, 108, 124, 87, 105, 110, 100, 111,
			119, 115, 87, 101, 98, 80, 108, 117, 103, 105,
			110, 82, 101, 103, 105, 115, 116, 114, 97, 110,
			116, 0, 0, 0, 0, 29, 86, 117, 112, 108,
			101, 120, 46, 87, 101, 98, 86, 105, 101, 119,
			124, 87, 105, 110, 100, 111, 119, 115, 87, 101,
			98, 86, 105, 101, 119
		};
		result.TotalFiles = 1978;
		result.TotalTypes = 2543;
		result.IsEditorOnly = false;
		return result;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// UpgradesManager
using System.Collections;
using System.Runtime.InteropServices;
using Mirror;
using Mirror.RemoteCalls;
using TMPro;
using UnityEngine;

public class UpgradesManager : NetworkBehaviour
{
	public int spaceBought;

	public int storageBought;

	[SyncVar]
	public bool[] storeSpaceUpgrades;

	[SyncVar]
	public bool[] storageSpaceUpgrades;

	[SyncVar]
	public bool[] addonsBought = new bool[6];

	[SyncVar]
	public bool[] extraUpgrades = new bool[11];

	[SyncVar]
	public bool acceleratedTime;

	public GameObject UIPerksParent;

	public int maxEmployees;

	public int boxRecycleFactor = 1;

	[Space(10f)]
	public GameObject expansionsParentOBJ;

	public GameObject expansionsUIParentOBJ;

	public GameObject expansionsUIButtonsParentOBJ;

	public GameObject addonsDepartmentsParentOBJ;

	public SpaceAcquisitionBoard spaceAcquisitionComponent;

	[Space(10f)]
	public int spacePrice = 500;

	public TextMeshProUGUI spacePriceOBJ;

	[Space(10f)]
	public int storagePrice = 1000;

	public TextMeshProUGUI storagePriceOBJ;

	[Space(10f)]
	public GameObject interruptRecyclingButtonOBJ;

	public GameObject normalTrashContainerOBJ;

	public GameObject recycleContainerOBJ;

	public GameObject UIBuildablesParentOBJ;

	public GameObject[] UIpalletsOBJsArray;

	[Space(10f)]
	public bool softwareUpgradePerk;

	public GameObject clockOBJ;

	public GameObject clockControlSlateOBJ;

	public TextMeshProUGUI acceleratedTimeField;

	public GameObject UIautopayDisableButtonOBJ;

	public GameObject convertBystandersTriggerOBJ;

	private float acceleratedTimeFactor = 5f;

	public bool[] NetworkstoreSpaceUpgrades
	{
		get
		{
			return storeSpaceUpgrades;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref storeSpaceUpgrades, 1uL, null);
		}
	}

	public bool[] NetworkstorageSpaceUpgrades
	{
		get
		{
			return storageSpaceUpgrades;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref storageSpaceUpgrades, 2uL, null);
		}
	}

	public bool[] NetworkaddonsBought
	{
		get
		{
			return addonsBought;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref addonsBought, 4uL, null);
		}
	}

	public bool[] NetworkextraUpgrades
	{
		get
		{
			return extraUpgrades;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref extraUpgrades, 8uL, null);
		}
	}

	public bool NetworkacceleratedTime
	{
		get
		{
			return acceleratedTime;
		}
		[param: In]
		set
		{
			GeneratedSyncVarSetter(value, ref acceleratedTime, 16uL, null);
		}
	}

	public override void OnStartClient()
	{
		InitialSpaceSet();
		StartCoroutine(GameStartSetPerks());
		StartCoroutine(DelayedAcceleration());
	}

	private IEnumerator DelayedAcceleration()
	{
		yield return new WaitForSeconds(6f);
		if (acceleratedTime)
		{
			SetAccelerationMethod(acceleratedTime);
		}
	}

	private int RetrieveNumberOfStoreSpaces()
	{
		int num = 0;
		bool[] array = storeSpaceUpgrades;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i])
			{
				num++;
			}
		}
		return num;
	}

	private int RetrieveNumberOfStorageSpaces()
	{
		int num = 0;
		bool[] array = storageSpaceUpgrades;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i])
			{
				num++;
			}
		}
		return num;
	}

	private void AdaptNewSystemToOld()
	{
		for (int i = 0; i < spaceBought; i++)
		{
			if (i < storeSpaceUpgrades.Length)
			{
				storeSpaceUpgrades[i] = true;
			}
		}
		for (int j = 0; j < storageBought; j++)
		{
			if (j < storageSpaceUpgrades.Length)
			{
				storageSpaceUpgrades[j] = true;
			}
		}
	}

	private void InitialSpaceSet()
	{
		if (base.isServer)
		{
			if (spaceBought > 0 && RetrieveNumberOfStoreSpaces() == 0)
			{
				AdaptNewSystemToOld();
			}
			else if (storageBought > 0 && RetrieveNumberOfStorageSpaces() == 0)
			{
				AdaptNewSystemToOld();
			}
		}
		GameObject spaceParentOBJ = expansionsParentOBJ.transform.GetChild(0).gameObject;
		GameObject spaceUIParentOBJ = expansionsUIParentOBJ.transform.GetChild(0).gameObject;
		GameObject spaceUIButtonParentOBJ = expansionsUIButtonsParentOBJ.transform.GetChild(0).gameObject;
		float num = 250 + RetrieveNumberOfStoreSpaces() * 250;
		spacePriceOBJ.text = "$" + num;
		spacePrice = (int)num;
		for (int i = 0; i < storeSpaceUpgrades.Length; i++)
		{
			if (storeSpaceUpgrades[i])
			{
				SetSingleStoreSpace(i, spaceParentOBJ, spaceUIParentOBJ, spaceUIButtonParentOBJ);
			}
		}
		spaceParentOBJ = expansionsParentOBJ.transform.GetChild(1).gameObject;
		spaceUIParentOBJ = expansionsUIParentOBJ.transform.GetChild(1).gameObject;
		spaceUIButtonParentOBJ = expansionsUIButtonsParentOBJ.transform.GetChild(1).gameObject;
		num = 2000 + RetrieveNumberOfStorageSpaces() * 1000;
		storagePriceOBJ.text = "$" + num;
		storagePrice = (int)num;
		for (int j = 0; j < storageSpaceUpgrades.Length; j++)
		{
			if (storageSpaceUpgrades[j])
			{
				SetSingleStorageSpace(j, spaceParentOBJ, spaceUIParentOBJ, spaceUIButtonParentOBJ);
			}
		}
		spaceParentOBJ = expansionsParentOBJ.transform.GetChild(2).gameObject;
		spaceUIParentOBJ = expansionsUIParentOBJ.transform.GetChild(2).gameObject;
		spaceUIButtonParentOBJ = expansionsUIButtonsParentOBJ.transform.GetChild(2).gameObject;
		for (int k = 0; k < addonsBought.Length; k++)
		{
			if (addonsBought[k])
			{
				SetSingleAddonSpace(k, spaceParentOBJ, spaceUIParentOBJ, spaceUIButtonParentOBJ);
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdAddSpace(int spaceIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(spaceIndex);
		SendCommandInternal("System.Void UpgradesManager::CmdAddSpace(System.Int32)", 537576153, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAddSpace(int spaceIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(spaceIndex);
		SendRPCInternal("System.Void UpgradesManager::RpcAddSpace(System.Int32)", 925953338, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SetSingleStoreSpace(int spaceIndex, GameObject spaceParentOBJ, GameObject spaceUIParentOBJ, GameObject spaceUIButtonParentOBJ)
	{
		spaceParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		spaceUIParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		spaceUIButtonParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		if ((bool)spaceParentOBJ.transform.GetChild(spaceIndex).GetComponent<ExpansionAuxiliar>())
		{
			GameObject[] relatedPaintablesOBJs = spaceParentOBJ.transform.GetChild(spaceIndex).GetComponent<ExpansionAuxiliar>().relatedPaintablesOBJs;
			for (int i = 0; i < relatedPaintablesOBJs.Length; i++)
			{
				relatedPaintablesOBJs[i].SetActive(value: false);
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdAddStorage(int spaceIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(spaceIndex);
		SendCommandInternal("System.Void UpgradesManager::CmdAddStorage(System.Int32)", 196635570, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAddStorage(int spaceIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(spaceIndex);
		SendRPCInternal("System.Void UpgradesManager::RpcAddStorage(System.Int32)", -431620507, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SetSingleStorageSpace(int spaceIndex, GameObject spaceParentOBJ, GameObject spaceUIParentOBJ, GameObject spaceUIButtonParentOBJ)
	{
		spaceParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		spaceUIParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		spaceUIButtonParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		if ((bool)spaceParentOBJ.transform.GetChild(spaceIndex).GetComponent<ExpansionAuxiliar>())
		{
			GameObject[] relatedPaintablesOBJs = spaceParentOBJ.transform.GetChild(spaceIndex).GetComponent<ExpansionAuxiliar>().relatedPaintablesOBJs;
			for (int i = 0; i < relatedPaintablesOBJs.Length; i++)
			{
				relatedPaintablesOBJs[i].SetActive(value: false);
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdAddAddon(int addonIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(addonIndex);
		SendCommandInternal("System.Void UpgradesManager::CmdAddAddon(System.Int32)", 1010528905, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAddAddon(int addonIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(addonIndex);
		SendRPCInternal("System.Void UpgradesManager::RpcAddAddon(System.Int32)", -215003270, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SetSingleAddonSpace(int spaceIndex, GameObject spaceParentOBJ, GameObject spaceUIParentOBJ, GameObject spaceUIButtonParentOBJ)
	{
		spaceParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		spaceUIParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		spaceUIButtonParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: false);
		addonsDepartmentsParentOBJ.transform.GetChild(spaceIndex).gameObject.SetActive(value: true);
		if ((bool)spaceParentOBJ.transform.GetChild(spaceIndex).GetComponent<ExpansionAuxiliar>())
		{
			GameObject[] relatedPaintablesOBJs = spaceParentOBJ.transform.GetChild(spaceIndex).GetComponent<ExpansionAuxiliar>().relatedPaintablesOBJs;
			for (int i = 0; i < relatedPaintablesOBJs.Length; i++)
			{
				relatedPaintablesOBJs[i].SetActive(value: false);
			}
		}
	}

	[Command(requiresAuthority = false)]
	public void CmdAcquirePerk(int perkIndex, int pointsToReduce)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(perkIndex);
		writer.WriteInt(pointsToReduce);
		SendCommandInternal("System.Void UpgradesManager::CmdAcquirePerk(System.Int32,System.Int32)", 1281445989, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcAcquirePerk(int perkIndex)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteInt(perkIndex);
		SendRPCInternal("System.Void UpgradesManager::RpcAcquirePerk(System.Int32)", -1809233233, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private IEnumerator GameStartSetPerks()
	{
		for (int i = 0; i < extraUpgrades.Length; i++)
		{
			if (extraUpgrades[i])
			{
				ManageExtraPerks(i);
			}
			yield return null;
		}
		yield return null;
	}

	private void ManageExtraPerks(int perkIndex)
	{
		switch (perkIndex)
		{
		case 0:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 1:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 2:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 3:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 4:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 5:
			NPC_Manager.Instance.extraEmployeeSpeedFactor += 0.2f;
			NPC_Manager.Instance.UpdateEmployeeStats();
			break;
		case 6:
			NPC_Manager.Instance.extraCheckoutMoney += 0.1f;
			NPC_Manager.Instance.UpdateEmployeeStats();
			break;
		case 7:
			NPC_Manager.Instance.extraEmployeeSpeedFactor += 0.2f;
			NPC_Manager.Instance.UpdateEmployeeStats();
			break;
		case 8:
			boxRecycleFactor = 4;
			break;
		case 9:
			GetComponent<GameData>().extraCustomersPerk++;
			break;
		case 10:
			GetComponent<GameData>().extraCustomersPerk++;
			break;
		case 11:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 12:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 13:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 14:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 15:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 16:
			NPC_Manager.Instance.productCheckoutWait -= 0.15f;
			break;
		case 17:
			NPC_Manager.Instance.productCheckoutWait -= 0.2f;
			break;
		case 18:
			NPC_Manager.Instance.productCheckoutWait -= 0.15f;
			break;
		case 19:
			NPC_Manager.Instance.employeeItemPlaceWait -= 0.05f;
			break;
		case 20:
			NPC_Manager.Instance.employeeItemPlaceWait -= 0.05f;
			break;
		case 21:
			NPC_Manager.Instance.extraEmployeeSpeedFactor += 0.2f;
			NPC_Manager.Instance.UpdateEmployeeStats();
			break;
		case 22:
			NPC_Manager.Instance.extraEmployeeSpeedFactor += 0.2f;
			NPC_Manager.Instance.UpdateEmployeeStats();
			break;
		case 23:
			NPC_Manager.Instance.extraEmployeeSpeedFactor += 0.2f;
			NPC_Manager.Instance.UpdateEmployeeStats();
			break;
		case 24:
			NPC_Manager.Instance.employeeRecycleBoxes = true;
			interruptRecyclingButtonOBJ.SetActive(value: true);
			break;
		case 25:
			NPC_Manager.Instance.selfcheckoutExtraProductsFromPerk += 4;
			break;
		case 26:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 27:
			NPC_Manager.Instance.maxEmployees++;
			break;
		case 28:
			normalTrashContainerOBJ.SetActive(value: false);
			recycleContainerOBJ.SetActive(value: true);
			NPC_Manager.Instance.closestRecyclePerk = true;
			break;
		case 29:
			softwareUpgradePerk = true;
			break;
		case 30:
			clockOBJ.SetActive(value: true);
			clockControlSlateOBJ.SetActive(value: true);
			break;
		case 31:
			GetComponent<DebtManager>().electricFactor = 0.8f;
			break;
		case 32:
			NPC_Manager.Instance.minSelfCheckoutWait -= 0.25f;
			NPC_Manager.Instance.maxSelfCheckoutWait -= 0.5f;
			break;
		case 34:
			GetComponent<DebtManager>().autopayInvoices = true;
			if (base.isServer)
			{
				UIautopayDisableButtonOBJ.SetActive(value: true);
			}
			break;
		case 35:
			GetComponent<ProductListing>().allowedSimultaneousSales += 2;
			break;
		case 36:
			GetComponent<ProductListing>().allowedSimultaneousSales += 2;
			break;
		case 37:
			GetComponent<ProductListing>().allowedSimultaneousSales += 2;
			break;
		case 38:
			StartCoroutine(AuxiliarSetUIPallets());
			break;
		case 39:
			NPC_Manager.Instance.maxEmployees += 6;
			break;
		case 40:
			NPC_Manager.Instance.rerollsPerDay++;
			break;
		case 41:
			NPC_Manager.Instance.rerollsPerDay++;
			break;
		case 42:
			if (base.isServer)
			{
				convertBystandersTriggerOBJ.SetActive(value: true);
			}
			break;
		}
		GameObject obj = UIPerksParent.transform.GetChild(perkIndex).gameObject;
		obj.GetComponent<CanvasGroup>().alpha = 1f;
		obj.tag = "Untagged";
		obj.transform.Find("Highlight2").gameObject.SetActive(value: true);
	}

	private IEnumerator AuxiliarSetUIPallets()
	{
		yield return new WaitForSeconds(1f);
		for (int i = 0; i < UIpalletsOBJsArray.Length; i++)
		{
			GameObject obj = UIpalletsOBJsArray[i];
			obj.transform.SetParent(UIBuildablesParentOBJ.transform);
			obj.transform.SetSiblingIndex(UIBuildablesParentOBJ.transform.childCount - 2);
			obj.SetActive(value: true);
			yield return null;
		}
		while (!GameCanvas.Instance)
		{
			yield return null;
		}
		GameCanvas.Instance.GetComponent<Builder_Main>().ReassignBuildablesData();
	}

	[Command(requiresAuthority = false)]
	public void CmdTimeAcceleration()
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		SendCommandInternal("System.Void UpgradesManager::CmdTimeAcceleration()", -1935076618, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	public void RpcTimeAcceleration(bool accelerateBool)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(accelerateBool);
		SendRPCInternal("System.Void UpgradesManager::RpcTimeAcceleration(System.Boolean)", -1130271000, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	[Command(requiresAuthority = false)]
	public void CmdChangeTimeAcceleration(bool add)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteBool(add);
		SendCommandInternal("System.Void UpgradesManager::CmdChangeTimeAcceleration(System.Boolean)", 1391237875, writer, 0, requiresAuthority: false);
		NetworkWriterPool.Return(writer);
	}

	[ClientRpc]
	private void RpcChangeTimeAcceleration(float factor)
	{
		NetworkWriterPooled writer = NetworkWriterPool.Get();
		writer.WriteFloat(factor);
		SendRPCInternal("System.Void UpgradesManager::RpcChangeTimeAcceleration(System.Single)", 1345430362, writer, 0, includeOwner: true);
		NetworkWriterPool.Return(writer);
	}

	private void SetAccelerationMethod(bool accelerateBool)
	{
		if (accelerateBool)
		{
			clockOBJ.GetComponent<ClockRotate>().enabled = true;
			Time.timeScale = acceleratedTimeFactor;
		}
		else
		{
			clockOBJ.GetComponent<ClockRotate>().enabled = false;
			clockOBJ.transform.rotation = Quaternion.Euler(0f, 180f, 270f);
			Time.timeScale = 1f;
		}
	}

	private void PlaySpecialAudio()
	{
		base.transform.Find("Audio_Special").GetComponent<AudioSource>().Play();
	}

	public override bool Weaved()
	{
		return true;
	}

	protected void UserCode_CmdAddSpace__Int32(int spaceIndex)
	{
		if (spaceIndex >= 0 && spaceIndex < storeSpaceUpgrades.Length && !storeSpaceUpgrades[spaceIndex])
		{
			float num = 250 + RetrieveNumberOfStoreSpaces() * 250;
			if (!(GetComponent<GameData>().gameFunds < num))
			{
				GetComponent<GameData>().AlterFundsFromEmployee(0f - num);
				GetComponent<GameData>().otherCosts += num;
				storeSpaceUpgrades[spaceIndex] = true;
				RpcAddSpace(spaceIndex);
			}
		}
	}

	protected static void InvokeUserCode_CmdAddSpace__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddSpace called on client.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_CmdAddSpace__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcAddSpace__Int32(int spaceIndex)
	{
		PlaySpecialAudio();
		GameCanvas.Instance.CreateImportantNotification("messagei3");
		storeSpaceUpgrades[spaceIndex] = true;
		float num = 250 + RetrieveNumberOfStoreSpaces() * 250;
		spacePriceOBJ.text = "$" + num;
		spacePrice = (int)num;
		GameObject spaceParentOBJ = expansionsParentOBJ.transform.GetChild(0).gameObject;
		GameObject spaceUIParentOBJ = expansionsUIParentOBJ.transform.GetChild(0).gameObject;
		GameObject spaceUIButtonParentOBJ = expansionsUIButtonsParentOBJ.transform.GetChild(0).gameObject;
		SetSingleStoreSpace(spaceIndex, spaceParentOBJ, spaceUIParentOBJ, spaceUIButtonParentOBJ);
	}

	protected static void InvokeUserCode_RpcAddSpace__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddSpace called on server.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_RpcAddSpace__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdAddStorage__Int32(int spaceIndex)
	{
		if (spaceIndex >= 0 && spaceIndex < storageSpaceUpgrades.Length && !storageSpaceUpgrades[spaceIndex])
		{
			float num = 2000 + RetrieveNumberOfStorageSpaces() * 1000;
			if (!(GetComponent<GameData>().gameFunds < num))
			{
				GetComponent<GameData>().AlterFundsFromEmployee(0f - num);
				GetComponent<GameData>().otherCosts += num;
				storageSpaceUpgrades[spaceIndex] = true;
				RpcAddStorage(spaceIndex);
			}
		}
	}

	protected static void InvokeUserCode_CmdAddStorage__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddStorage called on client.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_CmdAddStorage__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcAddStorage__Int32(int spaceIndex)
	{
		PlaySpecialAudio();
		GameCanvas.Instance.CreateImportantNotification("messagei4");
		storageSpaceUpgrades[spaceIndex] = true;
		float num = 2000 + RetrieveNumberOfStorageSpaces() * 1000;
		storagePriceOBJ.text = "$" + num;
		storagePrice = (int)num;
		GameObject spaceParentOBJ = expansionsParentOBJ.transform.GetChild(1).gameObject;
		GameObject spaceUIParentOBJ = expansionsUIParentOBJ.transform.GetChild(1).gameObject;
		GameObject spaceUIButtonParentOBJ = expansionsUIButtonsParentOBJ.transform.GetChild(1).gameObject;
		SetSingleStorageSpace(spaceIndex, spaceParentOBJ, spaceUIParentOBJ, spaceUIButtonParentOBJ);
	}

	protected static void InvokeUserCode_RpcAddStorage__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddStorage called on server.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_RpcAddStorage__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdAddAddon__Int32(int addonIndex)
	{
		if (addonIndex >= 0 && addonIndex < addonsBought.Length && !addonsBought[addonIndex] && addonIndex < spaceAcquisitionComponent.departmentsCosts.Length)
		{
			float num = spaceAcquisitionComponent.departmentsCosts[addonIndex];
			if (!(GetComponent<GameData>().gameFunds < num))
			{
				GetComponent<GameData>().AlterFundsFromEmployee(0f - num);
				GetComponent<GameData>().otherCosts += num;
				addonsBought[addonIndex] = true;
				RpcAddAddon(addonIndex);
			}
		}
	}

	protected static void InvokeUserCode_CmdAddAddon__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAddAddon called on client.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_CmdAddAddon__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_RpcAddAddon__Int32(int addonIndex)
	{
		PlaySpecialAudio();
		GameCanvas.Instance.CreateImportantNotification("messagei5");
		spaceAcquisitionComponent.ClearValues();
		addonsBought[addonIndex] = true;
		GameObject spaceParentOBJ = expansionsParentOBJ.transform.GetChild(2).gameObject;
		GameObject spaceUIParentOBJ = expansionsUIParentOBJ.transform.GetChild(2).gameObject;
		GameObject spaceUIButtonParentOBJ = expansionsUIButtonsParentOBJ.transform.GetChild(2).gameObject;
		SetSingleAddonSpace(addonIndex, spaceParentOBJ, spaceUIParentOBJ, spaceUIButtonParentOBJ);
	}

	protected static void InvokeUserCode_RpcAddAddon__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAddAddon called on server.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_RpcAddAddon__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdAcquirePerk__Int32__Int32(int perkIndex, int pointsToReduce)
	{
		if (GameData.Instance.gameFranchisePoints - pointsToReduce >= 0)
		{
			extraUpgrades[perkIndex] = true;
			GameData instance = GameData.Instance;
			instance.NetworkgameFranchisePoints = instance.gameFranchisePoints - pointsToReduce;
			GameData.Instance.NetworkgameFranchisePoints = Mathf.Clamp(GameData.Instance.gameFranchisePoints, 0, 1000);
			RpcAcquirePerk(perkIndex);
		}
	}

	protected static void InvokeUserCode_CmdAcquirePerk__Int32__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdAcquirePerk called on client.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_CmdAcquirePerk__Int32__Int32(reader.ReadInt(), reader.ReadInt());
		}
	}

	protected void UserCode_RpcAcquirePerk__Int32(int perkIndex)
	{
		GetComponent<GameData>().transform.Find("Audio_AcquirePerk").GetComponent<AudioSource>().Play();
		extraUpgrades[perkIndex] = true;
		ManageExtraPerks(perkIndex);
	}

	protected static void InvokeUserCode_RpcAcquirePerk__Int32(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcAcquirePerk called on server.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_RpcAcquirePerk__Int32(reader.ReadInt());
		}
	}

	protected void UserCode_CmdTimeAcceleration()
	{
		if (acceleratedTime || (!(GetComponent<GameData>().timeOfDay < 22.4f) && !GetComponent<GameData>().isSupermarketOpen && NPC_Manager.Instance.numberOfHiredEmployees != 0 && NPC_Manager.Instance.customersnpcParentOBJ.transform.childCount <= 0))
		{
			NetworkacceleratedTime = !acceleratedTime;
			GetComponent<TimeAccelerationWatcher>().enabled = acceleratedTime;
			RpcTimeAcceleration(acceleratedTime);
		}
	}

	protected static void InvokeUserCode_CmdTimeAcceleration(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdTimeAcceleration called on client.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_CmdTimeAcceleration();
		}
	}

	protected void UserCode_RpcTimeAcceleration__Boolean(bool accelerateBool)
	{
		SetAccelerationMethod(accelerateBool);
	}

	protected static void InvokeUserCode_RpcTimeAcceleration__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcTimeAcceleration called on server.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_RpcTimeAcceleration__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_CmdChangeTimeAcceleration__Boolean(bool add)
	{
		acceleratedTimeFactor += (add ? 1f : (-1f));
		acceleratedTimeFactor = Mathf.Clamp(acceleratedTimeFactor, 2f, 5f);
		RpcChangeTimeAcceleration(acceleratedTimeFactor);
	}

	protected static void InvokeUserCode_CmdChangeTimeAcceleration__Boolean(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkServer.active)
		{
			Debug.LogError("Command CmdChangeTimeAcceleration called on client.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_CmdChangeTimeAcceleration__Boolean(reader.ReadBool());
		}
	}

	protected void UserCode_RpcChangeTimeAcceleration__Single(float factor)
	{
		if (Time.timeScale > 1.1f && factor != Time.timeScale)
		{
			acceleratedTimeField.text = "x" + Mathf.RoundToInt(factor);
			acceleratedTimeFactor = factor;
			Time.timeScale = factor;
		}
	}

	protected static void InvokeUserCode_RpcChangeTimeAcceleration__Single(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection)
	{
		if (!NetworkClient.active)
		{
			Debug.LogError("RPC RpcChangeTimeAcceleration called on server.");
		}
		else
		{
			((UpgradesManager)obj).UserCode_RpcChangeTimeAcceleration__Single(reader.ReadFloat());
		}
	}

	static UpgradesManager()
	{
		RemoteProcedureCalls.RegisterCommand(typeof(UpgradesManager), "System.Void UpgradesManager::CmdAddSpace(System.Int32)", InvokeUserCode_CmdAddSpace__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(UpgradesManager), "System.Void UpgradesManager::CmdAddStorage(System.Int32)", InvokeUserCode_CmdAddStorage__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(UpgradesManager), "System.Void UpgradesManager::CmdAddAddon(System.Int32)", InvokeUserCode_CmdAddAddon__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(UpgradesManager), "System.Void UpgradesManager::CmdAcquirePerk(System.Int32,System.Int32)", InvokeUserCode_CmdAcquirePerk__Int32__Int32, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(UpgradesManager), "System.Void UpgradesManager::CmdTimeAcceleration()", InvokeUserCode_CmdTimeAcceleration, requiresAuthority: false);
		RemoteProcedureCalls.RegisterCommand(typeof(UpgradesManager), "System.Void UpgradesManager::CmdChangeTimeAcceleration(System.Boolean)", InvokeUserCode_CmdChangeTimeAcceleration__Boolean, requiresAuthority: false);
		RemoteProcedureCalls.RegisterRpc(typeof(UpgradesManager), "System.Void UpgradesManager::RpcAddSpace(System.Int32)", InvokeUserCode_RpcAddSpace__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(UpgradesManager), "System.Void UpgradesManager::RpcAddStorage(System.Int32)", InvokeUserCode_RpcAddStorage__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(UpgradesManager), "System.Void UpgradesManager::RpcAddAddon(System.Int32)", InvokeUserCode_RpcAddAddon__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(UpgradesManager), "System.Void UpgradesManager::RpcAcquirePerk(System.Int32)", InvokeUserCode_RpcAcquirePerk__Int32);
		RemoteProcedureCalls.RegisterRpc(typeof(UpgradesManager), "System.Void UpgradesManager::RpcTimeAcceleration(System.Boolean)", InvokeUserCode_RpcTimeAcceleration__Boolean);
		RemoteProcedureCalls.RegisterRpc(typeof(UpgradesManager), "System.Void UpgradesManager::RpcChangeTimeAcceleration(System.Single)", InvokeUserCode_RpcChangeTimeAcceleration__Single);
	}

	public override void SerializeSyncVars(NetworkWriter writer, bool forceAll)
	{
		base.SerializeSyncVars(writer, forceAll);
		if (forceAll)
		{
			GeneratedNetworkCode._Write_System.Boolean[](writer, storeSpaceUpgrades);
			GeneratedNetworkCode._Write_System.Boolean[](writer, storageSpaceUpgrades);
			GeneratedNetworkCode._Write_System.Boolean[](writer, addonsBought);
			GeneratedNetworkCode._Write_System.Boolean[](writer, extraUpgrades);
			writer.WriteBool(acceleratedTime);
			return;
		}
		writer.WriteULong(syncVarDirtyBits);
		if ((syncVarDirtyBits & 1L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Boolean[](writer, storeSpaceUpgrades);
		}
		if ((syncVarDirtyBits & 2L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Boolean[](writer, storageSpaceUpgrades);
		}
		if ((syncVarDirtyBits & 4L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Boolean[](writer, addonsBought);
		}
		if ((syncVarDirtyBits & 8L) != 0L)
		{
			GeneratedNetworkCode._Write_System.Boolean[](writer, extraUpgrades);
		}
		if ((syncVarDirtyBits & 0x10L) != 0L)
		{
			writer.WriteBool(acceleratedTime);
		}
	}

	public override void DeserializeSyncVars(NetworkReader reader, bool initialState)
	{
		base.DeserializeSyncVars(reader, initialState);
		if (initialState)
		{
			GeneratedSyncVarDeserialize(ref storeSpaceUpgrades, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
			GeneratedSyncVarDeserialize(ref storageSpaceUpgrades, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
			GeneratedSyncVarDeserialize(ref addonsBought, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
			GeneratedSyncVarDeserialize(ref extraUpgrades, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
			GeneratedSyncVarDeserialize(ref acceleratedTime, null, reader.ReadBool());
			return;
		}
		long num = (long)reader.ReadULong();
		if ((num & 1L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref storeSpaceUpgrades, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
		}
		if ((num & 2L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref storageSpaceUpgrades, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
		}
		if ((num & 4L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref addonsBought, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
		}
		if ((num & 8L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref extraUpgrades, null, GeneratedNetworkCode._Read_System.Boolean[](reader));
		}
		if ((num & 0x10L) != 0L)
		{
			GeneratedSyncVarDeserialize(ref acceleratedTime, null, reader.ReadBool());
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// WalkPath
using System;
using System.Collections.Generic;
using UnityEngine;

[Serializable]
public class WalkPath : MonoBehaviour
{
	[Tooltip("Objects of motion / Объекты движения")]
	public GameObject[] peoplePrefabs;

	[Tooltip("Number of paths / Количество путей")]
	public int numberOfWays;

	[Tooltip("Space between paths / Пространство между путями")]
	public float lineSpacing;

	[Tooltip("Density of movement of objects / Плотность движения объектов")]
	[Range(0.01f, 0.5f)]
	public float Density = 0.2f;

	[Tooltip("Distance between objects / Дистанция между объектами")]
	[Range(1f, 10f)]
	public float _minimalObjectLength = 1f;

	[Tooltip("Make the path closed in the ring / Сделать путь замкнутым в кольцо")]
	public bool loopPath;

	protected float[] _distances;

	[HideInInspector]
	public List<Vector3> pathPoint = new List<Vector3>();

	[HideInInspector]
	public List<GameObject> pathPointTransform = new List<GameObject>();

	[HideInInspector]
	public Vector3[,] points;

	[HideInInspector]
	public List<Vector3> CalcPoint = new List<Vector3>();

	[HideInInspector]
	public int[] pointLength = new int[10];

	[HideInInspector]
	public bool disableLineDraw;

	[HideInInspector]
	public bool[] _forward;

	[HideInInspector]
	public GameObject par;

	[HideInInspector]
	public PathType pathType;

	[Tooltip("Radius of the sphere-scraper [m] / Радиус сферы-стёрки [м]")]
	[Range(0.1f, 25f)]
	public float eraseRadius = 2f;

	[Tooltip("The minimum distance from the cursor to the line at which you can add a new point to the path [m] / Минимальное расстояние от курсора до линии, при котором можно добавить новую точку в путь [м]")]
	[Range(0.5f, 10f)]
	public float addPointDistance = 2f;

	[Tooltip("Adjust the spawn of cars to the nearest surface. This option will be useful if there are bridges in the scene / Регулировка спавна людей к ближайшей поверхности. Этот параметор будет полезен, если в сцене есть мосты.")]
	public float highToSpawn = 1f;

	[Range(0f, 5f)]
	[Tooltip("Offset from the line along the X axis / Смещение от линии по оси X")]
	public float randXPos = 0.1f;

	[Range(0f, 5f)]
	[Tooltip("Offset from the line along the Z axis / Смещение от линии по оси Z")]
	public float randZPos = 0.1f;

	[HideInInspector]
	public bool newPointCreation;

	[HideInInspector]
	public bool oldPointDeleting;

	[HideInInspector]
	public Vector3 mousePosition = Vector3.zero;

	private int deletePointIndex = -1;

	private int firstPointIndex = -1;

	private int secondPointIndex = -1;

	public Vector3 getNextPoint(int w, int index)
	{
		return points[w, index];
	}

	public Vector3 getStartPoint(int w)
	{
		return points[w, 1];
	}

	public int getPointsTotal(int w)
	{
		return pointLength[w];
	}

	private void Awake()
	{
		DrawCurved(withDraw: false);
	}

	public virtual void SpawnOnePeople(int w, bool forward, float walkSpeed, float runSpeed)
	{
	}

	public virtual void SpawnPeople()
	{
	}

	public virtual void DrawCurved(bool withDraw)
	{
	}

	protected Vector3 GetRoutePosition(Vector3[] pointArray, float distance, int pointCount, bool loopPath)
	{
		int i = 0;
		float length = _distances[_distances.Length - 1];
		for (distance = Mathf.Repeat(distance, length); _distances[i] < distance; i++)
		{
		}
		int num = (i - 1 + pointCount) % pointCount;
		int num2 = i;
		float t = Mathf.InverseLerp(_distances[num], _distances[num2], distance);
		return Vector3.Lerp(pointArray[num], pointArray[num2], t);
	}

	protected int GetRoutePoint(float distance, int wayIndex, int pointCount, bool forward, bool loopPath)
	{
		int i = 0;
		float length = _distances[_distances.Length - 1];
		for (distance = Mathf.Repeat(distance, length); _distances[i] < distance; i++)
		{
		}
		return i;
	}

	private bool PointWithSphereCollision(Vector3 colisionSpherePosition, Vector3 pointPosition)
	{
		return Vector3.Magnitude(colisionSpherePosition - pointPosition) < eraseRadius;
	}

	private bool PointWithLineCollision(Vector3 lineStartPosition, Vector3 lineEndPosition, Vector3 pointPosition)
	{
		return Distance(lineStartPosition, lineEndPosition, pointPosition) < addPointDistance;
	}

	private float Distance(Vector3 lineStartPosition, Vector3 lineEndPosition, Vector3 pointPosition)
	{
		float num = Vector3.SqrMagnitude(lineEndPosition - lineStartPosition);
		if (num == 0f)
		{
			return Vector3.Distance(pointPosition, lineStartPosition);
		}
		float num2 = Mathf.Max(0f, Mathf.Min(1f, Vector3.Dot(pointPosition - lineStartPosition, lineEndPosition - lineStartPosition) / num));
		Vector3 b = lineStartPosition + num2 * (lineEndPosition - lineStartPosition);
		return Vector3.Distance(pointPosition, b);
	}

	public void AddPoint()
	{
		if (firstPointIndex != -1 || secondPointIndex != firstPointIndex)
		{
			GameObject gameObject = UnityEngine.Object.Instantiate(GameObject.Find("Population System").GetComponent<PopulationSystemManager>().pointPrefab, mousePosition, Quaternion.identity);
			gameObject.name = "p+";
			gameObject.transform.parent = pathPointTransform[firstPointIndex].transform.parent;
			pathPointTransform.Insert(firstPointIndex + 1, gameObject);
			pathPoint.Insert(firstPointIndex + 1, gameObject.transform.position);
		}
	}

	public void DeletePoint()
	{
		if (deletePointIndex != -1)
		{
			UnityEngine.Object.DestroyImmediate(pathPointTransform[deletePointIndex]);
			pathPointTransform.RemoveAt(deletePointIndex);
			pathPoint.RemoveAt(deletePointIndex);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// WebHelper
using UnityEngine;
using Vuplex.WebView;

public class WebHelper : MonoBehaviour
{
	public WebViewPrefab wViewPrefab;

	private IWebView iwebView;

	public void ReturnPage()
	{
		iwebView = wViewPrefab.WebView;
		iwebView.GoBack();
	}

	public void RefreshPage()
	{
		iwebView = wViewPrefab.WebView;
		iwebView.Reload();
	}

	public void GoToMainURL()
	{
		iwebView = wViewPrefab.WebView;
		iwebView.LoadUrl("https://www.google.com");
	}

	public void GoToCustomURL(string URLstring)
	{
		if (!string.IsNullOrWhiteSpace(URLstring))
		{
			iwebView = wViewPrefab.WebView;
			iwebView.LoadUrl(URLstring);
		}
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// WheelControl
using UnityEngine;

public class WheelControl : MonoBehaviour
{
	public Transform wheelModel;

	[HideInInspector]
	public WheelCollider WheelCollider;

	public bool steerable;

	public bool motorized;

	private void Start()
	{
		WheelCollider = GetComponent<WheelCollider>();
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Z_FPS_Display
using UnityEngine;

public class Z_FPS_Display : MonoBehaviour
{
	public float deltaTime;

	public float FPS;

	private void Update()
	{
		deltaTime += (Time.unscaledDeltaTime - deltaTime) * 0.1f;
		FPS = 1f / deltaTime;
	}
}

// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// ZOrderDummy
using UnityEngine;

public class ZOrderDummy : MonoBehaviour
{
	private void Start()
	{
	}

	private void Update()
	{
	}
}
